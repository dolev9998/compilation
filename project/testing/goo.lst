     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 11                      	db T_integer	; 1
   469 000005DE 0100000000000000        	dq 1
   470                                  	; L_constants + 1510:
   471 000005E6 11                      	db T_integer	; 2
   472 000005E7 0200000000000000        	dq 2
   473                                  	; L_constants + 1519:
   474 000005EF 21                      	db T_pair	; (2)
   475 000005F0 [E605000000000000]-     	dq L_constants + 1510, L_constants + 1
   475 000005F8 [0100000000000000] 
   476                                  	; L_constants + 1536:
   477 00000600 21                      	db T_pair	; (1 2)
   478 00000601 [DD05000000000000]-     	dq L_constants + 1501, L_constants + 1519
   478 00000609 [EF05000000000000] 
   479                                  free_var_0:	; location of __bin-apply
   480 00000611 [1906000000000000]      	dq .undefined_object
   481                                  .undefined_object:
   482 00000619 05                      	db T_undefined
   483 0000061A [0102000000000000]      	dq L_constants + 513
   484                                  
   485                                  free_var_1:	; location of cons
   486 00000622 [2A06000000000000]      	dq .undefined_object
   487                                  .undefined_object:
   488 0000062A 05                      	db T_undefined
   489 0000062B [DF00000000000000]      	dq L_constants + 223
   490                                  
   491                                  
   492                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   493                                  global main
   494                                  section .text
   495                                  main:
   496 00000000 C8000000                        enter 0, 0
   497 00000004 6A00                            push 0
   498 00000006 6A00                            push 0
   499 00000008 68[80010000]                    push Lend
   500 0000000D C8000000                        enter 0, 0
   501                                  	; building closure for cons
   502 00000011 48BF-                   	mov rdi, free_var_1
   502 00000013 [2206000000000000] 
   503 0000001B 48BE-                   	mov rsi, L_code_ptr_cons
   503 0000001D [9510000000000000] 
   504 00000025 E8D70A0000              	call bind_primitive
   505                                  
   506                                  	; building closure for __bin-apply
   507 0000002A 48BF-                   	mov rdi, free_var_0
   507 0000002C [1106000000000000] 
   508 00000034 48BE-                   	mov rsi, L_code_ptr_bin_apply
   508 00000036 [710C000000000000] 
   509 0000003E E8BE0A0000              	call bind_primitive
   510                                  
   511                                  	; preparing a non-tail-call
   512 00000043 48B8-                   	mov rax, L_constants + 1536
   512 00000045 [0006000000000000] 
   513 0000004D 50                      	push rax
   514 0000004E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   515 00000053 E893020000              	call malloc
   516 00000058 50                      	push rax
   517 00000059 BF00000000              	mov rdi, 8 * 0	; new rib
   518 0000005E E888020000              	call malloc
   519 00000063 50                      	push rax
   520 00000064 BF08000000              	mov rdi, 8 * 1	; extended env
   521 00000069 E87D020000              	call malloc
   522 0000006E 488B7D10                	mov rdi, ENV
   523 00000072 BE00000000              	mov rsi, 0
   524 00000077 BA01000000              	mov rdx, 1
   525                                  .L_lambda_simple_env_loop_0002:	; ext_env[i + 1] <-- env[i]
   526 0000007C 4883FE00                	cmp rsi, 0
   527 00000080 7410                    	je .L_lambda_simple_env_end_0002
   528 00000082 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   529 00000086 48890CD0                	mov qword [rax + 8 * rdx], rcx
   530 0000008A 48FFC6                  	inc rsi
   531 0000008D 48FFC2                  	inc rdx
   532 00000090 EBEA                    	jmp .L_lambda_simple_env_loop_0002
   533                                  .L_lambda_simple_env_end_0002:
   534 00000092 5B                      	pop rbx
   535 00000093 BE00000000              	mov rsi, 0
   536                                  .L_lambda_simple_params_loop_0002:	; copy params
   537 00000098 4883FE00                	cmp rsi, 0
   538 0000009C 740E                    	je .L_lambda_simple_params_end_0002
   539 0000009E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   540 000000A3 488914F3                	mov qword [rbx + 8 * rsi], rdx
   541 000000A7 48FFC6                  	inc rsi
   542 000000AA EBEC                    	jmp .L_lambda_simple_params_loop_0002
   543                                  .L_lambda_simple_params_end_0002:
   544 000000AC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   545 000000AF 4889C3                  	mov rbx, rax
   546 000000B2 58                      	pop rax
   547 000000B3 C60004                  	mov byte [rax], T_closure
   548 000000B6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   549 000000BA 48C74009[C7000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0002
   550 000000C2 E99A000000              	jmp .L_lambda_simple_end_0002
   551                                  .L_lambda_simple_code_0002:	; lambda-simple body
   552 000000C7 48837C241002            	cmp qword [rsp + 8 * 2], 2
   553 000000CD 740B                    	je .L_lambda_simple_arity_check_ok_0002
   554 000000CF FF742410                	push qword [rsp + 8 * 2]
   555 000000D3 6A02                    	push 2
   556 000000D5 E9CA010000              	jmp L_error_incorrect_arity_simple
   557                                  .L_lambda_simple_arity_check_ok_0002:
   558 000000DA C8000000                	enter 0, 0
   559                                  	; preparing a tail-call
   560 000000DE 488B4528                	mov rax, PARAM(1)	; param y
   561 000000E2 50                      	push rax
   562 000000E3 488B4520                	mov rax, PARAM(0)	; param x
   563 000000E7 50                      	push rax
   564 000000E8 6A02                    	push 2	; arg count
   565 000000EA 488B0425[22060000]      	mov rax, qword [free_var_1]	; free var cons
   566 000000F2 803805                  	cmp byte [rax], T_undefined
   567 000000F5 0F84C3000000            	je L_error_fvar_undefined
   568 000000FB 803804                  	cmp byte [rax], T_closure
   569 000000FE 0F853E010000            	jne L_error_non_closure
   570 00000104 FF7001                  	push SOB_CLOSURE_ENV(rax)
   571 00000107 FF7508                  	push qword [rbp + 8 *1]
   572 0000010A 50                      	push rax
   573 0000010B 488B5D18                	mov rbx, COUNT
   574 0000010F 4883C303                	add rbx,3
   575 00000113 48C1E303                	shl rbx,3
   576 00000117 4801EB                  	add rbx, rbp
   577 0000011A 4889DF                  	mov rdi, rbx
   578 0000011D 4889E8                  	mov rax, rbp
   579 00000120 4883E808                	sub rax, 8
   580 00000124 488B6D00                	mov rbp, [rbp]
   581 00000128 B900000000              	mov rcx,0
   582 0000012D BA05000000              	mov rdx, 5
   583                                  	.L_tc_recycle_frame_loop_0002:
   584 00000132 4839D1                  	cmp rcx, rdx
   585 00000135 7414                    	je .L_tc_recycle_frame_done_0002
   586 00000137 4C8B08                  	mov r9, qword [rax]
   587 0000013A 4C890B                  	mov qword [rbx],r9
   588 0000013D 4883E808                	sub rax,8
   589 00000141 4883EB08                	sub rbx,8
   590 00000145 4883C101                	add rcx,1
   591 00000149 EBE7                    	jmp .L_tc_recycle_frame_loop_0002
   592                                  	.L_tc_recycle_frame_done_0002:
   593 0000014B 5B                      	pop rbx
   594 0000014C 4883E901                	sub rcx, 1
   595 00000150 48C1E103                	shl rcx,3
   596 00000154 4829CF                  	sub rdi,rcx
   597 00000157 4889FC                  	mov rsp,rdi
   598 0000015A FF6309                  	jmp SOB_CLOSURE_CODE(rbx)
   599 0000015D C9                      	leave
   600 0000015E C22000                  	ret AND_KILL_FRAME(2)
   601                                  .L_lambda_simple_end_0002:	; new closure is in rax
   602 00000161 50                      	push rax
   603 00000162 6A02                    	push 2	; arg count
   604 00000164 488B0425[11060000]      	mov rax, qword [free_var_0]	; free var __bin-apply
   605 0000016C 803805                  	cmp byte [rax], T_undefined
   606 0000016F 744D                    	je L_error_fvar_undefined
   607 00000171 803804                  	cmp byte [rax], T_closure
   608 00000174 0F85C8000000            	jne L_error_non_closure
   609 0000017A FF7001                  	push SOB_CLOSURE_ENV(rax)
   610 0000017D FF5009                  	call SOB_CLOSURE_CODE(rax)
   611                                  Lend:
   612 00000180 4889C7                  	mov rdi, rax
   613 00000183 E8B8030000              	call print_sexpr_if_not_void
   614                                  
   615 00000188 48BF-                           mov rdi, fmt_memory_usage
   615 0000018A [CB06000000000000] 
   616 00000192 488B3425[51070000]              mov rsi, qword [top_of_memory]
   617 0000019A 4881EE[00000000]                sub rsi, memory
   618 000001A1 B800000000                      mov rax, 0
   619                                          ENTER
    44 000001A6 C8000000            <1>  enter 0, 0
    45 000001AA 4883E4F0            <1>  and rsp, ~15
   620 000001AE E8(00000000)                    call printf
   621                                          LEAVE
    49 000001B3 C9                  <1>  leave
   622 000001B4 B800000000                      mov rax, 0
   623 000001B9 E8(00000000)                    call exit
   624                                  
   625                                  L_error_fvar_undefined:
   626 000001BE 50                              push rax
   627 000001BF 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   628 000001C7 48BE-                           mov rsi, fmt_undefined_free_var_1
   628 000001C9 [3306000000000000] 
   629 000001D1 B800000000                      mov rax, 0
   630                                          ENTER
    44 000001D6 C8000000            <1>  enter 0, 0
    45 000001DA 4883E4F0            <1>  and rsp, ~15
   631 000001DE E8(00000000)                    call fprintf
   632                                          LEAVE
    49 000001E3 C9                  <1>  leave
   633 000001E4 58                              pop rax
   634 000001E5 488B4001                        mov rax, qword [rax + 1] ; string
   635 000001E9 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   636 000001ED BE01000000                      mov rsi, 1               ; sizeof(char)
   637 000001F2 488B5001                        mov rdx, qword [rax + 1] ; string-length
   638 000001F6 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   639 000001FE B800000000                      mov rax, 0
   640                                          ENTER
    44 00000203 C8000000            <1>  enter 0, 0
    45 00000207 4883E4F0            <1>  and rsp, ~15
   641 0000020B E8(00000000)                    call fwrite
   642                                          LEAVE
    49 00000210 C9                  <1>  leave
   643 00000211 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   644 00000219 48BE-                           mov rsi, fmt_undefined_free_var_2
   644 0000021B [4A06000000000000] 
   645 00000223 B800000000                      mov rax, 0
   646                                          ENTER
    44 00000228 C8000000            <1>  enter 0, 0
    45 0000022C 4883E4F0            <1>  and rsp, ~15
   647 00000230 E8(00000000)                    call fprintf
   648                                          LEAVE
    49 00000235 C9                  <1>  leave
   649 00000236 48C7C0F6FFFFFF                  mov rax, -10
   650 0000023D E8(00000000)                    call exit
   651                                  
   652                                  L_error_non_closure:
   653 00000242 488B3C25[00000000]              mov rdi, qword [stderr]
   654 0000024A 48BE-                           mov rsi, fmt_non_closure
   654 0000024C [0107000000000000] 
   655 00000254 B800000000                      mov rax, 0
   656                                          ENTER
    44 00000259 C8000000            <1>  enter 0, 0
    45 0000025D 4883E4F0            <1>  and rsp, ~15
   657 00000261 E8(00000000)                    call fprintf
   658                                          LEAVE
    49 00000266 C9                  <1>  leave
   659 00000267 48C7C0FEFFFFFF                  mov rax, -2
   660 0000026E E8(00000000)                    call exit
   661                                  
   662                                  L_error_improper_list:
   663 00000273 488B3C25[00000000]      	mov rdi, qword [stderr]
   664 0000027B 48BE-                   	mov rsi, fmt_error_improper_list
   664 0000027D [2907000000000000] 
   665 00000285 B800000000              	mov rax, 0
   666                                          ENTER
    44 0000028A C8000000            <1>  enter 0, 0
    45 0000028E 4883E4F0            <1>  and rsp, ~15
   667 00000292 E8(00000000)            	call fprintf
   668                                          LEAVE
    49 00000297 C9                  <1>  leave
   669 00000298 48C7C0F9FFFFFF          	mov rax, -7
   670 0000029F E8(00000000)            	call exit
   671                                  
   672                                  L_error_incorrect_arity_simple:
   673 000002A4 488B3C25[00000000]              mov rdi, qword [stderr]
   674 000002AC 48BE-                           mov rsi, fmt_incorrect_arity_simple
   674 000002AE [6C06000000000000] 
   675 000002B6 EB12                            jmp L_error_incorrect_arity_common
   676                                  L_error_incorrect_arity_opt:
   677 000002B8 488B3C25[00000000]              mov rdi, qword [stderr]
   678 000002C0 48BE-                           mov rsi, fmt_incorrect_arity_opt
   678 000002C2 [9706000000000000] 
   679                                  L_error_incorrect_arity_common:
   680 000002CA 5A                              pop rdx
   681 000002CB 59                              pop rcx
   682 000002CC B800000000                      mov rax, 0
   683                                          ENTER
    44 000002D1 C8000000            <1>  enter 0, 0
    45 000002D5 4883E4F0            <1>  and rsp, ~15
   684 000002D9 E8(00000000)                    call fprintf
   685                                          LEAVE
    49 000002DE C9                  <1>  leave
   686 000002DF 48C7C0FAFFFFFF                  mov rax, -6
   687 000002E6 E8(00000000)                    call exit
   688                                  
   689                                  section .data
   690                                  fmt_undefined_free_var_1:
   691 00000633 212121205468652066-             db `!!! The free variable \0`
   691 0000063C 726565207661726961-
   691 00000645 626C652000         
   692                                  fmt_undefined_free_var_2:
   693 0000064A 207761732075736564-             db ` was used before it was defined.\n\0`
   693 00000653 206265666F72652069-
   693 0000065C 742077617320646566-
   693 00000665 696E65642E0A00     
   694                                  fmt_incorrect_arity_simple:
   695 0000066C 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   695 00000675 74656420256C642061-
   695 0000067E 7267756D656E74732C-
   695 00000687 206275742067697665-
   695 00000690 6E20256C640A00     
   696                                  fmt_incorrect_arity_opt:
   697 00000697 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   697 000006A0 746564206174206C65-
   697 000006A9 61737420256C642061-
   697 000006B2 7267756D656E74732C-
   697 000006BB 206275742067697665-
   697 000006C4 6E20256C640A00     
   698                                  fmt_memory_usage:
   699 000006CB 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   699 000006D4 20256C642062797465-
   699 000006DD 73206F662064796E61-
   699 000006E6 6D6963616C6C792D61-
   699 000006EF 6C6C6F636174656420-
   699 000006F8 6D656D6F72790A0A00 
   700                                  fmt_non_closure:
   701 00000701 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   701 0000070A 7074696E6720746F20-
   701 00000713 6170706C792061206E-
   701 0000071C 6F6E2D636C6F737572-
   701 00000725 65210A00           
   702                                  fmt_error_improper_list:
   703 00000729 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   703 00000732 7267756D656E742069-
   703 0000073B 73206E6F7420612070-
   703 00000744 726F706572206C6973-
   703 0000074D 74210A00           
   704                                  
   705                                  section .bss
   706                                  memory:
   707 00000000 <res 40000000h>         	resb gbytes(1)
   708                                  
   709                                  section .data
   710                                  top_of_memory:
   711 00000751 [0000000000000000]              dq memory
   712                                  
   713                                  section .text
   714                                  malloc:
   715 000002EB 488B0425[51070000]              mov rax, qword [top_of_memory]
   716 000002F3 48013C25[51070000]              add qword [top_of_memory], rdi
   717 000002FB C3                              ret
   718                                  
   719                                  L_code_ptr_return:
   720 000002FC 48837C241002            	cmp qword [rsp + 8*2], 2
   721 00000302 0F85D81C0000            	jne L_error_arg_count_2
   722 00000308 488B4C2418              	mov rcx, qword [rsp + 8*3]
   723                                  	assert_integer(rcx)
    53 0000030D 803911              <1>  cmp byte [%1], %2
    54 00000310 0F85691D0000        <1>  jne L_error_incorrect_type
   724 00000316 488B4901                	mov rcx, qword [rcx + 1]
   725 0000031A 4883F900                	cmp rcx, 0
   726 0000031E 0F8CF01B0000            	jl L_error_integer_range
   727 00000324 488B442420              	mov rax, qword [rsp + 8*4]
   728                                  .L0:
   729 00000329 4883F900                        cmp rcx, 0
   730 0000032D 7409                            je .L1
   731 0000032F 488B6D00                	mov rbp, qword [rbp]
   732 00000333 48FFC9                  	dec rcx
   733 00000336 7FF1                    	jg .L0
   734                                  .L1:
   735 00000338 4889EC                  	mov rsp, rbp
   736 0000033B 5D                      	pop rbp
   737 0000033C 5B                              pop rbx
   738 0000033D 488B4C2408                      mov rcx, qword [rsp + 8*1]
   739 00000342 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   740 00000347 FFE3                    	jmp rbx
   741                                  
   742                                  L_code_ptr_make_list:
   743 00000349 C8000000                	enter 0, 0
   744 0000034D 48837D1801                      cmp COUNT, 1
   745 00000352 740C                            je .L0
   746 00000354 48837D1802                      cmp COUNT, 2
   747 00000359 7411                            je .L1
   748 0000035B E9B51C0000                      jmp L_error_arg_count_12
   749                                  .L0:
   750 00000360 49B9-                           mov r9, sob_void
   750 00000362 [0000000000000000] 
   751 0000036A EB04                            jmp .L2
   752                                  .L1:
   753 0000036C 4C8B4D28                        mov r9, PARAM(1)
   754                                  .L2:
   755 00000370 488B4D20                        mov rcx, PARAM(0)
   756                                          assert_integer(rcx)
    53 00000374 803911              <1>  cmp byte [%1], %2
    54 00000377 0F85021D0000        <1>  jne L_error_incorrect_type
   757 0000037D 488B4901                        mov rcx, qword [rcx + 1]
   758 00000381 4883F900                        cmp rcx, 0
   759 00000385 0F8CBA1B0000                    jl L_error_arg_negative
   760 0000038B 49B8-                           mov r8, sob_nil
   760 0000038D [0100000000000000] 
   761                                  .L3:
   762 00000395 4883F900                        cmp rcx, 0
   763 00000399 7E1D                            jle .L4
   764 0000039B BF11000000                      mov rdi, 1 + 8 + 8
   765 000003A0 E846FFFFFF                      call malloc
   766 000003A5 C60021                          mov byte [rax], T_pair
   767 000003A8 4C894801                        mov qword [rax + 1], r9
   768 000003AC 4C894009                        mov qword [rax + 1 + 8], r8
   769 000003B0 4989C0                          mov r8, rax
   770 000003B3 48FFC9                          dec rcx
   771 000003B6 EBDD                            jmp .L3
   772                                  .L4:
   773 000003B8 4C89C0                          mov rax, r8
   774 000003BB 48837D1802                      cmp COUNT, 2
   775 000003C0 7404                            je .L5
   776 000003C2 C9                              leave
   777 000003C3 C21800                          ret AND_KILL_FRAME(1)
   778                                  .L5:
   779 000003C6 C9                      	leave
   780 000003C7 C22000                  	ret AND_KILL_FRAME(2)
   781                                  
   782                                  L_code_ptr_is_primitive:
   783 000003CA C8000000                	enter 0, 0
   784 000003CE 48837D1801              	cmp COUNT, 1
   785 000003D3 0F85D21B0000            	jne L_error_arg_count_1
   786 000003D9 488B4520                	mov rax, PARAM(0)
   787                                  	assert_closure(rax)
    53 000003DD 803804              <1>  cmp byte [%1], %2
    54 000003E0 0F85991C0000        <1>  jne L_error_incorrect_type
   788 000003E6 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   789 000003EB 750C                    	jne .L_false
   790 000003ED 48B8-                   	mov rax, sob_boolean_true
   790 000003EF [0300000000000000] 
   791 000003F7 EB0A                    	jmp .L_end
   792                                  .L_false:
   793 000003F9 48B8-                   	mov rax, sob_boolean_false
   793 000003FB [0200000000000000] 
   794                                  .L_end:
   795 00000403 C9                      	leave
   796 00000404 C21800                  	ret AND_KILL_FRAME(1)
   797                                  
   798                                  L_code_ptr_length:
   799 00000407 C8000000                	enter 0, 0
   800 0000040B 48837D1801              	cmp COUNT, 1
   801 00000410 0F85951B0000            	jne L_error_arg_count_1
   802 00000416 488B5D20                	mov rbx, PARAM(0)
   803 0000041A BF00000000              	mov rdi, 0
   804                                  .L:
   805 0000041F 803B01                  	cmp byte [rbx], T_nil
   806 00000422 7412                    	je .L_end
   807                                  	assert_pair(rbx)
    53 00000424 803B21              <1>  cmp byte [%1], %2
    54 00000427 0F85521C0000        <1>  jne L_error_incorrect_type
   808 0000042D 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   809 00000431 48FFC7                  	inc rdi
   810 00000434 EBE9                    	jmp .L
   811                                  .L_end:
   812 00000436 E8BF1A0000              	call make_integer
   813 0000043B C9                      	leave
   814 0000043C C21800                  	ret AND_KILL_FRAME(1)
   815                                  
   816                                  L_code_ptr_break:
   817 0000043F 48837C241000                    cmp qword [rsp + 8 * 2], 0
   818 00000445 0F852B1B0000                    jne L_error_arg_count_0
   819 0000044B CC                              int3
   820 0000044C 48B8-                           mov rax, sob_void
   820 0000044E [0000000000000000] 
   821 00000456 C21000                          ret AND_KILL_FRAME(0)        
   822                                  
   823                                  L_code_ptr_frame:
   824 00000459 C8000000                        enter 0, 0
   825 0000045D 48837D1800                      cmp COUNT, 0
   826 00000462 0F850E1B0000                    jne L_error_arg_count_0
   827                                  
   828 00000468 48BF-                           mov rdi, fmt_frame
   828 0000046A [5907000000000000] 
   829 00000472 488B7500                        mov rsi, qword [rbp]    ; old rbp
   830 00000476 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   831 0000047A 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   832 0000047E 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   833 00000482 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   834 00000486 6A00                            push 0
   835 00000488 4151                            push r9
   836 0000048A 4150                            push r8                   ; we'll use it when printing the params
   837 0000048C B800000000                      mov rax, 0
   838                                          
   839                                          ENTER
    44 00000491 C8000000            <1>  enter 0, 0
    45 00000495 4883E4F0            <1>  and rsp, ~15
   840 00000499 E8(00000000)                    call printf
   841                                          LEAVE
    49 0000049E C9                  <1>  leave
   842                                  
   843                                  .L:
   844 0000049F 488B0C24                        mov rcx, qword [rsp]
   845 000004A3 4883F900                        cmp rcx, 0
   846 000004A7 7467                            je .L_out
   847 000004A9 48BF-                           mov rdi, fmt_frame_param_prefix
   847 000004AB [9207000000000000] 
   848 000004B3 488B742410                      mov rsi, qword [rsp + 8*2]
   849 000004B8 B800000000                      mov rax, 0
   850                                          
   851                                          ENTER
    44 000004BD C8000000            <1>  enter 0, 0
    45 000004C1 4883E4F0            <1>  and rsp, ~15
   852 000004C5 E8(00000000)                    call printf
   853                                          LEAVE
    49 000004CA C9                  <1>  leave
   854                                  
   855 000004CB 488B0C24                        mov rcx, qword [rsp]
   856 000004CF 48FFC9                          dec rcx
   857 000004D2 48890C24                        mov qword [rsp], rcx    ; dec arg count
   858 000004D6 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   859 000004DB 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   860 000004E0 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   861 000004E4 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   862 000004E9 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   863 000004EC E87B000000                      call print_sexpr
   864 000004F1 48BF-                           mov rdi, fmt_newline
   864 000004F3 [BE07000000000000] 
   865 000004FB B800000000                      mov rax, 0
   866                                          ENTER
    44 00000500 C8000000            <1>  enter 0, 0
    45 00000504 4883E4F0            <1>  and rsp, ~15
   867 00000508 E8(00000000)                    call printf
   868                                          LEAVE
    49 0000050D C9                  <1>  leave
   869 0000050E EB8F                            jmp .L
   870                                  .L_out:
   871 00000510 48BF-                           mov rdi, fmt_frame_continue
   871 00000512 [A307000000000000] 
   872 0000051A B800000000                      mov rax, 0
   873                                          ENTER
    44 0000051F C8000000            <1>  enter 0, 0
    45 00000523 4883E4F0            <1>  and rsp, ~15
   874 00000527 E8(00000000)                    call printf
   875 0000052C E8(00000000)                    call getchar
   876                                          LEAVE
    49 00000531 C9                  <1>  leave
   877                                          
   878 00000532 48B8-                           mov rax, sob_void
   878 00000534 [0000000000000000] 
   879 0000053C C9                              leave
   880 0000053D C21000                          ret AND_KILL_FRAME(0)
   881                                          
   882                                  print_sexpr_if_not_void:
   883 00000540 4881FF[00000000]        	cmp rdi, sob_void
   884 00000547 7422                    	je .done
   885 00000549 E81E000000              	call print_sexpr
   886 0000054E 48BF-                   	mov rdi, fmt_newline
   886 00000550 [BE07000000000000] 
   887 00000558 B800000000              	mov rax, 0
   888                                  	ENTER
    44 0000055D C8000000            <1>  enter 0, 0
    45 00000561 4883E4F0            <1>  and rsp, ~15
   889 00000565 E8(00000000)            	call printf
   890                                  	LEAVE
    49 0000056A C9                  <1>  leave
   891                                  .done:
   892 0000056B C3                      	ret
   893                                  
   894                                  section .data
   895                                  fmt_frame:
   896 00000759 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   896 00000762 207265742061646472-
   896 0000076B 203D2025703B206C65-
   896 00000774 7820656E76203D2025-
   896 0000077D 703B20706172616D20-
   896 00000786 636F756E74203D2025-
   896 0000078F 640A00             
   897                                  fmt_frame_param_prefix:
   898 00000792 3D3D5B706172616D20-             db `==[param %d]==> \0`
   898 0000079B 25645D3D3D3E2000   
   899                                  fmt_frame_continue:
   900 000007A3 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   900 000007AC 723E20746F20636F6E-
   900 000007B5 74696E75652E2E2E00 
   901                                  fmt_newline:
   902 000007BE 0A00                    	db `\n\0`
   903                                  fmt_void:
   904 000007C0 233C766F69643E00        	db `#<void>\0`
   905                                  fmt_nil:
   906 000007C8 282900                  	db `()\0`
   907                                  fmt_boolean_false:
   908 000007CB 236600                  	db `#f\0`
   909                                  fmt_boolean_true:
   910 000007CE 237400                  	db `#t\0`
   911                                  fmt_char_backslash:
   912 000007D1 235C5C00                	db `#\\\\\0`
   913                                  fmt_char_dquote:
   914 000007D5 235C2200                	db `#\\"\0`
   915                                  fmt_char_simple:
   916 000007D9 235C256300              	db `#\\%c\0`
   917                                  fmt_char_null:
   918 000007DE 235C6E756C00            	db `#\\nul\0`
   919                                  fmt_char_bell:
   920 000007E4 235C62656C6C00          	db `#\\bell\0`
   921                                  fmt_char_backspace:
   922 000007EB 235C6261636B737061-     	db `#\\backspace\0`
   922 000007F4 636500             
   923                                  fmt_char_tab:
   924 000007F7 235C74616200            	db `#\\tab\0`
   925                                  fmt_char_newline:
   926 000007FD 235C6E65776C696E65-     	db `#\\newline\0`
   926 00000806 00                 
   927                                  fmt_char_formfeed:
   928 00000807 235C7061676500          	db `#\\page\0`
   929                                  fmt_char_return:
   930 0000080E 235C72657475726E00      	db `#\\return\0`
   931                                  fmt_char_escape:
   932 00000817 235C65736300            	db `#\\esc\0`
   933                                  fmt_char_space:
   934 0000081D 235C737061636500        	db `#\\space\0`
   935                                  fmt_char_hex:
   936 00000825 235C782530325800        	db `#\\x%02X\0`
   937                                  fmt_gensym:
   938 0000082D 47256C6400                      db `G%ld\0`
   939                                  fmt_closure:
   940 00000832 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   940 0000083B 206174203078253038-
   940 00000844 5820656E763D307825-
   940 0000084D 30385820636F64653D-
   940 00000856 3078253038583E00   
   941                                  fmt_lparen:
   942 0000085E 2800                    	db `(\0`
   943                                  fmt_dotted_pair:
   944 00000860 202E2000                	db ` . \0`
   945                                  fmt_rparen:
   946 00000864 2900                    	db `)\0`
   947                                  fmt_space:
   948 00000866 2000                    	db ` \0`
   949                                  fmt_empty_vector:
   950 00000868 23282900                	db `#()\0`
   951                                  fmt_vector:
   952 0000086C 232800                  	db `#(\0`
   953                                  fmt_real:
   954 0000086F 256600                  	db `%f\0`
   955                                  fmt_fraction:
   956 00000872 256C642F256C6400        	db `%ld/%ld\0`
   957                                  fmt_zero:
   958 0000087A 3000                    	db `0\0`
   959                                  fmt_int:
   960 0000087C 256C6400                	db `%ld\0`
   961                                  fmt_unknown_scheme_object_error:
   962 00000880 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   962 00000889 6F723A20556E6B6E6F-
   962 00000892 776E20536368656D65-
   962 0000089B 2D6F626A6563742028-
   962 000008A4 525454492030782530-
   962 000008AD 32582920           
   963 000008B1 617420616464726573-     	db `at address 0x%08X\n\n\0`
   963 000008BA 73203078253038580A-
   963 000008C3 0A00               
   964                                  fmt_dquote:
   965 000008C5 2200                    	db `\"\0`
   966                                  fmt_string_char:
   967 000008C7 256300                          db `%c\0`
   968                                  fmt_string_char_7:
   969 000008CA 5C6100                          db `\\a\0`
   970                                  fmt_string_char_8:
   971 000008CD 5C6200                          db `\\b\0`
   972                                  fmt_string_char_9:
   973 000008D0 5C7400                          db `\\t\0`
   974                                  fmt_string_char_10:
   975 000008D3 5C6E00                          db `\\n\0`
   976                                  fmt_string_char_11:
   977 000008D6 5C7600                          db `\\v\0`
   978                                  fmt_string_char_12:
   979 000008D9 5C6600                          db `\\f\0`
   980                                  fmt_string_char_13:
   981 000008DC 5C7200                          db `\\r\0`
   982                                  fmt_string_char_34:
   983 000008DF 5C2200                          db `\\"\0`
   984                                  fmt_string_char_92:
   985 000008E2 5C5C00                          db `\\\\\0`
   986                                  fmt_string_char_hex:
   987 000008E5 5C7825583B00                    db `\\x%X;\0`
   988                                  
   989                                  section .text
   990                                  
   991                                  print_sexpr:
   992 0000056C C8000000                	enter 0, 0
   993 00000570 8A07                    	mov al, byte [rdi]
   994 00000572 3C00                    	cmp al, T_void
   995 00000574 7465                    	je .Lvoid
   996 00000576 3C01                    	cmp al, T_nil
   997 00000578 7470                    	je .Lnil
   998 0000057A 3C09                    	cmp al, T_boolean_false
   999 0000057C 747B                    	je .Lboolean_false
  1000 0000057E 3C0A                    	cmp al, T_boolean_true
  1001 00000580 0F8482000000            	je .Lboolean_true
  1002 00000586 3C02                    	cmp al, T_char
  1003 00000588 0F8489000000            	je .Lchar
  1004 0000058E 3C41                    	cmp al, T_interned_symbol
  1005 00000590 0F84BF010000            	je .Linterned_symbol
  1006 00000596 3C42                            cmp al, T_uninterned_symbol
  1007 00000598 0F84E3010000                    je .Luninterned_symbol
  1008 0000059E 3C21                    	cmp al, T_pair
  1009 000005A0 0F84EE010000            	je .Lpair
  1010 000005A6 3C22                    	cmp al, T_vector
  1011 000005A8 0F84B7020000            	je .Lvector
  1012 000005AE 3C04                    	cmp al, T_closure
  1013 000005B0 0F8485010000            	je .Lclosure
  1014 000005B6 3C13                    	cmp al, T_real
  1015 000005B8 0F8448030000            	je .Lreal
  1016 000005BE 3C12                    	cmp al, T_fraction
  1017 000005C0 0F846E030000            	je .Lfraction
  1018 000005C6 3C11                    	cmp al, T_integer
  1019 000005C8 0F84A7030000            	je .Linteger
  1020 000005CE 3C03                    	cmp al, T_string
  1021 000005D0 0F84B2030000            	je .Lstring
  1022                                  
  1023 000005D6 E9DC040000              	jmp .Lunknown_sexpr_type
  1024                                  
  1025                                  .Lvoid:
  1026 000005DB 48BF-                   	mov rdi, fmt_void
  1026 000005DD [C007000000000000] 
  1027 000005E5 E900050000              	jmp .Lemit
  1028                                  
  1029                                  .Lnil:
  1030 000005EA 48BF-                   	mov rdi, fmt_nil
  1030 000005EC [C807000000000000] 
  1031 000005F4 E9F1040000              	jmp .Lemit
  1032                                  
  1033                                  .Lboolean_false:
  1034 000005F9 48BF-                   	mov rdi, fmt_boolean_false
  1034 000005FB [CB07000000000000] 
  1035 00000603 E9E2040000              	jmp .Lemit
  1036                                  
  1037                                  .Lboolean_true:
  1038 00000608 48BF-                   	mov rdi, fmt_boolean_true
  1038 0000060A [CE07000000000000] 
  1039 00000612 E9D3040000              	jmp .Lemit
  1040                                  
  1041                                  .Lchar:
  1042 00000617 8A4701                  	mov al, byte [rdi + 1]
  1043 0000061A 3C20                    	cmp al, ' '
  1044 0000061C 7E20                    	jle .Lchar_whitespace
  1045 0000061E 3C5C                    	cmp al, 92 		; backslash
  1046 00000620 7474                    	je .Lchar_backslash
  1047 00000622 3C22                    	cmp al, '"'
  1048 00000624 747F                    	je .Lchar_dquote
  1049 00000626 4825FF000000            	and rax, 255
  1050 0000062C 48BF-                   	mov rdi, fmt_char_simple
  1050 0000062E [D907000000000000] 
  1051 00000636 4889C6                  	mov rsi, rax
  1052 00000639 E9AC040000              	jmp .Lemit
  1053                                  
  1054                                  .Lchar_whitespace:
  1055 0000063E 3C00                    	cmp al, 0
  1056 00000640 7472                    	je .Lchar_null
  1057 00000642 3C07                    	cmp al, 7
  1058 00000644 747D                    	je .Lchar_bell
  1059 00000646 3C08                    	cmp al, 8
  1060 00000648 0F8484000000            	je .Lchar_backspace
  1061 0000064E 3C09                    	cmp al, 9
  1062 00000650 0F848B000000            	je .Lchar_tab
  1063 00000656 3C0A                    	cmp al, 10
  1064 00000658 0F8492000000            	je .Lchar_newline
  1065 0000065E 3C0C                    	cmp al, 12
  1066 00000660 0F8499000000            	je .Lchar_formfeed
  1067 00000666 3C0D                    	cmp al, 13
  1068 00000668 0F84A0000000            	je .Lchar_return
  1069 0000066E 3C1B                    	cmp al, 27
  1070 00000670 0F84A7000000            	je .Lchar_escape
  1071 00000676 4825FF000000            	and rax, 255
  1072 0000067C 3C20                    	cmp al, ' '
  1073 0000067E 0F84A8000000            	je .Lchar_space
  1074 00000684 48BF-                   	mov rdi, fmt_char_hex
  1074 00000686 [2508000000000000] 
  1075 0000068E 4889C6                  	mov rsi, rax
  1076 00000691 E954040000              	jmp .Lemit	
  1077                                  
  1078                                  .Lchar_backslash:
  1079 00000696 48BF-                   	mov rdi, fmt_char_backslash
  1079 00000698 [D107000000000000] 
  1080 000006A0 E945040000              	jmp .Lemit
  1081                                  
  1082                                  .Lchar_dquote:
  1083 000006A5 48BF-                   	mov rdi, fmt_char_dquote
  1083 000006A7 [D507000000000000] 
  1084 000006AF E936040000              	jmp .Lemit
  1085                                  
  1086                                  .Lchar_null:
  1087 000006B4 48BF-                   	mov rdi, fmt_char_null
  1087 000006B6 [DE07000000000000] 
  1088 000006BE E927040000              	jmp .Lemit
  1089                                  
  1090                                  .Lchar_bell:
  1091 000006C3 48BF-                   	mov rdi, fmt_char_bell
  1091 000006C5 [E407000000000000] 
  1092 000006CD E918040000              	jmp .Lemit
  1093                                  
  1094                                  .Lchar_backspace:
  1095 000006D2 48BF-                   	mov rdi, fmt_char_backspace
  1095 000006D4 [EB07000000000000] 
  1096 000006DC E909040000              	jmp .Lemit
  1097                                  
  1098                                  .Lchar_tab:
  1099 000006E1 48BF-                   	mov rdi, fmt_char_tab
  1099 000006E3 [F707000000000000] 
  1100 000006EB E9FA030000              	jmp .Lemit
  1101                                  
  1102                                  .Lchar_newline:
  1103 000006F0 48BF-                   	mov rdi, fmt_char_newline
  1103 000006F2 [FD07000000000000] 
  1104 000006FA E9EB030000              	jmp .Lemit
  1105                                  
  1106                                  .Lchar_formfeed:
  1107 000006FF 48BF-                   	mov rdi, fmt_char_formfeed
  1107 00000701 [0708000000000000] 
  1108 00000709 E9DC030000              	jmp .Lemit
  1109                                  
  1110                                  .Lchar_return:
  1111 0000070E 48BF-                   	mov rdi, fmt_char_return
  1111 00000710 [0E08000000000000] 
  1112 00000718 E9CD030000              	jmp .Lemit
  1113                                  
  1114                                  .Lchar_escape:
  1115 0000071D 48BF-                   	mov rdi, fmt_char_escape
  1115 0000071F [1708000000000000] 
  1116 00000727 E9BE030000              	jmp .Lemit
  1117                                  
  1118                                  .Lchar_space:
  1119 0000072C 48BF-                   	mov rdi, fmt_char_space
  1119 0000072E [1D08000000000000] 
  1120 00000736 E9AF030000              	jmp .Lemit
  1121                                  
  1122                                  .Lclosure:
  1123 0000073B 4889FE                  	mov rsi, qword rdi
  1124 0000073E 48BF-                   	mov rdi, fmt_closure
  1124 00000740 [3208000000000000] 
  1125 00000748 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1126 0000074C 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1127 00000750 E995030000              	jmp .Lemit
  1128                                  
  1129                                  .Linterned_symbol:
  1130 00000755 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1131 00000759 BE01000000              	mov rsi, 1		 ; size = 1 byte
  1132 0000075E 488B5701                	mov rdx, qword [rdi + 1] ; length
  1133 00000762 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1134 00000766 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1135                                  	ENTER
    44 0000076E C8000000            <1>  enter 0, 0
    45 00000772 4883E4F0            <1>  and rsp, ~15
  1136 00000776 E8(00000000)            	call fwrite
  1137                                  	LEAVE
    49 0000077B C9                  <1>  leave
  1138 0000077C E97E030000              	jmp .Lend
  1139                                  
  1140                                  .Luninterned_symbol:
  1141 00000781 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  1142 00000785 48BF-                           mov rdi, fmt_gensym
  1142 00000787 [2D08000000000000] 
  1143 0000078F E956030000                      jmp .Lemit
  1144                                  	
  1145                                  .Lpair:
  1146 00000794 57                      	push rdi
  1147 00000795 48BF-                   	mov rdi, fmt_lparen
  1147 00000797 [5E08000000000000] 
  1148 0000079F B800000000              	mov rax, 0
  1149                                          ENTER
    44 000007A4 C8000000            <1>  enter 0, 0
    45 000007A8 4883E4F0            <1>  and rsp, ~15
  1150 000007AC E8(00000000)            	call printf
  1151                                          LEAVE
    49 000007B1 C9                  <1>  leave
  1152 000007B2 488B3C24                	mov rdi, qword [rsp] 	; pair
  1153 000007B6 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1154 000007BA E8ADFDFFFF              	call print_sexpr
  1155 000007BF 5F                      	pop rdi 		; pair
  1156 000007C0 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1157                                  .Lcdr:
  1158 000007C4 8A07                    	mov al, byte [rdi]
  1159 000007C6 3C01                    	cmp al, T_nil
  1160 000007C8 7447                    	je .Lcdr_nil
  1161 000007CA 3C21                    	cmp al, T_pair
  1162 000007CC 7462                    	je .Lcdr_pair
  1163 000007CE 57                      	push rdi
  1164 000007CF 48BF-                   	mov rdi, fmt_dotted_pair
  1164 000007D1 [6008000000000000] 
  1165 000007D9 B800000000              	mov rax, 0
  1166                                          ENTER
    44 000007DE C8000000            <1>  enter 0, 0
    45 000007E2 4883E4F0            <1>  and rsp, ~15
  1167 000007E6 E8(00000000)            	call printf
  1168                                          LEAVE
    49 000007EB C9                  <1>  leave
  1169 000007EC 5F                      	pop rdi
  1170 000007ED E87AFDFFFF              	call print_sexpr
  1171 000007F2 48BF-                   	mov rdi, fmt_rparen
  1171 000007F4 [6408000000000000] 
  1172 000007FC B800000000              	mov rax, 0
  1173                                          ENTER
    44 00000801 C8000000            <1>  enter 0, 0
    45 00000805 4883E4F0            <1>  and rsp, ~15
  1174 00000809 E8(00000000)            	call printf
  1175                                          LEAVE
    49 0000080E C9                  <1>  leave
  1176 0000080F C9                      	leave
  1177 00000810 C3                      	ret
  1178                                  
  1179                                  .Lcdr_nil:
  1180 00000811 48BF-                   	mov rdi, fmt_rparen
  1180 00000813 [6408000000000000] 
  1181 0000081B B800000000              	mov rax, 0
  1182                                          ENTER
    44 00000820 C8000000            <1>  enter 0, 0
    45 00000824 4883E4F0            <1>  and rsp, ~15
  1183 00000828 E8(00000000)            	call printf
  1184                                          LEAVE
    49 0000082D C9                  <1>  leave
  1185 0000082E C9                      	leave
  1186 0000082F C3                      	ret
  1187                                  
  1188                                  .Lcdr_pair:
  1189 00000830 57                      	push rdi
  1190 00000831 48BF-                   	mov rdi, fmt_space
  1190 00000833 [6608000000000000] 
  1191 0000083B B800000000              	mov rax, 0
  1192                                          ENTER
    44 00000840 C8000000            <1>  enter 0, 0
    45 00000844 4883E4F0            <1>  and rsp, ~15
  1193 00000848 E8(00000000)            	call printf
  1194                                          LEAVE
    49 0000084D C9                  <1>  leave
  1195 0000084E 488B3C24                	mov rdi, qword [rsp]
  1196 00000852 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1197 00000856 E811FDFFFF              	call print_sexpr
  1198 0000085B 5F                      	pop rdi
  1199 0000085C 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1200 00000860 E95FFFFFFF              	jmp .Lcdr
  1201                                  
  1202                                  .Lvector:
  1203 00000865 488B4701                	mov rax, qword [rdi + 1] ; length
  1204 00000869 4883F800                	cmp rax, 0
  1205 0000086D 0F8484000000            	je .Lvector_empty
  1206 00000873 57                      	push rdi
  1207 00000874 48BF-                   	mov rdi, fmt_vector
  1207 00000876 [6C08000000000000] 
  1208 0000087E B800000000              	mov rax, 0
  1209                                          ENTER
    44 00000883 C8000000            <1>  enter 0, 0
    45 00000887 4883E4F0            <1>  and rsp, ~15
  1210 0000088B E8(00000000)            	call printf
  1211                                          LEAVE
    49 00000890 C9                  <1>  leave
  1212 00000891 488B3C24                	mov rdi, qword [rsp]
  1213 00000895 FF7701                  	push qword [rdi + 1]
  1214 00000898 6A01                    	push 1
  1215 0000089A 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1216 0000089E E8C9FCFFFF              	call print_sexpr
  1217                                  .Lvector_loop:
  1218                                  	; [rsp] index
  1219                                  	; [rsp + 8*1] limit
  1220                                  	; [rsp + 8*2] vector
  1221 000008A3 488B0424                	mov rax, qword [rsp]
  1222 000008A7 483B442408              	cmp rax, qword [rsp + 8*1]
  1223 000008AC 7436                    	je .Lvector_end
  1224 000008AE 48BF-                   	mov rdi, fmt_space
  1224 000008B0 [6608000000000000] 
  1225 000008B8 B800000000              	mov rax, 0
  1226                                          ENTER
    44 000008BD C8000000            <1>  enter 0, 0
    45 000008C1 4883E4F0            <1>  and rsp, ~15
  1227 000008C5 E8(00000000)            	call printf
  1228                                          LEAVE
    49 000008CA C9                  <1>  leave
  1229 000008CB 488B0424                	mov rax, qword [rsp]
  1230 000008CF 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1231 000008D4 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1232 000008D9 E88EFCFFFF              	call print_sexpr
  1233 000008DE 48FF0424                	inc qword [rsp]
  1234 000008E2 EBBF                    	jmp .Lvector_loop
  1235                                  
  1236                                  .Lvector_end:
  1237 000008E4 4883C418                	add rsp, 8*3
  1238 000008E8 48BF-                   	mov rdi, fmt_rparen
  1238 000008EA [6408000000000000] 
  1239 000008F2 E9F3010000              	jmp .Lemit	
  1240                                  
  1241                                  .Lvector_empty:
  1242 000008F7 48BF-                   	mov rdi, fmt_empty_vector
  1242 000008F9 [6808000000000000] 
  1243 00000901 E9E4010000              	jmp .Lemit
  1244                                  
  1245                                  .Lreal:
  1246 00000906 FF7701                  	push qword [rdi + 1]
  1247 00000909 F20F100424              	movsd xmm0, qword [rsp]
  1248 0000090E 4883C408                	add rsp, 8*1
  1249 00000912 48BF-                   	mov rdi, fmt_real
  1249 00000914 [6F08000000000000] 
  1250 0000091C B801000000              	mov rax, 1
  1251                                  	ENTER
    44 00000921 C8000000            <1>  enter 0, 0
    45 00000925 4883E4F0            <1>  and rsp, ~15
  1252 00000929 E8(00000000)            	call printf
  1253                                  	LEAVE
    49 0000092E C9                  <1>  leave
  1254 0000092F E9CB010000              	jmp .Lend
  1255                                  
  1256                                  .Lfraction:
  1257 00000934 488B7701                	mov rsi, qword [rdi + 1]
  1258 00000938 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1259 0000093C 4883FE00                	cmp rsi, 0
  1260 00000940 7415                    	je .Lrat_zero
  1261 00000942 4883FA01                	cmp rdx, 1
  1262 00000946 741E                    	je .Lrat_int
  1263 00000948 48BF-                   	mov rdi, fmt_fraction
  1263 0000094A [7208000000000000] 
  1264 00000952 E993010000              	jmp .Lemit
  1265                                  
  1266                                  .Lrat_zero:
  1267 00000957 48BF-                   	mov rdi, fmt_zero
  1267 00000959 [7A08000000000000] 
  1268 00000961 E984010000              	jmp .Lemit
  1269                                  
  1270                                  .Lrat_int:
  1271 00000966 48BF-                   	mov rdi, fmt_int
  1271 00000968 [7C08000000000000] 
  1272 00000970 E975010000              	jmp .Lemit
  1273                                  
  1274                                  .Linteger:
  1275 00000975 488B7701                	mov rsi, qword [rdi + 1]
  1276 00000979 48BF-                   	mov rdi, fmt_int
  1276 0000097B [7C08000000000000] 
  1277 00000983 E962010000              	jmp .Lemit
  1278                                  
  1279                                  .Lstring:
  1280 00000988 488D4709                	lea rax, [rdi + 1 + 8]
  1281 0000098C 50                      	push rax
  1282 0000098D FF7701                  	push qword [rdi + 1]
  1283 00000990 48BF-                   	mov rdi, fmt_dquote
  1283 00000992 [C508000000000000] 
  1284 0000099A B800000000              	mov rax, 0
  1285                                  	ENTER
    44 0000099F C8000000            <1>  enter 0, 0
    45 000009A3 4883E4F0            <1>  and rsp, ~15
  1286 000009A7 E8(00000000)            	call printf
  1287                                  	LEAVE
    49 000009AC C9                  <1>  leave
  1288                                  .Lstring_loop:
  1289                                  	; qword [rsp]: limit
  1290                                  	; qword [rsp + 8*1]: char *
  1291 000009AD 48833C2400              	cmp qword [rsp], 0
  1292 000009B2 0F84EF000000            	je .Lstring_end
  1293 000009B8 488B442408              	mov rax, qword [rsp + 8*1]
  1294 000009BD 8A00                    	mov al, byte [rax]
  1295 000009BF 4825FF000000            	and rax, 255
  1296 000009C5 3C07                    	cmp al, 7
  1297 000009C7 745D                            je .Lstring_char_7
  1298 000009C9 3C08                            cmp al, 8
  1299 000009CB 7465                            je .Lstring_char_8
  1300 000009CD 3C09                            cmp al, 9
  1301 000009CF 746D                            je .Lstring_char_9
  1302 000009D1 3C0A                            cmp al, 10
  1303 000009D3 7475                            je .Lstring_char_10
  1304 000009D5 3C0B                            cmp al, 11
  1305 000009D7 747D                            je .Lstring_char_11
  1306 000009D9 3C0C                            cmp al, 12
  1307 000009DB 0F8481000000                    je .Lstring_char_12
  1308 000009E1 3C0D                            cmp al, 13
  1309 000009E3 0F8485000000                    je .Lstring_char_13
  1310 000009E9 3C22                            cmp al, 34
  1311 000009EB 0F8489000000                    je .Lstring_char_34
  1312 000009F1 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1314 000009F3 3C20                            cmp al, ' '
  1315 000009F5 0F8C9A000000                    jl .Lstring_char_hex
  1316 000009FB 48BF-                           mov rdi, fmt_string_char
  1316 000009FD [C708000000000000] 
  1317 00000A05 4889C6                          mov rsi, rax
  1318                                  .Lstring_char_emit:
  1319 00000A08 B800000000                      mov rax, 0
  1320                                          ENTER
    44 00000A0D C8000000            <1>  enter 0, 0
    45 00000A11 4883E4F0            <1>  and rsp, ~15
  1321 00000A15 E8(00000000)                    call printf
  1322                                          LEAVE
    49 00000A1A C9                  <1>  leave
  1323 00000A1B 48FF0C24                        dec qword [rsp]
  1324 00000A1F 48FF442408                      inc qword [rsp + 8*1]
  1325 00000A24 EB87                            jmp .Lstring_loop
  1326                                  
  1327                                  .Lstring_char_7:
  1328 00000A26 48BF-                           mov rdi, fmt_string_char_7
  1328 00000A28 [CA08000000000000] 
  1329 00000A30 EBD6                            jmp .Lstring_char_emit
  1330                                  
  1331                                  .Lstring_char_8:
  1332 00000A32 48BF-                           mov rdi, fmt_string_char_8
  1332 00000A34 [CD08000000000000] 
  1333 00000A3C EBCA                            jmp .Lstring_char_emit
  1334                                          
  1335                                  .Lstring_char_9:
  1336 00000A3E 48BF-                           mov rdi, fmt_string_char_9
  1336 00000A40 [D008000000000000] 
  1337 00000A48 EBBE                            jmp .Lstring_char_emit
  1338                                  
  1339                                  .Lstring_char_10:
  1340 00000A4A 48BF-                           mov rdi, fmt_string_char_10
  1340 00000A4C [D308000000000000] 
  1341 00000A54 EBB2                            jmp .Lstring_char_emit
  1342                                  
  1343                                  .Lstring_char_11:
  1344 00000A56 48BF-                           mov rdi, fmt_string_char_11
  1344 00000A58 [D608000000000000] 
  1345 00000A60 EBA6                            jmp .Lstring_char_emit
  1346                                  
  1347                                  .Lstring_char_12:
  1348 00000A62 48BF-                           mov rdi, fmt_string_char_12
  1348 00000A64 [D908000000000000] 
  1349 00000A6C EB9A                            jmp .Lstring_char_emit
  1350                                  
  1351                                  .Lstring_char_13:
  1352 00000A6E 48BF-                           mov rdi, fmt_string_char_13
  1352 00000A70 [DC08000000000000] 
  1353 00000A78 EB8E                            jmp .Lstring_char_emit
  1354                                  
  1355                                  .Lstring_char_34:
  1356 00000A7A 48BF-                           mov rdi, fmt_string_char_34
  1356 00000A7C [DF08000000000000] 
  1357 00000A84 EB82                            jmp .Lstring_char_emit
  1358                                  
  1359                                  .Lstring_char_92:
  1360 00000A86 48BF-                           mov rdi, fmt_string_char_92
  1360 00000A88 [E208000000000000] 
  1361 00000A90 E973FFFFFF                      jmp .Lstring_char_emit
  1362                                  
  1363                                  .Lstring_char_hex:
  1364 00000A95 48BF-                           mov rdi, fmt_string_char_hex
  1364 00000A97 [E508000000000000] 
  1365 00000A9F 4889C6                          mov rsi, rax
  1366 00000AA2 E961FFFFFF                      jmp .Lstring_char_emit        
  1367                                  
  1368                                  .Lstring_end:
  1369 00000AA7 4883C410                	add rsp, 8 * 2
  1370 00000AAB 48BF-                   	mov rdi, fmt_dquote
  1370 00000AAD [C508000000000000] 
  1371 00000AB5 EB33                    	jmp .Lemit
  1372                                  
  1373                                  .Lunknown_sexpr_type:
  1374 00000AB7 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1374 00000AB9 [8008000000000000] 
  1375 00000AC1 4825FF000000            	and rax, 255
  1376 00000AC7 4889C2                  	mov rdx, rax
  1377 00000ACA 4889F9                  	mov rcx, rdi
  1378 00000ACD 488B3C25[00000000]      	mov rdi, qword [stderr]
  1379 00000AD5 B800000000              	mov rax, 0
  1380                                          ENTER
    44 00000ADA C8000000            <1>  enter 0, 0
    45 00000ADE 4883E4F0            <1>  and rsp, ~15
  1381 00000AE2 E8(00000000)            	call fprintf
  1382                                          LEAVE
    49 00000AE7 C9                  <1>  leave
  1383 00000AE8 C9                              leave
  1384 00000AE9 C3                              ret
  1385                                  
  1386                                  .Lemit:
  1387 00000AEA B800000000              	mov rax, 0
  1388                                          ENTER
    44 00000AEF C8000000            <1>  enter 0, 0
    45 00000AF3 4883E4F0            <1>  and rsp, ~15
  1389 00000AF7 E8(00000000)            	call printf
  1390                                          LEAVE
    49 00000AFC C9                  <1>  leave
  1391 00000AFD EB00                    	jmp .Lend
  1392                                  
  1393                                  .Lend:
  1394                                  	LEAVE
    49 00000AFF C9                  <1>  leave
  1395 00000B00 C3                      	ret
  1396                                  
  1397                                  ;;; rdi: address of free variable
  1398                                  ;;; rsi: address of code-pointer
  1399                                  bind_primitive:
  1400 00000B01 C8000000                        enter 0, 0
  1401 00000B05 57                              push rdi
  1402 00000B06 BF11000000                      mov rdi, (1 + 8 + 8)
  1403 00000B0B E8DBF7FFFF                      call malloc
  1404 00000B10 5F                              pop rdi
  1405 00000B11 C60004                          mov byte [rax], T_closure
  1406 00000B14 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1407 00000B1C 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1408 00000B20 488907                          mov qword [rdi], rax
  1409 00000B23 48B8-                           mov rax, sob_void
  1409 00000B25 [0000000000000000] 
  1410 00000B2D C9                              leave
  1411 00000B2E C3                              ret
  1412                                  
  1413                                  L_code_ptr_ash:
  1414 00000B2F C8000000                        enter 0, 0
  1415 00000B33 48837D1802                      cmp COUNT, 2
  1416 00000B38 0F85A2140000                    jne L_error_arg_count_2
  1417 00000B3E 488B7D20                        mov rdi, PARAM(0)
  1418                                          assert_integer(rdi)
    53 00000B42 803F11              <1>  cmp byte [%1], %2
    54 00000B45 0F8534150000        <1>  jne L_error_incorrect_type
  1419 00000B4B 488B4D28                        mov rcx, PARAM(1)
  1420                                          assert_integer(rcx)
    53 00000B4F 803911              <1>  cmp byte [%1], %2
    54 00000B52 0F8527150000        <1>  jne L_error_incorrect_type
  1421 00000B58 488B7F01                        mov rdi, qword [rdi + 1]
  1422 00000B5C 488B4901                        mov rcx, qword [rcx + 1]
  1423 00000B60 4883F900                        cmp rcx, 0
  1424 00000B64 7C0F                            jl .L_negative
  1425                                  .L_loop_positive:
  1426 00000B66 4883F900                        cmp rcx, 0
  1427 00000B6A 741B                            je .L_exit
  1428 00000B6C 48D3E7                          sal rdi, cl
  1429 00000B6F 48C1E908                        shr rcx, 8
  1430 00000B73 EBF1                            jmp .L_loop_positive
  1431                                  .L_negative:
  1432 00000B75 48F7D9                          neg rcx
  1433                                  .L_loop_negative:
  1434 00000B78 4883F900                        cmp rcx, 0
  1435 00000B7C 7409                            je .L_exit
  1436 00000B7E 48D3FF                          sar rdi, cl
  1437 00000B81 48C1E908                        shr rcx, 8
  1438 00000B85 EBF1                            jmp .L_loop_negative
  1439                                  .L_exit:
  1440 00000B87 E86E130000                      call make_integer
  1441 00000B8C C9                              leave
  1442 00000B8D C22000                          ret AND_KILL_FRAME(2)
  1443                                  
  1444                                  L_code_ptr_logand:
  1445 00000B90 C8000000                        enter 0, 0
  1446 00000B94 48837D1802                      cmp COUNT, 2
  1447 00000B99 0F8541140000                    jne L_error_arg_count_2
  1448 00000B9F 4C8B4520                        mov r8, PARAM(0)
  1449                                          assert_integer(r8)
    53 00000BA3 41803811            <1>  cmp byte [%1], %2
    54 00000BA7 0F85D2140000        <1>  jne L_error_incorrect_type
  1450 00000BAD 4C8B4D28                        mov r9, PARAM(1)
  1451                                          assert_integer(r9)
    53 00000BB1 41803911            <1>  cmp byte [%1], %2
    54 00000BB5 0F85C4140000        <1>  jne L_error_incorrect_type
  1452 00000BBB 498B7801                        mov rdi, qword [r8 + 1]
  1453 00000BBF 49237901                        and rdi, qword [r9 + 1]
  1454 00000BC3 E832130000                      call make_integer
  1455 00000BC8 C9                              leave
  1456 00000BC9 C22000                          ret AND_KILL_FRAME(2)
  1457                                  
  1458                                  L_code_ptr_logor:
  1459 00000BCC C8000000                        enter 0, 0
  1460 00000BD0 48837D1802                      cmp COUNT, 2
  1461 00000BD5 0F8505140000                    jne L_error_arg_count_2
  1462 00000BDB 4C8B4520                        mov r8, PARAM(0)
  1463                                          assert_integer(r8)
    53 00000BDF 41803811            <1>  cmp byte [%1], %2
    54 00000BE3 0F8596140000        <1>  jne L_error_incorrect_type
  1464 00000BE9 4C8B4D28                        mov r9, PARAM(1)
  1465                                          assert_integer(r9)
    53 00000BED 41803911            <1>  cmp byte [%1], %2
    54 00000BF1 0F8588140000        <1>  jne L_error_incorrect_type
  1466 00000BF7 498B7801                        mov rdi, qword [r8 + 1]
  1467 00000BFB 490B7901                        or rdi, qword [r9 + 1]
  1468 00000BFF E8F6120000                      call make_integer
  1469 00000C04 C9                              leave
  1470 00000C05 C22000                          ret AND_KILL_FRAME(2)
  1471                                  
  1472                                  L_code_ptr_logxor:
  1473 00000C08 C8000000                        enter 0, 0
  1474 00000C0C 48837D1802                      cmp COUNT, 2
  1475 00000C11 0F85C9130000                    jne L_error_arg_count_2
  1476 00000C17 4C8B4520                        mov r8, PARAM(0)
  1477                                          assert_integer(r8)
    53 00000C1B 41803811            <1>  cmp byte [%1], %2
    54 00000C1F 0F855A140000        <1>  jne L_error_incorrect_type
  1478 00000C25 4C8B4D28                        mov r9, PARAM(1)
  1479                                          assert_integer(r9)
    53 00000C29 41803911            <1>  cmp byte [%1], %2
    54 00000C2D 0F854C140000        <1>  jne L_error_incorrect_type
  1480 00000C33 498B7801                        mov rdi, qword [r8 + 1]
  1481 00000C37 49337901                        xor rdi, qword [r9 + 1]
  1482 00000C3B E8BA120000                      call make_integer
  1483                                          LEAVE
    49 00000C40 C9                  <1>  leave
  1484 00000C41 C22000                          ret AND_KILL_FRAME(2)
  1485                                  
  1486                                  L_code_ptr_lognot:
  1487 00000C44 C8000000                        enter 0, 0
  1488 00000C48 48837D1801                      cmp COUNT, 1
  1489 00000C4D 0F8558130000                    jne L_error_arg_count_1
  1490 00000C53 4C8B4520                        mov r8, PARAM(0)
  1491                                          assert_integer(r8)
    53 00000C57 41803811            <1>  cmp byte [%1], %2
    54 00000C5B 0F851E140000        <1>  jne L_error_incorrect_type
  1492 00000C61 498B7801                        mov rdi, qword [r8 + 1]
  1493 00000C65 48F7D7                          not rdi
  1494 00000C68 E88D120000                      call make_integer
  1495 00000C6D C9                              leave
  1496 00000C6E C21800                          ret AND_KILL_FRAME(1)
  1497                                  
  1498                                  L_code_ptr_bin_apply:
  1499 00000C71 C8000000                        enter 0, 0
  1500 00000C75 48837D1802                      cmp COUNT, 2
  1501 00000C7A 0F8560130000                    jne L_error_arg_count_2
  1502 00000C80 488B4528                        mov rax, PARAM(1) ; list
  1503 00000C84 BB00000000                      mov rbx,0 ;list length count
  1504                                  .L_length_loop: ;this loop is to iterate through the list and count it's  (stop when encountering nil)
  1505 00000C89 803801                          cmp byte [rax], T_nil ;TODO: check if correct
  1506 00000C8C 7413                            je .L_length_loop_exit
  1507                                          assert_pair(rax)
    53 00000C8E 803821              <1>  cmp byte [%1], %2
    54 00000C91 0F85E8130000        <1>  jne L_error_incorrect_type
  1508 00000C97 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1509 00000C9B 4883C301                        add rbx,1
  1510 00000C9F EBE8                            jmp .L_length_loop
  1511                                  .L_length_loop_exit: ;1381
  1512 00000CA1 488B4528                        mov rax, PARAM(1) ; list
  1513                                          ;rbx contains list's length
  1514 00000CA5 488B4D20                        mov rcx, PARAM(0) ; PROC
  1515                                          assert_closure(rcx)
    53 00000CA9 803904              <1>  cmp byte [%1], %2
    54 00000CAC 0F85CD130000        <1>  jne L_error_incorrect_type
  1516 00000CB2 BA00000000                      mov rdx, 0 ;i in (int i =0;i<list.length;i++)
  1517 00000CB7 4C8B4508                        mov r8, RET_ADDR
  1518 00000CBB 488B6D00                        mov rbp, OLD_RBP
  1519 00000CBF 4889EC                          mov rsp, rbp
  1520                                  .L_loop: ;loop to push list's to stack. not done with push because we need to invert it's order on stack.
  1521 00000CC2 4839DA                          cmp rdx, rbx ; rdx=index, rbx=count
  1522 00000CC5 7422                            je .L_loop_exit
  1523 00000CC7 4989D9                          mov r9, rbx
  1524 00000CCA 4929D1                          sub r9, rdx
  1525 00000CCD 4983C101                        add r9, 1
  1526 00000CD1 4D6BC9F8                        imul r9, -8
  1527 00000CD5 4901E9                          add r9, rbp
  1528                                          ;mov [rbp-8*(rbx - rdx + 1)], SOB_PAIR_CAR(rax)
  1529 00000CD8 488B7801                        mov rdi, SOB_PAIR_CAR(rax)
  1530 00000CDC 498939                          mov [r9], rdi
  1531                                          ;;above line should push parameters in backward order (for list (1 2 3) should push 1 2 3 to stack)
  1532 00000CDF 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1533 00000CE3 4883C201                        add rdx, 1
  1534 00000CE7 EBD9                            jmp .L_loop
  1535                                  .L_loop_exit:
  1536 00000CE9 4989D9                          mov r9, rbx
  1537 00000CEC 4983C101                        add r9,1
  1538 00000CF0 4D6BC9F8                        imul r9, -8
  1539 00000CF4 4901E9                          add r9,rbp
  1540                                         ; mov rsp, rbp- 8 * (rbx + 1) ;fix stack pointer to include added parameters in loop.
  1541 00000CF7 4C89CC                          mov rsp, r9
  1542 00000CFA 53                              push rbx
  1543 00000CFB FF7101                          push SOB_CLOSURE_ENV(rcx)
  1544 00000CFE 4150                            push r8
  1545 00000D00 FF6109                          jmp SOB_CLOSURE_CODE(rcx)
  1546                                  
  1547                                          
  1548                                  
  1549                                          
  1550                                  ;;; fill in for final project!
  1551                                  
  1552                                  L_code_ptr_is_null:
  1553 00000D03 C8000000                        enter 0, 0
  1554 00000D07 48837D1801                      cmp COUNT, 1
  1555 00000D0C 0F8599120000                    jne L_error_arg_count_1
  1556 00000D12 488B4520                        mov rax, PARAM(0)
  1557 00000D16 803801                          cmp byte [rax], T_nil
  1558 00000D19 750C                            jne .L_false
  1559 00000D1B 48B8-                           mov rax, sob_boolean_true
  1559 00000D1D [0300000000000000] 
  1560 00000D25 EB0A                            jmp .L_end
  1561                                  .L_false:
  1562 00000D27 48B8-                           mov rax, sob_boolean_false
  1562 00000D29 [0200000000000000] 
  1563                                  .L_end:
  1564 00000D31 C9                              leave
  1565 00000D32 C21800                          ret AND_KILL_FRAME(1)
  1566                                  
  1567                                  L_code_ptr_is_pair:
  1568 00000D35 C8000000                        enter 0, 0
  1569 00000D39 48837D1801                      cmp COUNT, 1
  1570 00000D3E 0F8567120000                    jne L_error_arg_count_1
  1571 00000D44 488B4520                        mov rax, PARAM(0)
  1572 00000D48 803821                          cmp byte [rax], T_pair
  1573 00000D4B 750C                            jne .L_false
  1574 00000D4D 48B8-                           mov rax, sob_boolean_true
  1574 00000D4F [0300000000000000] 
  1575 00000D57 EB0A                            jmp .L_end
  1576                                  .L_false:
  1577 00000D59 48B8-                           mov rax, sob_boolean_false
  1577 00000D5B [0200000000000000] 
  1578                                  .L_end:
  1579 00000D63 C9                              leave
  1580 00000D64 C21800                          ret AND_KILL_FRAME(1)
  1581                                          
  1582                                  L_code_ptr_is_void:
  1583 00000D67 C8000000                        enter 0, 0
  1584 00000D6B 48837D1801                      cmp COUNT, 1
  1585 00000D70 0F8535120000                    jne L_error_arg_count_1
  1586 00000D76 488B4520                        mov rax, PARAM(0)
  1587 00000D7A 803800                          cmp byte [rax], T_void
  1588 00000D7D 750C                            jne .L_false
  1589 00000D7F 48B8-                           mov rax, sob_boolean_true
  1589 00000D81 [0300000000000000] 
  1590 00000D89 EB0A                            jmp .L_end
  1591                                  .L_false:
  1592 00000D8B 48B8-                           mov rax, sob_boolean_false
  1592 00000D8D [0200000000000000] 
  1593                                  .L_end:
  1594 00000D95 C9                              leave
  1595 00000D96 C21800                          ret AND_KILL_FRAME(1)
  1596                                  
  1597                                  L_code_ptr_is_char:
  1598 00000D99 C8000000                        enter 0, 0
  1599 00000D9D 48837D1801                      cmp COUNT, 1
  1600 00000DA2 0F8503120000                    jne L_error_arg_count_1
  1601 00000DA8 488B4520                        mov rax, PARAM(0)
  1602 00000DAC 803802                          cmp byte [rax], T_char
  1603 00000DAF 750C                            jne .L_false
  1604 00000DB1 48B8-                           mov rax, sob_boolean_true
  1604 00000DB3 [0300000000000000] 
  1605 00000DBB EB0A                            jmp .L_end
  1606                                  .L_false:
  1607 00000DBD 48B8-                           mov rax, sob_boolean_false
  1607 00000DBF [0200000000000000] 
  1608                                  .L_end:
  1609 00000DC7 C9                              leave
  1610 00000DC8 C21800                          ret AND_KILL_FRAME(1)
  1611                                  
  1612                                  L_code_ptr_is_string:
  1613 00000DCB C8000000                        enter 0, 0
  1614 00000DCF 48837D1801                      cmp COUNT, 1
  1615 00000DD4 0F85D1110000                    jne L_error_arg_count_1
  1616 00000DDA 488B4520                        mov rax, PARAM(0)
  1617 00000DDE 803803                          cmp byte [rax], T_string
  1618 00000DE1 750C                            jne .L_false
  1619 00000DE3 48B8-                           mov rax, sob_boolean_true
  1619 00000DE5 [0300000000000000] 
  1620 00000DED EB0A                            jmp .L_end
  1621                                  .L_false:
  1622 00000DEF 48B8-                           mov rax, sob_boolean_false
  1622 00000DF1 [0200000000000000] 
  1623                                  .L_end:
  1624 00000DF9 C9                              leave
  1625 00000DFA C21800                          ret AND_KILL_FRAME(1)
  1626                                  
  1627                                  L_code_ptr_is_symbol:
  1628 00000DFD C8000000                        enter 0, 0
  1629 00000E01 48837D1801                      cmp COUNT, 1
  1630 00000E06 0F859F110000                    jne L_error_arg_count_1
  1631 00000E0C 4C8B4520                        mov r8, PARAM(0)
  1632 00000E10 41802040                        and byte [r8], T_symbol
  1633 00000E14 740C                            jz .L_false
  1634 00000E16 48B8-                           mov rax, sob_boolean_true
  1634 00000E18 [0300000000000000] 
  1635 00000E20 EB0A                            jmp .L_exit
  1636                                  .L_false:
  1637 00000E22 48B8-                           mov rax, sob_boolean_false
  1637 00000E24 [0200000000000000] 
  1638                                  .L_exit:
  1639 00000E2C C9                              leave
  1640 00000E2D C21800                          ret AND_KILL_FRAME(1)
  1641                                  
  1642                                  L_code_ptr_is_uninterned_symbol:
  1643 00000E30 C8000000                        enter 0, 0
  1644 00000E34 48837D1801                      cmp COUNT, 1
  1645 00000E39 0F856C110000                    jne L_error_arg_count_1
  1646 00000E3F 4C8B4520                        mov r8, PARAM(0)
  1647 00000E43 41803842                        cmp byte [r8], T_uninterned_symbol
  1648 00000E47 750C                            jne .L_false
  1649 00000E49 48B8-                           mov rax, sob_boolean_true
  1649 00000E4B [0300000000000000] 
  1650 00000E53 EB0A                            jmp .L_exit
  1651                                  .L_false:
  1652 00000E55 48B8-                           mov rax, sob_boolean_false
  1652 00000E57 [0200000000000000] 
  1653                                  .L_exit:
  1654 00000E5F C9                              leave
  1655 00000E60 C21800                          ret AND_KILL_FRAME(1)
  1656                                  
  1657                                  L_code_ptr_is_interned_symbol:
  1658 00000E63 C8000000                        enter 0, 0
  1659 00000E67 48837D1801                      cmp COUNT, 1
  1660 00000E6C 0F8539110000                    jne L_error_arg_count_1
  1661 00000E72 488B4520                        mov rax, PARAM(0)
  1662 00000E76 803841                          cmp byte [rax], T_interned_symbol
  1663 00000E79 750C                            jne .L_false
  1664 00000E7B 48B8-                           mov rax, sob_boolean_true
  1664 00000E7D [0300000000000000] 
  1665 00000E85 EB0A                            jmp .L_end
  1666                                  .L_false:
  1667 00000E87 48B8-                           mov rax, sob_boolean_false
  1667 00000E89 [0200000000000000] 
  1668                                  .L_end:
  1669 00000E91 C9                              leave
  1670 00000E92 C21800                          ret AND_KILL_FRAME(1)
  1671                                  
  1672                                  L_code_ptr_gensym:
  1673 00000E95 C8000000                        enter 0, 0
  1674 00000E99 48837D1800                      cmp COUNT, 0
  1675 00000E9E 0F85D2100000                    jne L_error_arg_count_0
  1676 00000EA4 48FF0425[EB080000]              inc qword [gensym_count]
  1677 00000EAC BF09000000                      mov rdi, (1 + 8)
  1678 00000EB1 E835F4FFFF                      call malloc
  1679 00000EB6 C60042                          mov byte [rax], T_uninterned_symbol
  1680 00000EB9 488B0C25[EB080000]              mov rcx, qword [gensym_count]
  1681 00000EC1 48894801                        mov qword [rax + 1], rcx
  1682 00000EC5 C9                              leave
  1683 00000EC6 C21000                          ret AND_KILL_FRAME(0)
  1684                                  
  1685                                  L_code_ptr_is_vector:
  1686 00000EC9 C8000000                        enter 0, 0
  1687 00000ECD 48837D1801                      cmp COUNT, 1
  1688 00000ED2 0F85D3100000                    jne L_error_arg_count_1
  1689 00000ED8 488B4520                        mov rax, PARAM(0)
  1690 00000EDC 803822                          cmp byte [rax], T_vector
  1691 00000EDF 750C                            jne .L_false
  1692 00000EE1 48B8-                           mov rax, sob_boolean_true
  1692 00000EE3 [0300000000000000] 
  1693 00000EEB EB0A                            jmp .L_end
  1694                                  .L_false:
  1695 00000EED 48B8-                           mov rax, sob_boolean_false
  1695 00000EEF [0200000000000000] 
  1696                                  .L_end:
  1697 00000EF7 C9                              leave
  1698 00000EF8 C21800                          ret AND_KILL_FRAME(1)
  1699                                  
  1700                                  L_code_ptr_is_closure:
  1701 00000EFB C8000000                        enter 0, 0
  1702 00000EFF 48837D1801                      cmp COUNT, 1
  1703 00000F04 0F85A1100000                    jne L_error_arg_count_1
  1704 00000F0A 488B4520                        mov rax, PARAM(0)
  1705 00000F0E 803804                          cmp byte [rax], T_closure
  1706 00000F11 750C                            jne .L_false
  1707 00000F13 48B8-                           mov rax, sob_boolean_true
  1707 00000F15 [0300000000000000] 
  1708 00000F1D EB0A                            jmp .L_end
  1709                                  .L_false:
  1710 00000F1F 48B8-                           mov rax, sob_boolean_false
  1710 00000F21 [0200000000000000] 
  1711                                  .L_end:
  1712 00000F29 C9                              leave
  1713 00000F2A C21800                          ret AND_KILL_FRAME(1)
  1714                                  
  1715                                  L_code_ptr_is_real:
  1716 00000F2D C8000000                        enter 0, 0
  1717 00000F31 48837D1801                      cmp COUNT, 1
  1718 00000F36 0F856F100000                    jne L_error_arg_count_1
  1719 00000F3C 488B4520                        mov rax, PARAM(0)
  1720 00000F40 803813                          cmp byte [rax], T_real
  1721 00000F43 750C                            jne .L_false
  1722 00000F45 48B8-                           mov rax, sob_boolean_true
  1722 00000F47 [0300000000000000] 
  1723 00000F4F EB0A                            jmp .L_end
  1724                                  .L_false:
  1725 00000F51 48B8-                           mov rax, sob_boolean_false
  1725 00000F53 [0200000000000000] 
  1726                                  .L_end:
  1727 00000F5B C9                              leave
  1728 00000F5C C21800                          ret AND_KILL_FRAME(1)
  1729                                  
  1730                                  L_code_ptr_is_fraction:
  1731 00000F5F C8000000                        enter 0, 0
  1732 00000F63 48837D1801                      cmp COUNT, 1
  1733 00000F68 0F853D100000                    jne L_error_arg_count_1
  1734 00000F6E 488B4520                        mov rax, PARAM(0)
  1735 00000F72 803812                          cmp byte [rax], T_fraction
  1736 00000F75 750C                            jne .L_false
  1737 00000F77 48B8-                           mov rax, sob_boolean_true
  1737 00000F79 [0300000000000000] 
  1738 00000F81 EB0A                            jmp .L_end
  1739                                  .L_false:
  1740 00000F83 48B8-                           mov rax, sob_boolean_false
  1740 00000F85 [0200000000000000] 
  1741                                  .L_end:
  1742 00000F8D C9                              leave
  1743 00000F8E C21800                          ret AND_KILL_FRAME(1)
  1744                                  
  1745                                  L_code_ptr_is_boolean:
  1746 00000F91 C8000000                        enter 0, 0
  1747 00000F95 48837D1801                      cmp COUNT, 1
  1748 00000F9A 0F850B100000                    jne L_error_arg_count_1
  1749 00000FA0 488B4520                        mov rax, PARAM(0)
  1750 00000FA4 8A18                            mov bl, byte [rax]
  1751 00000FA6 80E308                          and bl, T_boolean
  1752 00000FA9 740C                            je .L_false
  1753 00000FAB 48B8-                           mov rax, sob_boolean_true
  1753 00000FAD [0300000000000000] 
  1754 00000FB5 EB0A                            jmp .L_end
  1755                                  .L_false:
  1756 00000FB7 48B8-                           mov rax, sob_boolean_false
  1756 00000FB9 [0200000000000000] 
  1757                                  .L_end:
  1758 00000FC1 C9                              leave
  1759 00000FC2 C21800                          ret AND_KILL_FRAME(1)
  1760                                          
  1761                                  L_code_ptr_is_boolean_false:
  1762 00000FC5 C8000000                        enter 0, 0
  1763 00000FC9 48837D1801                      cmp COUNT, 1
  1764 00000FCE 0F85D70F0000                    jne L_error_arg_count_1
  1765 00000FD4 488B4520                        mov rax, PARAM(0)
  1766 00000FD8 8A18                            mov bl, byte [rax]
  1767 00000FDA 80FB09                          cmp bl, T_boolean_false
  1768 00000FDD 750C                            jne .L_false
  1769 00000FDF 48B8-                           mov rax, sob_boolean_true
  1769 00000FE1 [0300000000000000] 
  1770 00000FE9 EB0A                            jmp .L_end
  1771                                  .L_false:
  1772 00000FEB 48B8-                           mov rax, sob_boolean_false
  1772 00000FED [0200000000000000] 
  1773                                  .L_end:
  1774 00000FF5 C9                              leave
  1775 00000FF6 C21800                          ret AND_KILL_FRAME(1)
  1776                                  
  1777                                  L_code_ptr_is_boolean_true:
  1778 00000FF9 C8000000                        enter 0, 0
  1779 00000FFD 48837D1801                      cmp COUNT, 1
  1780 00001002 0F85A30F0000                    jne L_error_arg_count_1
  1781 00001008 488B4520                        mov rax, PARAM(0)
  1782 0000100C 8A18                            mov bl, byte [rax]
  1783 0000100E 80FB0A                          cmp bl, T_boolean_true
  1784 00001011 750C                            jne .L_false
  1785 00001013 48B8-                           mov rax, sob_boolean_true
  1785 00001015 [0300000000000000] 
  1786 0000101D EB0A                            jmp .L_end
  1787                                  .L_false:
  1788 0000101F 48B8-                           mov rax, sob_boolean_false
  1788 00001021 [0200000000000000] 
  1789                                  .L_end:
  1790 00001029 C9                              leave
  1791 0000102A C21800                          ret AND_KILL_FRAME(1)
  1792                                  
  1793                                  L_code_ptr_is_number:
  1794 0000102D C8000000                        enter 0, 0
  1795 00001031 48837D1801                      cmp COUNT, 1
  1796 00001036 0F856F0F0000                    jne L_error_arg_count_1
  1797 0000103C 488B4520                        mov rax, PARAM(0)
  1798 00001040 8A18                            mov bl, byte [rax]
  1799 00001042 80E310                          and bl, T_number
  1800 00001045 740C                            jz .L_false
  1801 00001047 48B8-                           mov rax, sob_boolean_true
  1801 00001049 [0300000000000000] 
  1802 00001051 EB0A                            jmp .L_end
  1803                                  .L_false:
  1804 00001053 48B8-                           mov rax, sob_boolean_false
  1804 00001055 [0200000000000000] 
  1805                                  .L_end:
  1806 0000105D C9                              leave
  1807 0000105E C21800                          ret AND_KILL_FRAME(1)
  1808                                          
  1809                                  L_code_ptr_is_collection:
  1810 00001061 C8000000                        enter 0, 0
  1811 00001065 48837D1801                      cmp COUNT, 1
  1812 0000106A 0F853B0F0000                    jne L_error_arg_count_1
  1813 00001070 488B4520                        mov rax, PARAM(0)
  1814 00001074 8A18                            mov bl, byte [rax]
  1815 00001076 80E320                          and bl, T_collection
  1816 00001079 740C                            je .L_false
  1817 0000107B 48B8-                           mov rax, sob_boolean_true
  1817 0000107D [0300000000000000] 
  1818 00001085 EB0A                            jmp .L_end
  1819                                  .L_false:
  1820 00001087 48B8-                           mov rax, sob_boolean_false
  1820 00001089 [0200000000000000] 
  1821                                  .L_end:
  1822 00001091 C9                              leave
  1823 00001092 C21800                          ret AND_KILL_FRAME(1)
  1824                                  
  1825                                  L_code_ptr_cons:
  1826 00001095 C8000000                        enter 0, 0
  1827 00001099 48837D1802                      cmp COUNT, 2
  1828 0000109E 0F853C0F0000                    jne L_error_arg_count_2
  1829 000010A4 BF11000000                      mov rdi, (1 + 8 + 8)
  1830 000010A9 E83DF2FFFF                      call malloc
  1831 000010AE C60021                          mov byte [rax], T_pair
  1832 000010B1 488B5D20                        mov rbx, PARAM(0)
  1833 000010B5 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1834 000010B9 488B5D28                        mov rbx, PARAM(1)
  1835 000010BD 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1836 000010C1 C9                              leave
  1837 000010C2 C22000                          ret AND_KILL_FRAME(2)
  1838                                  
  1839                                  L_code_ptr_display_sexpr:
  1840 000010C5 C8000000                        enter 0, 0
  1841 000010C9 48837D1801                      cmp COUNT, 1
  1842 000010CE 0F85D70E0000                    jne L_error_arg_count_1
  1843 000010D4 488B7D20                        mov rdi, PARAM(0)
  1844 000010D8 E88FF4FFFF                      call print_sexpr
  1845 000010DD 48B8-                           mov rax, sob_void
  1845 000010DF [0000000000000000] 
  1846 000010E7 C9                              leave
  1847 000010E8 C21800                          ret AND_KILL_FRAME(1)
  1848                                  
  1849                                  L_code_ptr_write_char:
  1850 000010EB C8000000                        enter 0, 0
  1851 000010EF 48837D1801                      cmp COUNT, 1
  1852 000010F4 0F85B10E0000                    jne L_error_arg_count_1
  1853 000010FA 488B4520                        mov rax, PARAM(0)
  1854                                          assert_char(rax)
    53 000010FE 803802              <1>  cmp byte [%1], %2
    54 00001101 0F85780F0000        <1>  jne L_error_incorrect_type
  1855 00001107 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1856 0000110A 4825FF000000                    and rax, 255
  1857 00001110 48BF-                           mov rdi, fmt_char
  1857 00001112 [F308000000000000] 
  1858 0000111A 4889C6                          mov rsi, rax
  1859 0000111D B800000000                      mov rax, 0
  1860                                          ENTER
    44 00001122 C8000000            <1>  enter 0, 0
    45 00001126 4883E4F0            <1>  and rsp, ~15
  1861 0000112A E8(00000000)                    call printf
  1862                                          LEAVE
    49 0000112F C9                  <1>  leave
  1863 00001130 48B8-                           mov rax, sob_void
  1863 00001132 [0000000000000000] 
  1864 0000113A C9                              leave
  1865 0000113B C21800                          ret AND_KILL_FRAME(1)
  1866                                  
  1867                                  L_code_ptr_car:
  1868 0000113E C8000000                        enter 0, 0
  1869 00001142 48837D1801                      cmp COUNT, 1
  1870 00001147 0F855E0E0000                    jne L_error_arg_count_1
  1871 0000114D 488B4520                        mov rax, PARAM(0)
  1872                                          assert_pair(rax)
    53 00001151 803821              <1>  cmp byte [%1], %2
    54 00001154 0F85250F0000        <1>  jne L_error_incorrect_type
  1873 0000115A 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1874 0000115E C9                              leave
  1875 0000115F C21800                          ret AND_KILL_FRAME(1)
  1876                                          
  1877                                  L_code_ptr_cdr:
  1878 00001162 C8000000                        enter 0, 0
  1879 00001166 48837D1801                      cmp COUNT, 1
  1880 0000116B 0F853A0E0000                    jne L_error_arg_count_1
  1881 00001171 488B4520                        mov rax, PARAM(0)
  1882                                          assert_pair(rax)
    53 00001175 803821              <1>  cmp byte [%1], %2
    54 00001178 0F85010F0000        <1>  jne L_error_incorrect_type
  1883 0000117E 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1884 00001182 C9                              leave
  1885 00001183 C21800                          ret AND_KILL_FRAME(1)
  1886                                          
  1887                                  L_code_ptr_string_length:
  1888 00001186 C8000000                        enter 0, 0
  1889 0000118A 48837D1801                      cmp COUNT, 1
  1890 0000118F 0F85160E0000                    jne L_error_arg_count_1
  1891 00001195 488B4520                        mov rax, PARAM(0)
  1892                                          assert_string(rax)
    53 00001199 803803              <1>  cmp byte [%1], %2
    54 0000119C 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1893 000011A2 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1894 000011A6 E84F0D0000                      call make_integer
  1895 000011AB C9                              leave
  1896 000011AC C21800                          ret AND_KILL_FRAME(1)
  1897                                  
  1898                                  L_code_ptr_vector_length:
  1899 000011AF C8000000                        enter 0, 0
  1900 000011B3 48837D1801                      cmp COUNT, 1
  1901 000011B8 0F85ED0D0000                    jne L_error_arg_count_1
  1902 000011BE 488B4520                        mov rax, PARAM(0)
  1903                                          assert_vector(rax)
    53 000011C2 803822              <1>  cmp byte [%1], %2
    54 000011C5 0F85B40E0000        <1>  jne L_error_incorrect_type
  1904 000011CB 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1905 000011CF E8260D0000                      call make_integer
  1906 000011D4 C9                              leave
  1907 000011D5 C21800                          ret AND_KILL_FRAME(1)
  1908                                  
  1909                                  L_code_ptr_real_to_integer:
  1910 000011D8 C8000000                        enter 0, 0
  1911 000011DC 48837D1801                      cmp COUNT, 1
  1912 000011E1 0F85C40D0000                    jne L_error_arg_count_1
  1913 000011E7 488B5D20                        mov rbx, PARAM(0)
  1914                                          assert_real(rbx)
    53 000011EB 803B13              <1>  cmp byte [%1], %2
    54 000011EE 0F858B0E0000        <1>  jne L_error_incorrect_type
  1915 000011F4 F20F104301                      movsd xmm0, qword [rbx + 1]
  1916 000011F9 F2480F2CF8                      cvttsd2si rdi, xmm0
  1917 000011FE E8F70C0000                      call make_integer
  1918 00001203 C9                              leave
  1919 00001204 C21800                          ret AND_KILL_FRAME(1)
  1920                                  
  1921                                  L_code_ptr_exit:
  1922 00001207 C8000000                        enter 0, 0
  1923 0000120B 48837D1800                      cmp COUNT, 0
  1924 00001210 0F85600D0000                    jne L_error_arg_count_0
  1925 00001216 B800000000                      mov rax, 0
  1926 0000121B E8(00000000)                    call exit
  1927                                  
  1928                                  L_code_ptr_integer_to_real:
  1929 00001220 C8000000                        enter 0, 0
  1930 00001224 48837D1801                      cmp COUNT, 1
  1931 00001229 0F857C0D0000                    jne L_error_arg_count_1
  1932 0000122F 488B4520                        mov rax, PARAM(0)
  1933                                          assert_integer(rax)
    53 00001233 803811              <1>  cmp byte [%1], %2
    54 00001236 0F85430E0000        <1>  jne L_error_incorrect_type
  1934 0000123C FF7001                          push qword [rax + 1]
  1935 0000123F F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1936 00001245 E8980C0000                      call make_real
  1937 0000124A C9                              leave
  1938 0000124B C21800                          ret AND_KILL_FRAME(1)
  1939                                  
  1940                                  L_code_ptr_fraction_to_real:
  1941 0000124E C8000000                        enter 0, 0
  1942 00001252 48837D1801                      cmp COUNT, 1
  1943 00001257 0F854E0D0000                    jne L_error_arg_count_1
  1944 0000125D 488B4520                        mov rax, PARAM(0)
  1945                                          assert_fraction(rax)
    53 00001261 803812              <1>  cmp byte [%1], %2
    54 00001264 0F85150E0000        <1>  jne L_error_incorrect_type
  1946 0000126A FF7001                          push qword [rax + 1]
  1947 0000126D F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1948 00001273 FF7009                          push qword [rax + 1 + 8]
  1949 00001276 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1950 0000127C F20F5EC1                        divsd xmm0, xmm1
  1951 00001280 E85D0C0000                      call make_real
  1952 00001285 C9                              leave
  1953 00001286 C21800                          ret AND_KILL_FRAME(1)
  1954                                  
  1955                                  L_code_ptr_char_to_integer:
  1956 00001289 C8000000                        enter 0, 0
  1957 0000128D 48837D1801                      cmp COUNT, 1
  1958 00001292 0F85130D0000                    jne L_error_arg_count_1
  1959 00001298 488B4520                        mov rax, PARAM(0)
  1960                                          assert_char(rax)
    53 0000129C 803802              <1>  cmp byte [%1], %2
    54 0000129F 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1961 000012A5 8A4001                          mov al, byte [rax + 1]
  1962 000012A8 4825FF000000                    and rax, 255
  1963 000012AE 4889C7                          mov rdi, rax
  1964 000012B1 E8440C0000                      call make_integer
  1965 000012B6 C9                              leave
  1966 000012B7 C21800                          ret AND_KILL_FRAME(1)
  1967                                  
  1968                                  L_code_ptr_integer_to_fraction:
  1969 000012BA C8000000                        enter 0, 0
  1970 000012BE 48837D1801                      cmp COUNT, 1
  1971 000012C3 0F85E20C0000                    jne L_error_arg_count_1
  1972 000012C9 4C8B4520                        mov r8, PARAM(0)
  1973                                          assert_integer(r8)
    53 000012CD 41803811            <1>  cmp byte [%1], %2
    54 000012D1 0F85A80D0000        <1>  jne L_error_incorrect_type
  1974 000012D7 BF11000000                      mov rdi, (1 + 8 + 8)
  1975 000012DC E80AF0FFFF                      call malloc
  1976 000012E1 498B5801                        mov rbx, qword [r8 + 1]
  1977 000012E5 C60012                          mov byte [rax], T_fraction
  1978 000012E8 48895801                        mov qword [rax + 1], rbx
  1979 000012EC 48C7400901000000                mov qword [rax + 1 + 8], 1
  1980 000012F4 C9                              leave
  1981 000012F5 C21800                          ret AND_KILL_FRAME(1)
  1982                                  
  1983                                  L_code_ptr_integer_to_char:
  1984 000012F8 C8000000                        enter 0, 0
  1985 000012FC 48837D1801                      cmp COUNT, 1
  1986 00001301 0F85A40C0000                    jne L_error_arg_count_1
  1987 00001307 488B4520                        mov rax, PARAM(0)
  1988                                          assert_integer(rax)
    53 0000130B 803811              <1>  cmp byte [%1], %2
    54 0000130E 0F856B0D0000        <1>  jne L_error_incorrect_type
  1989 00001314 488B5801                        mov rbx, qword [rax + 1]
  1990 00001318 4883FB00                        cmp rbx, 0
  1991 0000131C 0F8EF20B0000                    jle L_error_integer_range
  1992 00001322 4881FB00010000                  cmp rbx, 256
  1993 00001329 0F8DE50B0000                    jge L_error_integer_range
  1994 0000132F BF02000000                      mov rdi, (1 + 1)
  1995 00001334 E8B2EFFFFF                      call malloc
  1996 00001339 C60002                          mov byte [rax], T_char
  1997 0000133C 885801                          mov byte [rax + 1], bl
  1998 0000133F C9                              leave
  1999 00001340 C21800                          ret AND_KILL_FRAME(1)
  2000                                  
  2001                                  L_code_ptr_trng:
  2002 00001343 C8000000                        enter 0, 0
  2003 00001347 48837D1800                      cmp COUNT, 0
  2004 0000134C 0F85240C0000                    jne L_error_arg_count_0
  2005 00001352 480FC7F7                        rdrand rdi
  2006 00001356 48D1EF                          shr rdi, 1
  2007 00001359 E89C0B0000                      call make_integer
  2008 0000135E C9                              leave
  2009 0000135F C21000                          ret AND_KILL_FRAME(0)
  2010                                  
  2011                                  L_code_ptr_is_zero:
  2012 00001362 C8000000                        enter 0, 0
  2013 00001366 48837D1801                      cmp COUNT, 1
  2014 0000136B 0F853A0C0000                    jne L_error_arg_count_1
  2015 00001371 488B4520                        mov rax, PARAM(0)
  2016 00001375 803811                          cmp byte [rax], T_integer
  2017 00001378 740F                            je .L_integer
  2018 0000137A 803812                          cmp byte [rax], T_fraction
  2019 0000137D 7413                            je .L_fraction
  2020 0000137F 803813                          cmp byte [rax], T_real
  2021 00001382 7417                            je .L_real
  2022 00001384 E9F60C0000                      jmp L_error_incorrect_type
  2023                                  .L_integer:
  2024 00001389 4883780100                      cmp qword [rax + 1], 0
  2025 0000138E 7429                            je .L_zero
  2026 00001390 EB1B                            jmp .L_not_zero
  2027                                  .L_fraction:
  2028 00001392 4883780100                      cmp qword [rax + 1], 0
  2029 00001397 7420                            je .L_zero
  2030 00001399 EB12                            jmp .L_not_zero
  2031                                  .L_real:
  2032 0000139B 660FEFC0                        pxor xmm0, xmm0
  2033 0000139F FF7001                          push qword [rax + 1]
  2034 000013A2 F20F100C24                      movsd xmm1, qword [rsp]
  2035 000013A7 660F2EC1                        ucomisd xmm0, xmm1
  2036 000013AB 740C                            je .L_zero
  2037                                  .L_not_zero:
  2038 000013AD 48B8-                           mov rax, sob_boolean_false
  2038 000013AF [0200000000000000] 
  2039 000013B7 EB0A                            jmp .L_end
  2040                                  .L_zero:
  2041 000013B9 48B8-                           mov rax, sob_boolean_true
  2041 000013BB [0300000000000000] 
  2042                                  .L_end:
  2043 000013C3 C9                              leave
  2044 000013C4 C21800                          ret AND_KILL_FRAME(1)
  2045                                  
  2046                                  L_code_ptr_is_integer:
  2047 000013C7 C8000000                        enter 0, 0
  2048 000013CB 48837D1801                      cmp COUNT, 1
  2049 000013D0 0F85D50B0000                    jne L_error_arg_count_1
  2050 000013D6 488B4520                        mov rax, PARAM(0)
  2051 000013DA 803811                          cmp byte [rax], T_integer
  2052 000013DD 750C                            jne .L_false
  2053 000013DF 48B8-                           mov rax, sob_boolean_true
  2053 000013E1 [0300000000000000] 
  2054 000013E9 EB0A                            jmp .L_exit
  2055                                  .L_false:
  2056 000013EB 48B8-                           mov rax, sob_boolean_false
  2056 000013ED [0200000000000000] 
  2057                                  .L_exit:
  2058 000013F5 C9                              leave
  2059 000013F6 C21800                          ret AND_KILL_FRAME(1)
  2060                                  
  2061                                  L_code_ptr_raw_bin_add_rr:
  2062 000013F9 C8000000                        enter 0, 0
  2063 000013FD 48837D1802                      cmp COUNT, 2
  2064 00001402 0F85D80B0000                    jne L_error_arg_count_2
  2065 00001408 488B5D20                        mov rbx, PARAM(0)
  2066                                          assert_real(rbx)
    53 0000140C 803B13              <1>  cmp byte [%1], %2
    54 0000140F 0F856A0C0000        <1>  jne L_error_incorrect_type
  2067 00001415 488B4D28                        mov rcx, PARAM(1)
  2068                                          assert_real(rcx)
    53 00001419 803913              <1>  cmp byte [%1], %2
    54 0000141C 0F855D0C0000        <1>  jne L_error_incorrect_type
  2069 00001422 F20F104301                      movsd xmm0, qword [rbx + 1]
  2070 00001427 F20F104901                      movsd xmm1, qword [rcx + 1]
  2071 0000142C F20F58C1                        addsd xmm0, xmm1
  2072 00001430 E8AD0A0000                      call make_real
  2073 00001435 C9                              leave
  2074 00001436 C22000                          ret AND_KILL_FRAME(2)
  2075                                  
  2076                                  L_code_ptr_raw_bin_sub_rr:
  2077 00001439 C8000000                        enter 0, 0
  2078 0000143D 48837D1802                      cmp COUNT, 2
  2079 00001442 0F85980B0000                    jne L_error_arg_count_2
  2080 00001448 488B5D20                        mov rbx, PARAM(0)
  2081                                          assert_real(rbx)
    53 0000144C 803B13              <1>  cmp byte [%1], %2
    54 0000144F 0F852A0C0000        <1>  jne L_error_incorrect_type
  2082 00001455 488B4D28                        mov rcx, PARAM(1)
  2083                                          assert_real(rcx)
    53 00001459 803913              <1>  cmp byte [%1], %2
    54 0000145C 0F851D0C0000        <1>  jne L_error_incorrect_type
  2084 00001462 F20F104301                      movsd xmm0, qword [rbx + 1]
  2085 00001467 F20F104901                      movsd xmm1, qword [rcx + 1]
  2086 0000146C F20F5CC1                        subsd xmm0, xmm1
  2087 00001470 E86D0A0000                      call make_real
  2088 00001475 C9                              leave
  2089 00001476 C22000                          ret AND_KILL_FRAME(2)
  2090                                  
  2091                                  L_code_ptr_raw_bin_mul_rr:
  2092 00001479 C8000000                        enter 0, 0
  2093 0000147D 48837D1802                      cmp COUNT, 2
  2094 00001482 0F85580B0000                    jne L_error_arg_count_2
  2095 00001488 488B5D20                        mov rbx, PARAM(0)
  2096                                          assert_real(rbx)
    53 0000148C 803B13              <1>  cmp byte [%1], %2
    54 0000148F 0F85EA0B0000        <1>  jne L_error_incorrect_type
  2097 00001495 488B4D28                        mov rcx, PARAM(1)
  2098                                          assert_real(rcx)
    53 00001499 803913              <1>  cmp byte [%1], %2
    54 0000149C 0F85DD0B0000        <1>  jne L_error_incorrect_type
  2099 000014A2 F20F104301                      movsd xmm0, qword [rbx + 1]
  2100 000014A7 F20F104901                      movsd xmm1, qword [rcx + 1]
  2101 000014AC F20F59C1                        mulsd xmm0, xmm1
  2102 000014B0 E82D0A0000                      call make_real
  2103 000014B5 C9                              leave
  2104 000014B6 C22000                          ret AND_KILL_FRAME(2)
  2105                                  
  2106                                  L_code_ptr_raw_bin_div_rr:
  2107 000014B9 C8000000                        enter 0, 0
  2108 000014BD 48837D1802                      cmp COUNT, 2
  2109 000014C2 0F85180B0000                    jne L_error_arg_count_2
  2110 000014C8 488B5D20                        mov rbx, PARAM(0)
  2111                                          assert_real(rbx)
    53 000014CC 803B13              <1>  cmp byte [%1], %2
    54 000014CF 0F85AA0B0000        <1>  jne L_error_incorrect_type
  2112 000014D5 488B4D28                        mov rcx, PARAM(1)
  2113                                          assert_real(rcx)
    53 000014D9 803913              <1>  cmp byte [%1], %2
    54 000014DC 0F859D0B0000        <1>  jne L_error_incorrect_type
  2114 000014E2 F20F104301                      movsd xmm0, qword [rbx + 1]
  2115 000014E7 F20F104901                      movsd xmm1, qword [rcx + 1]
  2116 000014EC 660FEFD2                        pxor xmm2, xmm2
  2117 000014F0 660F2ECA                        ucomisd xmm1, xmm2
  2118 000014F4 0F84B60B0000                    je L_error_division_by_zero
  2119 000014FA F20F5EC1                        divsd xmm0, xmm1
  2120 000014FE E8DF090000                      call make_real
  2121 00001503 C9                              leave
  2122 00001504 C22000                          ret AND_KILL_FRAME(2)
  2123                                  
  2124                                  L_code_ptr_raw_bin_add_zz:
  2125 00001507 C8000000                	enter 0, 0
  2126 0000150B 48837D1802              	cmp COUNT, 2
  2127 00001510 0F85CA0A0000            	jne L_error_arg_count_2
  2128 00001516 4C8B4520                	mov r8, PARAM(0)
  2129                                  	assert_integer(r8)
    53 0000151A 41803811            <1>  cmp byte [%1], %2
    54 0000151E 0F855B0B0000        <1>  jne L_error_incorrect_type
  2130 00001524 4C8B4D28                	mov r9, PARAM(1)
  2131                                  	assert_integer(r9)
    53 00001528 41803911            <1>  cmp byte [%1], %2
    54 0000152C 0F854D0B0000        <1>  jne L_error_incorrect_type
  2132 00001532 498B7801                	mov rdi, qword [r8 + 1]
  2133 00001536 49037901                	add rdi, qword [r9 + 1]
  2134 0000153A E8BB090000              	call make_integer
  2135 0000153F C9                      	leave
  2136 00001540 C22000                  	ret AND_KILL_FRAME(2)
  2137                                  
  2138                                  L_code_ptr_raw_bin_add_qq:
  2139 00001543 C8000000                        enter 0, 0
  2140 00001547 48837D1802                      cmp COUNT, 2
  2141 0000154C 0F858E0A0000                    jne L_error_arg_count_2
  2142 00001552 4C8B4520                        mov r8, PARAM(0)
  2143                                          assert_fraction(r8)
    53 00001556 41803812            <1>  cmp byte [%1], %2
    54 0000155A 0F851F0B0000        <1>  jne L_error_incorrect_type
  2144 00001560 4C8B4D28                        mov r9, PARAM(1)
  2145                                          assert_fraction(r9)
    53 00001564 41803912            <1>  cmp byte [%1], %2
    54 00001568 0F85110B0000        <1>  jne L_error_incorrect_type
  2146 0000156E 498B4001                        mov rax, qword [r8 + 1] ; num1
  2147 00001572 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2148 00001576 4899                            cqo
  2149 00001578 48F7EB                          imul rbx
  2150 0000157B 4889C6                          mov rsi, rax
  2151 0000157E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2152 00001582 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2153 00001586 4899                            cqo
  2154 00001588 48F7EB                          imul rbx
  2155 0000158B 4801C6                          add rsi, rax
  2156 0000158E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2157 00001592 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2158 00001596 4899                            cqo
  2159 00001598 48F7EB                          imul rbx
  2160 0000159B 4889C7                          mov rdi, rax
  2161 0000159E E8DE010000                      call normalize_fraction
  2162 000015A3 C9                              leave
  2163 000015A4 C22000                          ret AND_KILL_FRAME(2)
  2164                                  
  2165                                  L_code_ptr_raw_bin_sub_zz:
  2166 000015A7 C8000000                	enter 0, 0
  2167 000015AB 48837D1802              	cmp COUNT, 2
  2168 000015B0 0F852A0A0000            	jne L_error_arg_count_2
  2169 000015B6 4C8B4520                	mov r8, PARAM(0)
  2170                                  	assert_integer(r8)
    53 000015BA 41803811            <1>  cmp byte [%1], %2
    54 000015BE 0F85BB0A0000        <1>  jne L_error_incorrect_type
  2171 000015C4 4C8B4D28                	mov r9, PARAM(1)
  2172                                  	assert_integer(r9)
    53 000015C8 41803911            <1>  cmp byte [%1], %2
    54 000015CC 0F85AD0A0000        <1>  jne L_error_incorrect_type
  2173 000015D2 498B7801                	mov rdi, qword [r8 + 1]
  2174 000015D6 492B7901                	sub rdi, qword [r9 + 1]
  2175 000015DA E81B090000              	call make_integer
  2176 000015DF C9                      	leave
  2177 000015E0 C22000                  	ret AND_KILL_FRAME(2)
  2178                                  
  2179                                  L_code_ptr_raw_bin_sub_qq:
  2180 000015E3 C8000000                        enter 0, 0
  2181 000015E7 48837D1802                      cmp COUNT, 2
  2182 000015EC 0F85EE090000                    jne L_error_arg_count_2
  2183 000015F2 4C8B4520                        mov r8, PARAM(0)
  2184                                          assert_fraction(r8)
    53 000015F6 41803812            <1>  cmp byte [%1], %2
    54 000015FA 0F857F0A0000        <1>  jne L_error_incorrect_type
  2185 00001600 4C8B4D28                        mov r9, PARAM(1)
  2186                                          assert_fraction(r9)
    53 00001604 41803912            <1>  cmp byte [%1], %2
    54 00001608 0F85710A0000        <1>  jne L_error_incorrect_type
  2187 0000160E 498B4001                        mov rax, qword [r8 + 1] ; num1
  2188 00001612 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2189 00001616 4899                            cqo
  2190 00001618 48F7EB                          imul rbx
  2191 0000161B 4889C6                          mov rsi, rax
  2192 0000161E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2193 00001622 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2194 00001626 4899                            cqo
  2195 00001628 48F7EB                          imul rbx
  2196 0000162B 4829C6                          sub rsi, rax
  2197 0000162E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2198 00001632 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2199 00001636 4899                            cqo
  2200 00001638 48F7EB                          imul rbx
  2201 0000163B 4889C7                          mov rdi, rax
  2202 0000163E E83E010000                      call normalize_fraction
  2203 00001643 C9                              leave
  2204 00001644 C22000                          ret AND_KILL_FRAME(2)
  2205                                  
  2206                                  L_code_ptr_raw_bin_mul_zz:
  2207 00001647 C8000000                	enter 0, 0
  2208 0000164B 48837D1802              	cmp COUNT, 2
  2209 00001650 0F858A090000            	jne L_error_arg_count_2
  2210 00001656 4C8B4520                	mov r8, PARAM(0)
  2211                                  	assert_integer(r8)
    53 0000165A 41803811            <1>  cmp byte [%1], %2
    54 0000165E 0F851B0A0000        <1>  jne L_error_incorrect_type
  2212 00001664 4C8B4D28                	mov r9, PARAM(1)
  2213                                  	assert_integer(r9)
    53 00001668 41803911            <1>  cmp byte [%1], %2
    54 0000166C 0F850D0A0000        <1>  jne L_error_incorrect_type
  2214 00001672 4899                    	cqo
  2215 00001674 498B4001                	mov rax, qword [r8 + 1]
  2216 00001678 49F76101                	mul qword [r9 + 1]
  2217 0000167C 4889C7                  	mov rdi, rax
  2218 0000167F E876080000              	call make_integer
  2219 00001684 C9                      	leave
  2220 00001685 C22000                  	ret AND_KILL_FRAME(2)
  2221                                  
  2222                                  L_code_ptr_raw_bin_mul_qq:
  2223 00001688 C8000000                        enter 0, 0
  2224 0000168C 48837D1802                      cmp COUNT, 2
  2225 00001691 0F8549090000                    jne L_error_arg_count_2
  2226 00001697 4C8B4520                        mov r8, PARAM(0)
  2227                                          assert_fraction(r8)
    53 0000169B 41803812            <1>  cmp byte [%1], %2
    54 0000169F 0F85DA090000        <1>  jne L_error_incorrect_type
  2228 000016A5 4C8B4D28                        mov r9, PARAM(1)
  2229                                          assert_fraction(r9)
    53 000016A9 41803912            <1>  cmp byte [%1], %2
    54 000016AD 0F85CC090000        <1>  jne L_error_incorrect_type
  2230 000016B3 498B4001                        mov rax, qword [r8 + 1] ; num1
  2231 000016B7 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2232 000016BB 4899                            cqo
  2233 000016BD 48F7EB                          imul rbx
  2234 000016C0 4889C6                          mov rsi, rax
  2235 000016C3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2236 000016C7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2237 000016CB 4899                            cqo
  2238 000016CD 48F7EB                          imul rbx
  2239 000016D0 4889C7                          mov rdi, rax
  2240 000016D3 E8A9000000                      call normalize_fraction
  2241 000016D8 C9                              leave
  2242 000016D9 C22000                          ret AND_KILL_FRAME(2)
  2243                                          
  2244                                  L_code_ptr_raw_bin_div_zz:
  2245 000016DC C8000000                	enter 0, 0
  2246 000016E0 48837D1802              	cmp COUNT, 2
  2247 000016E5 0F85F5080000            	jne L_error_arg_count_2
  2248 000016EB 4C8B4520                	mov r8, PARAM(0)
  2249                                  	assert_integer(r8)
    53 000016EF 41803811            <1>  cmp byte [%1], %2
    54 000016F3 0F8586090000        <1>  jne L_error_incorrect_type
  2250 000016F9 4C8B4D28                	mov r9, PARAM(1)
  2251                                  	assert_integer(r9)
    53 000016FD 41803911            <1>  cmp byte [%1], %2
    54 00001701 0F8578090000        <1>  jne L_error_incorrect_type
  2252 00001707 498B7901                	mov rdi, qword [r9 + 1]
  2253 0000170B 4883FF00                	cmp rdi, 0
  2254 0000170F 0F849B090000            	je L_error_division_by_zero
  2255 00001715 498B7001                	mov rsi, qword [r8 + 1]
  2256 00001719 E863000000              	call normalize_fraction
  2257 0000171E C9                      	leave
  2258 0000171F C22000                  	ret AND_KILL_FRAME(2)
  2259                                  
  2260                                  L_code_ptr_raw_bin_div_qq:
  2261 00001722 C8000000                        enter 0, 0
  2262 00001726 48837D1802                      cmp COUNT, 2
  2263 0000172B 0F85AF080000                    jne L_error_arg_count_2
  2264 00001731 4C8B4520                        mov r8, PARAM(0)
  2265                                          assert_fraction(r8)
    53 00001735 41803812            <1>  cmp byte [%1], %2
    54 00001739 0F8540090000        <1>  jne L_error_incorrect_type
  2266 0000173F 4C8B4D28                        mov r9, PARAM(1)
  2267                                          assert_fraction(r9)
    53 00001743 41803912            <1>  cmp byte [%1], %2
    54 00001747 0F8532090000        <1>  jne L_error_incorrect_type
  2268 0000174D 4983790100                      cmp qword [r9 + 1], 0
  2269 00001752 0F8458090000                    je L_error_division_by_zero
  2270 00001758 498B4001                        mov rax, qword [r8 + 1] ; num1
  2271 0000175C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2272 00001760 4899                            cqo
  2273 00001762 48F7EB                          imul rbx
  2274 00001765 4889C6                          mov rsi, rax
  2275 00001768 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2276 0000176C 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2277 00001770 4899                            cqo
  2278 00001772 48F7EB                          imul rbx
  2279 00001775 4889C7                          mov rdi, rax
  2280 00001778 E804000000                      call normalize_fraction
  2281 0000177D C9                              leave
  2282 0000177E C22000                          ret AND_KILL_FRAME(2)
  2283                                          
  2284                                  normalize_fraction:
  2285 00001781 56                              push rsi
  2286 00001782 57                              push rdi
  2287 00001783 E859000000                      call gcd
  2288 00001788 4889C3                          mov rbx, rax
  2289 0000178B 58                              pop rax
  2290 0000178C 4899                            cqo
  2291 0000178E 48F7FB                          idiv rbx
  2292 00001791 4989C0                          mov r8, rax
  2293 00001794 58                              pop rax
  2294 00001795 4899                            cqo
  2295 00001797 48F7FB                          idiv rbx
  2296 0000179A 4989C1                          mov r9, rax
  2297 0000179D 4983F900                        cmp r9, 0
  2298 000017A1 741C                            je .L_zero
  2299 000017A3 4983F801                        cmp r8, 1
  2300 000017A7 7421                            je .L_int
  2301 000017A9 BF11000000                      mov rdi, (1 + 8 + 8)
  2302 000017AE E838EBFFFF                      call malloc
  2303 000017B3 C60012                          mov byte [rax], T_fraction
  2304 000017B6 4C894801                        mov qword [rax + 1], r9
  2305 000017BA 4C894009                        mov qword [rax + 1 + 8], r8
  2306 000017BE C3                              ret
  2307                                  .L_zero:
  2308 000017BF BF00000000                      mov rdi, 0
  2309 000017C4 E831070000                      call make_integer
  2310 000017C9 C3                              ret
  2311                                  .L_int:
  2312 000017CA 4C89CF                          mov rdi, r9
  2313 000017CD E828070000                      call make_integer
  2314 000017D2 C3                              ret
  2315                                  
  2316                                  iabs:
  2317 000017D3 4889F8                          mov rax, rdi
  2318 000017D6 4883F800                        cmp rax, 0
  2319 000017DA 7C01                            jl .Lneg
  2320 000017DC C3                              ret
  2321                                  .Lneg:
  2322 000017DD 48F7D8                          neg rax
  2323 000017E0 C3                              ret
  2324                                  
  2325                                  gcd:
  2326 000017E1 E8EDFFFFFF                      call iabs
  2327 000017E6 4889C3                          mov rbx, rax
  2328 000017E9 4889F7                          mov rdi, rsi
  2329 000017EC E8E2FFFFFF                      call iabs
  2330 000017F1 4883F800                        cmp rax, 0
  2331 000017F5 7502                            jne .L0
  2332 000017F7 4893                            xchg rax, rbx
  2333                                  .L0:
  2334 000017F9 4883FB00                        cmp rbx, 0
  2335 000017FD 740C                            je .L1
  2336 000017FF 4899                            cqo
  2337 00001801 48F7F3                          div rbx
  2338 00001804 4889D0                          mov rax, rdx
  2339 00001807 4893                            xchg rax, rbx
  2340 00001809 EBEE                            jmp .L0
  2341                                  .L1:
  2342 0000180B C3                              ret
  2343                                  
  2344                                  L_code_ptr_error:
  2345 0000180C C8000000                        enter 0, 0
  2346 00001810 48837D1802                      cmp COUNT, 2
  2347 00001815 0F85C5070000                    jne L_error_arg_count_2
  2348 0000181B 488B7520                        mov rsi, PARAM(0)
  2349                                          assert_interned_symbol(rsi)
    53 0000181F 803E41              <1>  cmp byte [%1], %2
    54 00001822 0F8557080000        <1>  jne L_error_incorrect_type
  2350 00001828 488B7528                        mov rsi, PARAM(1)
  2351                                          assert_string(rsi)
    53 0000182C 803E03              <1>  cmp byte [%1], %2
    54 0000182F 0F854A080000        <1>  jne L_error_incorrect_type
  2352 00001835 48BF-                           mov rdi, fmt_scheme_error_part_1
  2352 00001837 [510A000000000000] 
  2353 0000183F B800000000                      mov rax, 0
  2354                                          ENTER
    44 00001844 C8000000            <1>  enter 0, 0
    45 00001848 4883E4F0            <1>  and rsp, ~15
  2355 0000184C E8(00000000)                    call printf
  2356                                          LEAVE
    49 00001851 C9                  <1>  leave
  2357 00001852 488B7D20                        mov rdi, PARAM(0)
  2358 00001856 E811EDFFFF                      call print_sexpr
  2359 0000185B 48BF-                           mov rdi, fmt_scheme_error_part_2
  2359 0000185D [650A000000000000] 
  2360 00001865 B800000000                      mov rax, 0
  2361                                          ENTER
    44 0000186A C8000000            <1>  enter 0, 0
    45 0000186E 4883E4F0            <1>  and rsp, ~15
  2362 00001872 E8(00000000)                    call printf
  2363                                          LEAVE
    49 00001877 C9                  <1>  leave
  2364 00001878 488B4528                        mov rax, PARAM(1)       ; sob_string
  2365 0000187C BE01000000                      mov rsi, 1              ; size = 1 byte
  2366 00001881 488B5001                        mov rdx, qword [rax + 1] ; length
  2367 00001885 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2368 00001889 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2369                                  	ENTER
    44 00001891 C8000000            <1>  enter 0, 0
    45 00001895 4883E4F0            <1>  and rsp, ~15
  2370 00001899 E8(00000000)                    call fwrite
  2371                                  	LEAVE
    49 0000189E C9                  <1>  leave
  2372 0000189F 48BF-                           mov rdi, fmt_scheme_error_part_3
  2372 000018A1 [A70A000000000000] 
  2373 000018A9 B800000000                      mov rax, 0
  2374                                          ENTER
    44 000018AE C8000000            <1>  enter 0, 0
    45 000018B2 4883E4F0            <1>  and rsp, ~15
  2375 000018B6 E8(00000000)                    call printf
  2376                                          LEAVE
    49 000018BB C9                  <1>  leave
  2377 000018BC 48C7C0F7FFFFFF                  mov rax, -9
  2378 000018C3 E8(00000000)                    call exit
  2379                                  
  2380                                  L_code_ptr_raw_less_than_rr:
  2381 000018C8 C8000000                        enter 0, 0
  2382 000018CC 48837D1802                      cmp COUNT, 2
  2383 000018D1 0F8509070000                    jne L_error_arg_count_2
  2384 000018D7 488B7520                        mov rsi, PARAM(0)
  2385                                          assert_real(rsi)
    53 000018DB 803E13              <1>  cmp byte [%1], %2
    54 000018DE 0F859B070000        <1>  jne L_error_incorrect_type
  2386 000018E4 488B7D28                        mov rdi, PARAM(1)
  2387                                          assert_real(rdi)
    53 000018E8 803F13              <1>  cmp byte [%1], %2
    54 000018EB 0F858E070000        <1>  jne L_error_incorrect_type
  2388 000018F1 F20F104601                      movsd xmm0, qword [rsi + 1]
  2389 000018F6 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2390 000018FB 660F2FC1                        comisd xmm0, xmm1
  2391 000018FF 730C                            jae .L_false
  2392 00001901 48B8-                           mov rax, sob_boolean_true
  2392 00001903 [0300000000000000] 
  2393 0000190B EB0A                            jmp .L_exit
  2394                                  .L_false:
  2395 0000190D 48B8-                           mov rax, sob_boolean_false
  2395 0000190F [0200000000000000] 
  2396                                  .L_exit:
  2397 00001917 C9                              leave
  2398 00001918 C22000                          ret AND_KILL_FRAME(2)
  2399                                          
  2400                                  L_code_ptr_raw_less_than_zz:
  2401 0000191B C8000000                	enter 0, 0
  2402 0000191F 48837D1802              	cmp COUNT, 2
  2403 00001924 0F85B6060000            	jne L_error_arg_count_2
  2404 0000192A 4C8B4520                	mov r8, PARAM(0)
  2405                                  	assert_integer(r8)
    53 0000192E 41803811            <1>  cmp byte [%1], %2
    54 00001932 0F8547070000        <1>  jne L_error_incorrect_type
  2406 00001938 4C8B4D28                	mov r9, PARAM(1)
  2407                                  	assert_integer(r9)
    53 0000193C 41803911            <1>  cmp byte [%1], %2
    54 00001940 0F8539070000        <1>  jne L_error_incorrect_type
  2408 00001946 498B7801                	mov rdi, qword [r8 + 1]
  2409 0000194A 493B7901                	cmp rdi, qword [r9 + 1]
  2410 0000194E 7D0C                    	jge .L_false
  2411 00001950 48B8-                   	mov rax, sob_boolean_true
  2411 00001952 [0300000000000000] 
  2412 0000195A EB0A                    	jmp .L_exit
  2413                                  .L_false:
  2414 0000195C 48B8-                   	mov rax, sob_boolean_false
  2414 0000195E [0200000000000000] 
  2415                                  .L_exit:
  2416 00001966 C9                      	leave
  2417 00001967 C22000                  	ret AND_KILL_FRAME(2)
  2418                                  
  2419                                  L_code_ptr_raw_less_than_qq:
  2420 0000196A C8000000                        enter 0, 0
  2421 0000196E 48837D1802                      cmp COUNT, 2
  2422 00001973 0F8567060000                    jne L_error_arg_count_2
  2423 00001979 488B7520                        mov rsi, PARAM(0)
  2424                                          assert_fraction(rsi)
    53 0000197D 803E12              <1>  cmp byte [%1], %2
    54 00001980 0F85F9060000        <1>  jne L_error_incorrect_type
  2425 00001986 488B7D28                        mov rdi, PARAM(1)
  2426                                          assert_fraction(rdi)
    53 0000198A 803F12              <1>  cmp byte [%1], %2
    54 0000198D 0F85EC060000        <1>  jne L_error_incorrect_type
  2427 00001993 488B4601                        mov rax, qword [rsi + 1] ; num1
  2428 00001997 4899                            cqo
  2429 00001999 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2430 0000199D 4889C1                          mov rcx, rax
  2431 000019A0 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2432 000019A4 4899                            cqo
  2433 000019A6 48F76F01                        imul qword [rdi + 1]          ; num2
  2434 000019AA 4829C1                          sub rcx, rax
  2435 000019AD 7D0C                            jge .L_false
  2436 000019AF 48B8-                           mov rax, sob_boolean_true
  2436 000019B1 [0300000000000000] 
  2437 000019B9 EB0A                            jmp .L_exit
  2438                                  .L_false:
  2439 000019BB 48B8-                           mov rax, sob_boolean_false
  2439 000019BD [0200000000000000] 
  2440                                  .L_exit:
  2441 000019C5 C9                              leave
  2442 000019C6 C22000                          ret AND_KILL_FRAME(2)
  2443                                  
  2444                                  L_code_ptr_raw_equal_rr:
  2445 000019C9 C8000000                        enter 0, 0
  2446 000019CD 48837D1802                      cmp COUNT, 2
  2447 000019D2 0F8508060000                    jne L_error_arg_count_2
  2448 000019D8 488B7520                        mov rsi, PARAM(0)
  2449                                          assert_real(rsi)
    53 000019DC 803E13              <1>  cmp byte [%1], %2
    54 000019DF 0F859A060000        <1>  jne L_error_incorrect_type
  2450 000019E5 488B7D28                        mov rdi, PARAM(1)
  2451                                          assert_real(rdi)
    53 000019E9 803F13              <1>  cmp byte [%1], %2
    54 000019EC 0F858D060000        <1>  jne L_error_incorrect_type
  2452 000019F2 F20F104601                      movsd xmm0, qword [rsi + 1]
  2453 000019F7 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2454 000019FC 660F2FC1                        comisd xmm0, xmm1
  2455 00001A00 750C                            jne .L_false
  2456 00001A02 48B8-                           mov rax, sob_boolean_true
  2456 00001A04 [0300000000000000] 
  2457 00001A0C EB0A                            jmp .L_exit
  2458                                  .L_false:
  2459 00001A0E 48B8-                           mov rax, sob_boolean_false
  2459 00001A10 [0200000000000000] 
  2460                                  .L_exit:
  2461 00001A18 C9                              leave
  2462 00001A19 C22000                          ret AND_KILL_FRAME(2)
  2463                                          
  2464                                  L_code_ptr_raw_equal_zz:
  2465 00001A1C C8000000                	enter 0, 0
  2466 00001A20 48837D1802              	cmp COUNT, 2
  2467 00001A25 0F85B5050000            	jne L_error_arg_count_2
  2468 00001A2B 4C8B4520                	mov r8, PARAM(0)
  2469                                  	assert_integer(r8)
    53 00001A2F 41803811            <1>  cmp byte [%1], %2
    54 00001A33 0F8546060000        <1>  jne L_error_incorrect_type
  2470 00001A39 4C8B4D28                	mov r9, PARAM(1)
  2471                                  	assert_integer(r9)
    53 00001A3D 41803911            <1>  cmp byte [%1], %2
    54 00001A41 0F8538060000        <1>  jne L_error_incorrect_type
  2472 00001A47 498B7801                	mov rdi, qword [r8 + 1]
  2473 00001A4B 493B7901                	cmp rdi, qword [r9 + 1]
  2474 00001A4F 750C                    	jne .L_false
  2475 00001A51 48B8-                   	mov rax, sob_boolean_true
  2475 00001A53 [0300000000000000] 
  2476 00001A5B EB0A                    	jmp .L_exit
  2477                                  .L_false:
  2478 00001A5D 48B8-                   	mov rax, sob_boolean_false
  2478 00001A5F [0200000000000000] 
  2479                                  .L_exit:
  2480 00001A67 C9                      	leave
  2481 00001A68 C22000                  	ret AND_KILL_FRAME(2)
  2482                                          
  2483                                  L_code_ptr_raw_equal_qq:
  2484 00001A6B C8000000                        enter 0, 0
  2485 00001A6F 48837D1802                      cmp COUNT, 2
  2486 00001A74 0F8566050000                    jne L_error_arg_count_2
  2487 00001A7A 488B7520                        mov rsi, PARAM(0)
  2488                                          assert_fraction(rsi)
    53 00001A7E 803E12              <1>  cmp byte [%1], %2
    54 00001A81 0F85F8050000        <1>  jne L_error_incorrect_type
  2489 00001A87 488B7D28                        mov rdi, PARAM(1)
  2490                                          assert_fraction(rdi)
    53 00001A8B 803F12              <1>  cmp byte [%1], %2
    54 00001A8E 0F85EB050000        <1>  jne L_error_incorrect_type
  2491 00001A94 488B4601                        mov rax, qword [rsi + 1] ; num1
  2492 00001A98 4899                            cqo
  2493 00001A9A 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2494 00001A9E 4889C1                          mov rcx, rax
  2495 00001AA1 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2496 00001AA5 4899                            cqo
  2497 00001AA7 48F76F01                        imul qword [rdi + 1]          ; num2
  2498 00001AAB 4829C1                          sub rcx, rax
  2499 00001AAE 750C                            jne .L_false
  2500 00001AB0 48B8-                           mov rax, sob_boolean_true
  2500 00001AB2 [0300000000000000] 
  2501 00001ABA EB0A                            jmp .L_exit
  2502                                  .L_false:
  2503 00001ABC 48B8-                           mov rax, sob_boolean_false
  2503 00001ABE [0200000000000000] 
  2504                                  .L_exit:
  2505 00001AC6 C9                              leave
  2506 00001AC7 C22000                          ret AND_KILL_FRAME(2)
  2507                                  
  2508                                  L_code_ptr_quotient:
  2509 00001ACA C8000000                        enter 0, 0
  2510 00001ACE 48837D1802                      cmp COUNT, 2
  2511 00001AD3 0F8507050000                    jne L_error_arg_count_2
  2512 00001AD9 488B7520                        mov rsi, PARAM(0)
  2513                                          assert_integer(rsi)
    53 00001ADD 803E11              <1>  cmp byte [%1], %2
    54 00001AE0 0F8599050000        <1>  jne L_error_incorrect_type
  2514 00001AE6 488B7D28                        mov rdi, PARAM(1)
  2515                                          assert_integer(rdi)
    53 00001AEA 803F11              <1>  cmp byte [%1], %2
    54 00001AED 0F858C050000        <1>  jne L_error_incorrect_type
  2516 00001AF3 488B4601                        mov rax, qword [rsi + 1]
  2517 00001AF7 488B5F01                        mov rbx, qword [rdi + 1]
  2518 00001AFB 4883FB00                        cmp rbx, 0
  2519 00001AFF 0F84AB050000                    je L_error_division_by_zero
  2520 00001B05 4899                            cqo
  2521 00001B07 48F7FB                          idiv rbx
  2522 00001B0A 4889C7                          mov rdi, rax
  2523 00001B0D E8E8030000                      call make_integer
  2524 00001B12 C9                              leave
  2525 00001B13 C22000                          ret AND_KILL_FRAME(2)
  2526                                          
  2527                                  L_code_ptr_remainder:
  2528 00001B16 C8000000                        enter 0, 0
  2529 00001B1A 48837D1802                      cmp COUNT, 2
  2530 00001B1F 0F85BB040000                    jne L_error_arg_count_2
  2531 00001B25 488B7520                        mov rsi, PARAM(0)
  2532                                          assert_integer(rsi)
    53 00001B29 803E11              <1>  cmp byte [%1], %2
    54 00001B2C 0F854D050000        <1>  jne L_error_incorrect_type
  2533 00001B32 488B7D28                        mov rdi, PARAM(1)
  2534                                          assert_integer(rdi)
    53 00001B36 803F11              <1>  cmp byte [%1], %2
    54 00001B39 0F8540050000        <1>  jne L_error_incorrect_type
  2535 00001B3F 488B4601                        mov rax, qword [rsi + 1]
  2536 00001B43 488B5F01                        mov rbx, qword [rdi + 1]
  2537 00001B47 4883FB00                        cmp rbx, 0
  2538 00001B4B 0F845F050000                    je L_error_division_by_zero
  2539 00001B51 4899                            cqo
  2540 00001B53 48F7FB                          idiv rbx
  2541 00001B56 4889D7                          mov rdi, rdx
  2542 00001B59 E89C030000                      call make_integer
  2543 00001B5E C9                              leave
  2544 00001B5F C22000                          ret AND_KILL_FRAME(2)
  2545                                  
  2546                                  L_code_ptr_set_car:
  2547 00001B62 C8000000                        enter 0, 0
  2548 00001B66 48837D1802                      cmp COUNT, 2
  2549 00001B6B 0F856F040000                    jne L_error_arg_count_2
  2550 00001B71 488B4520                        mov rax, PARAM(0)
  2551                                          assert_pair(rax)
    53 00001B75 803821              <1>  cmp byte [%1], %2
    54 00001B78 0F8501050000        <1>  jne L_error_incorrect_type
  2552 00001B7E 488B5D28                        mov rbx, PARAM(1)
  2553 00001B82 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2554 00001B86 48B8-                           mov rax, sob_void
  2554 00001B88 [0000000000000000] 
  2555 00001B90 C9                              leave
  2556 00001B91 C22000                          ret AND_KILL_FRAME(2)
  2557                                  
  2558                                  L_code_ptr_set_cdr:
  2559 00001B94 C8000000                        enter 0, 0
  2560 00001B98 48837D1802                      cmp COUNT, 2
  2561 00001B9D 0F853D040000                    jne L_error_arg_count_2
  2562 00001BA3 488B4520                        mov rax, PARAM(0)
  2563                                          assert_pair(rax)
    53 00001BA7 803821              <1>  cmp byte [%1], %2
    54 00001BAA 0F85CF040000        <1>  jne L_error_incorrect_type
  2564 00001BB0 488B5D28                        mov rbx, PARAM(1)
  2565 00001BB4 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2566 00001BB8 48B8-                           mov rax, sob_void
  2566 00001BBA [0000000000000000] 
  2567 00001BC2 C9                              leave
  2568 00001BC3 C22000                          ret AND_KILL_FRAME(2)
  2569                                  
  2570                                  L_code_ptr_string_ref:
  2571 00001BC6 C8000000                        enter 0, 0
  2572 00001BCA 48837D1802                      cmp COUNT, 2
  2573 00001BCF 0F850B040000                    jne L_error_arg_count_2
  2574 00001BD5 488B7D20                        mov rdi, PARAM(0)
  2575                                          assert_string(rdi)
    53 00001BD9 803F03              <1>  cmp byte [%1], %2
    54 00001BDC 0F859D040000        <1>  jne L_error_incorrect_type
  2576 00001BE2 488B7528                        mov rsi, PARAM(1)
  2577                                          assert_integer(rsi)
    53 00001BE6 803E11              <1>  cmp byte [%1], %2
    54 00001BE9 0F8590040000        <1>  jne L_error_incorrect_type
  2578 00001BEF 488B5701                        mov rdx, qword [rdi + 1]
  2579 00001BF3 488B4E01                        mov rcx, qword [rsi + 1]
  2580 00001BF7 4839D1                          cmp rcx, rdx
  2581 00001BFA 0F8D14030000                    jge L_error_integer_range
  2582 00001C00 4883F900                        cmp rcx, 0
  2583 00001C04 0F8C0A030000                    jl L_error_integer_range
  2584 00001C0A 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2585 00001C0E BF02000000                      mov rdi, 2
  2586 00001C13 E8D3E6FFFF                      call malloc
  2587 00001C18 C60002                          mov byte [rax], T_char
  2588 00001C1B 885801                          mov byte [rax + 1], bl
  2589 00001C1E C9                              leave
  2590 00001C1F C22000                          ret AND_KILL_FRAME(2)
  2591                                  
  2592                                  L_code_ptr_vector_ref:
  2593 00001C22 C8000000                        enter 0, 0
  2594 00001C26 48837D1802                      cmp COUNT, 2
  2595 00001C2B 0F85AF030000                    jne L_error_arg_count_2
  2596 00001C31 488B7D20                        mov rdi, PARAM(0)
  2597                                          assert_vector(rdi)
    53 00001C35 803F22              <1>  cmp byte [%1], %2
    54 00001C38 0F8541040000        <1>  jne L_error_incorrect_type
  2598 00001C3E 488B7528                        mov rsi, PARAM(1)
  2599                                          assert_integer(rsi)
    53 00001C42 803E11              <1>  cmp byte [%1], %2
    54 00001C45 0F8534040000        <1>  jne L_error_incorrect_type
  2600 00001C4B 488B5701                        mov rdx, qword [rdi + 1]
  2601 00001C4F 488B4E01                        mov rcx, qword [rsi + 1]
  2602 00001C53 4839D1                          cmp rcx, rdx
  2603 00001C56 0F8DB8020000                    jge L_error_integer_range
  2604 00001C5C 4883F900                        cmp rcx, 0
  2605 00001C60 0F8CAE020000                    jl L_error_integer_range
  2606 00001C66 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2607 00001C6B C9                              leave
  2608 00001C6C C22000                          ret AND_KILL_FRAME(2)
  2609                                  
  2610                                  L_code_ptr_vector_set:
  2611 00001C6F C8000000                        enter 0, 0
  2612 00001C73 48837D1803                      cmp COUNT, 3
  2613 00001C78 0F85CC030000                    jne L_error_arg_count_3
  2614 00001C7E 488B7D20                        mov rdi, PARAM(0)
  2615                                          assert_vector(rdi)
    53 00001C82 803F22              <1>  cmp byte [%1], %2
    54 00001C85 0F85F4030000        <1>  jne L_error_incorrect_type
  2616 00001C8B 488B7528                        mov rsi, PARAM(1)
  2617                                          assert_integer(rsi)
    53 00001C8F 803E11              <1>  cmp byte [%1], %2
    54 00001C92 0F85E7030000        <1>  jne L_error_incorrect_type
  2618 00001C98 488B5701                        mov rdx, qword [rdi + 1]
  2619 00001C9C 488B4E01                        mov rcx, qword [rsi + 1]
  2620 00001CA0 4839D1                          cmp rcx, rdx
  2621 00001CA3 0F8D6B020000                    jge L_error_integer_range
  2622 00001CA9 4883F900                        cmp rcx, 0
  2623 00001CAD 0F8C61020000                    jl L_error_integer_range
  2624 00001CB3 488B4530                        mov rax, PARAM(2)
  2625 00001CB7 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2626 00001CBC 48B8-                           mov rax, sob_void
  2626 00001CBE [0000000000000000] 
  2627 00001CC6 C9                              leave
  2628 00001CC7 C22800                          ret AND_KILL_FRAME(3)
  2629                                  
  2630                                  L_code_ptr_string_set:
  2631 00001CCA C8000000                        enter 0, 0
  2632 00001CCE 48837D1803                      cmp COUNT, 3
  2633 00001CD3 0F8571030000                    jne L_error_arg_count_3
  2634 00001CD9 488B7D20                        mov rdi, PARAM(0)
  2635                                          assert_string(rdi)
    53 00001CDD 803F03              <1>  cmp byte [%1], %2
    54 00001CE0 0F8599030000        <1>  jne L_error_incorrect_type
  2636 00001CE6 488B7528                        mov rsi, PARAM(1)
  2637                                          assert_integer(rsi)
    53 00001CEA 803E11              <1>  cmp byte [%1], %2
    54 00001CED 0F858C030000        <1>  jne L_error_incorrect_type
  2638 00001CF3 488B5701                        mov rdx, qword [rdi + 1]
  2639 00001CF7 488B4E01                        mov rcx, qword [rsi + 1]
  2640 00001CFB 4839D1                          cmp rcx, rdx
  2641 00001CFE 0F8D10020000                    jge L_error_integer_range
  2642 00001D04 4883F900                        cmp rcx, 0
  2643 00001D08 0F8C06020000                    jl L_error_integer_range
  2644 00001D0E 488B4530                        mov rax, PARAM(2)
  2645                                          assert_char(rax)
    53 00001D12 803802              <1>  cmp byte [%1], %2
    54 00001D15 0F8564030000        <1>  jne L_error_incorrect_type
  2646 00001D1B 8A4001                          mov al, byte [rax + 1]
  2647 00001D1E 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2648 00001D22 48B8-                           mov rax, sob_void
  2648 00001D24 [0000000000000000] 
  2649 00001D2C C9                              leave
  2650 00001D2D C22800                          ret AND_KILL_FRAME(3)
  2651                                  
  2652                                  L_code_ptr_make_vector:
  2653 00001D30 C8000000                        enter 0, 0
  2654 00001D34 48837D1802                      cmp COUNT, 2
  2655 00001D39 0F85A1020000                    jne L_error_arg_count_2
  2656 00001D3F 488B4D20                        mov rcx, PARAM(0)
  2657                                          assert_integer(rcx)
    53 00001D43 803911              <1>  cmp byte [%1], %2
    54 00001D46 0F8533030000        <1>  jne L_error_incorrect_type
  2658 00001D4C 488B4901                        mov rcx, qword [rcx + 1]
  2659 00001D50 4883F900                        cmp rcx, 0
  2660 00001D54 0F8CBA010000                    jl L_error_integer_range
  2661 00001D5A 488B5528                        mov rdx, PARAM(1)
  2662 00001D5E 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2663 00001D66 E880E5FFFF                      call malloc
  2664 00001D6B C60022                          mov byte [rax], T_vector
  2665 00001D6E 48894801                        mov qword [rax + 1], rcx
  2666 00001D72 41B800000000                    mov r8, 0
  2667                                  .L0:
  2668 00001D78 4939C8                          cmp r8, rcx
  2669 00001D7B 740A                            je .L1
  2670 00001D7D 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2671 00001D82 49FFC0                          inc r8
  2672 00001D85 EBF1                            jmp .L0
  2673                                  .L1:
  2674 00001D87 C9                              leave
  2675 00001D88 C22000                          ret AND_KILL_FRAME(2)
  2676                                          
  2677                                  L_code_ptr_make_string:
  2678 00001D8B C8000000                        enter 0, 0
  2679 00001D8F 48837D1802                      cmp COUNT, 2
  2680 00001D94 0F8546020000                    jne L_error_arg_count_2
  2681 00001D9A 488B4D20                        mov rcx, PARAM(0)
  2682                                          assert_integer(rcx)
    53 00001D9E 803911              <1>  cmp byte [%1], %2
    54 00001DA1 0F85D8020000        <1>  jne L_error_incorrect_type
  2683 00001DA7 488B4901                        mov rcx, qword [rcx + 1]
  2684 00001DAB 4883F900                        cmp rcx, 0
  2685 00001DAF 0F8C5F010000                    jl L_error_integer_range
  2686 00001DB5 488B5528                        mov rdx, PARAM(1)
  2687                                          assert_char(rdx)
    53 00001DB9 803A02              <1>  cmp byte [%1], %2
    54 00001DBC 0F85BD020000        <1>  jne L_error_incorrect_type
  2688 00001DC2 8A5201                          mov dl, byte [rdx + 1]
  2689 00001DC5 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2690 00001DC9 E81DE5FFFF                      call malloc
  2691 00001DCE C60003                          mov byte [rax], T_string
  2692 00001DD1 48894801                        mov qword [rax + 1], rcx
  2693 00001DD5 41B800000000                    mov r8, 0
  2694                                  .L0:
  2695 00001DDB 4939C8                          cmp r8, rcx
  2696 00001DDE 740A                            je .L1
  2697 00001DE0 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2698 00001DE5 49FFC0                          inc r8
  2699 00001DE8 EBF1                            jmp .L0
  2700                                  .L1:
  2701 00001DEA C9                              leave
  2702 00001DEB C22000                          ret AND_KILL_FRAME(2)
  2703                                  
  2704                                  L_code_ptr_numerator:
  2705 00001DEE C8000000                        enter 0, 0
  2706 00001DF2 48837D1801                      cmp COUNT, 1
  2707 00001DF7 0F85AE010000                    jne L_error_arg_count_1
  2708 00001DFD 488B4520                        mov rax, PARAM(0)
  2709                                          assert_fraction(rax)
    53 00001E01 803812              <1>  cmp byte [%1], %2
    54 00001E04 0F8575020000        <1>  jne L_error_incorrect_type
  2710 00001E0A 488B7801                        mov rdi, qword [rax + 1]
  2711 00001E0E E8E7000000                      call make_integer
  2712 00001E13 C9                              leave
  2713 00001E14 C21800                          ret AND_KILL_FRAME(1)
  2714                                          
  2715                                  L_code_ptr_denominator:
  2716 00001E17 C8000000                        enter 0, 0
  2717 00001E1B 48837D1801                      cmp COUNT, 1
  2718 00001E20 0F8585010000                    jne L_error_arg_count_1
  2719 00001E26 488B4520                        mov rax, PARAM(0)
  2720                                          assert_fraction(rax)
    53 00001E2A 803812              <1>  cmp byte [%1], %2
    54 00001E2D 0F854C020000        <1>  jne L_error_incorrect_type
  2721 00001E33 488B7809                        mov rdi, qword [rax + 1 + 8]
  2722 00001E37 E8BE000000                      call make_integer
  2723 00001E3C C9                              leave
  2724 00001E3D C21800                          ret AND_KILL_FRAME(1)
  2725                                  
  2726                                  L_code_ptr_is_eq:
  2727 00001E40 C8000000                	enter 0, 0
  2728 00001E44 48837D1802              	cmp COUNT, 2
  2729 00001E49 0F8591010000            	jne L_error_arg_count_2
  2730 00001E4F 488B7D20                	mov rdi, PARAM(0)
  2731 00001E53 488B7528                	mov rsi, PARAM(1)
  2732 00001E57 4839F7                  	cmp rdi, rsi
  2733 00001E5A 746C                    	je .L_eq_true
  2734 00001E5C 8A17                    	mov dl, byte [rdi]
  2735 00001E5E 3A16                    	cmp dl, byte [rsi]
  2736 00001E60 7572                    	jne .L_eq_false
  2737 00001E62 80FA02                  	cmp dl, T_char
  2738 00001E65 7459                    	je .L_char
  2739 00001E67 80FA41                  	cmp dl, T_interned_symbol
  2740 00001E6A 7440                    	je .L_interned_symbol
  2741 00001E6C 80FA42                          cmp dl, T_uninterned_symbol
  2742 00001E6F 7443                            je .L_uninterned_symbol
  2743 00001E71 80FA13                  	cmp dl, T_real
  2744 00001E74 742E                    	je .L_real
  2745 00001E76 80FA12                  	cmp dl, T_fraction
  2746 00001E79 7413                    	je .L_fraction
  2747 00001E7B 80FA11                          cmp dl, T_integer
  2748 00001E7E 7402                            je .L_integer
  2749 00001E80 EB52                    	jmp .L_eq_false
  2750                                  .L_integer:
  2751 00001E82 488B4601                        mov rax, qword [rsi + 1]
  2752 00001E86 483B4701                        cmp rax, qword [rdi + 1]
  2753 00001E8A 7548                            jne .L_eq_false
  2754 00001E8C EB3A                            jmp .L_eq_true
  2755                                  .L_fraction:
  2756 00001E8E 488B4601                	mov rax, qword [rsi + 1]
  2757 00001E92 483B4701                	cmp rax, qword [rdi + 1]
  2758 00001E96 753C                    	jne .L_eq_false
  2759 00001E98 488B4609                	mov rax, qword [rsi + 1 + 8]
  2760 00001E9C 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2761 00001EA0 7532                    	jne .L_eq_false
  2762 00001EA2 EB24                    	jmp .L_eq_true
  2763                                  .L_real:
  2764 00001EA4 488B4601                	mov rax, qword [rsi + 1]
  2765 00001EA8 483B4701                	cmp rax, qword [rdi + 1]
  2766                                  .L_interned_symbol:
  2767                                  	; never reached, because interned_symbols are static!
  2768                                  	; but I'm keeping it in case, I'll ever change
  2769                                  	; the implementation
  2770 00001EAC 488B4601                	mov rax, qword [rsi + 1]
  2771 00001EB0 483B4701                	cmp rax, qword [rdi + 1]
  2772                                  .L_uninterned_symbol:
  2773 00001EB4 4C8B4701                        mov r8, qword [rdi + 1]
  2774 00001EB8 4C3B4601                        cmp r8, qword [rsi + 1]
  2775 00001EBC 7516                            jne .L_eq_false
  2776 00001EBE EB08                            jmp .L_eq_true
  2777                                  .L_char:
  2778 00001EC0 8A5E01                  	mov bl, byte [rsi + 1]
  2779 00001EC3 3A5F01                  	cmp bl, byte [rdi + 1]
  2780 00001EC6 750C                    	jne .L_eq_false
  2781                                  .L_eq_true:
  2782 00001EC8 48B8-                   	mov rax, sob_boolean_true
  2782 00001ECA [0300000000000000] 
  2783 00001ED2 EB0A                    	jmp .L_eq_exit
  2784                                  .L_eq_false:
  2785 00001ED4 48B8-                   	mov rax, sob_boolean_false
  2785 00001ED6 [0200000000000000] 
  2786                                  .L_eq_exit:
  2787 00001EDE C9                      	leave
  2788 00001EDF C22000                  	ret AND_KILL_FRAME(2)
  2789                                  
  2790                                  make_real:
  2791 00001EE2 C8000000                        enter 0, 0
  2792 00001EE6 BF09000000                      mov rdi, (1 + 8)
  2793 00001EEB E8FBE3FFFF                      call malloc
  2794 00001EF0 C60013                          mov byte [rax], T_real
  2795 00001EF3 F20F114001                      movsd qword [rax + 1], xmm0
  2796 00001EF8 C9                              leave 
  2797 00001EF9 C3                              ret
  2798                                          
  2799                                  make_integer:
  2800 00001EFA C8000000                        enter 0, 0
  2801 00001EFE 4889FE                          mov rsi, rdi
  2802 00001F01 BF09000000                      mov rdi, (1 + 8)
  2803 00001F06 E8E0E3FFFF                      call malloc
  2804 00001F0B C60011                          mov byte [rax], T_integer
  2805 00001F0E 48897001                        mov qword [rax + 1], rsi
  2806 00001F12 C9                              leave
  2807 00001F13 C3                              ret
  2808                                          
  2809                                  L_error_integer_range:
  2810 00001F14 488B3C25[00000000]              mov rdi, qword [stderr]
  2811 00001F1C 48BE-                           mov rsi, fmt_integer_range
  2811 00001F1E [1E0A000000000000] 
  2812 00001F26 B800000000                      mov rax, 0
  2813                                          ENTER
    44 00001F2B C8000000            <1>  enter 0, 0
    45 00001F2F 4883E4F0            <1>  and rsp, ~15
  2814 00001F33 E8(00000000)                    call fprintf
  2815                                          LEAVE
    49 00001F38 C9                  <1>  leave
  2816 00001F39 48C7C0FBFFFFFF                  mov rax, -5
  2817 00001F40 E8(00000000)                    call exit
  2818                                  
  2819                                  L_error_arg_negative:
  2820 00001F45 488B3C25[00000000]              mov rdi, qword [stderr]
  2821 00001F4D 48BE-                           mov rsi, fmt_arg_negative
  2821 00001F4F [F608000000000000] 
  2822 00001F57 B800000000                      mov rax, 0
  2823                                          ENTER
    44 00001F5C C8000000            <1>  enter 0, 0
    45 00001F60 4883E4F0            <1>  and rsp, ~15
  2824 00001F64 E8(00000000)                    call fprintf
  2825                                          LEAVE
    49 00001F69 C9                  <1>  leave
  2826 00001F6A 48C7C0FDFFFFFF                  mov rax, -3
  2827 00001F71 E8(00000000)                    call exit
  2828                                  
  2829                                  L_error_arg_count_0:
  2830 00001F76 488B3C25[00000000]              mov rdi, qword [stderr]
  2831 00001F7E 48BE-                           mov rsi, fmt_arg_count_0
  2831 00001F80 [1C09000000000000] 
  2832 00001F88 488B5518                        mov rdx, COUNT
  2833 00001F8C B800000000                      mov rax, 0
  2834                                          ENTER
    44 00001F91 C8000000            <1>  enter 0, 0
    45 00001F95 4883E4F0            <1>  and rsp, ~15
  2835 00001F99 E8(00000000)                    call fprintf
  2836                                          LEAVE
    49 00001F9E C9                  <1>  leave
  2837 00001F9F 48C7C0FDFFFFFF                  mov rax, -3
  2838 00001FA6 E8(00000000)                    call exit
  2839                                  
  2840                                  L_error_arg_count_1:
  2841 00001FAB 488B3C25[00000000]              mov rdi, qword [stderr]
  2842 00001FB3 48BE-                           mov rsi, fmt_arg_count_1
  2842 00001FB5 [4409000000000000] 
  2843 00001FBD 488B5518                        mov rdx, COUNT
  2844 00001FC1 B800000000                      mov rax, 0
  2845                                          ENTER
    44 00001FC6 C8000000            <1>  enter 0, 0
    45 00001FCA 4883E4F0            <1>  and rsp, ~15
  2846 00001FCE E8(00000000)                    call fprintf
  2847                                          LEAVE
    49 00001FD3 C9                  <1>  leave
  2848 00001FD4 48C7C0FDFFFFFF                  mov rax, -3
  2849 00001FDB E8(00000000)                    call exit
  2850                                  
  2851                                  L_error_arg_count_2:
  2852 00001FE0 488B3C25[00000000]              mov rdi, qword [stderr]
  2853 00001FE8 48BE-                           mov rsi, fmt_arg_count_2
  2853 00001FEA [AA09000000000000] 
  2854 00001FF2 488B5518                        mov rdx, COUNT
  2855 00001FF6 B800000000                      mov rax, 0
  2856                                          ENTER
    44 00001FFB C8000000            <1>  enter 0, 0
    45 00001FFF 4883E4F0            <1>  and rsp, ~15
  2857 00002003 E8(00000000)                    call fprintf
  2858                                          LEAVE
    49 00002008 C9                  <1>  leave
  2859 00002009 48C7C0FDFFFFFF                  mov rax, -3
  2860 00002010 E8(00000000)                    call exit
  2861                                  
  2862                                  L_error_arg_count_12:
  2863 00002015 488B3C25[00000000]              mov rdi, qword [stderr]
  2864 0000201D 48BE-                           mov rsi, fmt_arg_count_12
  2864 0000201F [6A09000000000000] 
  2865 00002027 488B5518                        mov rdx, COUNT
  2866 0000202B B800000000                      mov rax, 0
  2867                                          ENTER
    44 00002030 C8000000            <1>  enter 0, 0
    45 00002034 4883E4F0            <1>  and rsp, ~15
  2868 00002038 E8(00000000)                    call fprintf
  2869                                          LEAVE
    49 0000203D C9                  <1>  leave
  2870 0000203E 48C7C0FDFFFFFF                  mov rax, -3
  2871 00002045 E8(00000000)                    call exit
  2872                                  
  2873                                  L_error_arg_count_3:
  2874 0000204A 488B3C25[00000000]              mov rdi, qword [stderr]
  2875 00002052 48BE-                           mov rsi, fmt_arg_count_3
  2875 00002054 [D109000000000000] 
  2876 0000205C 488B5518                        mov rdx, COUNT
  2877 00002060 B800000000                      mov rax, 0
  2878                                          ENTER
    44 00002065 C8000000            <1>  enter 0, 0
    45 00002069 4883E4F0            <1>  and rsp, ~15
  2879 0000206D E8(00000000)                    call fprintf
  2880                                          LEAVE
    49 00002072 C9                  <1>  leave
  2881 00002073 48C7C0FDFFFFFF                  mov rax, -3
  2882 0000207A E8(00000000)                    call exit
  2883                                          
  2884                                  L_error_incorrect_type:
  2885 0000207F 488B3C25[00000000]              mov rdi, qword [stderr]
  2886 00002087 48BE-                           mov rsi, fmt_type
  2886 00002089 [FA09000000000000] 
  2887 00002091 B800000000                      mov rax, 0
  2888                                          ENTER
    44 00002096 C8000000            <1>  enter 0, 0
    45 0000209A 4883E4F0            <1>  and rsp, ~15
  2889 0000209E E8(00000000)                    call fprintf
  2890                                          LEAVE
    49 000020A3 C9                  <1>  leave
  2891 000020A4 48C7C0FCFFFFFF                  mov rax, -4
  2892 000020AB E8(00000000)                    call exit
  2893                                  
  2894                                  L_error_division_by_zero:
  2895 000020B0 488B3C25[00000000]              mov rdi, qword [stderr]
  2896 000020B8 48BE-                           mov rsi, fmt_division_by_zero
  2896 000020BA [3B0A000000000000] 
  2897 000020C2 B800000000                      mov rax, 0
  2898                                          ENTER
    44 000020C7 C8000000            <1>  enter 0, 0
    45 000020CB 4883E4F0            <1>  and rsp, ~15
  2899 000020CF E8(00000000)                    call fprintf
  2900                                          LEAVE
    49 000020D4 C9                  <1>  leave
  2901 000020D5 48C7C0F8FFFFFF                  mov rax, -8
  2902 000020DC E8(00000000)                    call exit
  2903                                  
  2904                                  section .data
  2905                                  gensym_count:
  2906 000008EB 0000000000000000                dq 0
  2907                                  fmt_char:
  2908 000008F3 256300                          db `%c\0`
  2909                                  fmt_arg_negative:
  2910 000008F6 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2910 000008FF 7267756D656E742063-
  2910 00000908 616E6E6F7420626520-
  2910 00000911 6E656761746976652E-
  2910 0000091A 0A00               
  2911                                  fmt_arg_count_0:
  2912 0000091C 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2912 00000925 74696E67207A65726F-
  2912 0000092E 20617267756D656E74-
  2912 00000937 732E20466F756E6420-
  2912 00000940 25640A00           
  2913                                  fmt_arg_count_1:
  2914 00000944 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2914 0000094D 74696E67206F6E6520-
  2914 00000956 617267756D656E742E-
  2914 0000095F 20466F756E64202564-
  2914 00000968 0A00               
  2915                                  fmt_arg_count_12:
  2916 0000096A 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2916 00000973 74696E67206F6E6520-
  2916 0000097C 726571756972656420-
  2916 00000985 616E64206F6E65206F-
  2916 0000098E 7074696F6E616C2061-
  2916 00000997 7267756D656E742E20-
  2916 000009A0 466F756E642025640A-
  2916 000009A9 00                 
  2917                                  fmt_arg_count_2:
  2918 000009AA 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2918 000009B3 74696E672074776F20-
  2918 000009BC 617267756D656E7473-
  2918 000009C5 2E20466F756E642025-
  2918 000009CE 640A00             
  2919                                  fmt_arg_count_3:
  2920 000009D1 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2920 000009DA 74696E672074687265-
  2920 000009E3 6520617267756D656E-
  2920 000009EC 74732E20466F756E64-
  2920 000009F5 2025640A00         
  2921                                  fmt_type:
  2922 000009FA 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2922 00000A03 696F6E207061737365-
  2922 00000A0C 6420696E636F727265-
  2922 00000A15 637420747970650A00 
  2923                                  fmt_integer_range:
  2924 00000A1E 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2924 00000A27 7265637420696E7465-
  2924 00000A30 6765722072616E6765-
  2924 00000A39 0A00               
  2925                                  fmt_division_by_zero:
  2926 00000A3B 212121204469766973-             db `!!! Division by zero\n\0`
  2926 00000A44 696F6E206279207A65-
  2926 00000A4D 726F0A00           
  2927                                  fmt_scheme_error_part_1:
  2928 00000A51 0A2121212054686520-             db `\n!!! The procedure \0`
  2928 00000A5A 70726F636564757265-
  2928 00000A63 2000               
  2929                                  fmt_scheme_error_part_2:
  2930 00000A65 2061736B656420746F-             db ` asked to terminate the program\n`
  2930 00000A6E 207465726D696E6174-
  2930 00000A77 65207468652070726F-
  2930 00000A80 6772616D0A         
  2931 00000A85 202020207769746820-             db `    with the following message:\n\n\0`
  2931 00000A8E 74686520666F6C6C6F-
  2931 00000A97 77696E67206D657373-
  2931 00000AA0 6167653A0A0A00     
  2932                                  fmt_scheme_error_part_3:
  2933 00000AA7 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2933 00000AB0 210A0A00           

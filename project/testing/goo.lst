     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "caar"
   469 000005DE 0400000000000000        	dq 4
   470 000005E6 63616172                	db 0x63, 0x61, 0x61, 0x72
   471                                  	; L_constants + 1514:
   472 000005EA 03                      	db T_string	; "cadr"
   473 000005EB 0400000000000000        	dq 4
   474 000005F3 63616472                	db 0x63, 0x61, 0x64, 0x72
   475                                  	; L_constants + 1527:
   476 000005F7 03                      	db T_string	; "cdar"
   477 000005F8 0400000000000000        	dq 4
   478 00000600 63646172                	db 0x63, 0x64, 0x61, 0x72
   479                                  	; L_constants + 1540:
   480 00000604 03                      	db T_string	; "cddr"
   481 00000605 0400000000000000        	dq 4
   482 0000060D 63646472                	db 0x63, 0x64, 0x64, 0x72
   483                                  	; L_constants + 1553:
   484 00000611 03                      	db T_string	; "caaar"
   485 00000612 0500000000000000        	dq 5
   486 0000061A 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   487                                  	; L_constants + 1567:
   488 0000061F 03                      	db T_string	; "caadr"
   489 00000620 0500000000000000        	dq 5
   490 00000628 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   491                                  	; L_constants + 1581:
   492 0000062D 03                      	db T_string	; "cadar"
   493 0000062E 0500000000000000        	dq 5
   494 00000636 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   495                                  	; L_constants + 1595:
   496 0000063B 03                      	db T_string	; "caddr"
   497 0000063C 0500000000000000        	dq 5
   498 00000644 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   499                                  	; L_constants + 1609:
   500 00000649 03                      	db T_string	; "cdaar"
   501 0000064A 0500000000000000        	dq 5
   502 00000652 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   503                                  	; L_constants + 1623:
   504 00000657 03                      	db T_string	; "cdadr"
   505 00000658 0500000000000000        	dq 5
   506 00000660 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   507                                  	; L_constants + 1637:
   508 00000665 03                      	db T_string	; "cddar"
   509 00000666 0500000000000000        	dq 5
   510 0000066E 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   511                                  	; L_constants + 1651:
   512 00000673 03                      	db T_string	; "cdddr"
   513 00000674 0500000000000000        	dq 5
   514 0000067C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   515                                  	; L_constants + 1665:
   516 00000681 03                      	db T_string	; "caaaar"
   517 00000682 0600000000000000        	dq 6
   518 0000068A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   519                                  	; L_constants + 1680:
   520 00000690 03                      	db T_string	; "caaadr"
   521 00000691 0600000000000000        	dq 6
   522 00000699 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   523                                  	; L_constants + 1695:
   524 0000069F 03                      	db T_string	; "caadar"
   525 000006A0 0600000000000000        	dq 6
   526 000006A8 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   527                                  	; L_constants + 1710:
   528 000006AE 03                      	db T_string	; "caaddr"
   529 000006AF 0600000000000000        	dq 6
   530 000006B7 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   531                                  	; L_constants + 1725:
   532 000006BD 03                      	db T_string	; "cadaar"
   533 000006BE 0600000000000000        	dq 6
   534 000006C6 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   535                                  	; L_constants + 1740:
   536 000006CC 03                      	db T_string	; "cadadr"
   537 000006CD 0600000000000000        	dq 6
   538 000006D5 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   539                                  	; L_constants + 1755:
   540 000006DB 03                      	db T_string	; "caddar"
   541 000006DC 0600000000000000        	dq 6
   542 000006E4 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   543                                  	; L_constants + 1770:
   544 000006EA 03                      	db T_string	; "cadddr"
   545 000006EB 0600000000000000        	dq 6
   546 000006F3 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   547                                  	; L_constants + 1785:
   548 000006F9 03                      	db T_string	; "cdaaar"
   549 000006FA 0600000000000000        	dq 6
   550 00000702 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   551                                  	; L_constants + 1800:
   552 00000708 03                      	db T_string	; "cdaadr"
   553 00000709 0600000000000000        	dq 6
   554 00000711 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   555                                  	; L_constants + 1815:
   556 00000717 03                      	db T_string	; "cdadar"
   557 00000718 0600000000000000        	dq 6
   558 00000720 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   559                                  	; L_constants + 1830:
   560 00000726 03                      	db T_string	; "cdaddr"
   561 00000727 0600000000000000        	dq 6
   562 0000072F 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   563                                  	; L_constants + 1845:
   564 00000735 03                      	db T_string	; "cddaar"
   565 00000736 0600000000000000        	dq 6
   566 0000073E 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   567                                  	; L_constants + 1860:
   568 00000744 03                      	db T_string	; "cddadr"
   569 00000745 0600000000000000        	dq 6
   570 0000074D 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   571                                  	; L_constants + 1875:
   572 00000753 03                      	db T_string	; "cdddar"
   573 00000754 0600000000000000        	dq 6
   574 0000075C 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   575                                  	; L_constants + 1890:
   576 00000762 03                      	db T_string	; "cddddr"
   577 00000763 0600000000000000        	dq 6
   578 0000076B 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   579                                  	; L_constants + 1905:
   580 00000771 03                      	db T_string	; "list?"
   581 00000772 0500000000000000        	dq 5
   582 0000077A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   583                                  	; L_constants + 1919:
   584 0000077F 03                      	db T_string	; "list"
   585 00000780 0400000000000000        	dq 4
   586 00000788 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   587                                  	; L_constants + 1932:
   588 0000078C 03                      	db T_string	; "not"
   589 0000078D 0300000000000000        	dq 3
   590 00000795 6E6F74                  	db 0x6E, 0x6F, 0x74
   591                                  	; L_constants + 1944:
   592 00000798 03                      	db T_string	; "rational?"
   593 00000799 0900000000000000        	dq 9
   594 000007A1 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   595 000007A9 3F                      	db 0x3F
   596                                  	; L_constants + 1962:
   597 000007AA 03                      	db T_string	; "list*"
   598 000007AB 0500000000000000        	dq 5
   599 000007B3 6C6973742A              	db 0x6C, 0x69, 0x73, 0x74, 0x2A
   600                                  	; L_constants + 1976:
   601 000007B8 03                      	db T_string	; "whatever"
   602 000007B9 0800000000000000        	dq 8
   603 000007C1 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   604                                  	; L_constants + 1993:
   605 000007C9 41                      	db T_interned_symbol	; whatever
   606 000007CA [B807000000000000]      	dq L_constants + 1976
   607                                  	; L_constants + 2002:
   608 000007D2 03                      	db T_string	; "apply"
   609 000007D3 0500000000000000        	dq 5
   610 000007DB 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   611                                  	; L_constants + 2016:
   612 000007E0 03                      	db T_string	; "map"
   613 000007E1 0300000000000000        	dq 3
   614 000007E9 6D6170                  	db 0x6D, 0x61, 0x70
   615                                  	; L_constants + 2028:
   616 000007EC 11                      	db T_integer	; 5
   617 000007ED 0500000000000000        	dq 5
   618                                  free_var_0:	; location of __bin-apply
   619 000007F5 [FD07000000000000]      	dq .undefined_object
   620                                  .undefined_object:
   621 000007FD 05                      	db T_undefined
   622 000007FE [0102000000000000]      	dq L_constants + 513
   623                                  
   624                                  free_var_1:	; location of apply
   625 00000806 [0E08000000000000]      	dq .undefined_object
   626                                  .undefined_object:
   627 0000080E 05                      	db T_undefined
   628 0000080F [D207000000000000]      	dq L_constants + 2002
   629                                  
   630                                  free_var_2:	; location of caaaar
   631 00000817 [1F08000000000000]      	dq .undefined_object
   632                                  .undefined_object:
   633 0000081F 05                      	db T_undefined
   634 00000820 [8106000000000000]      	dq L_constants + 1665
   635                                  
   636                                  free_var_3:	; location of caaadr
   637 00000828 [3008000000000000]      	dq .undefined_object
   638                                  .undefined_object:
   639 00000830 05                      	db T_undefined
   640 00000831 [9006000000000000]      	dq L_constants + 1680
   641                                  
   642                                  free_var_4:	; location of caaar
   643 00000839 [4108000000000000]      	dq .undefined_object
   644                                  .undefined_object:
   645 00000841 05                      	db T_undefined
   646 00000842 [1106000000000000]      	dq L_constants + 1553
   647                                  
   648                                  free_var_5:	; location of caadar
   649 0000084A [5208000000000000]      	dq .undefined_object
   650                                  .undefined_object:
   651 00000852 05                      	db T_undefined
   652 00000853 [9F06000000000000]      	dq L_constants + 1695
   653                                  
   654                                  free_var_6:	; location of caaddr
   655 0000085B [6308000000000000]      	dq .undefined_object
   656                                  .undefined_object:
   657 00000863 05                      	db T_undefined
   658 00000864 [AE06000000000000]      	dq L_constants + 1710
   659                                  
   660                                  free_var_7:	; location of caadr
   661 0000086C [7408000000000000]      	dq .undefined_object
   662                                  .undefined_object:
   663 00000874 05                      	db T_undefined
   664 00000875 [1F06000000000000]      	dq L_constants + 1567
   665                                  
   666                                  free_var_8:	; location of caar
   667 0000087D [8508000000000000]      	dq .undefined_object
   668                                  .undefined_object:
   669 00000885 05                      	db T_undefined
   670 00000886 [DD05000000000000]      	dq L_constants + 1501
   671                                  
   672                                  free_var_9:	; location of cadaar
   673 0000088E [9608000000000000]      	dq .undefined_object
   674                                  .undefined_object:
   675 00000896 05                      	db T_undefined
   676 00000897 [BD06000000000000]      	dq L_constants + 1725
   677                                  
   678                                  free_var_10:	; location of cadadr
   679 0000089F [A708000000000000]      	dq .undefined_object
   680                                  .undefined_object:
   681 000008A7 05                      	db T_undefined
   682 000008A8 [CC06000000000000]      	dq L_constants + 1740
   683                                  
   684                                  free_var_11:	; location of cadar
   685 000008B0 [B808000000000000]      	dq .undefined_object
   686                                  .undefined_object:
   687 000008B8 05                      	db T_undefined
   688 000008B9 [2D06000000000000]      	dq L_constants + 1581
   689                                  
   690                                  free_var_12:	; location of caddar
   691 000008C1 [C908000000000000]      	dq .undefined_object
   692                                  .undefined_object:
   693 000008C9 05                      	db T_undefined
   694 000008CA [DB06000000000000]      	dq L_constants + 1755
   695                                  
   696                                  free_var_13:	; location of cadddr
   697 000008D2 [DA08000000000000]      	dq .undefined_object
   698                                  .undefined_object:
   699 000008DA 05                      	db T_undefined
   700 000008DB [EA06000000000000]      	dq L_constants + 1770
   701                                  
   702                                  free_var_14:	; location of caddr
   703 000008E3 [EB08000000000000]      	dq .undefined_object
   704                                  .undefined_object:
   705 000008EB 05                      	db T_undefined
   706 000008EC [3B06000000000000]      	dq L_constants + 1595
   707                                  
   708                                  free_var_15:	; location of cadr
   709 000008F4 [FC08000000000000]      	dq .undefined_object
   710                                  .undefined_object:
   711 000008FC 05                      	db T_undefined
   712 000008FD [EA05000000000000]      	dq L_constants + 1514
   713                                  
   714                                  free_var_16:	; location of car
   715 00000905 [0D09000000000000]      	dq .undefined_object
   716                                  .undefined_object:
   717 0000090D 05                      	db T_undefined
   718 0000090E [1501000000000000]      	dq L_constants + 277
   719                                  
   720                                  free_var_17:	; location of cdaaar
   721 00000916 [1E09000000000000]      	dq .undefined_object
   722                                  .undefined_object:
   723 0000091E 05                      	db T_undefined
   724 0000091F [F906000000000000]      	dq L_constants + 1785
   725                                  
   726                                  free_var_18:	; location of cdaadr
   727 00000927 [2F09000000000000]      	dq .undefined_object
   728                                  .undefined_object:
   729 0000092F 05                      	db T_undefined
   730 00000930 [0807000000000000]      	dq L_constants + 1800
   731                                  
   732                                  free_var_19:	; location of cdaar
   733 00000938 [4009000000000000]      	dq .undefined_object
   734                                  .undefined_object:
   735 00000940 05                      	db T_undefined
   736 00000941 [4906000000000000]      	dq L_constants + 1609
   737                                  
   738                                  free_var_20:	; location of cdadar
   739 00000949 [5109000000000000]      	dq .undefined_object
   740                                  .undefined_object:
   741 00000951 05                      	db T_undefined
   742 00000952 [1707000000000000]      	dq L_constants + 1815
   743                                  
   744                                  free_var_21:	; location of cdaddr
   745 0000095A [6209000000000000]      	dq .undefined_object
   746                                  .undefined_object:
   747 00000962 05                      	db T_undefined
   748 00000963 [2607000000000000]      	dq L_constants + 1830
   749                                  
   750                                  free_var_22:	; location of cdadr
   751 0000096B [7309000000000000]      	dq .undefined_object
   752                                  .undefined_object:
   753 00000973 05                      	db T_undefined
   754 00000974 [5706000000000000]      	dq L_constants + 1623
   755                                  
   756                                  free_var_23:	; location of cdar
   757 0000097C [8409000000000000]      	dq .undefined_object
   758                                  .undefined_object:
   759 00000984 05                      	db T_undefined
   760 00000985 [F705000000000000]      	dq L_constants + 1527
   761                                  
   762                                  free_var_24:	; location of cddaar
   763 0000098D [9509000000000000]      	dq .undefined_object
   764                                  .undefined_object:
   765 00000995 05                      	db T_undefined
   766 00000996 [3507000000000000]      	dq L_constants + 1845
   767                                  
   768                                  free_var_25:	; location of cddadr
   769 0000099E [A609000000000000]      	dq .undefined_object
   770                                  .undefined_object:
   771 000009A6 05                      	db T_undefined
   772 000009A7 [4407000000000000]      	dq L_constants + 1860
   773                                  
   774                                  free_var_26:	; location of cddar
   775 000009AF [B709000000000000]      	dq .undefined_object
   776                                  .undefined_object:
   777 000009B7 05                      	db T_undefined
   778 000009B8 [6506000000000000]      	dq L_constants + 1637
   779                                  
   780                                  free_var_27:	; location of cdddar
   781 000009C0 [C809000000000000]      	dq .undefined_object
   782                                  .undefined_object:
   783 000009C8 05                      	db T_undefined
   784 000009C9 [5307000000000000]      	dq L_constants + 1875
   785                                  
   786                                  free_var_28:	; location of cddddr
   787 000009D1 [D909000000000000]      	dq .undefined_object
   788                                  .undefined_object:
   789 000009D9 05                      	db T_undefined
   790 000009DA [6207000000000000]      	dq L_constants + 1890
   791                                  
   792                                  free_var_29:	; location of cdddr
   793 000009E2 [EA09000000000000]      	dq .undefined_object
   794                                  .undefined_object:
   795 000009EA 05                      	db T_undefined
   796 000009EB [7306000000000000]      	dq L_constants + 1651
   797                                  
   798                                  free_var_30:	; location of cddr
   799 000009F3 [FB09000000000000]      	dq .undefined_object
   800                                  .undefined_object:
   801 000009FB 05                      	db T_undefined
   802 000009FC [0406000000000000]      	dq L_constants + 1540
   803                                  
   804                                  free_var_31:	; location of cdr
   805 00000A04 [0C0A000000000000]      	dq .undefined_object
   806                                  .undefined_object:
   807 00000A0C 05                      	db T_undefined
   808 00000A0D [2101000000000000]      	dq L_constants + 289
   809                                  
   810                                  free_var_32:	; location of cons
   811 00000A15 [1D0A000000000000]      	dq .undefined_object
   812                                  .undefined_object:
   813 00000A1D 05                      	db T_undefined
   814 00000A1E [DF00000000000000]      	dq L_constants + 223
   815                                  
   816                                  free_var_33:	; location of fraction?
   817 00000A26 [2E0A000000000000]      	dq .undefined_object
   818                                  .undefined_object:
   819 00000A2E 05                      	db T_undefined
   820 00000A2F [9800000000000000]      	dq L_constants + 152
   821                                  
   822                                  free_var_34:	; location of integer?
   823 00000A37 [3F0A000000000000]      	dq .undefined_object
   824                                  .undefined_object:
   825 00000A3F 05                      	db T_undefined
   826 00000A40 [F001000000000000]      	dq L_constants + 496
   827                                  
   828                                  free_var_35:	; location of list
   829 00000A48 [500A000000000000]      	dq .undefined_object
   830                                  .undefined_object:
   831 00000A50 05                      	db T_undefined
   832 00000A51 [7F07000000000000]      	dq L_constants + 1919
   833                                  
   834                                  free_var_36:	; location of list*
   835 00000A59 [610A000000000000]      	dq .undefined_object
   836                                  .undefined_object:
   837 00000A61 05                      	db T_undefined
   838 00000A62 [AA07000000000000]      	dq L_constants + 1962
   839                                  
   840                                  free_var_37:	; location of list?
   841 00000A6A [720A000000000000]      	dq .undefined_object
   842                                  .undefined_object:
   843 00000A72 05                      	db T_undefined
   844 00000A73 [7107000000000000]      	dq L_constants + 1905
   845                                  
   846                                  free_var_38:	; location of map
   847 00000A7B [830A000000000000]      	dq .undefined_object
   848                                  .undefined_object:
   849 00000A83 05                      	db T_undefined
   850 00000A84 [E007000000000000]      	dq L_constants + 2016
   851                                  
   852                                  free_var_39:	; location of not
   853 00000A8C [940A000000000000]      	dq .undefined_object
   854                                  .undefined_object:
   855 00000A94 05                      	db T_undefined
   856 00000A95 [8C07000000000000]      	dq L_constants + 1932
   857                                  
   858                                  free_var_40:	; location of null?
   859 00000A9D [A50A000000000000]      	dq .undefined_object
   860                                  .undefined_object:
   861 00000AA5 05                      	db T_undefined
   862 00000AA6 [0600000000000000]      	dq L_constants + 6
   863                                  
   864                                  free_var_41:	; location of pair?
   865 00000AAE [B60A000000000000]      	dq .undefined_object
   866                                  .undefined_object:
   867 00000AB6 05                      	db T_undefined
   868 00000AB7 [1400000000000000]      	dq L_constants + 20
   869                                  
   870                                  free_var_42:	; location of rational?
   871 00000ABF [C70A000000000000]      	dq .undefined_object
   872                                  .undefined_object:
   873 00000AC7 05                      	db T_undefined
   874 00000AC8 [9807000000000000]      	dq L_constants + 1944
   875                                  
   876                                  
   877                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   878                                  global main
   879                                  section .text
   880                                  main:
   881 00000000 C8000000                        enter 0, 0
   882 00000004 6A00                            push 0
   883 00000006 6A00                            push 0
   884 00000008 68[3A300000]                    push Lend
   885 0000000D C8000000                        enter 0, 0
   886                                  	; building closure for null?
   887 00000011 48BF-                   	mov rdi, free_var_40
   887 00000013 [9D0A000000000000] 
   888 0000001B 48BE-                   	mov rsi, L_code_ptr_is_null
   888 0000001D [D73B000000000000] 
   889 00000025 E8AB390000              	call bind_primitive
   890                                  
   891                                  	; building closure for pair?
   892 0000002A 48BF-                   	mov rdi, free_var_41
   892 0000002C [AE0A000000000000] 
   893 00000034 48BE-                   	mov rsi, L_code_ptr_is_pair
   893 00000036 [093C000000000000] 
   894 0000003E E892390000              	call bind_primitive
   895                                  
   896                                  	; building closure for fraction?
   897 00000043 48BF-                   	mov rdi, free_var_33
   897 00000045 [260A000000000000] 
   898 0000004D 48BE-                   	mov rsi, L_code_ptr_is_fraction
   898 0000004F [333E000000000000] 
   899 00000057 E879390000              	call bind_primitive
   900                                  
   901                                  	; building closure for cons
   902 0000005C 48BF-                   	mov rdi, free_var_32
   902 0000005E [150A000000000000] 
   903 00000066 48BE-                   	mov rsi, L_code_ptr_cons
   903 00000068 [693F000000000000] 
   904 00000070 E860390000              	call bind_primitive
   905                                  
   906                                  	; building closure for car
   907 00000075 48BF-                   	mov rdi, free_var_16
   907 00000077 [0509000000000000] 
   908 0000007F 48BE-                   	mov rsi, L_code_ptr_car
   908 00000081 [1240000000000000] 
   909 00000089 E847390000              	call bind_primitive
   910                                  
   911                                  	; building closure for cdr
   912 0000008E 48BF-                   	mov rdi, free_var_31
   912 00000090 [040A000000000000] 
   913 00000098 48BE-                   	mov rsi, L_code_ptr_cdr
   913 0000009A [3640000000000000] 
   914 000000A2 E82E390000              	call bind_primitive
   915                                  
   916                                  	; building closure for integer?
   917 000000A7 48BF-                   	mov rdi, free_var_34
   917 000000A9 [370A000000000000] 
   918 000000B1 48BE-                   	mov rsi, L_code_ptr_is_integer
   918 000000B3 [9B42000000000000] 
   919 000000BB E815390000              	call bind_primitive
   920                                  
   921                                  	; building closure for __bin-apply
   922 000000C0 48BF-                   	mov rdi, free_var_0
   922 000000C2 [F507000000000000] 
   923 000000CA 48BE-                   	mov rsi, L_code_ptr_bin_apply
   923 000000CC [453B000000000000] 
   924 000000D4 E8FC380000              	call bind_primitive
   925                                  
   926 000000D9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   927 000000DE E8C2300000              	call malloc
   928 000000E3 50                      	push rax
   929 000000E4 BF00000000              	mov rdi, 8 * 0	; new rib
   930 000000E9 E8B7300000              	call malloc
   931 000000EE 50                      	push rax
   932 000000EF BF08000000              	mov rdi, 8 * 1	; extended env
   933 000000F4 E8AC300000              	call malloc
   934 000000F9 488B7D10                	mov rdi, ENV
   935 000000FD BE00000000              	mov rsi, 0
   936 00000102 BA01000000              	mov rdx, 1
   937                                  .L_lambda_simple_env_loop_0787:	; ext_env[i + 1] <-- env[i]
   938 00000107 4883FE00                	cmp rsi, 0
   939 0000010B 7410                    	je .L_lambda_simple_env_end_0787
   940 0000010D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   941 00000111 48890CD0                	mov qword [rax + 8 * rdx], rcx
   942 00000115 48FFC6                  	inc rsi
   943 00000118 48FFC2                  	inc rdx
   944 0000011B EBEA                    	jmp .L_lambda_simple_env_loop_0787
   945                                  .L_lambda_simple_env_end_0787:
   946 0000011D 5B                      	pop rbx
   947 0000011E BE00000000              	mov rsi, 0
   948                                  .L_lambda_simple_params_loop_0787:	; copy params
   949 00000123 4883FE00                	cmp rsi, 0
   950 00000127 740E                    	je .L_lambda_simple_params_end_0787
   951 00000129 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   952 0000012E 488914F3                	mov qword [rbx + 8 * rsi], rdx
   953 00000132 48FFC6                  	inc rsi
   954 00000135 EBEC                    	jmp .L_lambda_simple_params_loop_0787
   955                                  .L_lambda_simple_params_end_0787:
   956 00000137 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   957 0000013A 4889C3                  	mov rbx, rax
   958 0000013D 58                      	pop rax
   959 0000013E C60004                  	mov byte [rax], T_closure
   960 00000141 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   961 00000145 48C74009[4F010000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0787
   962 0000014D EB65                    	jmp .L_lambda_simple_end_0787
   963                                  .L_lambda_simple_code_0787:	; lambda-simple body
   964 0000014F 48837C241001            	cmp qword [rsp + 8 * 2], 1
   965 00000155 740B                    	je .L_lambda_simple_arity_check_ok_0837
   966 00000157 FF742410                	push qword [rsp + 8 * 2]
   967 0000015B 6A01                    	push 1
   968 0000015D E9FC2F0000              	jmp L_error_incorrect_arity_simple
   969                                  .L_lambda_simple_arity_check_ok_0837:
   970 00000162 C8000000                	enter 0, 0
   971                                  	; preparing a non-tail-call
   972                                  	; preparing a non-tail-call
   973 00000166 488B4520                	mov rax, PARAM(0)	; param x
   974 0000016A 50                      	push rax
   975 0000016B 6A01                    	push 1	; arg count
   976 0000016D 488B0425[05090000]      	mov rax, qword [free_var_16]	; free var car
   977 00000175 803805                  	cmp byte [rax], T_undefined
   978 00000178 0F84FA2E0000            	je L_error_fvar_undefined
   979 0000017E 803804                  	cmp byte [rax], T_closure
   980 00000181 0F85752F0000            	jne L_error_non_closure
   981 00000187 FF7001                  	push SOB_CLOSURE_ENV(rax)
   982 0000018A FF5009                  	call SOB_CLOSURE_CODE(rax)
   983 0000018D 50                      	push rax
   984 0000018E 6A01                    	push 1	; arg count
   985 00000190 488B0425[05090000]      	mov rax, qword [free_var_16]	; free var car
   986 00000198 803805                  	cmp byte [rax], T_undefined
   987 0000019B 0F84D72E0000            	je L_error_fvar_undefined
   988 000001A1 803804                  	cmp byte [rax], T_closure
   989 000001A4 0F85522F0000            	jne L_error_non_closure
   990 000001AA FF7001                  	push SOB_CLOSURE_ENV(rax)
   991 000001AD FF5009                  	call SOB_CLOSURE_CODE(rax)
   992 000001B0 C9                      	leave
   993 000001B1 C21800                  	ret AND_KILL_FRAME(1)
   994                                  .L_lambda_simple_end_0787:	; new closure is in rax
   995 000001B4 48890425[7D080000]      	mov qword [free_var_8], rax
   996 000001BC 48B8-                   	mov rax, sob_void
   996 000001BE [0000000000000000] 
   997                                  
   998 000001C6 4889C7                  	mov rdi, rax
   999 000001C9 E82C320000              	call print_sexpr_if_not_void
  1000 000001CE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1001 000001D3 E8CD2F0000              	call malloc
  1002 000001D8 50                      	push rax
  1003 000001D9 BF00000000              	mov rdi, 8 * 0	; new rib
  1004 000001DE E8C22F0000              	call malloc
  1005 000001E3 50                      	push rax
  1006 000001E4 BF08000000              	mov rdi, 8 * 1	; extended env
  1007 000001E9 E8B72F0000              	call malloc
  1008 000001EE 488B7D10                	mov rdi, ENV
  1009 000001F2 BE00000000              	mov rsi, 0
  1010 000001F7 BA01000000              	mov rdx, 1
  1011                                  .L_lambda_simple_env_loop_0788:	; ext_env[i + 1] <-- env[i]
  1012 000001FC 4883FE00                	cmp rsi, 0
  1013 00000200 7410                    	je .L_lambda_simple_env_end_0788
  1014 00000202 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1015 00000206 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1016 0000020A 48FFC6                  	inc rsi
  1017 0000020D 48FFC2                  	inc rdx
  1018 00000210 EBEA                    	jmp .L_lambda_simple_env_loop_0788
  1019                                  .L_lambda_simple_env_end_0788:
  1020 00000212 5B                      	pop rbx
  1021 00000213 BE00000000              	mov rsi, 0
  1022                                  .L_lambda_simple_params_loop_0788:	; copy params
  1023 00000218 4883FE00                	cmp rsi, 0
  1024 0000021C 740E                    	je .L_lambda_simple_params_end_0788
  1025 0000021E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1026 00000223 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1027 00000227 48FFC6                  	inc rsi
  1028 0000022A EBEC                    	jmp .L_lambda_simple_params_loop_0788
  1029                                  .L_lambda_simple_params_end_0788:
  1030 0000022C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1031 0000022F 4889C3                  	mov rbx, rax
  1032 00000232 58                      	pop rax
  1033 00000233 C60004                  	mov byte [rax], T_closure
  1034 00000236 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1035 0000023A 48C74009[44020000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0788
  1036 00000242 EB65                    	jmp .L_lambda_simple_end_0788
  1037                                  .L_lambda_simple_code_0788:	; lambda-simple body
  1038 00000244 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1039 0000024A 740B                    	je .L_lambda_simple_arity_check_ok_0838
  1040 0000024C FF742410                	push qword [rsp + 8 * 2]
  1041 00000250 6A01                    	push 1
  1042 00000252 E9072F0000              	jmp L_error_incorrect_arity_simple
  1043                                  .L_lambda_simple_arity_check_ok_0838:
  1044 00000257 C8000000                	enter 0, 0
  1045                                  	; preparing a non-tail-call
  1046                                  	; preparing a non-tail-call
  1047 0000025B 488B4520                	mov rax, PARAM(0)	; param x
  1048 0000025F 50                      	push rax
  1049 00000260 6A01                    	push 1	; arg count
  1050 00000262 488B0425[040A0000]      	mov rax, qword [free_var_31]	; free var cdr
  1051 0000026A 803805                  	cmp byte [rax], T_undefined
  1052 0000026D 0F84052E0000            	je L_error_fvar_undefined
  1053 00000273 803804                  	cmp byte [rax], T_closure
  1054 00000276 0F85802E0000            	jne L_error_non_closure
  1055 0000027C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1056 0000027F FF5009                  	call SOB_CLOSURE_CODE(rax)
  1057 00000282 50                      	push rax
  1058 00000283 6A01                    	push 1	; arg count
  1059 00000285 488B0425[05090000]      	mov rax, qword [free_var_16]	; free var car
  1060 0000028D 803805                  	cmp byte [rax], T_undefined
  1061 00000290 0F84E22D0000            	je L_error_fvar_undefined
  1062 00000296 803804                  	cmp byte [rax], T_closure
  1063 00000299 0F855D2E0000            	jne L_error_non_closure
  1064 0000029F FF7001                  	push SOB_CLOSURE_ENV(rax)
  1065 000002A2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1066 000002A5 C9                      	leave
  1067 000002A6 C21800                  	ret AND_KILL_FRAME(1)
  1068                                  .L_lambda_simple_end_0788:	; new closure is in rax
  1069 000002A9 48890425[F4080000]      	mov qword [free_var_15], rax
  1070 000002B1 48B8-                   	mov rax, sob_void
  1070 000002B3 [0000000000000000] 
  1071                                  
  1072 000002BB 4889C7                  	mov rdi, rax
  1073 000002BE E837310000              	call print_sexpr_if_not_void
  1074 000002C3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1075 000002C8 E8D82E0000              	call malloc
  1076 000002CD 50                      	push rax
  1077 000002CE BF00000000              	mov rdi, 8 * 0	; new rib
  1078 000002D3 E8CD2E0000              	call malloc
  1079 000002D8 50                      	push rax
  1080 000002D9 BF08000000              	mov rdi, 8 * 1	; extended env
  1081 000002DE E8C22E0000              	call malloc
  1082 000002E3 488B7D10                	mov rdi, ENV
  1083 000002E7 BE00000000              	mov rsi, 0
  1084 000002EC BA01000000              	mov rdx, 1
  1085                                  .L_lambda_simple_env_loop_0789:	; ext_env[i + 1] <-- env[i]
  1086 000002F1 4883FE00                	cmp rsi, 0
  1087 000002F5 7410                    	je .L_lambda_simple_env_end_0789
  1088 000002F7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1089 000002FB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1090 000002FF 48FFC6                  	inc rsi
  1091 00000302 48FFC2                  	inc rdx
  1092 00000305 EBEA                    	jmp .L_lambda_simple_env_loop_0789
  1093                                  .L_lambda_simple_env_end_0789:
  1094 00000307 5B                      	pop rbx
  1095 00000308 BE00000000              	mov rsi, 0
  1096                                  .L_lambda_simple_params_loop_0789:	; copy params
  1097 0000030D 4883FE00                	cmp rsi, 0
  1098 00000311 740E                    	je .L_lambda_simple_params_end_0789
  1099 00000313 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1100 00000318 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1101 0000031C 48FFC6                  	inc rsi
  1102 0000031F EBEC                    	jmp .L_lambda_simple_params_loop_0789
  1103                                  .L_lambda_simple_params_end_0789:
  1104 00000321 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1105 00000324 4889C3                  	mov rbx, rax
  1106 00000327 58                      	pop rax
  1107 00000328 C60004                  	mov byte [rax], T_closure
  1108 0000032B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1109 0000032F 48C74009[39030000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0789
  1110 00000337 EB65                    	jmp .L_lambda_simple_end_0789
  1111                                  .L_lambda_simple_code_0789:	; lambda-simple body
  1112 00000339 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1113 0000033F 740B                    	je .L_lambda_simple_arity_check_ok_0839
  1114 00000341 FF742410                	push qword [rsp + 8 * 2]
  1115 00000345 6A01                    	push 1
  1116 00000347 E9122E0000              	jmp L_error_incorrect_arity_simple
  1117                                  .L_lambda_simple_arity_check_ok_0839:
  1118 0000034C C8000000                	enter 0, 0
  1119                                  	; preparing a non-tail-call
  1120                                  	; preparing a non-tail-call
  1121 00000350 488B4520                	mov rax, PARAM(0)	; param x
  1122 00000354 50                      	push rax
  1123 00000355 6A01                    	push 1	; arg count
  1124 00000357 488B0425[05090000]      	mov rax, qword [free_var_16]	; free var car
  1125 0000035F 803805                  	cmp byte [rax], T_undefined
  1126 00000362 0F84102D0000            	je L_error_fvar_undefined
  1127 00000368 803804                  	cmp byte [rax], T_closure
  1128 0000036B 0F858B2D0000            	jne L_error_non_closure
  1129 00000371 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1130 00000374 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1131 00000377 50                      	push rax
  1132 00000378 6A01                    	push 1	; arg count
  1133 0000037A 488B0425[040A0000]      	mov rax, qword [free_var_31]	; free var cdr
  1134 00000382 803805                  	cmp byte [rax], T_undefined
  1135 00000385 0F84ED2C0000            	je L_error_fvar_undefined
  1136 0000038B 803804                  	cmp byte [rax], T_closure
  1137 0000038E 0F85682D0000            	jne L_error_non_closure
  1138 00000394 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1139 00000397 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1140 0000039A C9                      	leave
  1141 0000039B C21800                  	ret AND_KILL_FRAME(1)
  1142                                  .L_lambda_simple_end_0789:	; new closure is in rax
  1143 0000039E 48890425[7C090000]      	mov qword [free_var_23], rax
  1144 000003A6 48B8-                   	mov rax, sob_void
  1144 000003A8 [0000000000000000] 
  1145                                  
  1146 000003B0 4889C7                  	mov rdi, rax
  1147 000003B3 E842300000              	call print_sexpr_if_not_void
  1148 000003B8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1149 000003BD E8E32D0000              	call malloc
  1150 000003C2 50                      	push rax
  1151 000003C3 BF00000000              	mov rdi, 8 * 0	; new rib
  1152 000003C8 E8D82D0000              	call malloc
  1153 000003CD 50                      	push rax
  1154 000003CE BF08000000              	mov rdi, 8 * 1	; extended env
  1155 000003D3 E8CD2D0000              	call malloc
  1156 000003D8 488B7D10                	mov rdi, ENV
  1157 000003DC BE00000000              	mov rsi, 0
  1158 000003E1 BA01000000              	mov rdx, 1
  1159                                  .L_lambda_simple_env_loop_078a:	; ext_env[i + 1] <-- env[i]
  1160 000003E6 4883FE00                	cmp rsi, 0
  1161 000003EA 7410                    	je .L_lambda_simple_env_end_078a
  1162 000003EC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1163 000003F0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1164 000003F4 48FFC6                  	inc rsi
  1165 000003F7 48FFC2                  	inc rdx
  1166 000003FA EBEA                    	jmp .L_lambda_simple_env_loop_078a
  1167                                  .L_lambda_simple_env_end_078a:
  1168 000003FC 5B                      	pop rbx
  1169 000003FD BE00000000              	mov rsi, 0
  1170                                  .L_lambda_simple_params_loop_078a:	; copy params
  1171 00000402 4883FE00                	cmp rsi, 0
  1172 00000406 740E                    	je .L_lambda_simple_params_end_078a
  1173 00000408 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1174 0000040D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1175 00000411 48FFC6                  	inc rsi
  1176 00000414 EBEC                    	jmp .L_lambda_simple_params_loop_078a
  1177                                  .L_lambda_simple_params_end_078a:
  1178 00000416 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1179 00000419 4889C3                  	mov rbx, rax
  1180 0000041C 58                      	pop rax
  1181 0000041D C60004                  	mov byte [rax], T_closure
  1182 00000420 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1183 00000424 48C74009[2E040000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_078a
  1184 0000042C EB65                    	jmp .L_lambda_simple_end_078a
  1185                                  .L_lambda_simple_code_078a:	; lambda-simple body
  1186 0000042E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1187 00000434 740B                    	je .L_lambda_simple_arity_check_ok_083a
  1188 00000436 FF742410                	push qword [rsp + 8 * 2]
  1189 0000043A 6A01                    	push 1
  1190 0000043C E91D2D0000              	jmp L_error_incorrect_arity_simple
  1191                                  .L_lambda_simple_arity_check_ok_083a:
  1192 00000441 C8000000                	enter 0, 0
  1193                                  	; preparing a non-tail-call
  1194                                  	; preparing a non-tail-call
  1195 00000445 488B4520                	mov rax, PARAM(0)	; param x
  1196 00000449 50                      	push rax
  1197 0000044A 6A01                    	push 1	; arg count
  1198 0000044C 488B0425[040A0000]      	mov rax, qword [free_var_31]	; free var cdr
  1199 00000454 803805                  	cmp byte [rax], T_undefined
  1200 00000457 0F841B2C0000            	je L_error_fvar_undefined
  1201 0000045D 803804                  	cmp byte [rax], T_closure
  1202 00000460 0F85962C0000            	jne L_error_non_closure
  1203 00000466 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1204 00000469 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1205 0000046C 50                      	push rax
  1206 0000046D 6A01                    	push 1	; arg count
  1207 0000046F 488B0425[040A0000]      	mov rax, qword [free_var_31]	; free var cdr
  1208 00000477 803805                  	cmp byte [rax], T_undefined
  1209 0000047A 0F84F82B0000            	je L_error_fvar_undefined
  1210 00000480 803804                  	cmp byte [rax], T_closure
  1211 00000483 0F85732C0000            	jne L_error_non_closure
  1212 00000489 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1213 0000048C FF5009                  	call SOB_CLOSURE_CODE(rax)
  1214 0000048F C9                      	leave
  1215 00000490 C21800                  	ret AND_KILL_FRAME(1)
  1216                                  .L_lambda_simple_end_078a:	; new closure is in rax
  1217 00000493 48890425[F3090000]      	mov qword [free_var_30], rax
  1218 0000049B 48B8-                   	mov rax, sob_void
  1218 0000049D [0000000000000000] 
  1219                                  
  1220 000004A5 4889C7                  	mov rdi, rax
  1221 000004A8 E84D2F0000              	call print_sexpr_if_not_void
  1222 000004AD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1223 000004B2 E8EE2C0000              	call malloc
  1224 000004B7 50                      	push rax
  1225 000004B8 BF00000000              	mov rdi, 8 * 0	; new rib
  1226 000004BD E8E32C0000              	call malloc
  1227 000004C2 50                      	push rax
  1228 000004C3 BF08000000              	mov rdi, 8 * 1	; extended env
  1229 000004C8 E8D82C0000              	call malloc
  1230 000004CD 488B7D10                	mov rdi, ENV
  1231 000004D1 BE00000000              	mov rsi, 0
  1232 000004D6 BA01000000              	mov rdx, 1
  1233                                  .L_lambda_simple_env_loop_078b:	; ext_env[i + 1] <-- env[i]
  1234 000004DB 4883FE00                	cmp rsi, 0
  1235 000004DF 7410                    	je .L_lambda_simple_env_end_078b
  1236 000004E1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1237 000004E5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1238 000004E9 48FFC6                  	inc rsi
  1239 000004EC 48FFC2                  	inc rdx
  1240 000004EF EBEA                    	jmp .L_lambda_simple_env_loop_078b
  1241                                  .L_lambda_simple_env_end_078b:
  1242 000004F1 5B                      	pop rbx
  1243 000004F2 BE00000000              	mov rsi, 0
  1244                                  .L_lambda_simple_params_loop_078b:	; copy params
  1245 000004F7 4883FE00                	cmp rsi, 0
  1246 000004FB 740E                    	je .L_lambda_simple_params_end_078b
  1247 000004FD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1248 00000502 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1249 00000506 48FFC6                  	inc rsi
  1250 00000509 EBEC                    	jmp .L_lambda_simple_params_loop_078b
  1251                                  .L_lambda_simple_params_end_078b:
  1252 0000050B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1253 0000050E 4889C3                  	mov rbx, rax
  1254 00000511 58                      	pop rax
  1255 00000512 C60004                  	mov byte [rax], T_closure
  1256 00000515 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1257 00000519 48C74009[23050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_078b
  1258 00000521 EB65                    	jmp .L_lambda_simple_end_078b
  1259                                  .L_lambda_simple_code_078b:	; lambda-simple body
  1260 00000523 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1261 00000529 740B                    	je .L_lambda_simple_arity_check_ok_083b
  1262 0000052B FF742410                	push qword [rsp + 8 * 2]
  1263 0000052F 6A01                    	push 1
  1264 00000531 E9282C0000              	jmp L_error_incorrect_arity_simple
  1265                                  .L_lambda_simple_arity_check_ok_083b:
  1266 00000536 C8000000                	enter 0, 0
  1267                                  	; preparing a non-tail-call
  1268                                  	; preparing a non-tail-call
  1269 0000053A 488B4520                	mov rax, PARAM(0)	; param x
  1270 0000053E 50                      	push rax
  1271 0000053F 6A01                    	push 1	; arg count
  1272 00000541 488B0425[7D080000]      	mov rax, qword [free_var_8]	; free var caar
  1273 00000549 803805                  	cmp byte [rax], T_undefined
  1274 0000054C 0F84262B0000            	je L_error_fvar_undefined
  1275 00000552 803804                  	cmp byte [rax], T_closure
  1276 00000555 0F85A12B0000            	jne L_error_non_closure
  1277 0000055B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1278 0000055E FF5009                  	call SOB_CLOSURE_CODE(rax)
  1279 00000561 50                      	push rax
  1280 00000562 6A01                    	push 1	; arg count
  1281 00000564 488B0425[05090000]      	mov rax, qword [free_var_16]	; free var car
  1282 0000056C 803805                  	cmp byte [rax], T_undefined
  1283 0000056F 0F84032B0000            	je L_error_fvar_undefined
  1284 00000575 803804                  	cmp byte [rax], T_closure
  1285 00000578 0F857E2B0000            	jne L_error_non_closure
  1286 0000057E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1287 00000581 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1288 00000584 C9                      	leave
  1289 00000585 C21800                  	ret AND_KILL_FRAME(1)
  1290                                  .L_lambda_simple_end_078b:	; new closure is in rax
  1291 00000588 48890425[39080000]      	mov qword [free_var_4], rax
  1292 00000590 48B8-                   	mov rax, sob_void
  1292 00000592 [0000000000000000] 
  1293                                  
  1294 0000059A 4889C7                  	mov rdi, rax
  1295 0000059D E8582E0000              	call print_sexpr_if_not_void
  1296 000005A2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1297 000005A7 E8F92B0000              	call malloc
  1298 000005AC 50                      	push rax
  1299 000005AD BF00000000              	mov rdi, 8 * 0	; new rib
  1300 000005B2 E8EE2B0000              	call malloc
  1301 000005B7 50                      	push rax
  1302 000005B8 BF08000000              	mov rdi, 8 * 1	; extended env
  1303 000005BD E8E32B0000              	call malloc
  1304 000005C2 488B7D10                	mov rdi, ENV
  1305 000005C6 BE00000000              	mov rsi, 0
  1306 000005CB BA01000000              	mov rdx, 1
  1307                                  .L_lambda_simple_env_loop_078c:	; ext_env[i + 1] <-- env[i]
  1308 000005D0 4883FE00                	cmp rsi, 0
  1309 000005D4 7410                    	je .L_lambda_simple_env_end_078c
  1310 000005D6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1311 000005DA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1312 000005DE 48FFC6                  	inc rsi
  1313 000005E1 48FFC2                  	inc rdx
  1314 000005E4 EBEA                    	jmp .L_lambda_simple_env_loop_078c
  1315                                  .L_lambda_simple_env_end_078c:
  1316 000005E6 5B                      	pop rbx
  1317 000005E7 BE00000000              	mov rsi, 0
  1318                                  .L_lambda_simple_params_loop_078c:	; copy params
  1319 000005EC 4883FE00                	cmp rsi, 0
  1320 000005F0 740E                    	je .L_lambda_simple_params_end_078c
  1321 000005F2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1322 000005F7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1323 000005FB 48FFC6                  	inc rsi
  1324 000005FE EBEC                    	jmp .L_lambda_simple_params_loop_078c
  1325                                  .L_lambda_simple_params_end_078c:
  1326 00000600 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1327 00000603 4889C3                  	mov rbx, rax
  1328 00000606 58                      	pop rax
  1329 00000607 C60004                  	mov byte [rax], T_closure
  1330 0000060A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1331 0000060E 48C74009[18060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_078c
  1332 00000616 EB65                    	jmp .L_lambda_simple_end_078c
  1333                                  .L_lambda_simple_code_078c:	; lambda-simple body
  1334 00000618 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1335 0000061E 740B                    	je .L_lambda_simple_arity_check_ok_083c
  1336 00000620 FF742410                	push qword [rsp + 8 * 2]
  1337 00000624 6A01                    	push 1
  1338 00000626 E9332B0000              	jmp L_error_incorrect_arity_simple
  1339                                  .L_lambda_simple_arity_check_ok_083c:
  1340 0000062B C8000000                	enter 0, 0
  1341                                  	; preparing a non-tail-call
  1342                                  	; preparing a non-tail-call
  1343 0000062F 488B4520                	mov rax, PARAM(0)	; param x
  1344 00000633 50                      	push rax
  1345 00000634 6A01                    	push 1	; arg count
  1346 00000636 488B0425[F4080000]      	mov rax, qword [free_var_15]	; free var cadr
  1347 0000063E 803805                  	cmp byte [rax], T_undefined
  1348 00000641 0F84312A0000            	je L_error_fvar_undefined
  1349 00000647 803804                  	cmp byte [rax], T_closure
  1350 0000064A 0F85AC2A0000            	jne L_error_non_closure
  1351 00000650 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1352 00000653 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1353 00000656 50                      	push rax
  1354 00000657 6A01                    	push 1	; arg count
  1355 00000659 488B0425[05090000]      	mov rax, qword [free_var_16]	; free var car
  1356 00000661 803805                  	cmp byte [rax], T_undefined
  1357 00000664 0F840E2A0000            	je L_error_fvar_undefined
  1358 0000066A 803804                  	cmp byte [rax], T_closure
  1359 0000066D 0F85892A0000            	jne L_error_non_closure
  1360 00000673 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1361 00000676 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1362 00000679 C9                      	leave
  1363 0000067A C21800                  	ret AND_KILL_FRAME(1)
  1364                                  .L_lambda_simple_end_078c:	; new closure is in rax
  1365 0000067D 48890425[6C080000]      	mov qword [free_var_7], rax
  1366 00000685 48B8-                   	mov rax, sob_void
  1366 00000687 [0000000000000000] 
  1367                                  
  1368 0000068F 4889C7                  	mov rdi, rax
  1369 00000692 E8632D0000              	call print_sexpr_if_not_void
  1370 00000697 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1371 0000069C E8042B0000              	call malloc
  1372 000006A1 50                      	push rax
  1373 000006A2 BF00000000              	mov rdi, 8 * 0	; new rib
  1374 000006A7 E8F92A0000              	call malloc
  1375 000006AC 50                      	push rax
  1376 000006AD BF08000000              	mov rdi, 8 * 1	; extended env
  1377 000006B2 E8EE2A0000              	call malloc
  1378 000006B7 488B7D10                	mov rdi, ENV
  1379 000006BB BE00000000              	mov rsi, 0
  1380 000006C0 BA01000000              	mov rdx, 1
  1381                                  .L_lambda_simple_env_loop_078d:	; ext_env[i + 1] <-- env[i]
  1382 000006C5 4883FE00                	cmp rsi, 0
  1383 000006C9 7410                    	je .L_lambda_simple_env_end_078d
  1384 000006CB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1385 000006CF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1386 000006D3 48FFC6                  	inc rsi
  1387 000006D6 48FFC2                  	inc rdx
  1388 000006D9 EBEA                    	jmp .L_lambda_simple_env_loop_078d
  1389                                  .L_lambda_simple_env_end_078d:
  1390 000006DB 5B                      	pop rbx
  1391 000006DC BE00000000              	mov rsi, 0
  1392                                  .L_lambda_simple_params_loop_078d:	; copy params
  1393 000006E1 4883FE00                	cmp rsi, 0
  1394 000006E5 740E                    	je .L_lambda_simple_params_end_078d
  1395 000006E7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1396 000006EC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1397 000006F0 48FFC6                  	inc rsi
  1398 000006F3 EBEC                    	jmp .L_lambda_simple_params_loop_078d
  1399                                  .L_lambda_simple_params_end_078d:
  1400 000006F5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1401 000006F8 4889C3                  	mov rbx, rax
  1402 000006FB 58                      	pop rax
  1403 000006FC C60004                  	mov byte [rax], T_closure
  1404 000006FF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1405 00000703 48C74009[0D070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_078d
  1406 0000070B EB65                    	jmp .L_lambda_simple_end_078d
  1407                                  .L_lambda_simple_code_078d:	; lambda-simple body
  1408 0000070D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1409 00000713 740B                    	je .L_lambda_simple_arity_check_ok_083d
  1410 00000715 FF742410                	push qword [rsp + 8 * 2]
  1411 00000719 6A01                    	push 1
  1412 0000071B E93E2A0000              	jmp L_error_incorrect_arity_simple
  1413                                  .L_lambda_simple_arity_check_ok_083d:
  1414 00000720 C8000000                	enter 0, 0
  1415                                  	; preparing a non-tail-call
  1416                                  	; preparing a non-tail-call
  1417 00000724 488B4520                	mov rax, PARAM(0)	; param x
  1418 00000728 50                      	push rax
  1419 00000729 6A01                    	push 1	; arg count
  1420 0000072B 488B0425[7C090000]      	mov rax, qword [free_var_23]	; free var cdar
  1421 00000733 803805                  	cmp byte [rax], T_undefined
  1422 00000736 0F843C290000            	je L_error_fvar_undefined
  1423 0000073C 803804                  	cmp byte [rax], T_closure
  1424 0000073F 0F85B7290000            	jne L_error_non_closure
  1425 00000745 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1426 00000748 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1427 0000074B 50                      	push rax
  1428 0000074C 6A01                    	push 1	; arg count
  1429 0000074E 488B0425[05090000]      	mov rax, qword [free_var_16]	; free var car
  1430 00000756 803805                  	cmp byte [rax], T_undefined
  1431 00000759 0F8419290000            	je L_error_fvar_undefined
  1432 0000075F 803804                  	cmp byte [rax], T_closure
  1433 00000762 0F8594290000            	jne L_error_non_closure
  1434 00000768 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1435 0000076B FF5009                  	call SOB_CLOSURE_CODE(rax)
  1436 0000076E C9                      	leave
  1437 0000076F C21800                  	ret AND_KILL_FRAME(1)
  1438                                  .L_lambda_simple_end_078d:	; new closure is in rax
  1439 00000772 48890425[B0080000]      	mov qword [free_var_11], rax
  1440 0000077A 48B8-                   	mov rax, sob_void
  1440 0000077C [0000000000000000] 
  1441                                  
  1442 00000784 4889C7                  	mov rdi, rax
  1443 00000787 E86E2C0000              	call print_sexpr_if_not_void
  1444 0000078C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1445 00000791 E80F2A0000              	call malloc
  1446 00000796 50                      	push rax
  1447 00000797 BF00000000              	mov rdi, 8 * 0	; new rib
  1448 0000079C E8042A0000              	call malloc
  1449 000007A1 50                      	push rax
  1450 000007A2 BF08000000              	mov rdi, 8 * 1	; extended env
  1451 000007A7 E8F9290000              	call malloc
  1452 000007AC 488B7D10                	mov rdi, ENV
  1453 000007B0 BE00000000              	mov rsi, 0
  1454 000007B5 BA01000000              	mov rdx, 1
  1455                                  .L_lambda_simple_env_loop_078e:	; ext_env[i + 1] <-- env[i]
  1456 000007BA 4883FE00                	cmp rsi, 0
  1457 000007BE 7410                    	je .L_lambda_simple_env_end_078e
  1458 000007C0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1459 000007C4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1460 000007C8 48FFC6                  	inc rsi
  1461 000007CB 48FFC2                  	inc rdx
  1462 000007CE EBEA                    	jmp .L_lambda_simple_env_loop_078e
  1463                                  .L_lambda_simple_env_end_078e:
  1464 000007D0 5B                      	pop rbx
  1465 000007D1 BE00000000              	mov rsi, 0
  1466                                  .L_lambda_simple_params_loop_078e:	; copy params
  1467 000007D6 4883FE00                	cmp rsi, 0
  1468 000007DA 740E                    	je .L_lambda_simple_params_end_078e
  1469 000007DC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1470 000007E1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1471 000007E5 48FFC6                  	inc rsi
  1472 000007E8 EBEC                    	jmp .L_lambda_simple_params_loop_078e
  1473                                  .L_lambda_simple_params_end_078e:
  1474 000007EA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1475 000007ED 4889C3                  	mov rbx, rax
  1476 000007F0 58                      	pop rax
  1477 000007F1 C60004                  	mov byte [rax], T_closure
  1478 000007F4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1479 000007F8 48C74009[02080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_078e
  1480 00000800 EB65                    	jmp .L_lambda_simple_end_078e
  1481                                  .L_lambda_simple_code_078e:	; lambda-simple body
  1482 00000802 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1483 00000808 740B                    	je .L_lambda_simple_arity_check_ok_083e
  1484 0000080A FF742410                	push qword [rsp + 8 * 2]
  1485 0000080E 6A01                    	push 1
  1486 00000810 E949290000              	jmp L_error_incorrect_arity_simple
  1487                                  .L_lambda_simple_arity_check_ok_083e:
  1488 00000815 C8000000                	enter 0, 0
  1489                                  	; preparing a non-tail-call
  1490                                  	; preparing a non-tail-call
  1491 00000819 488B4520                	mov rax, PARAM(0)	; param x
  1492 0000081D 50                      	push rax
  1493 0000081E 6A01                    	push 1	; arg count
  1494 00000820 488B0425[F3090000]      	mov rax, qword [free_var_30]	; free var cddr
  1495 00000828 803805                  	cmp byte [rax], T_undefined
  1496 0000082B 0F8447280000            	je L_error_fvar_undefined
  1497 00000831 803804                  	cmp byte [rax], T_closure
  1498 00000834 0F85C2280000            	jne L_error_non_closure
  1499 0000083A FF7001                  	push SOB_CLOSURE_ENV(rax)
  1500 0000083D FF5009                  	call SOB_CLOSURE_CODE(rax)
  1501 00000840 50                      	push rax
  1502 00000841 6A01                    	push 1	; arg count
  1503 00000843 488B0425[05090000]      	mov rax, qword [free_var_16]	; free var car
  1504 0000084B 803805                  	cmp byte [rax], T_undefined
  1505 0000084E 0F8424280000            	je L_error_fvar_undefined
  1506 00000854 803804                  	cmp byte [rax], T_closure
  1507 00000857 0F859F280000            	jne L_error_non_closure
  1508 0000085D FF7001                  	push SOB_CLOSURE_ENV(rax)
  1509 00000860 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1510 00000863 C9                      	leave
  1511 00000864 C21800                  	ret AND_KILL_FRAME(1)
  1512                                  .L_lambda_simple_end_078e:	; new closure is in rax
  1513 00000867 48890425[E3080000]      	mov qword [free_var_14], rax
  1514 0000086F 48B8-                   	mov rax, sob_void
  1514 00000871 [0000000000000000] 
  1515                                  
  1516 00000879 4889C7                  	mov rdi, rax
  1517 0000087C E8792B0000              	call print_sexpr_if_not_void
  1518 00000881 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1519 00000886 E81A290000              	call malloc
  1520 0000088B 50                      	push rax
  1521 0000088C BF00000000              	mov rdi, 8 * 0	; new rib
  1522 00000891 E80F290000              	call malloc
  1523 00000896 50                      	push rax
  1524 00000897 BF08000000              	mov rdi, 8 * 1	; extended env
  1525 0000089C E804290000              	call malloc
  1526 000008A1 488B7D10                	mov rdi, ENV
  1527 000008A5 BE00000000              	mov rsi, 0
  1528 000008AA BA01000000              	mov rdx, 1
  1529                                  .L_lambda_simple_env_loop_078f:	; ext_env[i + 1] <-- env[i]
  1530 000008AF 4883FE00                	cmp rsi, 0
  1531 000008B3 7410                    	je .L_lambda_simple_env_end_078f
  1532 000008B5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1533 000008B9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1534 000008BD 48FFC6                  	inc rsi
  1535 000008C0 48FFC2                  	inc rdx
  1536 000008C3 EBEA                    	jmp .L_lambda_simple_env_loop_078f
  1537                                  .L_lambda_simple_env_end_078f:
  1538 000008C5 5B                      	pop rbx
  1539 000008C6 BE00000000              	mov rsi, 0
  1540                                  .L_lambda_simple_params_loop_078f:	; copy params
  1541 000008CB 4883FE00                	cmp rsi, 0
  1542 000008CF 740E                    	je .L_lambda_simple_params_end_078f
  1543 000008D1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1544 000008D6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1545 000008DA 48FFC6                  	inc rsi
  1546 000008DD EBEC                    	jmp .L_lambda_simple_params_loop_078f
  1547                                  .L_lambda_simple_params_end_078f:
  1548 000008DF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1549 000008E2 4889C3                  	mov rbx, rax
  1550 000008E5 58                      	pop rax
  1551 000008E6 C60004                  	mov byte [rax], T_closure
  1552 000008E9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1553 000008ED 48C74009[F7080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_078f
  1554 000008F5 EB65                    	jmp .L_lambda_simple_end_078f
  1555                                  .L_lambda_simple_code_078f:	; lambda-simple body
  1556 000008F7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1557 000008FD 740B                    	je .L_lambda_simple_arity_check_ok_083f
  1558 000008FF FF742410                	push qword [rsp + 8 * 2]
  1559 00000903 6A01                    	push 1
  1560 00000905 E954280000              	jmp L_error_incorrect_arity_simple
  1561                                  .L_lambda_simple_arity_check_ok_083f:
  1562 0000090A C8000000                	enter 0, 0
  1563                                  	; preparing a non-tail-call
  1564                                  	; preparing a non-tail-call
  1565 0000090E 488B4520                	mov rax, PARAM(0)	; param x
  1566 00000912 50                      	push rax
  1567 00000913 6A01                    	push 1	; arg count
  1568 00000915 488B0425[7D080000]      	mov rax, qword [free_var_8]	; free var caar
  1569 0000091D 803805                  	cmp byte [rax], T_undefined
  1570 00000920 0F8452270000            	je L_error_fvar_undefined
  1571 00000926 803804                  	cmp byte [rax], T_closure
  1572 00000929 0F85CD270000            	jne L_error_non_closure
  1573 0000092F FF7001                  	push SOB_CLOSURE_ENV(rax)
  1574 00000932 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1575 00000935 50                      	push rax
  1576 00000936 6A01                    	push 1	; arg count
  1577 00000938 488B0425[040A0000]      	mov rax, qword [free_var_31]	; free var cdr
  1578 00000940 803805                  	cmp byte [rax], T_undefined
  1579 00000943 0F842F270000            	je L_error_fvar_undefined
  1580 00000949 803804                  	cmp byte [rax], T_closure
  1581 0000094C 0F85AA270000            	jne L_error_non_closure
  1582 00000952 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1583 00000955 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1584 00000958 C9                      	leave
  1585 00000959 C21800                  	ret AND_KILL_FRAME(1)
  1586                                  .L_lambda_simple_end_078f:	; new closure is in rax
  1587 0000095C 48890425[38090000]      	mov qword [free_var_19], rax
  1588 00000964 48B8-                   	mov rax, sob_void
  1588 00000966 [0000000000000000] 
  1589                                  
  1590 0000096E 4889C7                  	mov rdi, rax
  1591 00000971 E8842A0000              	call print_sexpr_if_not_void
  1592 00000976 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1593 0000097B E825280000              	call malloc
  1594 00000980 50                      	push rax
  1595 00000981 BF00000000              	mov rdi, 8 * 0	; new rib
  1596 00000986 E81A280000              	call malloc
  1597 0000098B 50                      	push rax
  1598 0000098C BF08000000              	mov rdi, 8 * 1	; extended env
  1599 00000991 E80F280000              	call malloc
  1600 00000996 488B7D10                	mov rdi, ENV
  1601 0000099A BE00000000              	mov rsi, 0
  1602 0000099F BA01000000              	mov rdx, 1
  1603                                  .L_lambda_simple_env_loop_0790:	; ext_env[i + 1] <-- env[i]
  1604 000009A4 4883FE00                	cmp rsi, 0
  1605 000009A8 7410                    	je .L_lambda_simple_env_end_0790
  1606 000009AA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1607 000009AE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1608 000009B2 48FFC6                  	inc rsi
  1609 000009B5 48FFC2                  	inc rdx
  1610 000009B8 EBEA                    	jmp .L_lambda_simple_env_loop_0790
  1611                                  .L_lambda_simple_env_end_0790:
  1612 000009BA 5B                      	pop rbx
  1613 000009BB BE00000000              	mov rsi, 0
  1614                                  .L_lambda_simple_params_loop_0790:	; copy params
  1615 000009C0 4883FE00                	cmp rsi, 0
  1616 000009C4 740E                    	je .L_lambda_simple_params_end_0790
  1617 000009C6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1618 000009CB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1619 000009CF 48FFC6                  	inc rsi
  1620 000009D2 EBEC                    	jmp .L_lambda_simple_params_loop_0790
  1621                                  .L_lambda_simple_params_end_0790:
  1622 000009D4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1623 000009D7 4889C3                  	mov rbx, rax
  1624 000009DA 58                      	pop rax
  1625 000009DB C60004                  	mov byte [rax], T_closure
  1626 000009DE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1627 000009E2 48C74009[EC090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0790
  1628 000009EA EB65                    	jmp .L_lambda_simple_end_0790
  1629                                  .L_lambda_simple_code_0790:	; lambda-simple body
  1630 000009EC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1631 000009F2 740B                    	je .L_lambda_simple_arity_check_ok_0840
  1632 000009F4 FF742410                	push qword [rsp + 8 * 2]
  1633 000009F8 6A01                    	push 1
  1634 000009FA E95F270000              	jmp L_error_incorrect_arity_simple
  1635                                  .L_lambda_simple_arity_check_ok_0840:
  1636 000009FF C8000000                	enter 0, 0
  1637                                  	; preparing a non-tail-call
  1638                                  	; preparing a non-tail-call
  1639 00000A03 488B4520                	mov rax, PARAM(0)	; param x
  1640 00000A07 50                      	push rax
  1641 00000A08 6A01                    	push 1	; arg count
  1642 00000A0A 488B0425[F4080000]      	mov rax, qword [free_var_15]	; free var cadr
  1643 00000A12 803805                  	cmp byte [rax], T_undefined
  1644 00000A15 0F845D260000            	je L_error_fvar_undefined
  1645 00000A1B 803804                  	cmp byte [rax], T_closure
  1646 00000A1E 0F85D8260000            	jne L_error_non_closure
  1647 00000A24 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1648 00000A27 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1649 00000A2A 50                      	push rax
  1650 00000A2B 6A01                    	push 1	; arg count
  1651 00000A2D 488B0425[040A0000]      	mov rax, qword [free_var_31]	; free var cdr
  1652 00000A35 803805                  	cmp byte [rax], T_undefined
  1653 00000A38 0F843A260000            	je L_error_fvar_undefined
  1654 00000A3E 803804                  	cmp byte [rax], T_closure
  1655 00000A41 0F85B5260000            	jne L_error_non_closure
  1656 00000A47 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1657 00000A4A FF5009                  	call SOB_CLOSURE_CODE(rax)
  1658 00000A4D C9                      	leave
  1659 00000A4E C21800                  	ret AND_KILL_FRAME(1)
  1660                                  .L_lambda_simple_end_0790:	; new closure is in rax
  1661 00000A51 48890425[6B090000]      	mov qword [free_var_22], rax
  1662 00000A59 48B8-                   	mov rax, sob_void
  1662 00000A5B [0000000000000000] 
  1663                                  
  1664 00000A63 4889C7                  	mov rdi, rax
  1665 00000A66 E88F290000              	call print_sexpr_if_not_void
  1666 00000A6B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1667 00000A70 E830270000              	call malloc
  1668 00000A75 50                      	push rax
  1669 00000A76 BF00000000              	mov rdi, 8 * 0	; new rib
  1670 00000A7B E825270000              	call malloc
  1671 00000A80 50                      	push rax
  1672 00000A81 BF08000000              	mov rdi, 8 * 1	; extended env
  1673 00000A86 E81A270000              	call malloc
  1674 00000A8B 488B7D10                	mov rdi, ENV
  1675 00000A8F BE00000000              	mov rsi, 0
  1676 00000A94 BA01000000              	mov rdx, 1
  1677                                  .L_lambda_simple_env_loop_0791:	; ext_env[i + 1] <-- env[i]
  1678 00000A99 4883FE00                	cmp rsi, 0
  1679 00000A9D 7410                    	je .L_lambda_simple_env_end_0791
  1680 00000A9F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1681 00000AA3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1682 00000AA7 48FFC6                  	inc rsi
  1683 00000AAA 48FFC2                  	inc rdx
  1684 00000AAD EBEA                    	jmp .L_lambda_simple_env_loop_0791
  1685                                  .L_lambda_simple_env_end_0791:
  1686 00000AAF 5B                      	pop rbx
  1687 00000AB0 BE00000000              	mov rsi, 0
  1688                                  .L_lambda_simple_params_loop_0791:	; copy params
  1689 00000AB5 4883FE00                	cmp rsi, 0
  1690 00000AB9 740E                    	je .L_lambda_simple_params_end_0791
  1691 00000ABB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1692 00000AC0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1693 00000AC4 48FFC6                  	inc rsi
  1694 00000AC7 EBEC                    	jmp .L_lambda_simple_params_loop_0791
  1695                                  .L_lambda_simple_params_end_0791:
  1696 00000AC9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1697 00000ACC 4889C3                  	mov rbx, rax
  1698 00000ACF 58                      	pop rax
  1699 00000AD0 C60004                  	mov byte [rax], T_closure
  1700 00000AD3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1701 00000AD7 48C74009[E10A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0791
  1702 00000ADF EB65                    	jmp .L_lambda_simple_end_0791
  1703                                  .L_lambda_simple_code_0791:	; lambda-simple body
  1704 00000AE1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1705 00000AE7 740B                    	je .L_lambda_simple_arity_check_ok_0841
  1706 00000AE9 FF742410                	push qword [rsp + 8 * 2]
  1707 00000AED 6A01                    	push 1
  1708 00000AEF E96A260000              	jmp L_error_incorrect_arity_simple
  1709                                  .L_lambda_simple_arity_check_ok_0841:
  1710 00000AF4 C8000000                	enter 0, 0
  1711                                  	; preparing a non-tail-call
  1712                                  	; preparing a non-tail-call
  1713 00000AF8 488B4520                	mov rax, PARAM(0)	; param x
  1714 00000AFC 50                      	push rax
  1715 00000AFD 6A01                    	push 1	; arg count
  1716 00000AFF 488B0425[7C090000]      	mov rax, qword [free_var_23]	; free var cdar
  1717 00000B07 803805                  	cmp byte [rax], T_undefined
  1718 00000B0A 0F8468250000            	je L_error_fvar_undefined
  1719 00000B10 803804                  	cmp byte [rax], T_closure
  1720 00000B13 0F85E3250000            	jne L_error_non_closure
  1721 00000B19 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1722 00000B1C FF5009                  	call SOB_CLOSURE_CODE(rax)
  1723 00000B1F 50                      	push rax
  1724 00000B20 6A01                    	push 1	; arg count
  1725 00000B22 488B0425[040A0000]      	mov rax, qword [free_var_31]	; free var cdr
  1726 00000B2A 803805                  	cmp byte [rax], T_undefined
  1727 00000B2D 0F8445250000            	je L_error_fvar_undefined
  1728 00000B33 803804                  	cmp byte [rax], T_closure
  1729 00000B36 0F85C0250000            	jne L_error_non_closure
  1730 00000B3C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1731 00000B3F FF5009                  	call SOB_CLOSURE_CODE(rax)
  1732 00000B42 C9                      	leave
  1733 00000B43 C21800                  	ret AND_KILL_FRAME(1)
  1734                                  .L_lambda_simple_end_0791:	; new closure is in rax
  1735 00000B46 48890425[AF090000]      	mov qword [free_var_26], rax
  1736 00000B4E 48B8-                   	mov rax, sob_void
  1736 00000B50 [0000000000000000] 
  1737                                  
  1738 00000B58 4889C7                  	mov rdi, rax
  1739 00000B5B E89A280000              	call print_sexpr_if_not_void
  1740 00000B60 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1741 00000B65 E83B260000              	call malloc
  1742 00000B6A 50                      	push rax
  1743 00000B6B BF00000000              	mov rdi, 8 * 0	; new rib
  1744 00000B70 E830260000              	call malloc
  1745 00000B75 50                      	push rax
  1746 00000B76 BF08000000              	mov rdi, 8 * 1	; extended env
  1747 00000B7B E825260000              	call malloc
  1748 00000B80 488B7D10                	mov rdi, ENV
  1749 00000B84 BE00000000              	mov rsi, 0
  1750 00000B89 BA01000000              	mov rdx, 1
  1751                                  .L_lambda_simple_env_loop_0792:	; ext_env[i + 1] <-- env[i]
  1752 00000B8E 4883FE00                	cmp rsi, 0
  1753 00000B92 7410                    	je .L_lambda_simple_env_end_0792
  1754 00000B94 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1755 00000B98 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1756 00000B9C 48FFC6                  	inc rsi
  1757 00000B9F 48FFC2                  	inc rdx
  1758 00000BA2 EBEA                    	jmp .L_lambda_simple_env_loop_0792
  1759                                  .L_lambda_simple_env_end_0792:
  1760 00000BA4 5B                      	pop rbx
  1761 00000BA5 BE00000000              	mov rsi, 0
  1762                                  .L_lambda_simple_params_loop_0792:	; copy params
  1763 00000BAA 4883FE00                	cmp rsi, 0
  1764 00000BAE 740E                    	je .L_lambda_simple_params_end_0792
  1765 00000BB0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1766 00000BB5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1767 00000BB9 48FFC6                  	inc rsi
  1768 00000BBC EBEC                    	jmp .L_lambda_simple_params_loop_0792
  1769                                  .L_lambda_simple_params_end_0792:
  1770 00000BBE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1771 00000BC1 4889C3                  	mov rbx, rax
  1772 00000BC4 58                      	pop rax
  1773 00000BC5 C60004                  	mov byte [rax], T_closure
  1774 00000BC8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1775 00000BCC 48C74009[D60B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0792
  1776 00000BD4 EB65                    	jmp .L_lambda_simple_end_0792
  1777                                  .L_lambda_simple_code_0792:	; lambda-simple body
  1778 00000BD6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1779 00000BDC 740B                    	je .L_lambda_simple_arity_check_ok_0842
  1780 00000BDE FF742410                	push qword [rsp + 8 * 2]
  1781 00000BE2 6A01                    	push 1
  1782 00000BE4 E975250000              	jmp L_error_incorrect_arity_simple
  1783                                  .L_lambda_simple_arity_check_ok_0842:
  1784 00000BE9 C8000000                	enter 0, 0
  1785                                  	; preparing a non-tail-call
  1786                                  	; preparing a non-tail-call
  1787 00000BED 488B4520                	mov rax, PARAM(0)	; param x
  1788 00000BF1 50                      	push rax
  1789 00000BF2 6A01                    	push 1	; arg count
  1790 00000BF4 488B0425[F3090000]      	mov rax, qword [free_var_30]	; free var cddr
  1791 00000BFC 803805                  	cmp byte [rax], T_undefined
  1792 00000BFF 0F8473240000            	je L_error_fvar_undefined
  1793 00000C05 803804                  	cmp byte [rax], T_closure
  1794 00000C08 0F85EE240000            	jne L_error_non_closure
  1795 00000C0E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1796 00000C11 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1797 00000C14 50                      	push rax
  1798 00000C15 6A01                    	push 1	; arg count
  1799 00000C17 488B0425[040A0000]      	mov rax, qword [free_var_31]	; free var cdr
  1800 00000C1F 803805                  	cmp byte [rax], T_undefined
  1801 00000C22 0F8450240000            	je L_error_fvar_undefined
  1802 00000C28 803804                  	cmp byte [rax], T_closure
  1803 00000C2B 0F85CB240000            	jne L_error_non_closure
  1804 00000C31 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1805 00000C34 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1806 00000C37 C9                      	leave
  1807 00000C38 C21800                  	ret AND_KILL_FRAME(1)
  1808                                  .L_lambda_simple_end_0792:	; new closure is in rax
  1809 00000C3B 48890425[E2090000]      	mov qword [free_var_29], rax
  1810 00000C43 48B8-                   	mov rax, sob_void
  1810 00000C45 [0000000000000000] 
  1811                                  
  1812 00000C4D 4889C7                  	mov rdi, rax
  1813 00000C50 E8A5270000              	call print_sexpr_if_not_void
  1814 00000C55 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1815 00000C5A E846250000              	call malloc
  1816 00000C5F 50                      	push rax
  1817 00000C60 BF00000000              	mov rdi, 8 * 0	; new rib
  1818 00000C65 E83B250000              	call malloc
  1819 00000C6A 50                      	push rax
  1820 00000C6B BF08000000              	mov rdi, 8 * 1	; extended env
  1821 00000C70 E830250000              	call malloc
  1822 00000C75 488B7D10                	mov rdi, ENV
  1823 00000C79 BE00000000              	mov rsi, 0
  1824 00000C7E BA01000000              	mov rdx, 1
  1825                                  .L_lambda_simple_env_loop_0793:	; ext_env[i + 1] <-- env[i]
  1826 00000C83 4883FE00                	cmp rsi, 0
  1827 00000C87 7410                    	je .L_lambda_simple_env_end_0793
  1828 00000C89 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1829 00000C8D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1830 00000C91 48FFC6                  	inc rsi
  1831 00000C94 48FFC2                  	inc rdx
  1832 00000C97 EBEA                    	jmp .L_lambda_simple_env_loop_0793
  1833                                  .L_lambda_simple_env_end_0793:
  1834 00000C99 5B                      	pop rbx
  1835 00000C9A BE00000000              	mov rsi, 0
  1836                                  .L_lambda_simple_params_loop_0793:	; copy params
  1837 00000C9F 4883FE00                	cmp rsi, 0
  1838 00000CA3 740E                    	je .L_lambda_simple_params_end_0793
  1839 00000CA5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1840 00000CAA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1841 00000CAE 48FFC6                  	inc rsi
  1842 00000CB1 EBEC                    	jmp .L_lambda_simple_params_loop_0793
  1843                                  .L_lambda_simple_params_end_0793:
  1844 00000CB3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1845 00000CB6 4889C3                  	mov rbx, rax
  1846 00000CB9 58                      	pop rax
  1847 00000CBA C60004                  	mov byte [rax], T_closure
  1848 00000CBD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1849 00000CC1 48C74009[CB0C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0793
  1850 00000CC9 EB65                    	jmp .L_lambda_simple_end_0793
  1851                                  .L_lambda_simple_code_0793:	; lambda-simple body
  1852 00000CCB 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1853 00000CD1 740B                    	je .L_lambda_simple_arity_check_ok_0843
  1854 00000CD3 FF742410                	push qword [rsp + 8 * 2]
  1855 00000CD7 6A01                    	push 1
  1856 00000CD9 E980240000              	jmp L_error_incorrect_arity_simple
  1857                                  .L_lambda_simple_arity_check_ok_0843:
  1858 00000CDE C8000000                	enter 0, 0
  1859                                  	; preparing a non-tail-call
  1860                                  	; preparing a non-tail-call
  1861 00000CE2 488B4520                	mov rax, PARAM(0)	; param x
  1862 00000CE6 50                      	push rax
  1863 00000CE7 6A01                    	push 1	; arg count
  1864 00000CE9 488B0425[7D080000]      	mov rax, qword [free_var_8]	; free var caar
  1865 00000CF1 803805                  	cmp byte [rax], T_undefined
  1866 00000CF4 0F847E230000            	je L_error_fvar_undefined
  1867 00000CFA 803804                  	cmp byte [rax], T_closure
  1868 00000CFD 0F85F9230000            	jne L_error_non_closure
  1869 00000D03 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1870 00000D06 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1871 00000D09 50                      	push rax
  1872 00000D0A 6A01                    	push 1	; arg count
  1873 00000D0C 488B0425[7D080000]      	mov rax, qword [free_var_8]	; free var caar
  1874 00000D14 803805                  	cmp byte [rax], T_undefined
  1875 00000D17 0F845B230000            	je L_error_fvar_undefined
  1876 00000D1D 803804                  	cmp byte [rax], T_closure
  1877 00000D20 0F85D6230000            	jne L_error_non_closure
  1878 00000D26 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1879 00000D29 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1880 00000D2C C9                      	leave
  1881 00000D2D C21800                  	ret AND_KILL_FRAME(1)
  1882                                  .L_lambda_simple_end_0793:	; new closure is in rax
  1883 00000D30 48890425[17080000]      	mov qword [free_var_2], rax
  1884 00000D38 48B8-                   	mov rax, sob_void
  1884 00000D3A [0000000000000000] 
  1885                                  
  1886 00000D42 4889C7                  	mov rdi, rax
  1887 00000D45 E8B0260000              	call print_sexpr_if_not_void
  1888 00000D4A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1889 00000D4F E851240000              	call malloc
  1890 00000D54 50                      	push rax
  1891 00000D55 BF00000000              	mov rdi, 8 * 0	; new rib
  1892 00000D5A E846240000              	call malloc
  1893 00000D5F 50                      	push rax
  1894 00000D60 BF08000000              	mov rdi, 8 * 1	; extended env
  1895 00000D65 E83B240000              	call malloc
  1896 00000D6A 488B7D10                	mov rdi, ENV
  1897 00000D6E BE00000000              	mov rsi, 0
  1898 00000D73 BA01000000              	mov rdx, 1
  1899                                  .L_lambda_simple_env_loop_0794:	; ext_env[i + 1] <-- env[i]
  1900 00000D78 4883FE00                	cmp rsi, 0
  1901 00000D7C 7410                    	je .L_lambda_simple_env_end_0794
  1902 00000D7E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1903 00000D82 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1904 00000D86 48FFC6                  	inc rsi
  1905 00000D89 48FFC2                  	inc rdx
  1906 00000D8C EBEA                    	jmp .L_lambda_simple_env_loop_0794
  1907                                  .L_lambda_simple_env_end_0794:
  1908 00000D8E 5B                      	pop rbx
  1909 00000D8F BE00000000              	mov rsi, 0
  1910                                  .L_lambda_simple_params_loop_0794:	; copy params
  1911 00000D94 4883FE00                	cmp rsi, 0
  1912 00000D98 740E                    	je .L_lambda_simple_params_end_0794
  1913 00000D9A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1914 00000D9F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1915 00000DA3 48FFC6                  	inc rsi
  1916 00000DA6 EBEC                    	jmp .L_lambda_simple_params_loop_0794
  1917                                  .L_lambda_simple_params_end_0794:
  1918 00000DA8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1919 00000DAB 4889C3                  	mov rbx, rax
  1920 00000DAE 58                      	pop rax
  1921 00000DAF C60004                  	mov byte [rax], T_closure
  1922 00000DB2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1923 00000DB6 48C74009[C00D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0794
  1924 00000DBE EB65                    	jmp .L_lambda_simple_end_0794
  1925                                  .L_lambda_simple_code_0794:	; lambda-simple body
  1926 00000DC0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1927 00000DC6 740B                    	je .L_lambda_simple_arity_check_ok_0844
  1928 00000DC8 FF742410                	push qword [rsp + 8 * 2]
  1929 00000DCC 6A01                    	push 1
  1930 00000DCE E98B230000              	jmp L_error_incorrect_arity_simple
  1931                                  .L_lambda_simple_arity_check_ok_0844:
  1932 00000DD3 C8000000                	enter 0, 0
  1933                                  	; preparing a non-tail-call
  1934                                  	; preparing a non-tail-call
  1935 00000DD7 488B4520                	mov rax, PARAM(0)	; param x
  1936 00000DDB 50                      	push rax
  1937 00000DDC 6A01                    	push 1	; arg count
  1938 00000DDE 488B0425[F4080000]      	mov rax, qword [free_var_15]	; free var cadr
  1939 00000DE6 803805                  	cmp byte [rax], T_undefined
  1940 00000DE9 0F8489220000            	je L_error_fvar_undefined
  1941 00000DEF 803804                  	cmp byte [rax], T_closure
  1942 00000DF2 0F8504230000            	jne L_error_non_closure
  1943 00000DF8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1944 00000DFB FF5009                  	call SOB_CLOSURE_CODE(rax)
  1945 00000DFE 50                      	push rax
  1946 00000DFF 6A01                    	push 1	; arg count
  1947 00000E01 488B0425[7D080000]      	mov rax, qword [free_var_8]	; free var caar
  1948 00000E09 803805                  	cmp byte [rax], T_undefined
  1949 00000E0C 0F8466220000            	je L_error_fvar_undefined
  1950 00000E12 803804                  	cmp byte [rax], T_closure
  1951 00000E15 0F85E1220000            	jne L_error_non_closure
  1952 00000E1B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1953 00000E1E FF5009                  	call SOB_CLOSURE_CODE(rax)
  1954 00000E21 C9                      	leave
  1955 00000E22 C21800                  	ret AND_KILL_FRAME(1)
  1956                                  .L_lambda_simple_end_0794:	; new closure is in rax
  1957 00000E25 48890425[28080000]      	mov qword [free_var_3], rax
  1958 00000E2D 48B8-                   	mov rax, sob_void
  1958 00000E2F [0000000000000000] 
  1959                                  
  1960 00000E37 4889C7                  	mov rdi, rax
  1961 00000E3A E8BB250000              	call print_sexpr_if_not_void
  1962 00000E3F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1963 00000E44 E85C230000              	call malloc
  1964 00000E49 50                      	push rax
  1965 00000E4A BF00000000              	mov rdi, 8 * 0	; new rib
  1966 00000E4F E851230000              	call malloc
  1967 00000E54 50                      	push rax
  1968 00000E55 BF08000000              	mov rdi, 8 * 1	; extended env
  1969 00000E5A E846230000              	call malloc
  1970 00000E5F 488B7D10                	mov rdi, ENV
  1971 00000E63 BE00000000              	mov rsi, 0
  1972 00000E68 BA01000000              	mov rdx, 1
  1973                                  .L_lambda_simple_env_loop_0795:	; ext_env[i + 1] <-- env[i]
  1974 00000E6D 4883FE00                	cmp rsi, 0
  1975 00000E71 7410                    	je .L_lambda_simple_env_end_0795
  1976 00000E73 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1977 00000E77 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1978 00000E7B 48FFC6                  	inc rsi
  1979 00000E7E 48FFC2                  	inc rdx
  1980 00000E81 EBEA                    	jmp .L_lambda_simple_env_loop_0795
  1981                                  .L_lambda_simple_env_end_0795:
  1982 00000E83 5B                      	pop rbx
  1983 00000E84 BE00000000              	mov rsi, 0
  1984                                  .L_lambda_simple_params_loop_0795:	; copy params
  1985 00000E89 4883FE00                	cmp rsi, 0
  1986 00000E8D 740E                    	je .L_lambda_simple_params_end_0795
  1987 00000E8F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1988 00000E94 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1989 00000E98 48FFC6                  	inc rsi
  1990 00000E9B EBEC                    	jmp .L_lambda_simple_params_loop_0795
  1991                                  .L_lambda_simple_params_end_0795:
  1992 00000E9D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1993 00000EA0 4889C3                  	mov rbx, rax
  1994 00000EA3 58                      	pop rax
  1995 00000EA4 C60004                  	mov byte [rax], T_closure
  1996 00000EA7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1997 00000EAB 48C74009[B50E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0795
  1998 00000EB3 EB65                    	jmp .L_lambda_simple_end_0795
  1999                                  .L_lambda_simple_code_0795:	; lambda-simple body
  2000 00000EB5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2001 00000EBB 740B                    	je .L_lambda_simple_arity_check_ok_0845
  2002 00000EBD FF742410                	push qword [rsp + 8 * 2]
  2003 00000EC1 6A01                    	push 1
  2004 00000EC3 E996220000              	jmp L_error_incorrect_arity_simple
  2005                                  .L_lambda_simple_arity_check_ok_0845:
  2006 00000EC8 C8000000                	enter 0, 0
  2007                                  	; preparing a non-tail-call
  2008                                  	; preparing a non-tail-call
  2009 00000ECC 488B4520                	mov rax, PARAM(0)	; param x
  2010 00000ED0 50                      	push rax
  2011 00000ED1 6A01                    	push 1	; arg count
  2012 00000ED3 488B0425[7C090000]      	mov rax, qword [free_var_23]	; free var cdar
  2013 00000EDB 803805                  	cmp byte [rax], T_undefined
  2014 00000EDE 0F8494210000            	je L_error_fvar_undefined
  2015 00000EE4 803804                  	cmp byte [rax], T_closure
  2016 00000EE7 0F850F220000            	jne L_error_non_closure
  2017 00000EED FF7001                  	push SOB_CLOSURE_ENV(rax)
  2018 00000EF0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2019 00000EF3 50                      	push rax
  2020 00000EF4 6A01                    	push 1	; arg count
  2021 00000EF6 488B0425[7D080000]      	mov rax, qword [free_var_8]	; free var caar
  2022 00000EFE 803805                  	cmp byte [rax], T_undefined
  2023 00000F01 0F8471210000            	je L_error_fvar_undefined
  2024 00000F07 803804                  	cmp byte [rax], T_closure
  2025 00000F0A 0F85EC210000            	jne L_error_non_closure
  2026 00000F10 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2027 00000F13 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2028 00000F16 C9                      	leave
  2029 00000F17 C21800                  	ret AND_KILL_FRAME(1)
  2030                                  .L_lambda_simple_end_0795:	; new closure is in rax
  2031 00000F1A 48890425[4A080000]      	mov qword [free_var_5], rax
  2032 00000F22 48B8-                   	mov rax, sob_void
  2032 00000F24 [0000000000000000] 
  2033                                  
  2034 00000F2C 4889C7                  	mov rdi, rax
  2035 00000F2F E8C6240000              	call print_sexpr_if_not_void
  2036 00000F34 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2037 00000F39 E867220000              	call malloc
  2038 00000F3E 50                      	push rax
  2039 00000F3F BF00000000              	mov rdi, 8 * 0	; new rib
  2040 00000F44 E85C220000              	call malloc
  2041 00000F49 50                      	push rax
  2042 00000F4A BF08000000              	mov rdi, 8 * 1	; extended env
  2043 00000F4F E851220000              	call malloc
  2044 00000F54 488B7D10                	mov rdi, ENV
  2045 00000F58 BE00000000              	mov rsi, 0
  2046 00000F5D BA01000000              	mov rdx, 1
  2047                                  .L_lambda_simple_env_loop_0796:	; ext_env[i + 1] <-- env[i]
  2048 00000F62 4883FE00                	cmp rsi, 0
  2049 00000F66 7410                    	je .L_lambda_simple_env_end_0796
  2050 00000F68 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2051 00000F6C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2052 00000F70 48FFC6                  	inc rsi
  2053 00000F73 48FFC2                  	inc rdx
  2054 00000F76 EBEA                    	jmp .L_lambda_simple_env_loop_0796
  2055                                  .L_lambda_simple_env_end_0796:
  2056 00000F78 5B                      	pop rbx
  2057 00000F79 BE00000000              	mov rsi, 0
  2058                                  .L_lambda_simple_params_loop_0796:	; copy params
  2059 00000F7E 4883FE00                	cmp rsi, 0
  2060 00000F82 740E                    	je .L_lambda_simple_params_end_0796
  2061 00000F84 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2062 00000F89 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2063 00000F8D 48FFC6                  	inc rsi
  2064 00000F90 EBEC                    	jmp .L_lambda_simple_params_loop_0796
  2065                                  .L_lambda_simple_params_end_0796:
  2066 00000F92 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2067 00000F95 4889C3                  	mov rbx, rax
  2068 00000F98 58                      	pop rax
  2069 00000F99 C60004                  	mov byte [rax], T_closure
  2070 00000F9C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2071 00000FA0 48C74009[AA0F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0796
  2072 00000FA8 EB65                    	jmp .L_lambda_simple_end_0796
  2073                                  .L_lambda_simple_code_0796:	; lambda-simple body
  2074 00000FAA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2075 00000FB0 740B                    	je .L_lambda_simple_arity_check_ok_0846
  2076 00000FB2 FF742410                	push qword [rsp + 8 * 2]
  2077 00000FB6 6A01                    	push 1
  2078 00000FB8 E9A1210000              	jmp L_error_incorrect_arity_simple
  2079                                  .L_lambda_simple_arity_check_ok_0846:
  2080 00000FBD C8000000                	enter 0, 0
  2081                                  	; preparing a non-tail-call
  2082                                  	; preparing a non-tail-call
  2083 00000FC1 488B4520                	mov rax, PARAM(0)	; param x
  2084 00000FC5 50                      	push rax
  2085 00000FC6 6A01                    	push 1	; arg count
  2086 00000FC8 488B0425[F3090000]      	mov rax, qword [free_var_30]	; free var cddr
  2087 00000FD0 803805                  	cmp byte [rax], T_undefined
  2088 00000FD3 0F849F200000            	je L_error_fvar_undefined
  2089 00000FD9 803804                  	cmp byte [rax], T_closure
  2090 00000FDC 0F851A210000            	jne L_error_non_closure
  2091 00000FE2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2092 00000FE5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2093 00000FE8 50                      	push rax
  2094 00000FE9 6A01                    	push 1	; arg count
  2095 00000FEB 488B0425[7D080000]      	mov rax, qword [free_var_8]	; free var caar
  2096 00000FF3 803805                  	cmp byte [rax], T_undefined
  2097 00000FF6 0F847C200000            	je L_error_fvar_undefined
  2098 00000FFC 803804                  	cmp byte [rax], T_closure
  2099 00000FFF 0F85F7200000            	jne L_error_non_closure
  2100 00001005 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2101 00001008 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2102 0000100B C9                      	leave
  2103 0000100C C21800                  	ret AND_KILL_FRAME(1)
  2104                                  .L_lambda_simple_end_0796:	; new closure is in rax
  2105 0000100F 48890425[5B080000]      	mov qword [free_var_6], rax
  2106 00001017 48B8-                   	mov rax, sob_void
  2106 00001019 [0000000000000000] 
  2107                                  
  2108 00001021 4889C7                  	mov rdi, rax
  2109 00001024 E8D1230000              	call print_sexpr_if_not_void
  2110 00001029 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2111 0000102E E872210000              	call malloc
  2112 00001033 50                      	push rax
  2113 00001034 BF00000000              	mov rdi, 8 * 0	; new rib
  2114 00001039 E867210000              	call malloc
  2115 0000103E 50                      	push rax
  2116 0000103F BF08000000              	mov rdi, 8 * 1	; extended env
  2117 00001044 E85C210000              	call malloc
  2118 00001049 488B7D10                	mov rdi, ENV
  2119 0000104D BE00000000              	mov rsi, 0
  2120 00001052 BA01000000              	mov rdx, 1
  2121                                  .L_lambda_simple_env_loop_0797:	; ext_env[i + 1] <-- env[i]
  2122 00001057 4883FE00                	cmp rsi, 0
  2123 0000105B 7410                    	je .L_lambda_simple_env_end_0797
  2124 0000105D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2125 00001061 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2126 00001065 48FFC6                  	inc rsi
  2127 00001068 48FFC2                  	inc rdx
  2128 0000106B EBEA                    	jmp .L_lambda_simple_env_loop_0797
  2129                                  .L_lambda_simple_env_end_0797:
  2130 0000106D 5B                      	pop rbx
  2131 0000106E BE00000000              	mov rsi, 0
  2132                                  .L_lambda_simple_params_loop_0797:	; copy params
  2133 00001073 4883FE00                	cmp rsi, 0
  2134 00001077 740E                    	je .L_lambda_simple_params_end_0797
  2135 00001079 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2136 0000107E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2137 00001082 48FFC6                  	inc rsi
  2138 00001085 EBEC                    	jmp .L_lambda_simple_params_loop_0797
  2139                                  .L_lambda_simple_params_end_0797:
  2140 00001087 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2141 0000108A 4889C3                  	mov rbx, rax
  2142 0000108D 58                      	pop rax
  2143 0000108E C60004                  	mov byte [rax], T_closure
  2144 00001091 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2145 00001095 48C74009[9F100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0797
  2146 0000109D EB65                    	jmp .L_lambda_simple_end_0797
  2147                                  .L_lambda_simple_code_0797:	; lambda-simple body
  2148 0000109F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2149 000010A5 740B                    	je .L_lambda_simple_arity_check_ok_0847
  2150 000010A7 FF742410                	push qword [rsp + 8 * 2]
  2151 000010AB 6A01                    	push 1
  2152 000010AD E9AC200000              	jmp L_error_incorrect_arity_simple
  2153                                  .L_lambda_simple_arity_check_ok_0847:
  2154 000010B2 C8000000                	enter 0, 0
  2155                                  	; preparing a non-tail-call
  2156                                  	; preparing a non-tail-call
  2157 000010B6 488B4520                	mov rax, PARAM(0)	; param x
  2158 000010BA 50                      	push rax
  2159 000010BB 6A01                    	push 1	; arg count
  2160 000010BD 488B0425[7D080000]      	mov rax, qword [free_var_8]	; free var caar
  2161 000010C5 803805                  	cmp byte [rax], T_undefined
  2162 000010C8 0F84AA1F0000            	je L_error_fvar_undefined
  2163 000010CE 803804                  	cmp byte [rax], T_closure
  2164 000010D1 0F8525200000            	jne L_error_non_closure
  2165 000010D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2166 000010DA FF5009                  	call SOB_CLOSURE_CODE(rax)
  2167 000010DD 50                      	push rax
  2168 000010DE 6A01                    	push 1	; arg count
  2169 000010E0 488B0425[F4080000]      	mov rax, qword [free_var_15]	; free var cadr
  2170 000010E8 803805                  	cmp byte [rax], T_undefined
  2171 000010EB 0F84871F0000            	je L_error_fvar_undefined
  2172 000010F1 803804                  	cmp byte [rax], T_closure
  2173 000010F4 0F8502200000            	jne L_error_non_closure
  2174 000010FA FF7001                  	push SOB_CLOSURE_ENV(rax)
  2175 000010FD FF5009                  	call SOB_CLOSURE_CODE(rax)
  2176 00001100 C9                      	leave
  2177 00001101 C21800                  	ret AND_KILL_FRAME(1)
  2178                                  .L_lambda_simple_end_0797:	; new closure is in rax
  2179 00001104 48890425[8E080000]      	mov qword [free_var_9], rax
  2180 0000110C 48B8-                   	mov rax, sob_void
  2180 0000110E [0000000000000000] 
  2181                                  
  2182 00001116 4889C7                  	mov rdi, rax
  2183 00001119 E8DC220000              	call print_sexpr_if_not_void
  2184 0000111E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2185 00001123 E87D200000              	call malloc
  2186 00001128 50                      	push rax
  2187 00001129 BF00000000              	mov rdi, 8 * 0	; new rib
  2188 0000112E E872200000              	call malloc
  2189 00001133 50                      	push rax
  2190 00001134 BF08000000              	mov rdi, 8 * 1	; extended env
  2191 00001139 E867200000              	call malloc
  2192 0000113E 488B7D10                	mov rdi, ENV
  2193 00001142 BE00000000              	mov rsi, 0
  2194 00001147 BA01000000              	mov rdx, 1
  2195                                  .L_lambda_simple_env_loop_0798:	; ext_env[i + 1] <-- env[i]
  2196 0000114C 4883FE00                	cmp rsi, 0
  2197 00001150 7410                    	je .L_lambda_simple_env_end_0798
  2198 00001152 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2199 00001156 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2200 0000115A 48FFC6                  	inc rsi
  2201 0000115D 48FFC2                  	inc rdx
  2202 00001160 EBEA                    	jmp .L_lambda_simple_env_loop_0798
  2203                                  .L_lambda_simple_env_end_0798:
  2204 00001162 5B                      	pop rbx
  2205 00001163 BE00000000              	mov rsi, 0
  2206                                  .L_lambda_simple_params_loop_0798:	; copy params
  2207 00001168 4883FE00                	cmp rsi, 0
  2208 0000116C 740E                    	je .L_lambda_simple_params_end_0798
  2209 0000116E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2210 00001173 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2211 00001177 48FFC6                  	inc rsi
  2212 0000117A EBEC                    	jmp .L_lambda_simple_params_loop_0798
  2213                                  .L_lambda_simple_params_end_0798:
  2214 0000117C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2215 0000117F 4889C3                  	mov rbx, rax
  2216 00001182 58                      	pop rax
  2217 00001183 C60004                  	mov byte [rax], T_closure
  2218 00001186 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2219 0000118A 48C74009[94110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0798
  2220 00001192 EB65                    	jmp .L_lambda_simple_end_0798
  2221                                  .L_lambda_simple_code_0798:	; lambda-simple body
  2222 00001194 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2223 0000119A 740B                    	je .L_lambda_simple_arity_check_ok_0848
  2224 0000119C FF742410                	push qword [rsp + 8 * 2]
  2225 000011A0 6A01                    	push 1
  2226 000011A2 E9B71F0000              	jmp L_error_incorrect_arity_simple
  2227                                  .L_lambda_simple_arity_check_ok_0848:
  2228 000011A7 C8000000                	enter 0, 0
  2229                                  	; preparing a non-tail-call
  2230                                  	; preparing a non-tail-call
  2231 000011AB 488B4520                	mov rax, PARAM(0)	; param x
  2232 000011AF 50                      	push rax
  2233 000011B0 6A01                    	push 1	; arg count
  2234 000011B2 488B0425[F4080000]      	mov rax, qword [free_var_15]	; free var cadr
  2235 000011BA 803805                  	cmp byte [rax], T_undefined
  2236 000011BD 0F84B51E0000            	je L_error_fvar_undefined
  2237 000011C3 803804                  	cmp byte [rax], T_closure
  2238 000011C6 0F85301F0000            	jne L_error_non_closure
  2239 000011CC FF7001                  	push SOB_CLOSURE_ENV(rax)
  2240 000011CF FF5009                  	call SOB_CLOSURE_CODE(rax)
  2241 000011D2 50                      	push rax
  2242 000011D3 6A01                    	push 1	; arg count
  2243 000011D5 488B0425[F4080000]      	mov rax, qword [free_var_15]	; free var cadr
  2244 000011DD 803805                  	cmp byte [rax], T_undefined
  2245 000011E0 0F84921E0000            	je L_error_fvar_undefined
  2246 000011E6 803804                  	cmp byte [rax], T_closure
  2247 000011E9 0F850D1F0000            	jne L_error_non_closure
  2248 000011EF FF7001                  	push SOB_CLOSURE_ENV(rax)
  2249 000011F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2250 000011F5 C9                      	leave
  2251 000011F6 C21800                  	ret AND_KILL_FRAME(1)
  2252                                  .L_lambda_simple_end_0798:	; new closure is in rax
  2253 000011F9 48890425[9F080000]      	mov qword [free_var_10], rax
  2254 00001201 48B8-                   	mov rax, sob_void
  2254 00001203 [0000000000000000] 
  2255                                  
  2256 0000120B 4889C7                  	mov rdi, rax
  2257 0000120E E8E7210000              	call print_sexpr_if_not_void
  2258 00001213 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2259 00001218 E8881F0000              	call malloc
  2260 0000121D 50                      	push rax
  2261 0000121E BF00000000              	mov rdi, 8 * 0	; new rib
  2262 00001223 E87D1F0000              	call malloc
  2263 00001228 50                      	push rax
  2264 00001229 BF08000000              	mov rdi, 8 * 1	; extended env
  2265 0000122E E8721F0000              	call malloc
  2266 00001233 488B7D10                	mov rdi, ENV
  2267 00001237 BE00000000              	mov rsi, 0
  2268 0000123C BA01000000              	mov rdx, 1
  2269                                  .L_lambda_simple_env_loop_0799:	; ext_env[i + 1] <-- env[i]
  2270 00001241 4883FE00                	cmp rsi, 0
  2271 00001245 7410                    	je .L_lambda_simple_env_end_0799
  2272 00001247 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2273 0000124B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2274 0000124F 48FFC6                  	inc rsi
  2275 00001252 48FFC2                  	inc rdx
  2276 00001255 EBEA                    	jmp .L_lambda_simple_env_loop_0799
  2277                                  .L_lambda_simple_env_end_0799:
  2278 00001257 5B                      	pop rbx
  2279 00001258 BE00000000              	mov rsi, 0
  2280                                  .L_lambda_simple_params_loop_0799:	; copy params
  2281 0000125D 4883FE00                	cmp rsi, 0
  2282 00001261 740E                    	je .L_lambda_simple_params_end_0799
  2283 00001263 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2284 00001268 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2285 0000126C 48FFC6                  	inc rsi
  2286 0000126F EBEC                    	jmp .L_lambda_simple_params_loop_0799
  2287                                  .L_lambda_simple_params_end_0799:
  2288 00001271 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2289 00001274 4889C3                  	mov rbx, rax
  2290 00001277 58                      	pop rax
  2291 00001278 C60004                  	mov byte [rax], T_closure
  2292 0000127B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2293 0000127F 48C74009[89120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0799
  2294 00001287 EB65                    	jmp .L_lambda_simple_end_0799
  2295                                  .L_lambda_simple_code_0799:	; lambda-simple body
  2296 00001289 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2297 0000128F 740B                    	je .L_lambda_simple_arity_check_ok_0849
  2298 00001291 FF742410                	push qword [rsp + 8 * 2]
  2299 00001295 6A01                    	push 1
  2300 00001297 E9C21E0000              	jmp L_error_incorrect_arity_simple
  2301                                  .L_lambda_simple_arity_check_ok_0849:
  2302 0000129C C8000000                	enter 0, 0
  2303                                  	; preparing a non-tail-call
  2304                                  	; preparing a non-tail-call
  2305 000012A0 488B4520                	mov rax, PARAM(0)	; param x
  2306 000012A4 50                      	push rax
  2307 000012A5 6A01                    	push 1	; arg count
  2308 000012A7 488B0425[7C090000]      	mov rax, qword [free_var_23]	; free var cdar
  2309 000012AF 803805                  	cmp byte [rax], T_undefined
  2310 000012B2 0F84C01D0000            	je L_error_fvar_undefined
  2311 000012B8 803804                  	cmp byte [rax], T_closure
  2312 000012BB 0F853B1E0000            	jne L_error_non_closure
  2313 000012C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2314 000012C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2315 000012C7 50                      	push rax
  2316 000012C8 6A01                    	push 1	; arg count
  2317 000012CA 488B0425[F4080000]      	mov rax, qword [free_var_15]	; free var cadr
  2318 000012D2 803805                  	cmp byte [rax], T_undefined
  2319 000012D5 0F849D1D0000            	je L_error_fvar_undefined
  2320 000012DB 803804                  	cmp byte [rax], T_closure
  2321 000012DE 0F85181E0000            	jne L_error_non_closure
  2322 000012E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2323 000012E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2324 000012EA C9                      	leave
  2325 000012EB C21800                  	ret AND_KILL_FRAME(1)
  2326                                  .L_lambda_simple_end_0799:	; new closure is in rax
  2327 000012EE 48890425[C1080000]      	mov qword [free_var_12], rax
  2328 000012F6 48B8-                   	mov rax, sob_void
  2328 000012F8 [0000000000000000] 
  2329                                  
  2330 00001300 4889C7                  	mov rdi, rax
  2331 00001303 E8F2200000              	call print_sexpr_if_not_void
  2332 00001308 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2333 0000130D E8931E0000              	call malloc
  2334 00001312 50                      	push rax
  2335 00001313 BF00000000              	mov rdi, 8 * 0	; new rib
  2336 00001318 E8881E0000              	call malloc
  2337 0000131D 50                      	push rax
  2338 0000131E BF08000000              	mov rdi, 8 * 1	; extended env
  2339 00001323 E87D1E0000              	call malloc
  2340 00001328 488B7D10                	mov rdi, ENV
  2341 0000132C BE00000000              	mov rsi, 0
  2342 00001331 BA01000000              	mov rdx, 1
  2343                                  .L_lambda_simple_env_loop_079a:	; ext_env[i + 1] <-- env[i]
  2344 00001336 4883FE00                	cmp rsi, 0
  2345 0000133A 7410                    	je .L_lambda_simple_env_end_079a
  2346 0000133C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2347 00001340 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2348 00001344 48FFC6                  	inc rsi
  2349 00001347 48FFC2                  	inc rdx
  2350 0000134A EBEA                    	jmp .L_lambda_simple_env_loop_079a
  2351                                  .L_lambda_simple_env_end_079a:
  2352 0000134C 5B                      	pop rbx
  2353 0000134D BE00000000              	mov rsi, 0
  2354                                  .L_lambda_simple_params_loop_079a:	; copy params
  2355 00001352 4883FE00                	cmp rsi, 0
  2356 00001356 740E                    	je .L_lambda_simple_params_end_079a
  2357 00001358 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2358 0000135D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2359 00001361 48FFC6                  	inc rsi
  2360 00001364 EBEC                    	jmp .L_lambda_simple_params_loop_079a
  2361                                  .L_lambda_simple_params_end_079a:
  2362 00001366 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2363 00001369 4889C3                  	mov rbx, rax
  2364 0000136C 58                      	pop rax
  2365 0000136D C60004                  	mov byte [rax], T_closure
  2366 00001370 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2367 00001374 48C74009[7E130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_079a
  2368 0000137C EB65                    	jmp .L_lambda_simple_end_079a
  2369                                  .L_lambda_simple_code_079a:	; lambda-simple body
  2370 0000137E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2371 00001384 740B                    	je .L_lambda_simple_arity_check_ok_084a
  2372 00001386 FF742410                	push qword [rsp + 8 * 2]
  2373 0000138A 6A01                    	push 1
  2374 0000138C E9CD1D0000              	jmp L_error_incorrect_arity_simple
  2375                                  .L_lambda_simple_arity_check_ok_084a:
  2376 00001391 C8000000                	enter 0, 0
  2377                                  	; preparing a non-tail-call
  2378                                  	; preparing a non-tail-call
  2379 00001395 488B4520                	mov rax, PARAM(0)	; param x
  2380 00001399 50                      	push rax
  2381 0000139A 6A01                    	push 1	; arg count
  2382 0000139C 488B0425[F3090000]      	mov rax, qword [free_var_30]	; free var cddr
  2383 000013A4 803805                  	cmp byte [rax], T_undefined
  2384 000013A7 0F84CB1C0000            	je L_error_fvar_undefined
  2385 000013AD 803804                  	cmp byte [rax], T_closure
  2386 000013B0 0F85461D0000            	jne L_error_non_closure
  2387 000013B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2388 000013B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2389 000013BC 50                      	push rax
  2390 000013BD 6A01                    	push 1	; arg count
  2391 000013BF 488B0425[F4080000]      	mov rax, qword [free_var_15]	; free var cadr
  2392 000013C7 803805                  	cmp byte [rax], T_undefined
  2393 000013CA 0F84A81C0000            	je L_error_fvar_undefined
  2394 000013D0 803804                  	cmp byte [rax], T_closure
  2395 000013D3 0F85231D0000            	jne L_error_non_closure
  2396 000013D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2397 000013DC FF5009                  	call SOB_CLOSURE_CODE(rax)
  2398 000013DF C9                      	leave
  2399 000013E0 C21800                  	ret AND_KILL_FRAME(1)
  2400                                  .L_lambda_simple_end_079a:	; new closure is in rax
  2401 000013E3 48890425[D2080000]      	mov qword [free_var_13], rax
  2402 000013EB 48B8-                   	mov rax, sob_void
  2402 000013ED [0000000000000000] 
  2403                                  
  2404 000013F5 4889C7                  	mov rdi, rax
  2405 000013F8 E8FD1F0000              	call print_sexpr_if_not_void
  2406 000013FD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2407 00001402 E89E1D0000              	call malloc
  2408 00001407 50                      	push rax
  2409 00001408 BF00000000              	mov rdi, 8 * 0	; new rib
  2410 0000140D E8931D0000              	call malloc
  2411 00001412 50                      	push rax
  2412 00001413 BF08000000              	mov rdi, 8 * 1	; extended env
  2413 00001418 E8881D0000              	call malloc
  2414 0000141D 488B7D10                	mov rdi, ENV
  2415 00001421 BE00000000              	mov rsi, 0
  2416 00001426 BA01000000              	mov rdx, 1
  2417                                  .L_lambda_simple_env_loop_079b:	; ext_env[i + 1] <-- env[i]
  2418 0000142B 4883FE00                	cmp rsi, 0
  2419 0000142F 7410                    	je .L_lambda_simple_env_end_079b
  2420 00001431 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2421 00001435 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2422 00001439 48FFC6                  	inc rsi
  2423 0000143C 48FFC2                  	inc rdx
  2424 0000143F EBEA                    	jmp .L_lambda_simple_env_loop_079b
  2425                                  .L_lambda_simple_env_end_079b:
  2426 00001441 5B                      	pop rbx
  2427 00001442 BE00000000              	mov rsi, 0
  2428                                  .L_lambda_simple_params_loop_079b:	; copy params
  2429 00001447 4883FE00                	cmp rsi, 0
  2430 0000144B 740E                    	je .L_lambda_simple_params_end_079b
  2431 0000144D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2432 00001452 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2433 00001456 48FFC6                  	inc rsi
  2434 00001459 EBEC                    	jmp .L_lambda_simple_params_loop_079b
  2435                                  .L_lambda_simple_params_end_079b:
  2436 0000145B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2437 0000145E 4889C3                  	mov rbx, rax
  2438 00001461 58                      	pop rax
  2439 00001462 C60004                  	mov byte [rax], T_closure
  2440 00001465 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2441 00001469 48C74009[73140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_079b
  2442 00001471 EB65                    	jmp .L_lambda_simple_end_079b
  2443                                  .L_lambda_simple_code_079b:	; lambda-simple body
  2444 00001473 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2445 00001479 740B                    	je .L_lambda_simple_arity_check_ok_084b
  2446 0000147B FF742410                	push qword [rsp + 8 * 2]
  2447 0000147F 6A01                    	push 1
  2448 00001481 E9D81C0000              	jmp L_error_incorrect_arity_simple
  2449                                  .L_lambda_simple_arity_check_ok_084b:
  2450 00001486 C8000000                	enter 0, 0
  2451                                  	; preparing a non-tail-call
  2452                                  	; preparing a non-tail-call
  2453 0000148A 488B4520                	mov rax, PARAM(0)	; param x
  2454 0000148E 50                      	push rax
  2455 0000148F 6A01                    	push 1	; arg count
  2456 00001491 488B0425[7D080000]      	mov rax, qword [free_var_8]	; free var caar
  2457 00001499 803805                  	cmp byte [rax], T_undefined
  2458 0000149C 0F84D61B0000            	je L_error_fvar_undefined
  2459 000014A2 803804                  	cmp byte [rax], T_closure
  2460 000014A5 0F85511C0000            	jne L_error_non_closure
  2461 000014AB FF7001                  	push SOB_CLOSURE_ENV(rax)
  2462 000014AE FF5009                  	call SOB_CLOSURE_CODE(rax)
  2463 000014B1 50                      	push rax
  2464 000014B2 6A01                    	push 1	; arg count
  2465 000014B4 488B0425[7C090000]      	mov rax, qword [free_var_23]	; free var cdar
  2466 000014BC 803805                  	cmp byte [rax], T_undefined
  2467 000014BF 0F84B31B0000            	je L_error_fvar_undefined
  2468 000014C5 803804                  	cmp byte [rax], T_closure
  2469 000014C8 0F852E1C0000            	jne L_error_non_closure
  2470 000014CE FF7001                  	push SOB_CLOSURE_ENV(rax)
  2471 000014D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2472 000014D4 C9                      	leave
  2473 000014D5 C21800                  	ret AND_KILL_FRAME(1)
  2474                                  .L_lambda_simple_end_079b:	; new closure is in rax
  2475 000014D8 48890425[16090000]      	mov qword [free_var_17], rax
  2476 000014E0 48B8-                   	mov rax, sob_void
  2476 000014E2 [0000000000000000] 
  2477                                  
  2478 000014EA 4889C7                  	mov rdi, rax
  2479 000014ED E8081F0000              	call print_sexpr_if_not_void
  2480 000014F2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2481 000014F7 E8A91C0000              	call malloc
  2482 000014FC 50                      	push rax
  2483 000014FD BF00000000              	mov rdi, 8 * 0	; new rib
  2484 00001502 E89E1C0000              	call malloc
  2485 00001507 50                      	push rax
  2486 00001508 BF08000000              	mov rdi, 8 * 1	; extended env
  2487 0000150D E8931C0000              	call malloc
  2488 00001512 488B7D10                	mov rdi, ENV
  2489 00001516 BE00000000              	mov rsi, 0
  2490 0000151B BA01000000              	mov rdx, 1
  2491                                  .L_lambda_simple_env_loop_079c:	; ext_env[i + 1] <-- env[i]
  2492 00001520 4883FE00                	cmp rsi, 0
  2493 00001524 7410                    	je .L_lambda_simple_env_end_079c
  2494 00001526 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2495 0000152A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2496 0000152E 48FFC6                  	inc rsi
  2497 00001531 48FFC2                  	inc rdx
  2498 00001534 EBEA                    	jmp .L_lambda_simple_env_loop_079c
  2499                                  .L_lambda_simple_env_end_079c:
  2500 00001536 5B                      	pop rbx
  2501 00001537 BE00000000              	mov rsi, 0
  2502                                  .L_lambda_simple_params_loop_079c:	; copy params
  2503 0000153C 4883FE00                	cmp rsi, 0
  2504 00001540 740E                    	je .L_lambda_simple_params_end_079c
  2505 00001542 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2506 00001547 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2507 0000154B 48FFC6                  	inc rsi
  2508 0000154E EBEC                    	jmp .L_lambda_simple_params_loop_079c
  2509                                  .L_lambda_simple_params_end_079c:
  2510 00001550 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2511 00001553 4889C3                  	mov rbx, rax
  2512 00001556 58                      	pop rax
  2513 00001557 C60004                  	mov byte [rax], T_closure
  2514 0000155A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2515 0000155E 48C74009[68150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_079c
  2516 00001566 EB65                    	jmp .L_lambda_simple_end_079c
  2517                                  .L_lambda_simple_code_079c:	; lambda-simple body
  2518 00001568 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2519 0000156E 740B                    	je .L_lambda_simple_arity_check_ok_084c
  2520 00001570 FF742410                	push qword [rsp + 8 * 2]
  2521 00001574 6A01                    	push 1
  2522 00001576 E9E31B0000              	jmp L_error_incorrect_arity_simple
  2523                                  .L_lambda_simple_arity_check_ok_084c:
  2524 0000157B C8000000                	enter 0, 0
  2525                                  	; preparing a non-tail-call
  2526                                  	; preparing a non-tail-call
  2527 0000157F 488B4520                	mov rax, PARAM(0)	; param x
  2528 00001583 50                      	push rax
  2529 00001584 6A01                    	push 1	; arg count
  2530 00001586 488B0425[F4080000]      	mov rax, qword [free_var_15]	; free var cadr
  2531 0000158E 803805                  	cmp byte [rax], T_undefined
  2532 00001591 0F84E11A0000            	je L_error_fvar_undefined
  2533 00001597 803804                  	cmp byte [rax], T_closure
  2534 0000159A 0F855C1B0000            	jne L_error_non_closure
  2535 000015A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2536 000015A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2537 000015A6 50                      	push rax
  2538 000015A7 6A01                    	push 1	; arg count
  2539 000015A9 488B0425[7C090000]      	mov rax, qword [free_var_23]	; free var cdar
  2540 000015B1 803805                  	cmp byte [rax], T_undefined
  2541 000015B4 0F84BE1A0000            	je L_error_fvar_undefined
  2542 000015BA 803804                  	cmp byte [rax], T_closure
  2543 000015BD 0F85391B0000            	jne L_error_non_closure
  2544 000015C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2545 000015C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2546 000015C9 C9                      	leave
  2547 000015CA C21800                  	ret AND_KILL_FRAME(1)
  2548                                  .L_lambda_simple_end_079c:	; new closure is in rax
  2549 000015CD 48890425[27090000]      	mov qword [free_var_18], rax
  2550 000015D5 48B8-                   	mov rax, sob_void
  2550 000015D7 [0000000000000000] 
  2551                                  
  2552 000015DF 4889C7                  	mov rdi, rax
  2553 000015E2 E8131E0000              	call print_sexpr_if_not_void
  2554 000015E7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2555 000015EC E8B41B0000              	call malloc
  2556 000015F1 50                      	push rax
  2557 000015F2 BF00000000              	mov rdi, 8 * 0	; new rib
  2558 000015F7 E8A91B0000              	call malloc
  2559 000015FC 50                      	push rax
  2560 000015FD BF08000000              	mov rdi, 8 * 1	; extended env
  2561 00001602 E89E1B0000              	call malloc
  2562 00001607 488B7D10                	mov rdi, ENV
  2563 0000160B BE00000000              	mov rsi, 0
  2564 00001610 BA01000000              	mov rdx, 1
  2565                                  .L_lambda_simple_env_loop_079d:	; ext_env[i + 1] <-- env[i]
  2566 00001615 4883FE00                	cmp rsi, 0
  2567 00001619 7410                    	je .L_lambda_simple_env_end_079d
  2568 0000161B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2569 0000161F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2570 00001623 48FFC6                  	inc rsi
  2571 00001626 48FFC2                  	inc rdx
  2572 00001629 EBEA                    	jmp .L_lambda_simple_env_loop_079d
  2573                                  .L_lambda_simple_env_end_079d:
  2574 0000162B 5B                      	pop rbx
  2575 0000162C BE00000000              	mov rsi, 0
  2576                                  .L_lambda_simple_params_loop_079d:	; copy params
  2577 00001631 4883FE00                	cmp rsi, 0
  2578 00001635 740E                    	je .L_lambda_simple_params_end_079d
  2579 00001637 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2580 0000163C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2581 00001640 48FFC6                  	inc rsi
  2582 00001643 EBEC                    	jmp .L_lambda_simple_params_loop_079d
  2583                                  .L_lambda_simple_params_end_079d:
  2584 00001645 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2585 00001648 4889C3                  	mov rbx, rax
  2586 0000164B 58                      	pop rax
  2587 0000164C C60004                  	mov byte [rax], T_closure
  2588 0000164F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2589 00001653 48C74009[5D160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_079d
  2590 0000165B EB65                    	jmp .L_lambda_simple_end_079d
  2591                                  .L_lambda_simple_code_079d:	; lambda-simple body
  2592 0000165D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2593 00001663 740B                    	je .L_lambda_simple_arity_check_ok_084d
  2594 00001665 FF742410                	push qword [rsp + 8 * 2]
  2595 00001669 6A01                    	push 1
  2596 0000166B E9EE1A0000              	jmp L_error_incorrect_arity_simple
  2597                                  .L_lambda_simple_arity_check_ok_084d:
  2598 00001670 C8000000                	enter 0, 0
  2599                                  	; preparing a non-tail-call
  2600                                  	; preparing a non-tail-call
  2601 00001674 488B4520                	mov rax, PARAM(0)	; param x
  2602 00001678 50                      	push rax
  2603 00001679 6A01                    	push 1	; arg count
  2604 0000167B 488B0425[7C090000]      	mov rax, qword [free_var_23]	; free var cdar
  2605 00001683 803805                  	cmp byte [rax], T_undefined
  2606 00001686 0F84EC190000            	je L_error_fvar_undefined
  2607 0000168C 803804                  	cmp byte [rax], T_closure
  2608 0000168F 0F85671A0000            	jne L_error_non_closure
  2609 00001695 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2610 00001698 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2611 0000169B 50                      	push rax
  2612 0000169C 6A01                    	push 1	; arg count
  2613 0000169E 488B0425[7C090000]      	mov rax, qword [free_var_23]	; free var cdar
  2614 000016A6 803805                  	cmp byte [rax], T_undefined
  2615 000016A9 0F84C9190000            	je L_error_fvar_undefined
  2616 000016AF 803804                  	cmp byte [rax], T_closure
  2617 000016B2 0F85441A0000            	jne L_error_non_closure
  2618 000016B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2619 000016BB FF5009                  	call SOB_CLOSURE_CODE(rax)
  2620 000016BE C9                      	leave
  2621 000016BF C21800                  	ret AND_KILL_FRAME(1)
  2622                                  .L_lambda_simple_end_079d:	; new closure is in rax
  2623 000016C2 48890425[49090000]      	mov qword [free_var_20], rax
  2624 000016CA 48B8-                   	mov rax, sob_void
  2624 000016CC [0000000000000000] 
  2625                                  
  2626 000016D4 4889C7                  	mov rdi, rax
  2627 000016D7 E81E1D0000              	call print_sexpr_if_not_void
  2628 000016DC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2629 000016E1 E8BF1A0000              	call malloc
  2630 000016E6 50                      	push rax
  2631 000016E7 BF00000000              	mov rdi, 8 * 0	; new rib
  2632 000016EC E8B41A0000              	call malloc
  2633 000016F1 50                      	push rax
  2634 000016F2 BF08000000              	mov rdi, 8 * 1	; extended env
  2635 000016F7 E8A91A0000              	call malloc
  2636 000016FC 488B7D10                	mov rdi, ENV
  2637 00001700 BE00000000              	mov rsi, 0
  2638 00001705 BA01000000              	mov rdx, 1
  2639                                  .L_lambda_simple_env_loop_079e:	; ext_env[i + 1] <-- env[i]
  2640 0000170A 4883FE00                	cmp rsi, 0
  2641 0000170E 7410                    	je .L_lambda_simple_env_end_079e
  2642 00001710 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2643 00001714 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2644 00001718 48FFC6                  	inc rsi
  2645 0000171B 48FFC2                  	inc rdx
  2646 0000171E EBEA                    	jmp .L_lambda_simple_env_loop_079e
  2647                                  .L_lambda_simple_env_end_079e:
  2648 00001720 5B                      	pop rbx
  2649 00001721 BE00000000              	mov rsi, 0
  2650                                  .L_lambda_simple_params_loop_079e:	; copy params
  2651 00001726 4883FE00                	cmp rsi, 0
  2652 0000172A 740E                    	je .L_lambda_simple_params_end_079e
  2653 0000172C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2654 00001731 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2655 00001735 48FFC6                  	inc rsi
  2656 00001738 EBEC                    	jmp .L_lambda_simple_params_loop_079e
  2657                                  .L_lambda_simple_params_end_079e:
  2658 0000173A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2659 0000173D 4889C3                  	mov rbx, rax
  2660 00001740 58                      	pop rax
  2661 00001741 C60004                  	mov byte [rax], T_closure
  2662 00001744 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2663 00001748 48C74009[52170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_079e
  2664 00001750 EB65                    	jmp .L_lambda_simple_end_079e
  2665                                  .L_lambda_simple_code_079e:	; lambda-simple body
  2666 00001752 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2667 00001758 740B                    	je .L_lambda_simple_arity_check_ok_084e
  2668 0000175A FF742410                	push qword [rsp + 8 * 2]
  2669 0000175E 6A01                    	push 1
  2670 00001760 E9F9190000              	jmp L_error_incorrect_arity_simple
  2671                                  .L_lambda_simple_arity_check_ok_084e:
  2672 00001765 C8000000                	enter 0, 0
  2673                                  	; preparing a non-tail-call
  2674                                  	; preparing a non-tail-call
  2675 00001769 488B4520                	mov rax, PARAM(0)	; param x
  2676 0000176D 50                      	push rax
  2677 0000176E 6A01                    	push 1	; arg count
  2678 00001770 488B0425[F3090000]      	mov rax, qword [free_var_30]	; free var cddr
  2679 00001778 803805                  	cmp byte [rax], T_undefined
  2680 0000177B 0F84F7180000            	je L_error_fvar_undefined
  2681 00001781 803804                  	cmp byte [rax], T_closure
  2682 00001784 0F8572190000            	jne L_error_non_closure
  2683 0000178A FF7001                  	push SOB_CLOSURE_ENV(rax)
  2684 0000178D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2685 00001790 50                      	push rax
  2686 00001791 6A01                    	push 1	; arg count
  2687 00001793 488B0425[7C090000]      	mov rax, qword [free_var_23]	; free var cdar
  2688 0000179B 803805                  	cmp byte [rax], T_undefined
  2689 0000179E 0F84D4180000            	je L_error_fvar_undefined
  2690 000017A4 803804                  	cmp byte [rax], T_closure
  2691 000017A7 0F854F190000            	jne L_error_non_closure
  2692 000017AD FF7001                  	push SOB_CLOSURE_ENV(rax)
  2693 000017B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2694 000017B3 C9                      	leave
  2695 000017B4 C21800                  	ret AND_KILL_FRAME(1)
  2696                                  .L_lambda_simple_end_079e:	; new closure is in rax
  2697 000017B7 48890425[5A090000]      	mov qword [free_var_21], rax
  2698 000017BF 48B8-                   	mov rax, sob_void
  2698 000017C1 [0000000000000000] 
  2699                                  
  2700 000017C9 4889C7                  	mov rdi, rax
  2701 000017CC E8291C0000              	call print_sexpr_if_not_void
  2702 000017D1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2703 000017D6 E8CA190000              	call malloc
  2704 000017DB 50                      	push rax
  2705 000017DC BF00000000              	mov rdi, 8 * 0	; new rib
  2706 000017E1 E8BF190000              	call malloc
  2707 000017E6 50                      	push rax
  2708 000017E7 BF08000000              	mov rdi, 8 * 1	; extended env
  2709 000017EC E8B4190000              	call malloc
  2710 000017F1 488B7D10                	mov rdi, ENV
  2711 000017F5 BE00000000              	mov rsi, 0
  2712 000017FA BA01000000              	mov rdx, 1
  2713                                  .L_lambda_simple_env_loop_079f:	; ext_env[i + 1] <-- env[i]
  2714 000017FF 4883FE00                	cmp rsi, 0
  2715 00001803 7410                    	je .L_lambda_simple_env_end_079f
  2716 00001805 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2717 00001809 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2718 0000180D 48FFC6                  	inc rsi
  2719 00001810 48FFC2                  	inc rdx
  2720 00001813 EBEA                    	jmp .L_lambda_simple_env_loop_079f
  2721                                  .L_lambda_simple_env_end_079f:
  2722 00001815 5B                      	pop rbx
  2723 00001816 BE00000000              	mov rsi, 0
  2724                                  .L_lambda_simple_params_loop_079f:	; copy params
  2725 0000181B 4883FE00                	cmp rsi, 0
  2726 0000181F 740E                    	je .L_lambda_simple_params_end_079f
  2727 00001821 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2728 00001826 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2729 0000182A 48FFC6                  	inc rsi
  2730 0000182D EBEC                    	jmp .L_lambda_simple_params_loop_079f
  2731                                  .L_lambda_simple_params_end_079f:
  2732 0000182F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2733 00001832 4889C3                  	mov rbx, rax
  2734 00001835 58                      	pop rax
  2735 00001836 C60004                  	mov byte [rax], T_closure
  2736 00001839 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2737 0000183D 48C74009[47180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_079f
  2738 00001845 EB65                    	jmp .L_lambda_simple_end_079f
  2739                                  .L_lambda_simple_code_079f:	; lambda-simple body
  2740 00001847 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2741 0000184D 740B                    	je .L_lambda_simple_arity_check_ok_084f
  2742 0000184F FF742410                	push qword [rsp + 8 * 2]
  2743 00001853 6A01                    	push 1
  2744 00001855 E904190000              	jmp L_error_incorrect_arity_simple
  2745                                  .L_lambda_simple_arity_check_ok_084f:
  2746 0000185A C8000000                	enter 0, 0
  2747                                  	; preparing a non-tail-call
  2748                                  	; preparing a non-tail-call
  2749 0000185E 488B4520                	mov rax, PARAM(0)	; param x
  2750 00001862 50                      	push rax
  2751 00001863 6A01                    	push 1	; arg count
  2752 00001865 488B0425[7D080000]      	mov rax, qword [free_var_8]	; free var caar
  2753 0000186D 803805                  	cmp byte [rax], T_undefined
  2754 00001870 0F8402180000            	je L_error_fvar_undefined
  2755 00001876 803804                  	cmp byte [rax], T_closure
  2756 00001879 0F857D180000            	jne L_error_non_closure
  2757 0000187F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2758 00001882 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2759 00001885 50                      	push rax
  2760 00001886 6A01                    	push 1	; arg count
  2761 00001888 488B0425[F3090000]      	mov rax, qword [free_var_30]	; free var cddr
  2762 00001890 803805                  	cmp byte [rax], T_undefined
  2763 00001893 0F84DF170000            	je L_error_fvar_undefined
  2764 00001899 803804                  	cmp byte [rax], T_closure
  2765 0000189C 0F855A180000            	jne L_error_non_closure
  2766 000018A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2767 000018A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2768 000018A8 C9                      	leave
  2769 000018A9 C21800                  	ret AND_KILL_FRAME(1)
  2770                                  .L_lambda_simple_end_079f:	; new closure is in rax
  2771 000018AC 48890425[8D090000]      	mov qword [free_var_24], rax
  2772 000018B4 48B8-                   	mov rax, sob_void
  2772 000018B6 [0000000000000000] 
  2773                                  
  2774 000018BE 4889C7                  	mov rdi, rax
  2775 000018C1 E8341B0000              	call print_sexpr_if_not_void
  2776 000018C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2777 000018CB E8D5180000              	call malloc
  2778 000018D0 50                      	push rax
  2779 000018D1 BF00000000              	mov rdi, 8 * 0	; new rib
  2780 000018D6 E8CA180000              	call malloc
  2781 000018DB 50                      	push rax
  2782 000018DC BF08000000              	mov rdi, 8 * 1	; extended env
  2783 000018E1 E8BF180000              	call malloc
  2784 000018E6 488B7D10                	mov rdi, ENV
  2785 000018EA BE00000000              	mov rsi, 0
  2786 000018EF BA01000000              	mov rdx, 1
  2787                                  .L_lambda_simple_env_loop_07a0:	; ext_env[i + 1] <-- env[i]
  2788 000018F4 4883FE00                	cmp rsi, 0
  2789 000018F8 7410                    	je .L_lambda_simple_env_end_07a0
  2790 000018FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2791 000018FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2792 00001902 48FFC6                  	inc rsi
  2793 00001905 48FFC2                  	inc rdx
  2794 00001908 EBEA                    	jmp .L_lambda_simple_env_loop_07a0
  2795                                  .L_lambda_simple_env_end_07a0:
  2796 0000190A 5B                      	pop rbx
  2797 0000190B BE00000000              	mov rsi, 0
  2798                                  .L_lambda_simple_params_loop_07a0:	; copy params
  2799 00001910 4883FE00                	cmp rsi, 0
  2800 00001914 740E                    	je .L_lambda_simple_params_end_07a0
  2801 00001916 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2802 0000191B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2803 0000191F 48FFC6                  	inc rsi
  2804 00001922 EBEC                    	jmp .L_lambda_simple_params_loop_07a0
  2805                                  .L_lambda_simple_params_end_07a0:
  2806 00001924 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2807 00001927 4889C3                  	mov rbx, rax
  2808 0000192A 58                      	pop rax
  2809 0000192B C60004                  	mov byte [rax], T_closure
  2810 0000192E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2811 00001932 48C74009[3C190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_07a0
  2812 0000193A EB65                    	jmp .L_lambda_simple_end_07a0
  2813                                  .L_lambda_simple_code_07a0:	; lambda-simple body
  2814 0000193C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2815 00001942 740B                    	je .L_lambda_simple_arity_check_ok_0850
  2816 00001944 FF742410                	push qword [rsp + 8 * 2]
  2817 00001948 6A01                    	push 1
  2818 0000194A E90F180000              	jmp L_error_incorrect_arity_simple
  2819                                  .L_lambda_simple_arity_check_ok_0850:
  2820 0000194F C8000000                	enter 0, 0
  2821                                  	; preparing a non-tail-call
  2822                                  	; preparing a non-tail-call
  2823 00001953 488B4520                	mov rax, PARAM(0)	; param x
  2824 00001957 50                      	push rax
  2825 00001958 6A01                    	push 1	; arg count
  2826 0000195A 488B0425[F4080000]      	mov rax, qword [free_var_15]	; free var cadr
  2827 00001962 803805                  	cmp byte [rax], T_undefined
  2828 00001965 0F840D170000            	je L_error_fvar_undefined
  2829 0000196B 803804                  	cmp byte [rax], T_closure
  2830 0000196E 0F8588170000            	jne L_error_non_closure
  2831 00001974 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2832 00001977 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2833 0000197A 50                      	push rax
  2834 0000197B 6A01                    	push 1	; arg count
  2835 0000197D 488B0425[F3090000]      	mov rax, qword [free_var_30]	; free var cddr
  2836 00001985 803805                  	cmp byte [rax], T_undefined
  2837 00001988 0F84EA160000            	je L_error_fvar_undefined
  2838 0000198E 803804                  	cmp byte [rax], T_closure
  2839 00001991 0F8565170000            	jne L_error_non_closure
  2840 00001997 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2841 0000199A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2842 0000199D C9                      	leave
  2843 0000199E C21800                  	ret AND_KILL_FRAME(1)
  2844                                  .L_lambda_simple_end_07a0:	; new closure is in rax
  2845 000019A1 48890425[9E090000]      	mov qword [free_var_25], rax
  2846 000019A9 48B8-                   	mov rax, sob_void
  2846 000019AB [0000000000000000] 
  2847                                  
  2848 000019B3 4889C7                  	mov rdi, rax
  2849 000019B6 E83F1A0000              	call print_sexpr_if_not_void
  2850 000019BB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2851 000019C0 E8E0170000              	call malloc
  2852 000019C5 50                      	push rax
  2853 000019C6 BF00000000              	mov rdi, 8 * 0	; new rib
  2854 000019CB E8D5170000              	call malloc
  2855 000019D0 50                      	push rax
  2856 000019D1 BF08000000              	mov rdi, 8 * 1	; extended env
  2857 000019D6 E8CA170000              	call malloc
  2858 000019DB 488B7D10                	mov rdi, ENV
  2859 000019DF BE00000000              	mov rsi, 0
  2860 000019E4 BA01000000              	mov rdx, 1
  2861                                  .L_lambda_simple_env_loop_07a1:	; ext_env[i + 1] <-- env[i]
  2862 000019E9 4883FE00                	cmp rsi, 0
  2863 000019ED 7410                    	je .L_lambda_simple_env_end_07a1
  2864 000019EF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2865 000019F3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2866 000019F7 48FFC6                  	inc rsi
  2867 000019FA 48FFC2                  	inc rdx
  2868 000019FD EBEA                    	jmp .L_lambda_simple_env_loop_07a1
  2869                                  .L_lambda_simple_env_end_07a1:
  2870 000019FF 5B                      	pop rbx
  2871 00001A00 BE00000000              	mov rsi, 0
  2872                                  .L_lambda_simple_params_loop_07a1:	; copy params
  2873 00001A05 4883FE00                	cmp rsi, 0
  2874 00001A09 740E                    	je .L_lambda_simple_params_end_07a1
  2875 00001A0B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2876 00001A10 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2877 00001A14 48FFC6                  	inc rsi
  2878 00001A17 EBEC                    	jmp .L_lambda_simple_params_loop_07a1
  2879                                  .L_lambda_simple_params_end_07a1:
  2880 00001A19 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2881 00001A1C 4889C3                  	mov rbx, rax
  2882 00001A1F 58                      	pop rax
  2883 00001A20 C60004                  	mov byte [rax], T_closure
  2884 00001A23 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2885 00001A27 48C74009[311A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_07a1
  2886 00001A2F EB65                    	jmp .L_lambda_simple_end_07a1
  2887                                  .L_lambda_simple_code_07a1:	; lambda-simple body
  2888 00001A31 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2889 00001A37 740B                    	je .L_lambda_simple_arity_check_ok_0851
  2890 00001A39 FF742410                	push qword [rsp + 8 * 2]
  2891 00001A3D 6A01                    	push 1
  2892 00001A3F E91A170000              	jmp L_error_incorrect_arity_simple
  2893                                  .L_lambda_simple_arity_check_ok_0851:
  2894 00001A44 C8000000                	enter 0, 0
  2895                                  	; preparing a non-tail-call
  2896                                  	; preparing a non-tail-call
  2897 00001A48 488B4520                	mov rax, PARAM(0)	; param x
  2898 00001A4C 50                      	push rax
  2899 00001A4D 6A01                    	push 1	; arg count
  2900 00001A4F 488B0425[7C090000]      	mov rax, qword [free_var_23]	; free var cdar
  2901 00001A57 803805                  	cmp byte [rax], T_undefined
  2902 00001A5A 0F8418160000            	je L_error_fvar_undefined
  2903 00001A60 803804                  	cmp byte [rax], T_closure
  2904 00001A63 0F8593160000            	jne L_error_non_closure
  2905 00001A69 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2906 00001A6C FF5009                  	call SOB_CLOSURE_CODE(rax)
  2907 00001A6F 50                      	push rax
  2908 00001A70 6A01                    	push 1	; arg count
  2909 00001A72 488B0425[F3090000]      	mov rax, qword [free_var_30]	; free var cddr
  2910 00001A7A 803805                  	cmp byte [rax], T_undefined
  2911 00001A7D 0F84F5150000            	je L_error_fvar_undefined
  2912 00001A83 803804                  	cmp byte [rax], T_closure
  2913 00001A86 0F8570160000            	jne L_error_non_closure
  2914 00001A8C FF7001                  	push SOB_CLOSURE_ENV(rax)
  2915 00001A8F FF5009                  	call SOB_CLOSURE_CODE(rax)
  2916 00001A92 C9                      	leave
  2917 00001A93 C21800                  	ret AND_KILL_FRAME(1)
  2918                                  .L_lambda_simple_end_07a1:	; new closure is in rax
  2919 00001A96 48890425[C0090000]      	mov qword [free_var_27], rax
  2920 00001A9E 48B8-                   	mov rax, sob_void
  2920 00001AA0 [0000000000000000] 
  2921                                  
  2922 00001AA8 4889C7                  	mov rdi, rax
  2923 00001AAB E84A190000              	call print_sexpr_if_not_void
  2924 00001AB0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2925 00001AB5 E8EB160000              	call malloc
  2926 00001ABA 50                      	push rax
  2927 00001ABB BF00000000              	mov rdi, 8 * 0	; new rib
  2928 00001AC0 E8E0160000              	call malloc
  2929 00001AC5 50                      	push rax
  2930 00001AC6 BF08000000              	mov rdi, 8 * 1	; extended env
  2931 00001ACB E8D5160000              	call malloc
  2932 00001AD0 488B7D10                	mov rdi, ENV
  2933 00001AD4 BE00000000              	mov rsi, 0
  2934 00001AD9 BA01000000              	mov rdx, 1
  2935                                  .L_lambda_simple_env_loop_07a2:	; ext_env[i + 1] <-- env[i]
  2936 00001ADE 4883FE00                	cmp rsi, 0
  2937 00001AE2 7410                    	je .L_lambda_simple_env_end_07a2
  2938 00001AE4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2939 00001AE8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2940 00001AEC 48FFC6                  	inc rsi
  2941 00001AEF 48FFC2                  	inc rdx
  2942 00001AF2 EBEA                    	jmp .L_lambda_simple_env_loop_07a2
  2943                                  .L_lambda_simple_env_end_07a2:
  2944 00001AF4 5B                      	pop rbx
  2945 00001AF5 BE00000000              	mov rsi, 0
  2946                                  .L_lambda_simple_params_loop_07a2:	; copy params
  2947 00001AFA 4883FE00                	cmp rsi, 0
  2948 00001AFE 740E                    	je .L_lambda_simple_params_end_07a2
  2949 00001B00 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2950 00001B05 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2951 00001B09 48FFC6                  	inc rsi
  2952 00001B0C EBEC                    	jmp .L_lambda_simple_params_loop_07a2
  2953                                  .L_lambda_simple_params_end_07a2:
  2954 00001B0E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2955 00001B11 4889C3                  	mov rbx, rax
  2956 00001B14 58                      	pop rax
  2957 00001B15 C60004                  	mov byte [rax], T_closure
  2958 00001B18 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2959 00001B1C 48C74009[261B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_07a2
  2960 00001B24 EB65                    	jmp .L_lambda_simple_end_07a2
  2961                                  .L_lambda_simple_code_07a2:	; lambda-simple body
  2962 00001B26 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2963 00001B2C 740B                    	je .L_lambda_simple_arity_check_ok_0852
  2964 00001B2E FF742410                	push qword [rsp + 8 * 2]
  2965 00001B32 6A01                    	push 1
  2966 00001B34 E925160000              	jmp L_error_incorrect_arity_simple
  2967                                  .L_lambda_simple_arity_check_ok_0852:
  2968 00001B39 C8000000                	enter 0, 0
  2969                                  	; preparing a non-tail-call
  2970                                  	; preparing a non-tail-call
  2971 00001B3D 488B4520                	mov rax, PARAM(0)	; param x
  2972 00001B41 50                      	push rax
  2973 00001B42 6A01                    	push 1	; arg count
  2974 00001B44 488B0425[F3090000]      	mov rax, qword [free_var_30]	; free var cddr
  2975 00001B4C 803805                  	cmp byte [rax], T_undefined
  2976 00001B4F 0F8423150000            	je L_error_fvar_undefined
  2977 00001B55 803804                  	cmp byte [rax], T_closure
  2978 00001B58 0F859E150000            	jne L_error_non_closure
  2979 00001B5E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2980 00001B61 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2981 00001B64 50                      	push rax
  2982 00001B65 6A01                    	push 1	; arg count
  2983 00001B67 488B0425[F3090000]      	mov rax, qword [free_var_30]	; free var cddr
  2984 00001B6F 803805                  	cmp byte [rax], T_undefined
  2985 00001B72 0F8400150000            	je L_error_fvar_undefined
  2986 00001B78 803804                  	cmp byte [rax], T_closure
  2987 00001B7B 0F857B150000            	jne L_error_non_closure
  2988 00001B81 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2989 00001B84 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2990 00001B87 C9                      	leave
  2991 00001B88 C21800                  	ret AND_KILL_FRAME(1)
  2992                                  .L_lambda_simple_end_07a2:	; new closure is in rax
  2993 00001B8B 48890425[D1090000]      	mov qword [free_var_28], rax
  2994 00001B93 48B8-                   	mov rax, sob_void
  2994 00001B95 [0000000000000000] 
  2995                                  
  2996 00001B9D 4889C7                  	mov rdi, rax
  2997 00001BA0 E855180000              	call print_sexpr_if_not_void
  2998 00001BA5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2999 00001BAA E8F6150000              	call malloc
  3000 00001BAF 50                      	push rax
  3001 00001BB0 BF00000000              	mov rdi, 8 * 0	; new rib
  3002 00001BB5 E8EB150000              	call malloc
  3003 00001BBA 50                      	push rax
  3004 00001BBB BF08000000              	mov rdi, 8 * 1	; extended env
  3005 00001BC0 E8E0150000              	call malloc
  3006 00001BC5 488B7D10                	mov rdi, ENV
  3007 00001BC9 BE00000000              	mov rsi, 0
  3008 00001BCE BA01000000              	mov rdx, 1
  3009                                  .L_lambda_simple_env_loop_07a3:	; ext_env[i + 1] <-- env[i]
  3010 00001BD3 4883FE00                	cmp rsi, 0
  3011 00001BD7 7410                    	je .L_lambda_simple_env_end_07a3
  3012 00001BD9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3013 00001BDD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3014 00001BE1 48FFC6                  	inc rsi
  3015 00001BE4 48FFC2                  	inc rdx
  3016 00001BE7 EBEA                    	jmp .L_lambda_simple_env_loop_07a3
  3017                                  .L_lambda_simple_env_end_07a3:
  3018 00001BE9 5B                      	pop rbx
  3019 00001BEA BE00000000              	mov rsi, 0
  3020                                  .L_lambda_simple_params_loop_07a3:	; copy params
  3021 00001BEF 4883FE00                	cmp rsi, 0
  3022 00001BF3 740E                    	je .L_lambda_simple_params_end_07a3
  3023 00001BF5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3024 00001BFA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3025 00001BFE 48FFC6                  	inc rsi
  3026 00001C01 EBEC                    	jmp .L_lambda_simple_params_loop_07a3
  3027                                  .L_lambda_simple_params_end_07a3:
  3028 00001C03 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3029 00001C06 4889C3                  	mov rbx, rax
  3030 00001C09 58                      	pop rax
  3031 00001C0A C60004                  	mov byte [rax], T_closure
  3032 00001C0D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3033 00001C11 48C74009[1E1C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_07a3
  3034 00001C19 E9DB000000              	jmp .L_lambda_simple_end_07a3
  3035                                  .L_lambda_simple_code_07a3:	; lambda-simple body
  3036 00001C1E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3037 00001C24 740B                    	je .L_lambda_simple_arity_check_ok_0853
  3038 00001C26 FF742410                	push qword [rsp + 8 * 2]
  3039 00001C2A 6A01                    	push 1
  3040 00001C2C E92D150000              	jmp L_error_incorrect_arity_simple
  3041                                  .L_lambda_simple_arity_check_ok_0853:
  3042 00001C31 C8000000                	enter 0, 0
  3043                                  	; preparing a non-tail-call
  3044 00001C35 488B4520                	mov rax, PARAM(0)	; param e
  3045 00001C39 50                      	push rax
  3046 00001C3A 6A01                    	push 1	; arg count
  3047 00001C3C 488B0425[9D0A0000]      	mov rax, qword [free_var_40]	; free var null?
  3048 00001C44 803805                  	cmp byte [rax], T_undefined
  3049 00001C47 0F842B140000            	je L_error_fvar_undefined
  3050 00001C4D 803804                  	cmp byte [rax], T_closure
  3051 00001C50 0F85A6140000            	jne L_error_non_closure
  3052 00001C56 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3053 00001C59 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3054 00001C5C 483D[02000000]          	cmp rax, sob_boolean_false
  3055 00001C62 0F858D000000            	jne .L_if_end_0164
  3056                                  	; preparing a non-tail-call
  3057 00001C68 488B4520                	mov rax, PARAM(0)	; param e
  3058 00001C6C 50                      	push rax
  3059 00001C6D 6A01                    	push 1	; arg count
  3060 00001C6F 488B0425[AE0A0000]      	mov rax, qword [free_var_41]	; free var pair?
  3061 00001C77 803805                  	cmp byte [rax], T_undefined
  3062 00001C7A 0F84F8130000            	je L_error_fvar_undefined
  3063 00001C80 803804                  	cmp byte [rax], T_closure
  3064 00001C83 0F8573140000            	jne L_error_non_closure
  3065 00001C89 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3066 00001C8C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3067 00001C8F 483D[02000000]          	cmp rax, sob_boolean_false
  3068 00001C95 744C                    	je .L_if_else_00f6
  3069                                  	; preparing a non-tail-call
  3070                                  	; preparing a non-tail-call
  3071 00001C97 488B4520                	mov rax, PARAM(0)	; param e
  3072 00001C9B 50                      	push rax
  3073 00001C9C 6A01                    	push 1	; arg count
  3074 00001C9E 488B0425[040A0000]      	mov rax, qword [free_var_31]	; free var cdr
  3075 00001CA6 803805                  	cmp byte [rax], T_undefined
  3076 00001CA9 0F84C9130000            	je L_error_fvar_undefined
  3077 00001CAF 803804                  	cmp byte [rax], T_closure
  3078 00001CB2 0F8544140000            	jne L_error_non_closure
  3079 00001CB8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3080 00001CBB FF5009                  	call SOB_CLOSURE_CODE(rax)
  3081 00001CBE 50                      	push rax
  3082 00001CBF 6A01                    	push 1	; arg count
  3083 00001CC1 488B0425[6A0A0000]      	mov rax, qword [free_var_37]	; free var list?
  3084 00001CC9 803805                  	cmp byte [rax], T_undefined
  3085 00001CCC 0F84A6130000            	je L_error_fvar_undefined
  3086 00001CD2 803804                  	cmp byte [rax], T_closure
  3087 00001CD5 0F8521140000            	jne L_error_non_closure
  3088 00001CDB FF7001                  	push SOB_CLOSURE_ENV(rax)
  3089 00001CDE FF5009                  	call SOB_CLOSURE_CODE(rax)
  3090 00001CE1 EB0A                    	jmp .L_if_end_0165
  3091                                  .L_if_else_00f6:
  3092 00001CE3 48B8-                   	mov rax, L_constants + 2
  3092 00001CE5 [0200000000000000] 
  3093                                  .L_if_end_0165:
  3094 00001CED 483D[02000000]          	cmp rax, sob_boolean_false
  3095 00001CF3 7500                    	jne .L_if_end_0164
  3096                                  .L_if_end_0164:
  3097 00001CF5 C9                      	leave
  3098 00001CF6 C21800                  	ret AND_KILL_FRAME(1)
  3099                                  .L_lambda_simple_end_07a3:	; new closure is in rax
  3100 00001CF9 48890425[6A0A0000]      	mov qword [free_var_37], rax
  3101 00001D01 48B8-                   	mov rax, sob_void
  3101 00001D03 [0000000000000000] 
  3102                                  
  3103 00001D0B 4889C7                  	mov rdi, rax
  3104 00001D0E E8E7160000              	call print_sexpr_if_not_void
  3105 00001D13 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3106 00001D18 E888140000              	call malloc
  3107 00001D1D 50                      	push rax
  3108 00001D1E 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
  3109 00001D22 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
  3110 00001D26 BF00000000              	mov rdi, 8 * 0	; new rib for optional parameters
  3111 00001D2B E875140000              	call malloc
  3112 00001D30 50                      	push rax
  3113 00001D31 BF08000000              	mov rdi, 8 * 1	; extended env
  3114 00001D36 E86A140000              	call malloc
  3115 00001D3B 488B7D10                	mov rdi, ENV
  3116 00001D3F BE00000000              	mov rsi, 0
  3117 00001D44 BA01000000              	mov rdx, 1
  3118                                  .L_lambda_opt_env_loop_00b1:	; ext_env[i + 1] <-- env[i] copy all the array
  3119 00001D49 4883FE00                	cmp rsi, 0
  3120 00001D4D 7410                    	je .L_lambda_opt_env_end_00b1
  3121 00001D4F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3122 00001D53 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3123 00001D57 48FFC6                  	inc rsi
  3124 00001D5A 48FFC2                  	inc rdx
  3125 00001D5D EBEA                    	jmp .L_lambda_opt_env_loop_00b1
  3126                                  .L_lambda_opt_env_end_00b1:
  3127 00001D5F 5B                      	pop rbx
  3128 00001D60 BE00000000              	mov rsi, 0
  3129                                  .L_lambda_opt_params_loop_0211:	; copy params
  3130 00001D65 4883FE00                	cmp rsi, 0
  3131 00001D69 740E                    	je .L_lambda_opt_params_end_0161
  3132 00001D6B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3133 00001D70 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3134 00001D74 48FFC6                  	inc rsi
  3135 00001D77 EBEC                    	jmp .L_lambda_opt_params_loop_0211
  3136                                  .L_lambda_opt_params_end_0161:
  3137 00001D79 488918                  	mov qword [rax], rbx 	; ext_env[0] <-- The new_rib 
  3138 00001D7C 4889C3                  	mov rbx, rax
  3139 00001D7F 58                      	pop rax
  3140 00001D80 C60004                  	mov byte [rax], T_closure
  3141 00001D83 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3142 00001D87 48C74009[941D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00b1
  3143 00001D8F E908010000              	jmp .L_lambda_opt_end_0161
  3144                                  .L_lambda_opt_code_00b1:	; lambda-opt body
  3145 00001D94 48837C241000            	cmp qword [rsp + 8 * 2], 0
  3146 00001D9A 7D0B                    	jge .L_lambda_simple_arity_check_ok_0854
  3147 00001D9C FF742410                	push qword [rsp + 8 * 2]
  3148 00001DA0 6A00                    	push 0
  3149 00001DA2 E9B7130000              	jmp L_error_incorrect_arity_simple
  3150                                  .L_lambda_simple_arity_check_ok_0854:
  3151 00001DA7 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  3152 00001DAC 4983E800                	sub r8, 0
  3153 00001DB0 4C89C3                  	mov rbx,r8
  3154 00001DB3 4983F800                	cmp r8, 0
  3155 00001DB7 7535                    	jne .L_lambda_opt_params_loop_0213
  3156 00001DB9 488B542410              	mov rdx, qword [rsp + 8 * 2]
  3157 00001DBE 4883C203                	add rdx , 3
  3158 00001DC2 4883EC08                	sub rsp , 8
  3159 00001DC6 4889E1                  	mov rcx, rsp
  3160                                  .L_lambda_opt_stack_adjusted_0212: ;pushing down the stack of the current function
  3161 00001DC9 488B5908                	mov rbx, qword [rcx + 8 * 1]
  3162 00001DCD 488919                  	mov qword[rcx] , rbx
  3163 00001DD0 4883C108                	add rcx , 8
  3164 00001DD4 48FFCA                  	dec rdx
  3165 00001DD7 4883FA00                	cmp rdx, 0
  3166 00001DDB 75EC                    	jne .L_lambda_opt_stack_adjusted_0212
  3167 00001DDD 48FF442410              	inc qword [rsp + 8 * 2]
  3168 00001DE2 48C701[01000000]        	mov qword [rcx], sob_nil 
  3169 00001DE9 E9A2000000              	jmp .L_lambda_opt_end_0162
  3170                                  	.L_lambda_opt_params_loop_0213:
  3171 00001DEE 488B542410              	mov rdx, qword [rsp + 8*2]
  3172 00001DF3 488D4CD410              	lea rcx, [rsp + 16 + 8*rdx]
  3173 00001DF8 4C89C2                  	mov rdx, r8
  3174 00001DFB 49B9-                   	mov r9, sob_nil
  3174 00001DFD [0100000000000000] 
  3175                                  	.L_lambda_opt_params_loop_0212: ;loop for copying the opt into list
  3176 00001E05 BF11000000              	mov rdi, (1 + 8 + 8)
  3177 00001E0A E896130000              	call malloc
  3178 00001E0F C60021                  	mov byte[rax], T_pair
  3179 00001E12 488B19                  	mov rbx, qword [rcx]
  3180 00001E15 48895801                	mov SOB_PAIR_CAR(rax), rbx
  3181 00001E19 4C894809                	mov SOB_PAIR_CDR(rax), r9
  3182 00001E1D 4989C1                  	mov r9, rax
  3183 00001E20 48FFCA                  	dec rdx
  3184 00001E23 4883E908                	sub rcx, 8
  3185 00001E27 4883FA00                	cmp rdx, 0
  3186 00001E2B 75D8                    	jne .L_lambda_opt_params_loop_0212
  3187 00001E2D 488B542410              	mov rdx, qword [rsp + 8 * 2]
  3188 00001E32 4889E0                  	mov rax, rsp
  3189 00001E35 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
  3190 00001E3A 4C89C1                  	mov rcx, r8
  3191 00001E3D 48FFC9                  	dec rcx
  3192 00001E40 4883C203                	add rdx, 3
  3193 00001E44 4829CA                  	sub rdx,rcx
  3194 00001E47 48C1E103                	shl rcx, 3
  3195                                  	.L_lambda_opt_stack_adjusted_0213:
  3196 00001E4B 4883FA00                	cmp rdx, 0
  3197 00001E4F 7419                    	je .L_lambda_opt_params_end_0162
  3198 00001E51 4889D8                  	mov rax, rbx
  3199 00001E54 4829C8                  	sub rax, rcx
  3200 00001E57 488B30                  	mov rsi, qword [rax]
  3201 00001E5A 488933                  	mov [rbx], rsi
  3202 00001E5D 4883EB08                	sub rbx, 8
  3203 00001E61 48FFCA                  	dec rdx
  3204 00001E64 4883FA00                	cmp rdx, 0
  3205 00001E68 75E1                    	jne .L_lambda_opt_stack_adjusted_0213
  3206                                  	.L_lambda_opt_params_end_0162:
  3207 00001E6A 4801CC                  	add rsp,rcx
  3208 00001E6D BB00000000              	mov rbx, 0
  3209 00001E72 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  3210 00001E77 4883C303                	add rbx,3
  3211 00001E7B 4C29C3                  	sub rbx,r8
  3212 00001E7E 48C1E303                	shl rbx, 3
  3213 00001E82 4801E3                  	add rbx, rsp
  3214 00001E85 4C890B                  	mov qword[rbx] , r9
  3215 00001E88 49FFC8                  	dec r8
  3216 00001E8B 4C29442410              	sub qword [rsp + 8 * 2], r8
  3217                                  	.L_lambda_opt_end_0162:
  3218 00001E90 C8000000                	enter 0, 0
  3219 00001E94 488B4520                	mov rax, PARAM(0)	; param args
  3220                                  	LEAVE
    49 00001E98 C9                  <1>  leave
  3221 00001E99 C21800                  	ret AND_KILL_FRAME(1)
  3222                                  .L_lambda_opt_end_0161:
  3223 00001E9C 48890425[480A0000]      	mov qword [free_var_35], rax
  3224 00001EA4 48B8-                   	mov rax, sob_void
  3224 00001EA6 [0000000000000000] 
  3225                                  
  3226 00001EAE 4889C7                  	mov rdi, rax
  3227 00001EB1 E844150000              	call print_sexpr_if_not_void
  3228 00001EB6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3229 00001EBB E8E5120000              	call malloc
  3230 00001EC0 50                      	push rax
  3231 00001EC1 BF00000000              	mov rdi, 8 * 0	; new rib
  3232 00001EC6 E8DA120000              	call malloc
  3233 00001ECB 50                      	push rax
  3234 00001ECC BF08000000              	mov rdi, 8 * 1	; extended env
  3235 00001ED1 E8CF120000              	call malloc
  3236 00001ED6 488B7D10                	mov rdi, ENV
  3237 00001EDA BE00000000              	mov rsi, 0
  3238 00001EDF BA01000000              	mov rdx, 1
  3239                                  .L_lambda_simple_env_loop_07a4:	; ext_env[i + 1] <-- env[i]
  3240 00001EE4 4883FE00                	cmp rsi, 0
  3241 00001EE8 7410                    	je .L_lambda_simple_env_end_07a4
  3242 00001EEA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3243 00001EEE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3244 00001EF2 48FFC6                  	inc rsi
  3245 00001EF5 48FFC2                  	inc rdx
  3246 00001EF8 EBEA                    	jmp .L_lambda_simple_env_loop_07a4
  3247                                  .L_lambda_simple_env_end_07a4:
  3248 00001EFA 5B                      	pop rbx
  3249 00001EFB BE00000000              	mov rsi, 0
  3250                                  .L_lambda_simple_params_loop_07a4:	; copy params
  3251 00001F00 4883FE00                	cmp rsi, 0
  3252 00001F04 740E                    	je .L_lambda_simple_params_end_07a4
  3253 00001F06 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3254 00001F0B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3255 00001F0F 48FFC6                  	inc rsi
  3256 00001F12 EBEC                    	jmp .L_lambda_simple_params_loop_07a4
  3257                                  .L_lambda_simple_params_end_07a4:
  3258 00001F14 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3259 00001F17 4889C3                  	mov rbx, rax
  3260 00001F1A 58                      	pop rax
  3261 00001F1B C60004                  	mov byte [rax], T_closure
  3262 00001F1E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3263 00001F22 48C74009[2C1F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_07a4
  3264 00001F2A EB3D                    	jmp .L_lambda_simple_end_07a4
  3265                                  .L_lambda_simple_code_07a4:	; lambda-simple body
  3266 00001F2C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3267 00001F32 740B                    	je .L_lambda_simple_arity_check_ok_0855
  3268 00001F34 FF742410                	push qword [rsp + 8 * 2]
  3269 00001F38 6A01                    	push 1
  3270 00001F3A E91F120000              	jmp L_error_incorrect_arity_simple
  3271                                  .L_lambda_simple_arity_check_ok_0855:
  3272 00001F3F C8000000                	enter 0, 0
  3273 00001F43 488B4520                	mov rax, PARAM(0)	; param x
  3274 00001F47 483D[02000000]          	cmp rax, sob_boolean_false
  3275 00001F4D 740C                    	je .L_if_else_00f7
  3276 00001F4F 48B8-                   	mov rax, L_constants + 2
  3276 00001F51 [0200000000000000] 
  3277 00001F59 EB0A                    	jmp .L_if_end_0166
  3278                                  .L_if_else_00f7:
  3279 00001F5B 48B8-                   	mov rax, L_constants + 3
  3279 00001F5D [0300000000000000] 
  3280                                  .L_if_end_0166:
  3281 00001F65 C9                      	leave
  3282 00001F66 C21800                  	ret AND_KILL_FRAME(1)
  3283                                  .L_lambda_simple_end_07a4:	; new closure is in rax
  3284 00001F69 48890425[8C0A0000]      	mov qword [free_var_39], rax
  3285 00001F71 48B8-                   	mov rax, sob_void
  3285 00001F73 [0000000000000000] 
  3286                                  
  3287 00001F7B 4889C7                  	mov rdi, rax
  3288 00001F7E E877140000              	call print_sexpr_if_not_void
  3289 00001F83 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3290 00001F88 E818120000              	call malloc
  3291 00001F8D 50                      	push rax
  3292 00001F8E BF00000000              	mov rdi, 8 * 0	; new rib
  3293 00001F93 E80D120000              	call malloc
  3294 00001F98 50                      	push rax
  3295 00001F99 BF08000000              	mov rdi, 8 * 1	; extended env
  3296 00001F9E E802120000              	call malloc
  3297 00001FA3 488B7D10                	mov rdi, ENV
  3298 00001FA7 BE00000000              	mov rsi, 0
  3299 00001FAC BA01000000              	mov rdx, 1
  3300                                  .L_lambda_simple_env_loop_07a5:	; ext_env[i + 1] <-- env[i]
  3301 00001FB1 4883FE00                	cmp rsi, 0
  3302 00001FB5 7410                    	je .L_lambda_simple_env_end_07a5
  3303 00001FB7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3304 00001FBB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3305 00001FBF 48FFC6                  	inc rsi
  3306 00001FC2 48FFC2                  	inc rdx
  3307 00001FC5 EBEA                    	jmp .L_lambda_simple_env_loop_07a5
  3308                                  .L_lambda_simple_env_end_07a5:
  3309 00001FC7 5B                      	pop rbx
  3310 00001FC8 BE00000000              	mov rsi, 0
  3311                                  .L_lambda_simple_params_loop_07a5:	; copy params
  3312 00001FCD 4883FE00                	cmp rsi, 0
  3313 00001FD1 740E                    	je .L_lambda_simple_params_end_07a5
  3314 00001FD3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3315 00001FD8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3316 00001FDC 48FFC6                  	inc rsi
  3317 00001FDF EBEC                    	jmp .L_lambda_simple_params_loop_07a5
  3318                                  .L_lambda_simple_params_end_07a5:
  3319 00001FE1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3320 00001FE4 4889C3                  	mov rbx, rax
  3321 00001FE7 58                      	pop rax
  3322 00001FE8 C60004                  	mov byte [rax], T_closure
  3323 00001FEB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3324 00001FEF 48C74009[F91F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_07a5
  3325 00001FF7 EB79                    	jmp .L_lambda_simple_end_07a5
  3326                                  .L_lambda_simple_code_07a5:	; lambda-simple body
  3327 00001FF9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3328 00001FFF 740B                    	je .L_lambda_simple_arity_check_ok_0856
  3329 00002001 FF742410                	push qword [rsp + 8 * 2]
  3330 00002005 6A01                    	push 1
  3331 00002007 E952110000              	jmp L_error_incorrect_arity_simple
  3332                                  .L_lambda_simple_arity_check_ok_0856:
  3333 0000200C C8000000                	enter 0, 0
  3334                                  	; preparing a non-tail-call
  3335 00002010 488B4520                	mov rax, PARAM(0)	; param q
  3336 00002014 50                      	push rax
  3337 00002015 6A01                    	push 1	; arg count
  3338 00002017 488B0425[370A0000]      	mov rax, qword [free_var_34]	; free var integer?
  3339 0000201F 803805                  	cmp byte [rax], T_undefined
  3340 00002022 0F8450100000            	je L_error_fvar_undefined
  3341 00002028 803804                  	cmp byte [rax], T_closure
  3342 0000202B 0F85CB100000            	jne L_error_non_closure
  3343 00002031 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3344 00002034 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3345 00002037 483D[02000000]          	cmp rax, sob_boolean_false
  3346 0000203D 752F                    	jne .L_if_end_0167
  3347                                  	; preparing a non-tail-call
  3348 0000203F 488B4520                	mov rax, PARAM(0)	; param q
  3349 00002043 50                      	push rax
  3350 00002044 6A01                    	push 1	; arg count
  3351 00002046 488B0425[260A0000]      	mov rax, qword [free_var_33]	; free var fraction?
  3352 0000204E 803805                  	cmp byte [rax], T_undefined
  3353 00002051 0F8421100000            	je L_error_fvar_undefined
  3354 00002057 803804                  	cmp byte [rax], T_closure
  3355 0000205A 0F859C100000            	jne L_error_non_closure
  3356 00002060 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3357 00002063 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3358 00002066 483D[02000000]          	cmp rax, sob_boolean_false
  3359 0000206C 7500                    	jne .L_if_end_0167
  3360                                  .L_if_end_0167:
  3361 0000206E C9                      	leave
  3362 0000206F C21800                  	ret AND_KILL_FRAME(1)
  3363                                  .L_lambda_simple_end_07a5:	; new closure is in rax
  3364 00002072 48890425[BF0A0000]      	mov qword [free_var_42], rax
  3365 0000207A 48B8-                   	mov rax, sob_void
  3365 0000207C [0000000000000000] 
  3366                                  
  3367 00002084 4889C7                  	mov rdi, rax
  3368 00002087 E86E130000              	call print_sexpr_if_not_void
  3369                                  	; preparing a non-tail-call
  3370 0000208C 48B8-                   	mov rax, L_constants + 1993
  3370 0000208E [C907000000000000] 
  3371 00002096 50                      	push rax
  3372 00002097 6A01                    	push 1	; arg count
  3373 00002099 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3374 0000209E E802110000              	call malloc
  3375 000020A3 50                      	push rax
  3376 000020A4 BF00000000              	mov rdi, 8 * 0	; new rib
  3377 000020A9 E8F7100000              	call malloc
  3378 000020AE 50                      	push rax
  3379 000020AF BF08000000              	mov rdi, 8 * 1	; extended env
  3380 000020B4 E8EC100000              	call malloc
  3381 000020B9 488B7D10                	mov rdi, ENV
  3382 000020BD BE00000000              	mov rsi, 0
  3383 000020C2 BA01000000              	mov rdx, 1
  3384                                  .L_lambda_simple_env_loop_07a6:	; ext_env[i + 1] <-- env[i]
  3385 000020C7 4883FE00                	cmp rsi, 0
  3386 000020CB 7410                    	je .L_lambda_simple_env_end_07a6
  3387 000020CD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3388 000020D1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3389 000020D5 48FFC6                  	inc rsi
  3390 000020D8 48FFC2                  	inc rdx
  3391 000020DB EBEA                    	jmp .L_lambda_simple_env_loop_07a6
  3392                                  .L_lambda_simple_env_end_07a6:
  3393 000020DD 5B                      	pop rbx
  3394 000020DE BE00000000              	mov rsi, 0
  3395                                  .L_lambda_simple_params_loop_07a6:	; copy params
  3396 000020E3 4883FE00                	cmp rsi, 0
  3397 000020E7 740E                    	je .L_lambda_simple_params_end_07a6
  3398 000020E9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3399 000020EE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3400 000020F2 48FFC6                  	inc rsi
  3401 000020F5 EBEC                    	jmp .L_lambda_simple_params_loop_07a6
  3402                                  .L_lambda_simple_params_end_07a6:
  3403 000020F7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3404 000020FA 4889C3                  	mov rbx, rax
  3405 000020FD 58                      	pop rax
  3406 000020FE C60004                  	mov byte [rax], T_closure
  3407 00002101 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3408 00002105 48C74009[12210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_07a6
  3409 0000210D E959030000              	jmp .L_lambda_simple_end_07a6
  3410                                  .L_lambda_simple_code_07a6:	; lambda-simple body
  3411 00002112 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3412 00002118 740B                    	je .L_lambda_simple_arity_check_ok_0857
  3413 0000211A FF742410                	push qword [rsp + 8 * 2]
  3414 0000211E 6A01                    	push 1
  3415 00002120 E939100000              	jmp L_error_incorrect_arity_simple
  3416                                  .L_lambda_simple_arity_check_ok_0857:
  3417 00002125 C8000000                	enter 0, 0
  3418 00002129 488B5D20                	 mov rbx, qword [rbp + 8 * (4 +0)]
  3419 0000212D BF08000000              	mov rdi, 8
  3420 00002132 E86E100000              	call malloc
  3421 00002137 488918                  	mov qword [rax], rbx
  3422 0000213A 488903                  	mov qword [rbx], rax
  3423 0000213D 48B8-                   	mov rax, sob_void
  3423 0000213F [0000000000000000] 
  3424                                  
  3425 00002147 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3426 0000214C E854100000              	call malloc
  3427 00002151 50                      	push rax
  3428 00002152 BF08000000              	mov rdi, 8 * 1	; new rib
  3429 00002157 E849100000              	call malloc
  3430 0000215C 50                      	push rax
  3431 0000215D BF10000000              	mov rdi, 8 * 2	; extended env
  3432 00002162 E83E100000              	call malloc
  3433 00002167 488B7D10                	mov rdi, ENV
  3434 0000216B BE00000000              	mov rsi, 0
  3435 00002170 BA01000000              	mov rdx, 1
  3436                                  .L_lambda_simple_env_loop_07a7:	; ext_env[i + 1] <-- env[i]
  3437 00002175 4883FE01                	cmp rsi, 1
  3438 00002179 7410                    	je .L_lambda_simple_env_end_07a7
  3439 0000217B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3440 0000217F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3441 00002183 48FFC6                  	inc rsi
  3442 00002186 48FFC2                  	inc rdx
  3443 00002189 EBEA                    	jmp .L_lambda_simple_env_loop_07a7
  3444                                  .L_lambda_simple_env_end_07a7:
  3445 0000218B 5B                      	pop rbx
  3446 0000218C BE00000000              	mov rsi, 0
  3447                                  .L_lambda_simple_params_loop_07a7:	; copy params
  3448 00002191 4883FE01                	cmp rsi, 1
  3449 00002195 740E                    	je .L_lambda_simple_params_end_07a7
  3450 00002197 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3451 0000219C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3452 000021A0 48FFC6                  	inc rsi
  3453 000021A3 EBEC                    	jmp .L_lambda_simple_params_loop_07a7
  3454                                  .L_lambda_simple_params_end_07a7:
  3455 000021A5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3456 000021A8 4889C3                  	mov rbx, rax
  3457 000021AB 58                      	pop rax
  3458 000021AC C60004                  	mov byte [rax], T_closure
  3459 000021AF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3460 000021B3 48C74009[C0210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_07a7
  3461 000021BB E9E9000000              	jmp .L_lambda_simple_end_07a7
  3462                                  .L_lambda_simple_code_07a7:	; lambda-simple body
  3463 000021C0 48837C241002            	cmp qword [rsp + 8 * 2], 2
  3464 000021C6 740B                    	je .L_lambda_simple_arity_check_ok_0858
  3465 000021C8 FF742410                	push qword [rsp + 8 * 2]
  3466 000021CC 6A02                    	push 2
  3467 000021CE E98B0F0000              	jmp L_error_incorrect_arity_simple
  3468                                  .L_lambda_simple_arity_check_ok_0858:
  3469 000021D3 C8000000                	enter 0, 0
  3470                                  	; preparing a non-tail-call
  3471 000021D7 488B4528                	mov rax, PARAM(1)	; param s
  3472 000021DB 50                      	push rax
  3473 000021DC 6A01                    	push 1	; arg count
  3474 000021DE 488B0425[9D0A0000]      	mov rax, qword [free_var_40]	; free var null?
  3475 000021E6 803805                  	cmp byte [rax], T_undefined
  3476 000021E9 0F84890E0000            	je L_error_fvar_undefined
  3477 000021EF 803804                  	cmp byte [rax], T_closure
  3478 000021F2 0F85040F0000            	jne L_error_non_closure
  3479 000021F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3480 000021FB FF5009                  	call SOB_CLOSURE_CODE(rax)
  3481 000021FE 483D[02000000]          	cmp rax, sob_boolean_false
  3482 00002204 7409                    	je .L_if_else_00f8
  3483 00002206 488B4520                	mov rax, PARAM(0)	; param a
  3484 0000220A E996000000              	jmp .L_if_end_0168
  3485                                  .L_if_else_00f8:
  3486                                  	; preparing a non-tail-call
  3487                                  	; preparing a non-tail-call
  3488                                  	; preparing a non-tail-call
  3489 0000220F 488B4528                	mov rax, PARAM(1)	; param s
  3490 00002213 50                      	push rax
  3491 00002214 6A01                    	push 1	; arg count
  3492 00002216 488B0425[040A0000]      	mov rax, qword [free_var_31]	; free var cdr
  3493 0000221E 803805                  	cmp byte [rax], T_undefined
  3494 00002221 0F84510E0000            	je L_error_fvar_undefined
  3495 00002227 803804                  	cmp byte [rax], T_closure
  3496 0000222A 0F85CC0E0000            	jne L_error_non_closure
  3497 00002230 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3498 00002233 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3499 00002236 50                      	push rax
  3500                                  	; preparing a non-tail-call
  3501 00002237 488B4528                	mov rax, PARAM(1)	; param s
  3502 0000223B 50                      	push rax
  3503 0000223C 6A01                    	push 1	; arg count
  3504 0000223E 488B0425[05090000]      	mov rax, qword [free_var_16]	; free var car
  3505 00002246 803805                  	cmp byte [rax], T_undefined
  3506 00002249 0F84290E0000            	je L_error_fvar_undefined
  3507 0000224F 803804                  	cmp byte [rax], T_closure
  3508 00002252 0F85A40E0000            	jne L_error_non_closure
  3509 00002258 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3510 0000225B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3511 0000225E 50                      	push rax
  3512 0000225F 6A02                    	push 2	; arg count
  3513 00002261 488B4510                	mov rax, ENV
  3514 00002265 488B00                  	mov rax, qword [rax + 8 * 0]
  3515 00002268 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  3516 0000226B 488B00                  	mov rax, qword [rax]
  3517 0000226E 803804                  	cmp byte [rax], T_closure
  3518 00002271 0F85850E0000            	jne L_error_non_closure
  3519 00002277 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3520 0000227A FF5009                  	call SOB_CLOSURE_CODE(rax)
  3521 0000227D 50                      	push rax
  3522 0000227E 488B4520                	mov rax, PARAM(0)	; param a
  3523 00002282 50                      	push rax
  3524 00002283 6A02                    	push 2	; arg count
  3525 00002285 488B0425[150A0000]      	mov rax, qword [free_var_32]	; free var cons
  3526 0000228D 803805                  	cmp byte [rax], T_undefined
  3527 00002290 0F84E20D0000            	je L_error_fvar_undefined
  3528 00002296 803804                  	cmp byte [rax], T_closure
  3529 00002299 0F855D0E0000            	jne L_error_non_closure
  3530 0000229F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3531 000022A2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3532                                  .L_if_end_0168:
  3533 000022A5 C9                      	leave
  3534 000022A6 C22000                  	ret AND_KILL_FRAME(2)
  3535                                  .L_lambda_simple_end_07a7:	; new closure is in rax
  3536 000022A9 50                      	push rax
  3537 000022AA 488B4520                	mov rax, PARAM(0)	; param run
  3538 000022AE 8F00                    	pop qword [rax]
  3539 000022B0 48B8-                   	mov rax, sob_void
  3539 000022B2 [0000000000000000] 
  3540                                  
  3541 000022BA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3542 000022BF E8E10E0000              	call malloc
  3543 000022C4 50                      	push rax
  3544 000022C5 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
  3545 000022C9 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
  3546 000022CD BF08000000              	mov rdi, 8 * 1	; new rib for optional parameters
  3547 000022D2 E8CE0E0000              	call malloc
  3548 000022D7 50                      	push rax
  3549 000022D8 BF10000000              	mov rdi, 8 * 2	; extended env
  3550 000022DD E8C30E0000              	call malloc
  3551 000022E2 488B7D10                	mov rdi, ENV
  3552 000022E6 BE00000000              	mov rsi, 0
  3553 000022EB BA01000000              	mov rdx, 1
  3554                                  .L_lambda_opt_env_loop_00b2:	; ext_env[i + 1] <-- env[i] copy all the array
  3555 000022F0 4883FE01                	cmp rsi, 1
  3556 000022F4 7410                    	je .L_lambda_opt_env_end_00b2
  3557 000022F6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3558 000022FA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3559 000022FE 48FFC6                  	inc rsi
  3560 00002301 48FFC2                  	inc rdx
  3561 00002304 EBEA                    	jmp .L_lambda_opt_env_loop_00b2
  3562                                  .L_lambda_opt_env_end_00b2:
  3563 00002306 5B                      	pop rbx
  3564 00002307 BE00000000              	mov rsi, 0
  3565                                  .L_lambda_opt_params_loop_0214:	; copy params
  3566 0000230C 4883FE01                	cmp rsi, 1
  3567 00002310 740E                    	je .L_lambda_opt_params_end_0163
  3568 00002312 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3569 00002317 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3570 0000231B 48FFC6                  	inc rsi
  3571 0000231E EBEC                    	jmp .L_lambda_opt_params_loop_0214
  3572                                  .L_lambda_opt_params_end_0163:
  3573 00002320 488918                  	mov qword [rax], rbx 	; ext_env[0] <-- The new_rib 
  3574 00002323 4889C3                  	mov rbx, rax
  3575 00002326 58                      	pop rax
  3576 00002327 C60004                  	mov byte [rax], T_closure
  3577 0000232A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3578 0000232E 48C74009[3B230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00b2
  3579 00002336 E92C010000              	jmp .L_lambda_opt_end_0163
  3580                                  .L_lambda_opt_code_00b2:	; lambda-opt body
  3581 0000233B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3582 00002341 7D0B                    	jge .L_lambda_simple_arity_check_ok_0859
  3583 00002343 FF742410                	push qword [rsp + 8 * 2]
  3584 00002347 6A01                    	push 1
  3585 00002349 E9100E0000              	jmp L_error_incorrect_arity_simple
  3586                                  .L_lambda_simple_arity_check_ok_0859:
  3587 0000234E 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  3588 00002353 4983E801                	sub r8, 1
  3589 00002357 4C89C3                  	mov rbx,r8
  3590 0000235A 4983F800                	cmp r8, 0
  3591 0000235E 7535                    	jne .L_lambda_opt_params_loop_0216
  3592 00002360 488B542410              	mov rdx, qword [rsp + 8 * 2]
  3593 00002365 4883C203                	add rdx , 3
  3594 00002369 4883EC08                	sub rsp , 8
  3595 0000236D 4889E1                  	mov rcx, rsp
  3596                                  .L_lambda_opt_stack_adjusted_0215: ;pushing down the stack of the current function
  3597 00002370 488B5908                	mov rbx, qword [rcx + 8 * 1]
  3598 00002374 488919                  	mov qword[rcx] , rbx
  3599 00002377 4883C108                	add rcx , 8
  3600 0000237B 48FFCA                  	dec rdx
  3601 0000237E 4883FA00                	cmp rdx, 0
  3602 00002382 75EC                    	jne .L_lambda_opt_stack_adjusted_0215
  3603 00002384 48FF442410              	inc qword [rsp + 8 * 2]
  3604 00002389 48C701[01000000]        	mov qword [rcx], sob_nil 
  3605 00002390 E9A2000000              	jmp .L_lambda_opt_end_0164
  3606                                  	.L_lambda_opt_params_loop_0216:
  3607 00002395 488B542410              	mov rdx, qword [rsp + 8*2]
  3608 0000239A 488D4CD410              	lea rcx, [rsp + 16 + 8*rdx]
  3609 0000239F 4C89C2                  	mov rdx, r8
  3610 000023A2 49B9-                   	mov r9, sob_nil
  3610 000023A4 [0100000000000000] 
  3611                                  	.L_lambda_opt_params_loop_0215: ;loop for copying the opt into list
  3612 000023AC BF11000000              	mov rdi, (1 + 8 + 8)
  3613 000023B1 E8EF0D0000              	call malloc
  3614 000023B6 C60021                  	mov byte[rax], T_pair
  3615 000023B9 488B19                  	mov rbx, qword [rcx]
  3616 000023BC 48895801                	mov SOB_PAIR_CAR(rax), rbx
  3617 000023C0 4C894809                	mov SOB_PAIR_CDR(rax), r9
  3618 000023C4 4989C1                  	mov r9, rax
  3619 000023C7 48FFCA                  	dec rdx
  3620 000023CA 4883E908                	sub rcx, 8
  3621 000023CE 4883FA00                	cmp rdx, 0
  3622 000023D2 75D8                    	jne .L_lambda_opt_params_loop_0215
  3623 000023D4 488B542410              	mov rdx, qword [rsp + 8 * 2]
  3624 000023D9 4889E0                  	mov rax, rsp
  3625 000023DC 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
  3626 000023E1 4C89C1                  	mov rcx, r8
  3627 000023E4 48FFC9                  	dec rcx
  3628 000023E7 4883C203                	add rdx, 3
  3629 000023EB 4829CA                  	sub rdx,rcx
  3630 000023EE 48C1E103                	shl rcx, 3
  3631                                  	.L_lambda_opt_stack_adjusted_0216:
  3632 000023F2 4883FA00                	cmp rdx, 0
  3633 000023F6 7419                    	je .L_lambda_opt_params_end_0164
  3634 000023F8 4889D8                  	mov rax, rbx
  3635 000023FB 4829C8                  	sub rax, rcx
  3636 000023FE 488B30                  	mov rsi, qword [rax]
  3637 00002401 488933                  	mov [rbx], rsi
  3638 00002404 4883EB08                	sub rbx, 8
  3639 00002408 48FFCA                  	dec rdx
  3640 0000240B 4883FA00                	cmp rdx, 0
  3641 0000240F 75E1                    	jne .L_lambda_opt_stack_adjusted_0216
  3642                                  	.L_lambda_opt_params_end_0164:
  3643 00002411 4801CC                  	add rsp,rcx
  3644 00002414 BB01000000              	mov rbx, 1
  3645 00002419 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  3646 0000241E 4883C303                	add rbx,3
  3647 00002422 4C29C3                  	sub rbx,r8
  3648 00002425 48C1E303                	shl rbx, 3
  3649 00002429 4801E3                  	add rbx, rsp
  3650 0000242C 4C890B                  	mov qword[rbx] , r9
  3651 0000242F 49FFC8                  	dec r8
  3652 00002432 4C29442410              	sub qword [rsp + 8 * 2], r8
  3653                                  	.L_lambda_opt_end_0164:
  3654 00002437 C8000000                	enter 0, 0
  3655                                  	; preparing a non-tail-call
  3656 0000243B 488B4528                	mov rax, PARAM(1)	; param s
  3657 0000243F 50                      	push rax
  3658 00002440 488B4520                	mov rax, PARAM(0)	; param a
  3659 00002444 50                      	push rax
  3660 00002445 6A02                    	push 2	; arg count
  3661 00002447 488B4510                	mov rax, ENV
  3662 0000244B 488B00                  	mov rax, qword [rax + 8 * 0]
  3663 0000244E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  3664 00002451 488B00                  	mov rax, qword [rax]
  3665 00002454 803804                  	cmp byte [rax], T_closure
  3666 00002457 0F859F0C0000            	jne L_error_non_closure
  3667 0000245D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3668 00002460 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3669                                  	LEAVE
    49 00002463 C9                  <1>  leave
  3670 00002464 C22000                  	ret AND_KILL_FRAME(2)
  3671                                  .L_lambda_opt_end_0163:
  3672 00002467 C9                      	leave
  3673 00002468 C21800                  	ret AND_KILL_FRAME(1)
  3674                                  .L_lambda_simple_end_07a6:	; new closure is in rax
  3675 0000246B 803804                  	cmp byte [rax], T_closure
  3676 0000246E 0F85880C0000            	jne L_error_non_closure
  3677 00002474 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3678 00002477 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3679 0000247A 48890425[590A0000]      	mov qword [free_var_36], rax
  3680 00002482 48B8-                   	mov rax, sob_void
  3680 00002484 [0000000000000000] 
  3681                                  
  3682 0000248C 4889C7                  	mov rdi, rax
  3683 0000248F E8660F0000              	call print_sexpr_if_not_void
  3684                                  	; preparing a non-tail-call
  3685 00002494 48B8-                   	mov rax, L_constants + 1993
  3685 00002496 [C907000000000000] 
  3686 0000249E 50                      	push rax
  3687 0000249F 6A01                    	push 1	; arg count
  3688 000024A1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3689 000024A6 E8FA0C0000              	call malloc
  3690 000024AB 50                      	push rax
  3691 000024AC BF00000000              	mov rdi, 8 * 0	; new rib
  3692 000024B1 E8EF0C0000              	call malloc
  3693 000024B6 50                      	push rax
  3694 000024B7 BF08000000              	mov rdi, 8 * 1	; extended env
  3695 000024BC E8E40C0000              	call malloc
  3696 000024C1 488B7D10                	mov rdi, ENV
  3697 000024C5 BE00000000              	mov rsi, 0
  3698 000024CA BA01000000              	mov rdx, 1
  3699                                  .L_lambda_simple_env_loop_07a8:	; ext_env[i + 1] <-- env[i]
  3700 000024CF 4883FE00                	cmp rsi, 0
  3701 000024D3 7410                    	je .L_lambda_simple_env_end_07a8
  3702 000024D5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3703 000024D9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3704 000024DD 48FFC6                  	inc rsi
  3705 000024E0 48FFC2                  	inc rdx
  3706 000024E3 EBEA                    	jmp .L_lambda_simple_env_loop_07a8
  3707                                  .L_lambda_simple_env_end_07a8:
  3708 000024E5 5B                      	pop rbx
  3709 000024E6 BE00000000              	mov rsi, 0
  3710                                  .L_lambda_simple_params_loop_07a8:	; copy params
  3711 000024EB 4883FE00                	cmp rsi, 0
  3712 000024EF 740E                    	je .L_lambda_simple_params_end_07a8
  3713 000024F1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3714 000024F6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3715 000024FA 48FFC6                  	inc rsi
  3716 000024FD EBEC                    	jmp .L_lambda_simple_params_loop_07a8
  3717                                  .L_lambda_simple_params_end_07a8:
  3718 000024FF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3719 00002502 4889C3                  	mov rbx, rax
  3720 00002505 58                      	pop rax
  3721 00002506 C60004                  	mov byte [rax], T_closure
  3722 00002509 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3723 0000250D 48C74009[1A250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_07a8
  3724 00002515 E9C8030000              	jmp .L_lambda_simple_end_07a8
  3725                                  .L_lambda_simple_code_07a8:	; lambda-simple body
  3726 0000251A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3727 00002520 740B                    	je .L_lambda_simple_arity_check_ok_085a
  3728 00002522 FF742410                	push qword [rsp + 8 * 2]
  3729 00002526 6A01                    	push 1
  3730 00002528 E9310C0000              	jmp L_error_incorrect_arity_simple
  3731                                  .L_lambda_simple_arity_check_ok_085a:
  3732 0000252D C8000000                	enter 0, 0
  3733 00002531 488B5D20                	 mov rbx, qword [rbp + 8 * (4 +0)]
  3734 00002535 BF08000000              	mov rdi, 8
  3735 0000253A E8660C0000              	call malloc
  3736 0000253F 488918                  	mov qword [rax], rbx
  3737 00002542 488903                  	mov qword [rbx], rax
  3738 00002545 48B8-                   	mov rax, sob_void
  3738 00002547 [0000000000000000] 
  3739                                  
  3740 0000254F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3741 00002554 E84C0C0000              	call malloc
  3742 00002559 50                      	push rax
  3743 0000255A BF08000000              	mov rdi, 8 * 1	; new rib
  3744 0000255F E8410C0000              	call malloc
  3745 00002564 50                      	push rax
  3746 00002565 BF10000000              	mov rdi, 8 * 2	; extended env
  3747 0000256A E8360C0000              	call malloc
  3748 0000256F 488B7D10                	mov rdi, ENV
  3749 00002573 BE00000000              	mov rsi, 0
  3750 00002578 BA01000000              	mov rdx, 1
  3751                                  .L_lambda_simple_env_loop_07a9:	; ext_env[i + 1] <-- env[i]
  3752 0000257D 4883FE01                	cmp rsi, 1
  3753 00002581 7410                    	je .L_lambda_simple_env_end_07a9
  3754 00002583 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3755 00002587 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3756 0000258B 48FFC6                  	inc rsi
  3757 0000258E 48FFC2                  	inc rdx
  3758 00002591 EBEA                    	jmp .L_lambda_simple_env_loop_07a9
  3759                                  .L_lambda_simple_env_end_07a9:
  3760 00002593 5B                      	pop rbx
  3761 00002594 BE00000000              	mov rsi, 0
  3762                                  .L_lambda_simple_params_loop_07a9:	; copy params
  3763 00002599 4883FE01                	cmp rsi, 1
  3764 0000259D 740E                    	je .L_lambda_simple_params_end_07a9
  3765 0000259F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3766 000025A4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3767 000025A8 48FFC6                  	inc rsi
  3768 000025AB EBEC                    	jmp .L_lambda_simple_params_loop_07a9
  3769                                  .L_lambda_simple_params_end_07a9:
  3770 000025AD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3771 000025B0 4889C3                  	mov rbx, rax
  3772 000025B3 58                      	pop rax
  3773 000025B4 C60004                  	mov byte [rax], T_closure
  3774 000025B7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3775 000025BB 48C74009[C8250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_07a9
  3776 000025C3 E9EA000000              	jmp .L_lambda_simple_end_07a9
  3777                                  .L_lambda_simple_code_07a9:	; lambda-simple body
  3778 000025C8 48837C241002            	cmp qword [rsp + 8 * 2], 2
  3779 000025CE 740B                    	je .L_lambda_simple_arity_check_ok_085b
  3780 000025D0 FF742410                	push qword [rsp + 8 * 2]
  3781 000025D4 6A02                    	push 2
  3782 000025D6 E9830B0000              	jmp L_error_incorrect_arity_simple
  3783                                  .L_lambda_simple_arity_check_ok_085b:
  3784 000025DB C8000000                	enter 0, 0
  3785                                  	; preparing a non-tail-call
  3786 000025DF 488B4528                	mov rax, PARAM(1)	; param s
  3787 000025E3 50                      	push rax
  3788 000025E4 6A01                    	push 1	; arg count
  3789 000025E6 488B0425[AE0A0000]      	mov rax, qword [free_var_41]	; free var pair?
  3790 000025EE 803805                  	cmp byte [rax], T_undefined
  3791 000025F1 0F84810A0000            	je L_error_fvar_undefined
  3792 000025F7 803804                  	cmp byte [rax], T_closure
  3793 000025FA 0F85FC0A0000            	jne L_error_non_closure
  3794 00002600 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3795 00002603 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3796 00002606 483D[02000000]          	cmp rax, sob_boolean_false
  3797 0000260C 0F8498000000            	je .L_if_else_00f9
  3798                                  	; preparing a non-tail-call
  3799                                  	; preparing a non-tail-call
  3800                                  	; preparing a non-tail-call
  3801 00002612 488B4528                	mov rax, PARAM(1)	; param s
  3802 00002616 50                      	push rax
  3803 00002617 6A01                    	push 1	; arg count
  3804 00002619 488B0425[040A0000]      	mov rax, qword [free_var_31]	; free var cdr
  3805 00002621 803805                  	cmp byte [rax], T_undefined
  3806 00002624 0F844E0A0000            	je L_error_fvar_undefined
  3807 0000262A 803804                  	cmp byte [rax], T_closure
  3808 0000262D 0F85C90A0000            	jne L_error_non_closure
  3809 00002633 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3810 00002636 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3811 00002639 50                      	push rax
  3812                                  	; preparing a non-tail-call
  3813 0000263A 488B4528                	mov rax, PARAM(1)	; param s
  3814 0000263E 50                      	push rax
  3815 0000263F 6A01                    	push 1	; arg count
  3816 00002641 488B0425[05090000]      	mov rax, qword [free_var_16]	; free var car
  3817 00002649 803805                  	cmp byte [rax], T_undefined
  3818 0000264C 0F84260A0000            	je L_error_fvar_undefined
  3819 00002652 803804                  	cmp byte [rax], T_closure
  3820 00002655 0F85A10A0000            	jne L_error_non_closure
  3821 0000265B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3822 0000265E FF5009                  	call SOB_CLOSURE_CODE(rax)
  3823 00002661 50                      	push rax
  3824 00002662 6A02                    	push 2	; arg count
  3825 00002664 488B4510                	mov rax, ENV
  3826 00002668 488B00                  	mov rax, qword [rax + 8 * 0]
  3827 0000266B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  3828 0000266E 488B00                  	mov rax, qword [rax]
  3829 00002671 803804                  	cmp byte [rax], T_closure
  3830 00002674 0F85820A0000            	jne L_error_non_closure
  3831 0000267A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3832 0000267D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3833 00002680 50                      	push rax
  3834 00002681 488B4520                	mov rax, PARAM(0)	; param a
  3835 00002685 50                      	push rax
  3836 00002686 6A02                    	push 2	; arg count
  3837 00002688 488B0425[150A0000]      	mov rax, qword [free_var_32]	; free var cons
  3838 00002690 803805                  	cmp byte [rax], T_undefined
  3839 00002693 0F84DF090000            	je L_error_fvar_undefined
  3840 00002699 803804                  	cmp byte [rax], T_closure
  3841 0000269C 0F855A0A0000            	jne L_error_non_closure
  3842 000026A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3843 000026A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3844 000026A8 EB04                    	jmp .L_if_end_0169
  3845                                  .L_if_else_00f9:
  3846 000026AA 488B4520                	mov rax, PARAM(0)	; param a
  3847                                  .L_if_end_0169:
  3848 000026AE C9                      	leave
  3849 000026AF C22000                  	ret AND_KILL_FRAME(2)
  3850                                  .L_lambda_simple_end_07a9:	; new closure is in rax
  3851 000026B2 50                      	push rax
  3852 000026B3 488B4520                	mov rax, PARAM(0)	; param run
  3853 000026B7 8F00                    	pop qword [rax]
  3854 000026B9 48B8-                   	mov rax, sob_void
  3854 000026BB [0000000000000000] 
  3855                                  
  3856 000026C3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3857 000026C8 E8D80A0000              	call malloc
  3858 000026CD 50                      	push rax
  3859 000026CE 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
  3860 000026D2 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
  3861 000026D6 BF08000000              	mov rdi, 8 * 1	; new rib for optional parameters
  3862 000026DB E8C50A0000              	call malloc
  3863 000026E0 50                      	push rax
  3864 000026E1 BF10000000              	mov rdi, 8 * 2	; extended env
  3865 000026E6 E8BA0A0000              	call malloc
  3866 000026EB 488B7D10                	mov rdi, ENV
  3867 000026EF BE00000000              	mov rsi, 0
  3868 000026F4 BA01000000              	mov rdx, 1
  3869                                  .L_lambda_opt_env_loop_00b3:	; ext_env[i + 1] <-- env[i] copy all the array
  3870 000026F9 4883FE01                	cmp rsi, 1
  3871 000026FD 7410                    	je .L_lambda_opt_env_end_00b3
  3872 000026FF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3873 00002703 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3874 00002707 48FFC6                  	inc rsi
  3875 0000270A 48FFC2                  	inc rdx
  3876 0000270D EBEA                    	jmp .L_lambda_opt_env_loop_00b3
  3877                                  .L_lambda_opt_env_end_00b3:
  3878 0000270F 5B                      	pop rbx
  3879 00002710 BE00000000              	mov rsi, 0
  3880                                  .L_lambda_opt_params_loop_0217:	; copy params
  3881 00002715 4883FE01                	cmp rsi, 1
  3882 00002719 740E                    	je .L_lambda_opt_params_end_0165
  3883 0000271B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3884 00002720 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3885 00002724 48FFC6                  	inc rsi
  3886 00002727 EBEC                    	jmp .L_lambda_opt_params_loop_0217
  3887                                  .L_lambda_opt_params_end_0165:
  3888 00002729 488918                  	mov qword [rax], rbx 	; ext_env[0] <-- The new_rib 
  3889 0000272C 4889C3                  	mov rbx, rax
  3890 0000272F 58                      	pop rax
  3891 00002730 C60004                  	mov byte [rax], T_closure
  3892 00002733 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3893 00002737 48C74009[44270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00b3
  3894 0000273F E99A010000              	jmp .L_lambda_opt_end_0165
  3895                                  .L_lambda_opt_code_00b3:	; lambda-opt body
  3896 00002744 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3897 0000274A 7D0B                    	jge .L_lambda_simple_arity_check_ok_085c
  3898 0000274C FF742410                	push qword [rsp + 8 * 2]
  3899 00002750 6A01                    	push 1
  3900 00002752 E9070A0000              	jmp L_error_incorrect_arity_simple
  3901                                  .L_lambda_simple_arity_check_ok_085c:
  3902 00002757 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  3903 0000275C 4983E801                	sub r8, 1
  3904 00002760 4C89C3                  	mov rbx,r8
  3905 00002763 4983F800                	cmp r8, 0
  3906 00002767 7535                    	jne .L_lambda_opt_params_loop_0219
  3907 00002769 488B542410              	mov rdx, qword [rsp + 8 * 2]
  3908 0000276E 4883C203                	add rdx , 3
  3909 00002772 4883EC08                	sub rsp , 8
  3910 00002776 4889E1                  	mov rcx, rsp
  3911                                  .L_lambda_opt_stack_adjusted_0218: ;pushing down the stack of the current function
  3912 00002779 488B5908                	mov rbx, qword [rcx + 8 * 1]
  3913 0000277D 488919                  	mov qword[rcx] , rbx
  3914 00002780 4883C108                	add rcx , 8
  3915 00002784 48FFCA                  	dec rdx
  3916 00002787 4883FA00                	cmp rdx, 0
  3917 0000278B 75EC                    	jne .L_lambda_opt_stack_adjusted_0218
  3918 0000278D 48FF442410              	inc qword [rsp + 8 * 2]
  3919 00002792 48C701[01000000]        	mov qword [rcx], sob_nil 
  3920 00002799 E9A2000000              	jmp .L_lambda_opt_end_0166
  3921                                  	.L_lambda_opt_params_loop_0219:
  3922 0000279E 488B542410              	mov rdx, qword [rsp + 8*2]
  3923 000027A3 488D4CD410              	lea rcx, [rsp + 16 + 8*rdx]
  3924 000027A8 4C89C2                  	mov rdx, r8
  3925 000027AB 49B9-                   	mov r9, sob_nil
  3925 000027AD [0100000000000000] 
  3926                                  	.L_lambda_opt_params_loop_0218: ;loop for copying the opt into list
  3927 000027B5 BF11000000              	mov rdi, (1 + 8 + 8)
  3928 000027BA E8E6090000              	call malloc
  3929 000027BF C60021                  	mov byte[rax], T_pair
  3930 000027C2 488B19                  	mov rbx, qword [rcx]
  3931 000027C5 48895801                	mov SOB_PAIR_CAR(rax), rbx
  3932 000027C9 4C894809                	mov SOB_PAIR_CDR(rax), r9
  3933 000027CD 4989C1                  	mov r9, rax
  3934 000027D0 48FFCA                  	dec rdx
  3935 000027D3 4883E908                	sub rcx, 8
  3936 000027D7 4883FA00                	cmp rdx, 0
  3937 000027DB 75D8                    	jne .L_lambda_opt_params_loop_0218
  3938 000027DD 488B542410              	mov rdx, qword [rsp + 8 * 2]
  3939 000027E2 4889E0                  	mov rax, rsp
  3940 000027E5 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
  3941 000027EA 4C89C1                  	mov rcx, r8
  3942 000027ED 48FFC9                  	dec rcx
  3943 000027F0 4883C203                	add rdx, 3
  3944 000027F4 4829CA                  	sub rdx,rcx
  3945 000027F7 48C1E103                	shl rcx, 3
  3946                                  	.L_lambda_opt_stack_adjusted_0219:
  3947 000027FB 4883FA00                	cmp rdx, 0
  3948 000027FF 7419                    	je .L_lambda_opt_params_end_0166
  3949 00002801 4889D8                  	mov rax, rbx
  3950 00002804 4829C8                  	sub rax, rcx
  3951 00002807 488B30                  	mov rsi, qword [rax]
  3952 0000280A 488933                  	mov [rbx], rsi
  3953 0000280D 4883EB08                	sub rbx, 8
  3954 00002811 48FFCA                  	dec rdx
  3955 00002814 4883FA00                	cmp rdx, 0
  3956 00002818 75E1                    	jne .L_lambda_opt_stack_adjusted_0219
  3957                                  	.L_lambda_opt_params_end_0166:
  3958 0000281A 4801CC                  	add rsp,rcx
  3959 0000281D BB01000000              	mov rbx, 1
  3960 00002822 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  3961 00002827 4883C303                	add rbx,3
  3962 0000282B 4C29C3                  	sub rbx,r8
  3963 0000282E 48C1E303                	shl rbx, 3
  3964 00002832 4801E3                  	add rbx, rsp
  3965 00002835 4C890B                  	mov qword[rbx] , r9
  3966 00002838 49FFC8                  	dec r8
  3967 0000283B 4C29442410              	sub qword [rsp + 8 * 2], r8
  3968                                  	.L_lambda_opt_end_0166:
  3969 00002840 C8000000                	enter 0, 0
  3970                                  	; preparing a non-tail-call
  3971                                  	; preparing a non-tail-call
  3972                                  	; preparing a non-tail-call
  3973 00002844 488B4528                	mov rax, PARAM(1)	; param s
  3974 00002848 50                      	push rax
  3975 00002849 6A01                    	push 1	; arg count
  3976 0000284B 488B0425[040A0000]      	mov rax, qword [free_var_31]	; free var cdr
  3977 00002853 803805                  	cmp byte [rax], T_undefined
  3978 00002856 0F841C080000            	je L_error_fvar_undefined
  3979 0000285C 803804                  	cmp byte [rax], T_closure
  3980 0000285F 0F8597080000            	jne L_error_non_closure
  3981 00002865 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3982 00002868 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3983 0000286B 50                      	push rax
  3984                                  	; preparing a non-tail-call
  3985 0000286C 488B4528                	mov rax, PARAM(1)	; param s
  3986 00002870 50                      	push rax
  3987 00002871 6A01                    	push 1	; arg count
  3988 00002873 488B0425[05090000]      	mov rax, qword [free_var_16]	; free var car
  3989 0000287B 803805                  	cmp byte [rax], T_undefined
  3990 0000287E 0F84F4070000            	je L_error_fvar_undefined
  3991 00002884 803804                  	cmp byte [rax], T_closure
  3992 00002887 0F856F080000            	jne L_error_non_closure
  3993 0000288D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3994 00002890 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3995 00002893 50                      	push rax
  3996 00002894 6A02                    	push 2	; arg count
  3997 00002896 488B4510                	mov rax, ENV
  3998 0000289A 488B00                  	mov rax, qword [rax + 8 * 0]
  3999 0000289D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4000 000028A0 488B00                  	mov rax, qword [rax]
  4001 000028A3 803804                  	cmp byte [rax], T_closure
  4002 000028A6 0F8550080000            	jne L_error_non_closure
  4003 000028AC FF7001                  	push SOB_CLOSURE_ENV(rax)
  4004 000028AF FF5009                  	call SOB_CLOSURE_CODE(rax)
  4005 000028B2 50                      	push rax
  4006 000028B3 488B4520                	mov rax, PARAM(0)	; param f
  4007 000028B7 50                      	push rax
  4008 000028B8 6A02                    	push 2	; arg count
  4009 000028BA 488B0425[F5070000]      	mov rax, qword [free_var_0]	; free var __bin-apply
  4010 000028C2 803805                  	cmp byte [rax], T_undefined
  4011 000028C5 0F84AD070000            	je L_error_fvar_undefined
  4012 000028CB 803804                  	cmp byte [rax], T_closure
  4013 000028CE 0F8528080000            	jne L_error_non_closure
  4014 000028D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4015 000028D7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4016                                  	LEAVE
    49 000028DA C9                  <1>  leave
  4017 000028DB C22000                  	ret AND_KILL_FRAME(2)
  4018                                  .L_lambda_opt_end_0165:
  4019 000028DE C9                      	leave
  4020 000028DF C21800                  	ret AND_KILL_FRAME(1)
  4021                                  .L_lambda_simple_end_07a8:	; new closure is in rax
  4022 000028E2 803804                  	cmp byte [rax], T_closure
  4023 000028E5 0F8511080000            	jne L_error_non_closure
  4024 000028EB FF7001                  	push SOB_CLOSURE_ENV(rax)
  4025 000028EE FF5009                  	call SOB_CLOSURE_CODE(rax)
  4026 000028F1 48890425[06080000]      	mov qword [free_var_1], rax
  4027 000028F9 48B8-                   	mov rax, sob_void
  4027 000028FB [0000000000000000] 
  4028                                  
  4029 00002903 4889C7                  	mov rdi, rax
  4030 00002906 E8EF0A0000              	call print_sexpr_if_not_void
  4031                                  	; preparing a non-tail-call
  4032 0000290B 48B8-                   	mov rax, L_constants + 1993
  4032 0000290D [C907000000000000] 
  4033 00002915 50                      	push rax
  4034 00002916 48B8-                   	mov rax, L_constants + 1993
  4034 00002918 [C907000000000000] 
  4035 00002920 50                      	push rax
  4036 00002921 6A02                    	push 2	; arg count
  4037 00002923 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4038 00002928 E878080000              	call malloc
  4039 0000292D 50                      	push rax
  4040 0000292E BF00000000              	mov rdi, 8 * 0	; new rib
  4041 00002933 E86D080000              	call malloc
  4042 00002938 50                      	push rax
  4043 00002939 BF08000000              	mov rdi, 8 * 1	; extended env
  4044 0000293E E862080000              	call malloc
  4045 00002943 488B7D10                	mov rdi, ENV
  4046 00002947 BE00000000              	mov rsi, 0
  4047 0000294C BA01000000              	mov rdx, 1
  4048                                  .L_lambda_simple_env_loop_07aa:	; ext_env[i + 1] <-- env[i]
  4049 00002951 4883FE00                	cmp rsi, 0
  4050 00002955 7410                    	je .L_lambda_simple_env_end_07aa
  4051 00002957 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4052 0000295B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4053 0000295F 48FFC6                  	inc rsi
  4054 00002962 48FFC2                  	inc rdx
  4055 00002965 EBEA                    	jmp .L_lambda_simple_env_loop_07aa
  4056                                  .L_lambda_simple_env_end_07aa:
  4057 00002967 5B                      	pop rbx
  4058 00002968 BE00000000              	mov rsi, 0
  4059                                  .L_lambda_simple_params_loop_07aa:	; copy params
  4060 0000296D 4883FE00                	cmp rsi, 0
  4061 00002971 740E                    	je .L_lambda_simple_params_end_07aa
  4062 00002973 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4063 00002978 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4064 0000297C 48FFC6                  	inc rsi
  4065 0000297F EBEC                    	jmp .L_lambda_simple_params_loop_07aa
  4066                                  .L_lambda_simple_params_end_07aa:
  4067 00002981 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4068 00002984 4889C3                  	mov rbx, rax
  4069 00002987 58                      	pop rax
  4070 00002988 C60004                  	mov byte [rax], T_closure
  4071 0000298B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4072 0000298F 48C74009[9C290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_07aa
  4073 00002997 E9B0050000              	jmp .L_lambda_simple_end_07aa
  4074                                  .L_lambda_simple_code_07aa:	; lambda-simple body
  4075 0000299C 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4076 000029A2 740B                    	je .L_lambda_simple_arity_check_ok_085d
  4077 000029A4 FF742410                	push qword [rsp + 8 * 2]
  4078 000029A8 6A02                    	push 2
  4079 000029AA E9AF070000              	jmp L_error_incorrect_arity_simple
  4080                                  .L_lambda_simple_arity_check_ok_085d:
  4081 000029AF C8000000                	enter 0, 0
  4082 000029B3 488B5D20                	 mov rbx, qword [rbp + 8 * (4 +0)]
  4083 000029B7 BF08000000              	mov rdi, 8
  4084 000029BC E8E4070000              	call malloc
  4085 000029C1 488918                  	mov qword [rax], rbx
  4086 000029C4 488903                  	mov qword [rbx], rax
  4087 000029C7 48B8-                   	mov rax, sob_void
  4087 000029C9 [0000000000000000] 
  4088                                  
  4089 000029D1 488B5D28                	 mov rbx, qword [rbp + 8 * (4 +1)]
  4090 000029D5 BF08000000              	mov rdi, 8
  4091 000029DA E8C6070000              	call malloc
  4092 000029DF 488918                  	mov qword [rax], rbx
  4093 000029E2 488903                  	mov qword [rbx], rax
  4094 000029E5 48B8-                   	mov rax, sob_void
  4094 000029E7 [0000000000000000] 
  4095                                  
  4096 000029EF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4097 000029F4 E8AC070000              	call malloc
  4098 000029F9 50                      	push rax
  4099 000029FA BF10000000              	mov rdi, 8 * 2	; new rib
  4100 000029FF E8A1070000              	call malloc
  4101 00002A04 50                      	push rax
  4102 00002A05 BF10000000              	mov rdi, 8 * 2	; extended env
  4103 00002A0A E896070000              	call malloc
  4104 00002A0F 488B7D10                	mov rdi, ENV
  4105 00002A13 BE00000000              	mov rsi, 0
  4106 00002A18 BA01000000              	mov rdx, 1
  4107                                  .L_lambda_simple_env_loop_07ab:	; ext_env[i + 1] <-- env[i]
  4108 00002A1D 4883FE01                	cmp rsi, 1
  4109 00002A21 7410                    	je .L_lambda_simple_env_end_07ab
  4110 00002A23 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4111 00002A27 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4112 00002A2B 48FFC6                  	inc rsi
  4113 00002A2E 48FFC2                  	inc rdx
  4114 00002A31 EBEA                    	jmp .L_lambda_simple_env_loop_07ab
  4115                                  .L_lambda_simple_env_end_07ab:
  4116 00002A33 5B                      	pop rbx
  4117 00002A34 BE00000000              	mov rsi, 0
  4118                                  .L_lambda_simple_params_loop_07ab:	; copy params
  4119 00002A39 4883FE02                	cmp rsi, 2
  4120 00002A3D 740E                    	je .L_lambda_simple_params_end_07ab
  4121 00002A3F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4122 00002A44 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4123 00002A48 48FFC6                  	inc rsi
  4124 00002A4B EBEC                    	jmp .L_lambda_simple_params_loop_07ab
  4125                                  .L_lambda_simple_params_end_07ab:
  4126 00002A4D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4127 00002A50 4889C3                  	mov rbx, rax
  4128 00002A53 58                      	pop rax
  4129 00002A54 C60004                  	mov byte [rax], T_closure
  4130 00002A57 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4131 00002A5B 48C74009[682A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_07ab
  4132 00002A63 E905010000              	jmp .L_lambda_simple_end_07ab
  4133                                  .L_lambda_simple_code_07ab:	; lambda-simple body
  4134 00002A68 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4135 00002A6E 740B                    	je .L_lambda_simple_arity_check_ok_085e
  4136 00002A70 FF742410                	push qword [rsp + 8 * 2]
  4137 00002A74 6A02                    	push 2
  4138 00002A76 E9E3060000              	jmp L_error_incorrect_arity_simple
  4139                                  .L_lambda_simple_arity_check_ok_085e:
  4140 00002A7B C8000000                	enter 0, 0
  4141                                  	; preparing a non-tail-call
  4142 00002A7F 488B4528                	mov rax, PARAM(1)	; param s
  4143 00002A83 50                      	push rax
  4144 00002A84 6A01                    	push 1	; arg count
  4145 00002A86 488B0425[9D0A0000]      	mov rax, qword [free_var_40]	; free var null?
  4146 00002A8E 803805                  	cmp byte [rax], T_undefined
  4147 00002A91 0F84E1050000            	je L_error_fvar_undefined
  4148 00002A97 803804                  	cmp byte [rax], T_closure
  4149 00002A9A 0F855C060000            	jne L_error_non_closure
  4150 00002AA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4151 00002AA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4152 00002AA6 483D[02000000]          	cmp rax, sob_boolean_false
  4153 00002AAC 740F                    	je .L_if_else_00fa
  4154 00002AAE 48B8-                   	mov rax, L_constants + 1
  4154 00002AB0 [0100000000000000] 
  4155 00002AB8 E9AC000000              	jmp .L_if_end_016a
  4156                                  .L_if_else_00fa:
  4157                                  	; preparing a non-tail-call
  4158                                  	; preparing a non-tail-call
  4159                                  	; preparing a non-tail-call
  4160 00002ABD 488B4528                	mov rax, PARAM(1)	; param s
  4161 00002AC1 50                      	push rax
  4162 00002AC2 6A01                    	push 1	; arg count
  4163 00002AC4 488B0425[040A0000]      	mov rax, qword [free_var_31]	; free var cdr
  4164 00002ACC 803805                  	cmp byte [rax], T_undefined
  4165 00002ACF 0F84A3050000            	je L_error_fvar_undefined
  4166 00002AD5 803804                  	cmp byte [rax], T_closure
  4167 00002AD8 0F851E060000            	jne L_error_non_closure
  4168 00002ADE FF7001                  	push SOB_CLOSURE_ENV(rax)
  4169 00002AE1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4170 00002AE4 50                      	push rax
  4171 00002AE5 488B4520                	mov rax, PARAM(0)	; param f
  4172 00002AE9 50                      	push rax
  4173 00002AEA 6A02                    	push 2	; arg count
  4174 00002AEC 488B4510                	mov rax, ENV
  4175 00002AF0 488B00                  	mov rax, qword [rax + 8 * 0]
  4176 00002AF3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  4177 00002AF6 488B00                  	mov rax, qword [rax]
  4178 00002AF9 803804                  	cmp byte [rax], T_closure
  4179 00002AFC 0F85FA050000            	jne L_error_non_closure
  4180 00002B02 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4181 00002B05 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4182 00002B08 50                      	push rax
  4183                                  	; preparing a non-tail-call
  4184                                  	; preparing a non-tail-call
  4185 00002B09 488B4528                	mov rax, PARAM(1)	; param s
  4186 00002B0D 50                      	push rax
  4187 00002B0E 6A01                    	push 1	; arg count
  4188 00002B10 488B0425[05090000]      	mov rax, qword [free_var_16]	; free var car
  4189 00002B18 803805                  	cmp byte [rax], T_undefined
  4190 00002B1B 0F8457050000            	je L_error_fvar_undefined
  4191 00002B21 803804                  	cmp byte [rax], T_closure
  4192 00002B24 0F85D2050000            	jne L_error_non_closure
  4193 00002B2A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4194 00002B2D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4195 00002B30 50                      	push rax
  4196 00002B31 6A01                    	push 1	; arg count
  4197 00002B33 488B4520                	mov rax, PARAM(0)	; param f
  4198 00002B37 803804                  	cmp byte [rax], T_closure
  4199 00002B3A 0F85BC050000            	jne L_error_non_closure
  4200 00002B40 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4201 00002B43 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4202 00002B46 50                      	push rax
  4203 00002B47 6A02                    	push 2	; arg count
  4204 00002B49 488B0425[150A0000]      	mov rax, qword [free_var_32]	; free var cons
  4205 00002B51 803805                  	cmp byte [rax], T_undefined
  4206 00002B54 0F841E050000            	je L_error_fvar_undefined
  4207 00002B5A 803804                  	cmp byte [rax], T_closure
  4208 00002B5D 0F8599050000            	jne L_error_non_closure
  4209 00002B63 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4210 00002B66 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4211                                  .L_if_end_016a:
  4212 00002B69 C9                      	leave
  4213 00002B6A C22000                  	ret AND_KILL_FRAME(2)
  4214                                  .L_lambda_simple_end_07ab:	; new closure is in rax
  4215 00002B6D 50                      	push rax
  4216 00002B6E 488B4520                	mov rax, PARAM(0)	; param map1
  4217 00002B72 8F00                    	pop qword [rax]
  4218 00002B74 48B8-                   	mov rax, sob_void
  4218 00002B76 [0000000000000000] 
  4219                                  
  4220 00002B7E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4221 00002B83 E81D060000              	call malloc
  4222 00002B88 50                      	push rax
  4223 00002B89 BF10000000              	mov rdi, 8 * 2	; new rib
  4224 00002B8E E812060000              	call malloc
  4225 00002B93 50                      	push rax
  4226 00002B94 BF10000000              	mov rdi, 8 * 2	; extended env
  4227 00002B99 E807060000              	call malloc
  4228 00002B9E 488B7D10                	mov rdi, ENV
  4229 00002BA2 BE00000000              	mov rsi, 0
  4230 00002BA7 BA01000000              	mov rdx, 1
  4231                                  .L_lambda_simple_env_loop_07ac:	; ext_env[i + 1] <-- env[i]
  4232 00002BAC 4883FE01                	cmp rsi, 1
  4233 00002BB0 7410                    	je .L_lambda_simple_env_end_07ac
  4234 00002BB2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4235 00002BB6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4236 00002BBA 48FFC6                  	inc rsi
  4237 00002BBD 48FFC2                  	inc rdx
  4238 00002BC0 EBEA                    	jmp .L_lambda_simple_env_loop_07ac
  4239                                  .L_lambda_simple_env_end_07ac:
  4240 00002BC2 5B                      	pop rbx
  4241 00002BC3 BE00000000              	mov rsi, 0
  4242                                  .L_lambda_simple_params_loop_07ac:	; copy params
  4243 00002BC8 4883FE02                	cmp rsi, 2
  4244 00002BCC 740E                    	je .L_lambda_simple_params_end_07ac
  4245 00002BCE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4246 00002BD3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4247 00002BD7 48FFC6                  	inc rsi
  4248 00002BDA EBEC                    	jmp .L_lambda_simple_params_loop_07ac
  4249                                  .L_lambda_simple_params_end_07ac:
  4250 00002BDC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4251 00002BDF 4889C3                  	mov rbx, rax
  4252 00002BE2 58                      	pop rax
  4253 00002BE3 C60004                  	mov byte [rax], T_closure
  4254 00002BE6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4255 00002BEA 48C74009[F72B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_07ac
  4256 00002BF2 E957010000              	jmp .L_lambda_simple_end_07ac
  4257                                  .L_lambda_simple_code_07ac:	; lambda-simple body
  4258 00002BF7 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4259 00002BFD 740B                    	je .L_lambda_simple_arity_check_ok_085f
  4260 00002BFF FF742410                	push qword [rsp + 8 * 2]
  4261 00002C03 6A02                    	push 2
  4262 00002C05 E954050000              	jmp L_error_incorrect_arity_simple
  4263                                  .L_lambda_simple_arity_check_ok_085f:
  4264 00002C0A C8000000                	enter 0, 0
  4265                                  	; preparing a non-tail-call
  4266                                  	; preparing a non-tail-call
  4267 00002C0E 488B4528                	mov rax, PARAM(1)	; param s
  4268 00002C12 50                      	push rax
  4269 00002C13 6A01                    	push 1	; arg count
  4270 00002C15 488B0425[05090000]      	mov rax, qword [free_var_16]	; free var car
  4271 00002C1D 803805                  	cmp byte [rax], T_undefined
  4272 00002C20 0F8452040000            	je L_error_fvar_undefined
  4273 00002C26 803804                  	cmp byte [rax], T_closure
  4274 00002C29 0F85CD040000            	jne L_error_non_closure
  4275 00002C2F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4276 00002C32 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4277 00002C35 50                      	push rax
  4278 00002C36 6A01                    	push 1	; arg count
  4279 00002C38 488B0425[9D0A0000]      	mov rax, qword [free_var_40]	; free var null?
  4280 00002C40 803805                  	cmp byte [rax], T_undefined
  4281 00002C43 0F842F040000            	je L_error_fvar_undefined
  4282 00002C49 803804                  	cmp byte [rax], T_closure
  4283 00002C4C 0F85AA040000            	jne L_error_non_closure
  4284 00002C52 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4285 00002C55 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4286 00002C58 483D[02000000]          	cmp rax, sob_boolean_false
  4287 00002C5E 740F                    	je .L_if_else_00fb
  4288 00002C60 48B8-                   	mov rax, L_constants + 1
  4288 00002C62 [0100000000000000] 
  4289 00002C6A E9DB000000              	jmp .L_if_end_016b
  4290                                  .L_if_else_00fb:
  4291                                  	; preparing a non-tail-call
  4292                                  	; preparing a non-tail-call
  4293                                  	; preparing a non-tail-call
  4294 00002C6F 488B4528                	mov rax, PARAM(1)	; param s
  4295 00002C73 50                      	push rax
  4296 00002C74 488B0425[040A0000]      	mov rax, qword [free_var_31]	; free var cdr
  4297 00002C7C 803805                  	cmp byte [rax], T_undefined
  4298 00002C7F 0F84F3030000            	je L_error_fvar_undefined
  4299 00002C85 50                      	push rax
  4300 00002C86 6A02                    	push 2	; arg count
  4301 00002C88 488B4510                	mov rax, ENV
  4302 00002C8C 488B00                  	mov rax, qword [rax + 8 * 0]
  4303 00002C8F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  4304 00002C92 488B00                  	mov rax, qword [rax]
  4305 00002C95 803804                  	cmp byte [rax], T_closure
  4306 00002C98 0F855E040000            	jne L_error_non_closure
  4307 00002C9E FF7001                  	push SOB_CLOSURE_ENV(rax)
  4308 00002CA1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4309 00002CA4 50                      	push rax
  4310 00002CA5 488B4520                	mov rax, PARAM(0)	; param f
  4311 00002CA9 50                      	push rax
  4312 00002CAA 6A02                    	push 2	; arg count
  4313 00002CAC 488B4510                	mov rax, ENV
  4314 00002CB0 488B00                  	mov rax, qword [rax + 8 * 0]
  4315 00002CB3 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  4316 00002CB7 488B00                  	mov rax, qword [rax]
  4317 00002CBA 803804                  	cmp byte [rax], T_closure
  4318 00002CBD 0F8539040000            	jne L_error_non_closure
  4319 00002CC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4320 00002CC6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4321 00002CC9 50                      	push rax
  4322                                  	; preparing a non-tail-call
  4323                                  	; preparing a non-tail-call
  4324 00002CCA 488B4528                	mov rax, PARAM(1)	; param s
  4325 00002CCE 50                      	push rax
  4326 00002CCF 488B0425[05090000]      	mov rax, qword [free_var_16]	; free var car
  4327 00002CD7 803805                  	cmp byte [rax], T_undefined
  4328 00002CDA 0F8498030000            	je L_error_fvar_undefined
  4329 00002CE0 50                      	push rax
  4330 00002CE1 6A02                    	push 2	; arg count
  4331 00002CE3 488B4510                	mov rax, ENV
  4332 00002CE7 488B00                  	mov rax, qword [rax + 8 * 0]
  4333 00002CEA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  4334 00002CED 488B00                  	mov rax, qword [rax]
  4335 00002CF0 803804                  	cmp byte [rax], T_closure
  4336 00002CF3 0F8503040000            	jne L_error_non_closure
  4337 00002CF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4338 00002CFC FF5009                  	call SOB_CLOSURE_CODE(rax)
  4339 00002CFF 50                      	push rax
  4340 00002D00 488B4520                	mov rax, PARAM(0)	; param f
  4341 00002D04 50                      	push rax
  4342 00002D05 6A02                    	push 2	; arg count
  4343 00002D07 488B0425[06080000]      	mov rax, qword [free_var_1]	; free var apply
  4344 00002D0F 803805                  	cmp byte [rax], T_undefined
  4345 00002D12 0F8460030000            	je L_error_fvar_undefined
  4346 00002D18 803804                  	cmp byte [rax], T_closure
  4347 00002D1B 0F85DB030000            	jne L_error_non_closure
  4348 00002D21 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4349 00002D24 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4350 00002D27 50                      	push rax
  4351 00002D28 6A02                    	push 2	; arg count
  4352 00002D2A 488B0425[150A0000]      	mov rax, qword [free_var_32]	; free var cons
  4353 00002D32 803805                  	cmp byte [rax], T_undefined
  4354 00002D35 0F843D030000            	je L_error_fvar_undefined
  4355 00002D3B 803804                  	cmp byte [rax], T_closure
  4356 00002D3E 0F85B8030000            	jne L_error_non_closure
  4357 00002D44 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4358 00002D47 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4359                                  .L_if_end_016b:
  4360 00002D4A C9                      	leave
  4361 00002D4B C22000                  	ret AND_KILL_FRAME(2)
  4362                                  .L_lambda_simple_end_07ac:	; new closure is in rax
  4363 00002D4E 50                      	push rax
  4364 00002D4F 488B4528                	mov rax, PARAM(1)	; param map-list
  4365 00002D53 8F00                    	pop qword [rax]
  4366 00002D55 48B8-                   	mov rax, sob_void
  4366 00002D57 [0000000000000000] 
  4367                                  
  4368 00002D5F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4369 00002D64 E83C040000              	call malloc
  4370 00002D69 50                      	push rax
  4371 00002D6A 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
  4372 00002D6E 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
  4373 00002D72 BF10000000              	mov rdi, 8 * 2	; new rib for optional parameters
  4374 00002D77 E829040000              	call malloc
  4375 00002D7C 50                      	push rax
  4376 00002D7D BF10000000              	mov rdi, 8 * 2	; extended env
  4377 00002D82 E81E040000              	call malloc
  4378 00002D87 488B7D10                	mov rdi, ENV
  4379 00002D8B BE00000000              	mov rsi, 0
  4380 00002D90 BA01000000              	mov rdx, 1
  4381                                  .L_lambda_opt_env_loop_00b4:	; ext_env[i + 1] <-- env[i] copy all the array
  4382 00002D95 4883FE01                	cmp rsi, 1
  4383 00002D99 7410                    	je .L_lambda_opt_env_end_00b4
  4384 00002D9B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4385 00002D9F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4386 00002DA3 48FFC6                  	inc rsi
  4387 00002DA6 48FFC2                  	inc rdx
  4388 00002DA9 EBEA                    	jmp .L_lambda_opt_env_loop_00b4
  4389                                  .L_lambda_opt_env_end_00b4:
  4390 00002DAB 5B                      	pop rbx
  4391 00002DAC BE00000000              	mov rsi, 0
  4392                                  .L_lambda_opt_params_loop_021a:	; copy params
  4393 00002DB1 4883FE02                	cmp rsi, 2
  4394 00002DB5 740E                    	je .L_lambda_opt_params_end_0167
  4395 00002DB7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4396 00002DBC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4397 00002DC0 48FFC6                  	inc rsi
  4398 00002DC3 EBEC                    	jmp .L_lambda_opt_params_loop_021a
  4399                                  .L_lambda_opt_params_end_0167:
  4400 00002DC5 488918                  	mov qword [rax], rbx 	; ext_env[0] <-- The new_rib 
  4401 00002DC8 4889C3                  	mov rbx, rax
  4402 00002DCB 58                      	pop rax
  4403 00002DCC C60004                  	mov byte [rax], T_closure
  4404 00002DCF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4405 00002DD3 48C74009[E02D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_00b4
  4406 00002DDB E968010000              	jmp .L_lambda_opt_end_0167
  4407                                  .L_lambda_opt_code_00b4:	; lambda-opt body
  4408 00002DE0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4409 00002DE6 7D0B                    	jge .L_lambda_simple_arity_check_ok_0860
  4410 00002DE8 FF742410                	push qword [rsp + 8 * 2]
  4411 00002DEC 6A01                    	push 1
  4412 00002DEE E96B030000              	jmp L_error_incorrect_arity_simple
  4413                                  .L_lambda_simple_arity_check_ok_0860:
  4414 00002DF3 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  4415 00002DF8 4983E801                	sub r8, 1
  4416 00002DFC 4C89C3                  	mov rbx,r8
  4417 00002DFF 4983F800                	cmp r8, 0
  4418 00002E03 7535                    	jne .L_lambda_opt_params_loop_021c
  4419 00002E05 488B542410              	mov rdx, qword [rsp + 8 * 2]
  4420 00002E0A 4883C203                	add rdx , 3
  4421 00002E0E 4883EC08                	sub rsp , 8
  4422 00002E12 4889E1                  	mov rcx, rsp
  4423                                  .L_lambda_opt_stack_adjusted_021b: ;pushing down the stack of the current function
  4424 00002E15 488B5908                	mov rbx, qword [rcx + 8 * 1]
  4425 00002E19 488919                  	mov qword[rcx] , rbx
  4426 00002E1C 4883C108                	add rcx , 8
  4427 00002E20 48FFCA                  	dec rdx
  4428 00002E23 4883FA00                	cmp rdx, 0
  4429 00002E27 75EC                    	jne .L_lambda_opt_stack_adjusted_021b
  4430 00002E29 48FF442410              	inc qword [rsp + 8 * 2]
  4431 00002E2E 48C701[01000000]        	mov qword [rcx], sob_nil 
  4432 00002E35 E9A2000000              	jmp .L_lambda_opt_end_0168
  4433                                  	.L_lambda_opt_params_loop_021c:
  4434 00002E3A 488B542410              	mov rdx, qword [rsp + 8*2]
  4435 00002E3F 488D4CD410              	lea rcx, [rsp + 16 + 8*rdx]
  4436 00002E44 4C89C2                  	mov rdx, r8
  4437 00002E47 49B9-                   	mov r9, sob_nil
  4437 00002E49 [0100000000000000] 
  4438                                  	.L_lambda_opt_params_loop_021b: ;loop for copying the opt into list
  4439 00002E51 BF11000000              	mov rdi, (1 + 8 + 8)
  4440 00002E56 E84A030000              	call malloc
  4441 00002E5B C60021                  	mov byte[rax], T_pair
  4442 00002E5E 488B19                  	mov rbx, qword [rcx]
  4443 00002E61 48895801                	mov SOB_PAIR_CAR(rax), rbx
  4444 00002E65 4C894809                	mov SOB_PAIR_CDR(rax), r9
  4445 00002E69 4989C1                  	mov r9, rax
  4446 00002E6C 48FFCA                  	dec rdx
  4447 00002E6F 4883E908                	sub rcx, 8
  4448 00002E73 4883FA00                	cmp rdx, 0
  4449 00002E77 75D8                    	jne .L_lambda_opt_params_loop_021b
  4450 00002E79 488B542410              	mov rdx, qword [rsp + 8 * 2]
  4451 00002E7E 4889E0                  	mov rax, rsp
  4452 00002E81 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
  4453 00002E86 4C89C1                  	mov rcx, r8
  4454 00002E89 48FFC9                  	dec rcx
  4455 00002E8C 4883C203                	add rdx, 3
  4456 00002E90 4829CA                  	sub rdx,rcx
  4457 00002E93 48C1E103                	shl rcx, 3
  4458                                  	.L_lambda_opt_stack_adjusted_021c:
  4459 00002E97 4883FA00                	cmp rdx, 0
  4460 00002E9B 7419                    	je .L_lambda_opt_params_end_0168
  4461 00002E9D 4889D8                  	mov rax, rbx
  4462 00002EA0 4829C8                  	sub rax, rcx
  4463 00002EA3 488B30                  	mov rsi, qword [rax]
  4464 00002EA6 488933                  	mov [rbx], rsi
  4465 00002EA9 4883EB08                	sub rbx, 8
  4466 00002EAD 48FFCA                  	dec rdx
  4467 00002EB0 4883FA00                	cmp rdx, 0
  4468 00002EB4 75E1                    	jne .L_lambda_opt_stack_adjusted_021c
  4469                                  	.L_lambda_opt_params_end_0168:
  4470 00002EB6 4801CC                  	add rsp,rcx
  4471 00002EB9 BB01000000              	mov rbx, 1
  4472 00002EBE 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  4473 00002EC3 4883C303                	add rbx,3
  4474 00002EC7 4C29C3                  	sub rbx,r8
  4475 00002ECA 48C1E303                	shl rbx, 3
  4476 00002ECE 4801E3                  	add rbx, rsp
  4477 00002ED1 4C890B                  	mov qword[rbx] , r9
  4478 00002ED4 49FFC8                  	dec r8
  4479 00002ED7 4C29442410              	sub qword [rsp + 8 * 2], r8
  4480                                  	.L_lambda_opt_end_0168:
  4481 00002EDC C8000000                	enter 0, 0
  4482                                  	; preparing a non-tail-call
  4483 00002EE0 488B4528                	mov rax, PARAM(1)	; param s
  4484 00002EE4 50                      	push rax
  4485 00002EE5 6A01                    	push 1	; arg count
  4486 00002EE7 488B0425[9D0A0000]      	mov rax, qword [free_var_40]	; free var null?
  4487 00002EEF 803805                  	cmp byte [rax], T_undefined
  4488 00002EF2 0F8480010000            	je L_error_fvar_undefined
  4489 00002EF8 803804                  	cmp byte [rax], T_closure
  4490 00002EFB 0F85FB010000            	jne L_error_non_closure
  4491 00002F01 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4492 00002F04 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4493 00002F07 483D[02000000]          	cmp rax, sob_boolean_false
  4494 00002F0D 740C                    	je .L_if_else_00fc
  4495 00002F0F 48B8-                   	mov rax, L_constants + 1
  4495 00002F11 [0100000000000000] 
  4496 00002F19 EB29                    	jmp .L_if_end_016c
  4497                                  .L_if_else_00fc:
  4498                                  	; preparing a non-tail-call
  4499 00002F1B 488B4528                	mov rax, PARAM(1)	; param s
  4500 00002F1F 50                      	push rax
  4501 00002F20 488B4520                	mov rax, PARAM(0)	; param f
  4502 00002F24 50                      	push rax
  4503 00002F25 6A02                    	push 2	; arg count
  4504 00002F27 488B4510                	mov rax, ENV
  4505 00002F2B 488B00                  	mov rax, qword [rax + 8 * 0]
  4506 00002F2E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  4507 00002F32 488B00                  	mov rax, qword [rax]
  4508 00002F35 803804                  	cmp byte [rax], T_closure
  4509 00002F38 0F85BE010000            	jne L_error_non_closure
  4510 00002F3E FF7001                  	push SOB_CLOSURE_ENV(rax)
  4511 00002F41 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4512                                  .L_if_end_016c:
  4513                                  	LEAVE
    49 00002F44 C9                  <1>  leave
  4514 00002F45 C22000                  	ret AND_KILL_FRAME(2)
  4515                                  .L_lambda_opt_end_0167:
  4516 00002F48 C9                      	leave
  4517 00002F49 C22000                  	ret AND_KILL_FRAME(2)
  4518                                  .L_lambda_simple_end_07aa:	; new closure is in rax
  4519 00002F4C 803804                  	cmp byte [rax], T_closure
  4520 00002F4F 0F85A7010000            	jne L_error_non_closure
  4521 00002F55 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4522 00002F58 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4523 00002F5B 48890425[7B0A0000]      	mov qword [free_var_38], rax
  4524 00002F63 48B8-                   	mov rax, sob_void
  4524 00002F65 [0000000000000000] 
  4525                                  
  4526 00002F6D 4889C7                  	mov rdi, rax
  4527 00002F70 E885040000              	call print_sexpr_if_not_void
  4528                                  	; preparing a non-tail-call
  4529 00002F75 48B8-                   	mov rax, L_constants + 1
  4529 00002F77 [0100000000000000] 
  4530 00002F7F 50                      	push rax
  4531 00002F80 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4532 00002F85 E81B020000              	call malloc
  4533 00002F8A 50                      	push rax
  4534 00002F8B BF00000000              	mov rdi, 8 * 0	; new rib
  4535 00002F90 E810020000              	call malloc
  4536 00002F95 50                      	push rax
  4537 00002F96 BF08000000              	mov rdi, 8 * 1	; extended env
  4538 00002F9B E805020000              	call malloc
  4539 00002FA0 488B7D10                	mov rdi, ENV
  4540 00002FA4 BE00000000              	mov rsi, 0
  4541 00002FA9 BA01000000              	mov rdx, 1
  4542                                  .L_lambda_simple_env_loop_07ad:	; ext_env[i + 1] <-- env[i]
  4543 00002FAE 4883FE00                	cmp rsi, 0
  4544 00002FB2 7410                    	je .L_lambda_simple_env_end_07ad
  4545 00002FB4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4546 00002FB8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4547 00002FBC 48FFC6                  	inc rsi
  4548 00002FBF 48FFC2                  	inc rdx
  4549 00002FC2 EBEA                    	jmp .L_lambda_simple_env_loop_07ad
  4550                                  .L_lambda_simple_env_end_07ad:
  4551 00002FC4 5B                      	pop rbx
  4552 00002FC5 BE00000000              	mov rsi, 0
  4553                                  .L_lambda_simple_params_loop_07ad:	; copy params
  4554 00002FCA 4883FE00                	cmp rsi, 0
  4555 00002FCE 740E                    	je .L_lambda_simple_params_end_07ad
  4556 00002FD0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4557 00002FD5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4558 00002FD9 48FFC6                  	inc rsi
  4559 00002FDC EBEC                    	jmp .L_lambda_simple_params_loop_07ad
  4560                                  .L_lambda_simple_params_end_07ad:
  4561 00002FDE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4562 00002FE1 4889C3                  	mov rbx, rax
  4563 00002FE4 58                      	pop rax
  4564 00002FE5 C60004                  	mov byte [rax], T_closure
  4565 00002FE8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4566 00002FEC 48C74009[F62F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_07ad
  4567 00002FF4 EB25                    	jmp .L_lambda_simple_end_07ad
  4568                                  .L_lambda_simple_code_07ad:	; lambda-simple body
  4569 00002FF6 48837C241000            	cmp qword [rsp + 8 * 2], 0
  4570 00002FFC 740B                    	je .L_lambda_simple_arity_check_ok_0861
  4571 00002FFE FF742410                	push qword [rsp + 8 * 2]
  4572 00003002 6A00                    	push 0
  4573 00003004 E955010000              	jmp L_error_incorrect_arity_simple
  4574                                  .L_lambda_simple_arity_check_ok_0861:
  4575 00003009 C8000000                	enter 0, 0
  4576 0000300D 48B8-                   	mov rax, L_constants + 2028
  4576 0000300F [EC07000000000000] 
  4577 00003017 C9                      	leave
  4578 00003018 C21000                  	ret AND_KILL_FRAME(0)
  4579                                  .L_lambda_simple_end_07ad:	; new closure is in rax
  4580 0000301B 50                      	push rax
  4581 0000301C 6A02                    	push 2	; arg count
  4582 0000301E 488B0425[06080000]      	mov rax, qword [free_var_1]	; free var apply
  4583 00003026 803805                  	cmp byte [rax], T_undefined
  4584 00003029 744D                    	je L_error_fvar_undefined
  4585 0000302B 803804                  	cmp byte [rax], T_closure
  4586 0000302E 0F85C8000000            	jne L_error_non_closure
  4587 00003034 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4588 00003037 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4589                                  Lend:
  4590 0000303A 4889C7                  	mov rdi, rax
  4591 0000303D E8B8030000              	call print_sexpr_if_not_void
  4592                                  
  4593 00003042 48BF-                           mov rdi, fmt_memory_usage
  4593 00003044 [680B000000000000] 
  4594 0000304C 488B3425[EE0B0000]              mov rsi, qword [top_of_memory]
  4595 00003054 4881EE[00000000]                sub rsi, memory
  4596 0000305B B800000000                      mov rax, 0
  4597                                          ENTER
    44 00003060 C8000000            <1>  enter 0, 0
    45 00003064 4883E4F0            <1>  and rsp, ~15
  4598 00003068 E8(00000000)                    call printf
  4599                                          LEAVE
    49 0000306D C9                  <1>  leave
  4600 0000306E B800000000                      mov rax, 0
  4601 00003073 E8(00000000)                    call exit
  4602                                  
  4603                                  L_error_fvar_undefined:
  4604 00003078 50                              push rax
  4605 00003079 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
  4606 00003081 48BE-                           mov rsi, fmt_undefined_free_var_1
  4606 00003083 [D00A000000000000] 
  4607 0000308B B800000000                      mov rax, 0
  4608                                          ENTER
    44 00003090 C8000000            <1>  enter 0, 0
    45 00003094 4883E4F0            <1>  and rsp, ~15
  4609 00003098 E8(00000000)                    call fprintf
  4610                                          LEAVE
    49 0000309D C9                  <1>  leave
  4611 0000309E 58                              pop rax
  4612 0000309F 488B4001                        mov rax, qword [rax + 1] ; string
  4613 000030A3 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  4614 000030A7 BE01000000                      mov rsi, 1               ; sizeof(char)
  4615 000030AC 488B5001                        mov rdx, qword [rax + 1] ; string-length
  4616 000030B0 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
  4617 000030B8 B800000000                      mov rax, 0
  4618                                          ENTER
    44 000030BD C8000000            <1>  enter 0, 0
    45 000030C1 4883E4F0            <1>  and rsp, ~15
  4619 000030C5 E8(00000000)                    call fwrite
  4620                                          LEAVE
    49 000030CA C9                  <1>  leave
  4621 000030CB 488B3C25[00000000]              mov rdi, [stderr]       ; destination
  4622 000030D3 48BE-                           mov rsi, fmt_undefined_free_var_2
  4622 000030D5 [E70A000000000000] 
  4623 000030DD B800000000                      mov rax, 0
  4624                                          ENTER
    44 000030E2 C8000000            <1>  enter 0, 0
    45 000030E6 4883E4F0            <1>  and rsp, ~15
  4625 000030EA E8(00000000)                    call fprintf
  4626                                          LEAVE
    49 000030EF C9                  <1>  leave
  4627 000030F0 48C7C0F6FFFFFF                  mov rax, -10
  4628 000030F7 E8(00000000)                    call exit
  4629                                  
  4630                                  L_error_non_closure:
  4631 000030FC 488B3C25[00000000]              mov rdi, qword [stderr]
  4632 00003104 48BE-                           mov rsi, fmt_non_closure
  4632 00003106 [9E0B000000000000] 
  4633 0000310E B800000000                      mov rax, 0
  4634                                          ENTER
    44 00003113 C8000000            <1>  enter 0, 0
    45 00003117 4883E4F0            <1>  and rsp, ~15
  4635 0000311B E8(00000000)                    call fprintf
  4636                                          LEAVE
    49 00003120 C9                  <1>  leave
  4637 00003121 48C7C0FEFFFFFF                  mov rax, -2
  4638 00003128 E8(00000000)                    call exit
  4639                                  
  4640                                  L_error_improper_list:
  4641 0000312D 488B3C25[00000000]      	mov rdi, qword [stderr]
  4642 00003135 48BE-                   	mov rsi, fmt_error_improper_list
  4642 00003137 [C60B000000000000] 
  4643 0000313F B800000000              	mov rax, 0
  4644                                          ENTER
    44 00003144 C8000000            <1>  enter 0, 0
    45 00003148 4883E4F0            <1>  and rsp, ~15
  4645 0000314C E8(00000000)            	call fprintf
  4646                                          LEAVE
    49 00003151 C9                  <1>  leave
  4647 00003152 48C7C0F9FFFFFF          	mov rax, -7
  4648 00003159 E8(00000000)            	call exit
  4649                                  
  4650                                  L_error_incorrect_arity_simple:
  4651 0000315E 488B3C25[00000000]              mov rdi, qword [stderr]
  4652 00003166 48BE-                           mov rsi, fmt_incorrect_arity_simple
  4652 00003168 [090B000000000000] 
  4653 00003170 EB12                            jmp L_error_incorrect_arity_common
  4654                                  L_error_incorrect_arity_opt:
  4655 00003172 488B3C25[00000000]              mov rdi, qword [stderr]
  4656 0000317A 48BE-                           mov rsi, fmt_incorrect_arity_opt
  4656 0000317C [340B000000000000] 
  4657                                  L_error_incorrect_arity_common:
  4658 00003184 5A                              pop rdx
  4659 00003185 59                              pop rcx
  4660 00003186 B800000000                      mov rax, 0
  4661                                          ENTER
    44 0000318B C8000000            <1>  enter 0, 0
    45 0000318F 4883E4F0            <1>  and rsp, ~15
  4662 00003193 E8(00000000)                    call fprintf
  4663                                          LEAVE
    49 00003198 C9                  <1>  leave
  4664 00003199 48C7C0FAFFFFFF                  mov rax, -6
  4665 000031A0 E8(00000000)                    call exit
  4666                                  
  4667                                  section .data
  4668                                  fmt_undefined_free_var_1:
  4669 00000AD0 212121205468652066-             db `!!! The free variable \0`
  4669 00000AD9 726565207661726961-
  4669 00000AE2 626C652000         
  4670                                  fmt_undefined_free_var_2:
  4671 00000AE7 207761732075736564-             db ` was used before it was defined.\n\0`
  4671 00000AF0 206265666F72652069-
  4671 00000AF9 742077617320646566-
  4671 00000B02 696E65642E0A00     
  4672                                  fmt_incorrect_arity_simple:
  4673 00000B09 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  4673 00000B12 74656420256C642061-
  4673 00000B1B 7267756D656E74732C-
  4673 00000B24 206275742067697665-
  4673 00000B2D 6E20256C640A00     
  4674                                  fmt_incorrect_arity_opt:
  4675 00000B34 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  4675 00000B3D 746564206174206C65-
  4675 00000B46 61737420256C642061-
  4675 00000B4F 7267756D656E74732C-
  4675 00000B58 206275742067697665-
  4675 00000B61 6E20256C640A00     
  4676                                  fmt_memory_usage:
  4677 00000B68 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  4677 00000B71 20256C642062797465-
  4677 00000B7A 73206F662064796E61-
  4677 00000B83 6D6963616C6C792D61-
  4677 00000B8C 6C6C6F636174656420-
  4677 00000B95 6D656D6F72790A0A00 
  4678                                  fmt_non_closure:
  4679 00000B9E 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  4679 00000BA7 7074696E6720746F20-
  4679 00000BB0 6170706C792061206E-
  4679 00000BB9 6F6E2D636C6F737572-
  4679 00000BC2 65210A00           
  4680                                  fmt_error_improper_list:
  4681 00000BC6 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  4681 00000BCF 7267756D656E742069-
  4681 00000BD8 73206E6F7420612070-
  4681 00000BE1 726F706572206C6973-
  4681 00000BEA 74210A00           
  4682                                  
  4683                                  section .bss
  4684                                  memory:
  4685 00000000 <res 40000000h>         	resb gbytes(1)
  4686                                  
  4687                                  section .data
  4688                                  top_of_memory:
  4689 00000BEE [0000000000000000]              dq memory
  4690                                  
  4691                                  section .text
  4692                                  malloc:
  4693 000031A5 488B0425[EE0B0000]              mov rax, qword [top_of_memory]
  4694 000031AD 48013C25[EE0B0000]              add qword [top_of_memory], rdi
  4695 000031B5 C3                              ret
  4696                                  
  4697                                  L_code_ptr_return:
  4698 000031B6 48837C241002            	cmp qword [rsp + 8*2], 2
  4699 000031BC 0F85F21C0000            	jne L_error_arg_count_2
  4700 000031C2 488B4C2418              	mov rcx, qword [rsp + 8*3]
  4701                                  	assert_integer(rcx)
    53 000031C7 803911              <1>  cmp byte [%1], %2
    54 000031CA 0F85831D0000        <1>  jne L_error_incorrect_type
  4702 000031D0 488B4901                	mov rcx, qword [rcx + 1]
  4703 000031D4 4883F900                	cmp rcx, 0
  4704 000031D8 0F8C0A1C0000            	jl L_error_integer_range
  4705 000031DE 488B442420              	mov rax, qword [rsp + 8*4]
  4706                                  .L0:
  4707 000031E3 4883F900                        cmp rcx, 0
  4708 000031E7 7409                            je .L1
  4709 000031E9 488B6D00                	mov rbp, qword [rbp]
  4710 000031ED 48FFC9                  	dec rcx
  4711 000031F0 7FF1                    	jg .L0
  4712                                  .L1:
  4713 000031F2 4889EC                  	mov rsp, rbp
  4714 000031F5 5D                      	pop rbp
  4715 000031F6 5B                              pop rbx
  4716 000031F7 488B4C2408                      mov rcx, qword [rsp + 8*1]
  4717 000031FC 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
  4718 00003201 FFE3                    	jmp rbx
  4719                                  
  4720                                  L_code_ptr_make_list:
  4721 00003203 C8000000                	enter 0, 0
  4722 00003207 48837D1801                      cmp COUNT, 1
  4723 0000320C 740C                            je .L0
  4724 0000320E 48837D1802                      cmp COUNT, 2
  4725 00003213 7411                            je .L1
  4726 00003215 E9CF1C0000                      jmp L_error_arg_count_12
  4727                                  .L0:
  4728 0000321A 49B9-                           mov r9, sob_void
  4728 0000321C [0000000000000000] 
  4729 00003224 EB04                            jmp .L2
  4730                                  .L1:
  4731 00003226 4C8B4D28                        mov r9, PARAM(1)
  4732                                  .L2:
  4733 0000322A 488B4D20                        mov rcx, PARAM(0)
  4734                                          assert_integer(rcx)
    53 0000322E 803911              <1>  cmp byte [%1], %2
    54 00003231 0F851C1D0000        <1>  jne L_error_incorrect_type
  4735 00003237 488B4901                        mov rcx, qword [rcx + 1]
  4736 0000323B 4883F900                        cmp rcx, 0
  4737 0000323F 0F8CD41B0000                    jl L_error_arg_negative
  4738 00003245 49B8-                           mov r8, sob_nil
  4738 00003247 [0100000000000000] 
  4739                                  .L3:
  4740 0000324F 4883F900                        cmp rcx, 0
  4741 00003253 7E1D                            jle .L4
  4742 00003255 BF11000000                      mov rdi, 1 + 8 + 8
  4743 0000325A E846FFFFFF                      call malloc
  4744 0000325F C60021                          mov byte [rax], T_pair
  4745 00003262 4C894801                        mov qword [rax + 1], r9
  4746 00003266 4C894009                        mov qword [rax + 1 + 8], r8
  4747 0000326A 4989C0                          mov r8, rax
  4748 0000326D 48FFC9                          dec rcx
  4749 00003270 EBDD                            jmp .L3
  4750                                  .L4:
  4751 00003272 4C89C0                          mov rax, r8
  4752 00003275 48837D1802                      cmp COUNT, 2
  4753 0000327A 7404                            je .L5
  4754 0000327C C9                              leave
  4755 0000327D C21800                          ret AND_KILL_FRAME(1)
  4756                                  .L5:
  4757 00003280 C9                      	leave
  4758 00003281 C22000                  	ret AND_KILL_FRAME(2)
  4759                                  
  4760                                  L_code_ptr_is_primitive:
  4761 00003284 C8000000                	enter 0, 0
  4762 00003288 48837D1801              	cmp COUNT, 1
  4763 0000328D 0F85EC1B0000            	jne L_error_arg_count_1
  4764 00003293 488B4520                	mov rax, PARAM(0)
  4765                                  	assert_closure(rax)
    53 00003297 803804              <1>  cmp byte [%1], %2
    54 0000329A 0F85B31C0000        <1>  jne L_error_incorrect_type
  4766 000032A0 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
  4767 000032A5 750C                    	jne .L_false
  4768 000032A7 48B8-                   	mov rax, sob_boolean_true
  4768 000032A9 [0300000000000000] 
  4769 000032B1 EB0A                    	jmp .L_end
  4770                                  .L_false:
  4771 000032B3 48B8-                   	mov rax, sob_boolean_false
  4771 000032B5 [0200000000000000] 
  4772                                  .L_end:
  4773 000032BD C9                      	leave
  4774 000032BE C21800                  	ret AND_KILL_FRAME(1)
  4775                                  
  4776                                  L_code_ptr_length:
  4777 000032C1 C8000000                	enter 0, 0
  4778 000032C5 48837D1801              	cmp COUNT, 1
  4779 000032CA 0F85AF1B0000            	jne L_error_arg_count_1
  4780 000032D0 488B5D20                	mov rbx, PARAM(0)
  4781 000032D4 BF00000000              	mov rdi, 0
  4782                                  .L:
  4783 000032D9 803B01                  	cmp byte [rbx], T_nil
  4784 000032DC 7412                    	je .L_end
  4785                                  	assert_pair(rbx)
    53 000032DE 803B21              <1>  cmp byte [%1], %2
    54 000032E1 0F856C1C0000        <1>  jne L_error_incorrect_type
  4786 000032E7 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
  4787 000032EB 48FFC7                  	inc rdi
  4788 000032EE EBE9                    	jmp .L
  4789                                  .L_end:
  4790 000032F0 E8D91A0000              	call make_integer
  4791 000032F5 C9                      	leave
  4792 000032F6 C21800                  	ret AND_KILL_FRAME(1)
  4793                                  
  4794                                  L_code_ptr_break:
  4795 000032F9 48837C241000                    cmp qword [rsp + 8 * 2], 0
  4796 000032FF 0F85451B0000                    jne L_error_arg_count_0
  4797 00003305 CC                              int3
  4798 00003306 48B8-                           mov rax, sob_void
  4798 00003308 [0000000000000000] 
  4799 00003310 C21000                          ret AND_KILL_FRAME(0)        
  4800                                  
  4801                                  L_code_ptr_frame:
  4802 00003313 C8000000                        enter 0, 0
  4803 00003317 48837D1800                      cmp COUNT, 0
  4804 0000331C 0F85281B0000                    jne L_error_arg_count_0
  4805                                  
  4806 00003322 48BF-                           mov rdi, fmt_frame
  4806 00003324 [F60B000000000000] 
  4807 0000332C 488B7500                        mov rsi, qword [rbp]    ; old rbp
  4808 00003330 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
  4809 00003334 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
  4810 00003338 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
  4811 0000333C 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
  4812 00003340 6A00                            push 0
  4813 00003342 4151                            push r9
  4814 00003344 4150                            push r8                   ; we'll use it when printing the params
  4815 00003346 B800000000                      mov rax, 0
  4816                                          
  4817                                          ENTER
    44 0000334B C8000000            <1>  enter 0, 0
    45 0000334F 4883E4F0            <1>  and rsp, ~15
  4818 00003353 E8(00000000)                    call printf
  4819                                          LEAVE
    49 00003358 C9                  <1>  leave
  4820                                  
  4821                                  .L:
  4822 00003359 488B0C24                        mov rcx, qword [rsp]
  4823 0000335D 4883F900                        cmp rcx, 0
  4824 00003361 7467                            je .L_out
  4825 00003363 48BF-                           mov rdi, fmt_frame_param_prefix
  4825 00003365 [2F0C000000000000] 
  4826 0000336D 488B742410                      mov rsi, qword [rsp + 8*2]
  4827 00003372 B800000000                      mov rax, 0
  4828                                          
  4829                                          ENTER
    44 00003377 C8000000            <1>  enter 0, 0
    45 0000337B 4883E4F0            <1>  and rsp, ~15
  4830 0000337F E8(00000000)                    call printf
  4831                                          LEAVE
    49 00003384 C9                  <1>  leave
  4832                                  
  4833 00003385 488B0C24                        mov rcx, qword [rsp]
  4834 00003389 48FFC9                          dec rcx
  4835 0000338C 48890C24                        mov qword [rsp], rcx    ; dec arg count
  4836 00003390 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
  4837 00003395 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
  4838 0000339A 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
  4839 0000339E 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
  4840 000033A3 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
  4841 000033A6 E87B000000                      call print_sexpr
  4842 000033AB 48BF-                           mov rdi, fmt_newline
  4842 000033AD [5B0C000000000000] 
  4843 000033B5 B800000000                      mov rax, 0
  4844                                          ENTER
    44 000033BA C8000000            <1>  enter 0, 0
    45 000033BE 4883E4F0            <1>  and rsp, ~15
  4845 000033C2 E8(00000000)                    call printf
  4846                                          LEAVE
    49 000033C7 C9                  <1>  leave
  4847 000033C8 EB8F                            jmp .L
  4848                                  .L_out:
  4849 000033CA 48BF-                           mov rdi, fmt_frame_continue
  4849 000033CC [400C000000000000] 
  4850 000033D4 B800000000                      mov rax, 0
  4851                                          ENTER
    44 000033D9 C8000000            <1>  enter 0, 0
    45 000033DD 4883E4F0            <1>  and rsp, ~15
  4852 000033E1 E8(00000000)                    call printf
  4853 000033E6 E8(00000000)                    call getchar
  4854                                          LEAVE
    49 000033EB C9                  <1>  leave
  4855                                          
  4856 000033EC 48B8-                           mov rax, sob_void
  4856 000033EE [0000000000000000] 
  4857 000033F6 C9                              leave
  4858 000033F7 C21000                          ret AND_KILL_FRAME(0)
  4859                                          
  4860                                  print_sexpr_if_not_void:
  4861 000033FA 4881FF[00000000]        	cmp rdi, sob_void
  4862 00003401 7422                    	je .done
  4863 00003403 E81E000000              	call print_sexpr
  4864 00003408 48BF-                   	mov rdi, fmt_newline
  4864 0000340A [5B0C000000000000] 
  4865 00003412 B800000000              	mov rax, 0
  4866                                  	ENTER
    44 00003417 C8000000            <1>  enter 0, 0
    45 0000341B 4883E4F0            <1>  and rsp, ~15
  4867 0000341F E8(00000000)            	call printf
  4868                                  	LEAVE
    49 00003424 C9                  <1>  leave
  4869                                  .done:
  4870 00003425 C3                      	ret
  4871                                  
  4872                                  section .data
  4873                                  fmt_frame:
  4874 00000BF6 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
  4874 00000BFF 207265742061646472-
  4874 00000C08 203D2025703B206C65-
  4874 00000C11 7820656E76203D2025-
  4874 00000C1A 703B20706172616D20-
  4874 00000C23 636F756E74203D2025-
  4874 00000C2C 640A00             
  4875                                  fmt_frame_param_prefix:
  4876 00000C2F 3D3D5B706172616D20-             db `==[param %d]==> \0`
  4876 00000C38 25645D3D3D3E2000   
  4877                                  fmt_frame_continue:
  4878 00000C40 486974203C456E7465-             db `Hit <Enter> to continue...\0`
  4878 00000C49 723E20746F20636F6E-
  4878 00000C52 74696E75652E2E2E00 
  4879                                  fmt_newline:
  4880 00000C5B 0A00                    	db `\n\0`
  4881                                  fmt_void:
  4882 00000C5D 233C766F69643E00        	db `#<void>\0`
  4883                                  fmt_nil:
  4884 00000C65 282900                  	db `()\0`
  4885                                  fmt_boolean_false:
  4886 00000C68 236600                  	db `#f\0`
  4887                                  fmt_boolean_true:
  4888 00000C6B 237400                  	db `#t\0`
  4889                                  fmt_char_backslash:
  4890 00000C6E 235C5C00                	db `#\\\\\0`
  4891                                  fmt_char_dquote:
  4892 00000C72 235C2200                	db `#\\"\0`
  4893                                  fmt_char_simple:
  4894 00000C76 235C256300              	db `#\\%c\0`
  4895                                  fmt_char_null:
  4896 00000C7B 235C6E756C00            	db `#\\nul\0`
  4897                                  fmt_char_bell:
  4898 00000C81 235C62656C6C00          	db `#\\bell\0`
  4899                                  fmt_char_backspace:
  4900 00000C88 235C6261636B737061-     	db `#\\backspace\0`
  4900 00000C91 636500             
  4901                                  fmt_char_tab:
  4902 00000C94 235C74616200            	db `#\\tab\0`
  4903                                  fmt_char_newline:
  4904 00000C9A 235C6E65776C696E65-     	db `#\\newline\0`
  4904 00000CA3 00                 
  4905                                  fmt_char_formfeed:
  4906 00000CA4 235C7061676500          	db `#\\page\0`
  4907                                  fmt_char_return:
  4908 00000CAB 235C72657475726E00      	db `#\\return\0`
  4909                                  fmt_char_escape:
  4910 00000CB4 235C65736300            	db `#\\esc\0`
  4911                                  fmt_char_space:
  4912 00000CBA 235C737061636500        	db `#\\space\0`
  4913                                  fmt_char_hex:
  4914 00000CC2 235C782530325800        	db `#\\x%02X\0`
  4915                                  fmt_gensym:
  4916 00000CCA 47256C6400                      db `G%ld\0`
  4917                                  fmt_closure:
  4918 00000CCF 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  4918 00000CD8 206174203078253038-
  4918 00000CE1 5820656E763D307825-
  4918 00000CEA 30385820636F64653D-
  4918 00000CF3 3078253038583E00   
  4919                                  fmt_lparen:
  4920 00000CFB 2800                    	db `(\0`
  4921                                  fmt_dotted_pair:
  4922 00000CFD 202E2000                	db ` . \0`
  4923                                  fmt_rparen:
  4924 00000D01 2900                    	db `)\0`
  4925                                  fmt_space:
  4926 00000D03 2000                    	db ` \0`
  4927                                  fmt_empty_vector:
  4928 00000D05 23282900                	db `#()\0`
  4929                                  fmt_vector:
  4930 00000D09 232800                  	db `#(\0`
  4931                                  fmt_real:
  4932 00000D0C 256600                  	db `%f\0`
  4933                                  fmt_fraction:
  4934 00000D0F 256C642F256C6400        	db `%ld/%ld\0`
  4935                                  fmt_zero:
  4936 00000D17 3000                    	db `0\0`
  4937                                  fmt_int:
  4938 00000D19 256C6400                	db `%ld\0`
  4939                                  fmt_unknown_scheme_object_error:
  4940 00000D1D 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
  4940 00000D26 6F723A20556E6B6E6F-
  4940 00000D2F 776E20536368656D65-
  4940 00000D38 2D6F626A6563742028-
  4940 00000D41 525454492030782530-
  4940 00000D4A 32582920           
  4941 00000D4E 617420616464726573-     	db `at address 0x%08X\n\n\0`
  4941 00000D57 73203078253038580A-
  4941 00000D60 0A00               
  4942                                  fmt_dquote:
  4943 00000D62 2200                    	db `\"\0`
  4944                                  fmt_string_char:
  4945 00000D64 256300                          db `%c\0`
  4946                                  fmt_string_char_7:
  4947 00000D67 5C6100                          db `\\a\0`
  4948                                  fmt_string_char_8:
  4949 00000D6A 5C6200                          db `\\b\0`
  4950                                  fmt_string_char_9:
  4951 00000D6D 5C7400                          db `\\t\0`
  4952                                  fmt_string_char_10:
  4953 00000D70 5C6E00                          db `\\n\0`
  4954                                  fmt_string_char_11:
  4955 00000D73 5C7600                          db `\\v\0`
  4956                                  fmt_string_char_12:
  4957 00000D76 5C6600                          db `\\f\0`
  4958                                  fmt_string_char_13:
  4959 00000D79 5C7200                          db `\\r\0`
  4960                                  fmt_string_char_34:
  4961 00000D7C 5C2200                          db `\\"\0`
  4962                                  fmt_string_char_92:
  4963 00000D7F 5C5C00                          db `\\\\\0`
  4964                                  fmt_string_char_hex:
  4965 00000D82 5C7825583B00                    db `\\x%X;\0`
  4966                                  
  4967                                  section .text
  4968                                  
  4969                                  print_sexpr:
  4970 00003426 C8000000                	enter 0, 0
  4971 0000342A 8A07                    	mov al, byte [rdi]
  4972 0000342C 3C00                    	cmp al, T_void
  4973 0000342E 7465                    	je .Lvoid
  4974 00003430 3C01                    	cmp al, T_nil
  4975 00003432 7470                    	je .Lnil
  4976 00003434 3C09                    	cmp al, T_boolean_false
  4977 00003436 747B                    	je .Lboolean_false
  4978 00003438 3C0A                    	cmp al, T_boolean_true
  4979 0000343A 0F8482000000            	je .Lboolean_true
  4980 00003440 3C02                    	cmp al, T_char
  4981 00003442 0F8489000000            	je .Lchar
  4982 00003448 3C41                    	cmp al, T_interned_symbol
  4983 0000344A 0F84CB010000            	je .Linterned_symbol
  4984 00003450 3C42                            cmp al, T_uninterned_symbol
  4985 00003452 0F84EF010000                    je .Luninterned_symbol
  4986 00003458 3C21                    	cmp al, T_pair
  4987 0000345A 0F84FA010000            	je .Lpair
  4988 00003460 3C22                    	cmp al, T_vector
  4989 00003462 0F84C3020000            	je .Lvector
  4990 00003468 3C04                    	cmp al, T_closure
  4991 0000346A 0F8491010000            	je .Lclosure
  4992 00003470 3C13                    	cmp al, T_real
  4993 00003472 0F8454030000            	je .Lreal
  4994 00003478 3C12                    	cmp al, T_fraction
  4995 0000347A 0F847A030000            	je .Lfraction
  4996 00003480 3C11                    	cmp al, T_integer
  4997 00003482 0F84B3030000            	je .Linteger
  4998 00003488 3C03                    	cmp al, T_string
  4999 0000348A 0F84BE030000            	je .Lstring
  5000                                  
  5001 00003490 E9F6040000              	jmp .Lunknown_sexpr_type
  5002                                  
  5003                                  .Lvoid:
  5004 00003495 48BF-                   	mov rdi, fmt_void
  5004 00003497 [5D0C000000000000] 
  5005 0000349F E91A050000              	jmp .Lemit
  5006                                  
  5007                                  .Lnil:
  5008 000034A4 48BF-                   	mov rdi, fmt_nil
  5008 000034A6 [650C000000000000] 
  5009 000034AE E90B050000              	jmp .Lemit
  5010                                  
  5011                                  .Lboolean_false:
  5012 000034B3 48BF-                   	mov rdi, fmt_boolean_false
  5012 000034B5 [680C000000000000] 
  5013 000034BD E9FC040000              	jmp .Lemit
  5014                                  
  5015                                  .Lboolean_true:
  5016 000034C2 48BF-                   	mov rdi, fmt_boolean_true
  5016 000034C4 [6B0C000000000000] 
  5017 000034CC E9ED040000              	jmp .Lemit
  5018                                  
  5019                                  .Lchar:
  5020 000034D1 8A4701                  	mov al, byte [rdi + 1]
  5021 000034D4 3C20                    	cmp al, ' '
  5022 000034D6 7E28                    	jle .Lchar_whitespace
  5023 000034D8 3C5C                    	cmp al, 92 		; backslash
  5024 000034DA 0F847C000000            	je .Lchar_backslash
  5025 000034E0 3C22                    	cmp al, '"'
  5026 000034E2 0F8483000000            	je .Lchar_dquote
  5027 000034E8 4825FF000000            	and rax, 255
  5028 000034EE 48BF-                   	mov rdi, fmt_char_simple
  5028 000034F0 [760C000000000000] 
  5029 000034F8 4889C6                  	mov rsi, rax
  5030 000034FB E9BE040000              	jmp .Lemit
  5031                                  
  5032                                  .Lchar_whitespace:
  5033 00003500 3C00                    	cmp al, 0
  5034 00003502 7476                    	je .Lchar_null
  5035 00003504 3C07                    	cmp al, 7
  5036 00003506 0F847D000000            	je .Lchar_bell
  5037 0000350C 3C08                    	cmp al, 8
  5038 0000350E 0F8484000000            	je .Lchar_backspace
  5039 00003514 3C09                    	cmp al, 9
  5040 00003516 0F848B000000            	je .Lchar_tab
  5041 0000351C 3C0A                    	cmp al, 10
  5042 0000351E 0F8492000000            	je .Lchar_newline
  5043 00003524 3C0C                    	cmp al, 12
  5044 00003526 0F8499000000            	je .Lchar_formfeed
  5045 0000352C 3C0D                    	cmp al, 13
  5046 0000352E 0F84A0000000            	je .Lchar_return
  5047 00003534 3C1B                    	cmp al, 27
  5048 00003536 0F84A7000000            	je .Lchar_escape
  5049 0000353C 4825FF000000            	and rax, 255
  5050 00003542 3C20                    	cmp al, ' '
  5051 00003544 0F84A8000000            	je .Lchar_space
  5052 0000354A 48BF-                   	mov rdi, fmt_char_hex
  5052 0000354C [C20C000000000000] 
  5053 00003554 4889C6                  	mov rsi, rax
  5054 00003557 E962040000              	jmp .Lemit	
  5055                                  
  5056                                  .Lchar_backslash:
  5057 0000355C 48BF-                   	mov rdi, fmt_char_backslash
  5057 0000355E [6E0C000000000000] 
  5058 00003566 E953040000              	jmp .Lemit
  5059                                  
  5060                                  .Lchar_dquote:
  5061 0000356B 48BF-                   	mov rdi, fmt_char_dquote
  5061 0000356D [720C000000000000] 
  5062 00003575 E944040000              	jmp .Lemit
  5063                                  
  5064                                  .Lchar_null:
  5065 0000357A 48BF-                   	mov rdi, fmt_char_null
  5065 0000357C [7B0C000000000000] 
  5066 00003584 E935040000              	jmp .Lemit
  5067                                  
  5068                                  .Lchar_bell:
  5069 00003589 48BF-                   	mov rdi, fmt_char_bell
  5069 0000358B [810C000000000000] 
  5070 00003593 E926040000              	jmp .Lemit
  5071                                  
  5072                                  .Lchar_backspace:
  5073 00003598 48BF-                   	mov rdi, fmt_char_backspace
  5073 0000359A [880C000000000000] 
  5074 000035A2 E917040000              	jmp .Lemit
  5075                                  
  5076                                  .Lchar_tab:
  5077 000035A7 48BF-                   	mov rdi, fmt_char_tab
  5077 000035A9 [940C000000000000] 
  5078 000035B1 E908040000              	jmp .Lemit
  5079                                  
  5080                                  .Lchar_newline:
  5081 000035B6 48BF-                   	mov rdi, fmt_char_newline
  5081 000035B8 [9A0C000000000000] 
  5082 000035C0 E9F9030000              	jmp .Lemit
  5083                                  
  5084                                  .Lchar_formfeed:
  5085 000035C5 48BF-                   	mov rdi, fmt_char_formfeed
  5085 000035C7 [A40C000000000000] 
  5086 000035CF E9EA030000              	jmp .Lemit
  5087                                  
  5088                                  .Lchar_return:
  5089 000035D4 48BF-                   	mov rdi, fmt_char_return
  5089 000035D6 [AB0C000000000000] 
  5090 000035DE E9DB030000              	jmp .Lemit
  5091                                  
  5092                                  .Lchar_escape:
  5093 000035E3 48BF-                   	mov rdi, fmt_char_escape
  5093 000035E5 [B40C000000000000] 
  5094 000035ED E9CC030000              	jmp .Lemit
  5095                                  
  5096                                  .Lchar_space:
  5097 000035F2 48BF-                   	mov rdi, fmt_char_space
  5097 000035F4 [BA0C000000000000] 
  5098 000035FC E9BD030000              	jmp .Lemit
  5099                                  
  5100                                  .Lclosure:
  5101 00003601 4889FE                  	mov rsi, qword rdi
  5102 00003604 48BF-                   	mov rdi, fmt_closure
  5102 00003606 [CF0C000000000000] 
  5103 0000360E 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  5104 00003612 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  5105 00003616 E9A3030000              	jmp .Lemit
  5106                                  
  5107                                  .Linterned_symbol:
  5108 0000361B 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  5109 0000361F BE01000000              	mov rsi, 1		 ; size = 1 byte
  5110 00003624 488B5701                	mov rdx, qword [rdi + 1] ; length
  5111 00003628 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  5112 0000362C 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  5113                                  	ENTER
    44 00003634 C8000000            <1>  enter 0, 0
    45 00003638 4883E4F0            <1>  and rsp, ~15
  5114 0000363C E8(00000000)            	call fwrite
  5115                                  	LEAVE
    49 00003641 C9                  <1>  leave
  5116 00003642 E98C030000              	jmp .Lend
  5117                                  
  5118                                  .Luninterned_symbol:
  5119 00003647 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  5120 0000364B 48BF-                           mov rdi, fmt_gensym
  5120 0000364D [CA0C000000000000] 
  5121 00003655 E964030000                      jmp .Lemit
  5122                                  	
  5123                                  .Lpair:
  5124 0000365A 57                      	push rdi
  5125 0000365B 48BF-                   	mov rdi, fmt_lparen
  5125 0000365D [FB0C000000000000] 
  5126 00003665 B800000000              	mov rax, 0
  5127                                          ENTER
    44 0000366A C8000000            <1>  enter 0, 0
    45 0000366E 4883E4F0            <1>  and rsp, ~15
  5128 00003672 E8(00000000)            	call printf
  5129                                          LEAVE
    49 00003677 C9                  <1>  leave
  5130 00003678 488B3C24                	mov rdi, qword [rsp] 	; pair
  5131 0000367C 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  5132 00003680 E8A1FDFFFF              	call print_sexpr
  5133 00003685 5F                      	pop rdi 		; pair
  5134 00003686 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  5135                                  .Lcdr:
  5136 0000368A 8A07                    	mov al, byte [rdi]
  5137 0000368C 3C01                    	cmp al, T_nil
  5138 0000368E 7447                    	je .Lcdr_nil
  5139 00003690 3C21                    	cmp al, T_pair
  5140 00003692 7462                    	je .Lcdr_pair
  5141 00003694 57                      	push rdi
  5142 00003695 48BF-                   	mov rdi, fmt_dotted_pair
  5142 00003697 [FD0C000000000000] 
  5143 0000369F B800000000              	mov rax, 0
  5144                                          ENTER
    44 000036A4 C8000000            <1>  enter 0, 0
    45 000036A8 4883E4F0            <1>  and rsp, ~15
  5145 000036AC E8(00000000)            	call printf
  5146                                          LEAVE
    49 000036B1 C9                  <1>  leave
  5147 000036B2 5F                      	pop rdi
  5148 000036B3 E86EFDFFFF              	call print_sexpr
  5149 000036B8 48BF-                   	mov rdi, fmt_rparen
  5149 000036BA [010D000000000000] 
  5150 000036C2 B800000000              	mov rax, 0
  5151                                          ENTER
    44 000036C7 C8000000            <1>  enter 0, 0
    45 000036CB 4883E4F0            <1>  and rsp, ~15
  5152 000036CF E8(00000000)            	call printf
  5153                                          LEAVE
    49 000036D4 C9                  <1>  leave
  5154 000036D5 C9                      	leave
  5155 000036D6 C3                      	ret
  5156                                  
  5157                                  .Lcdr_nil:
  5158 000036D7 48BF-                   	mov rdi, fmt_rparen
  5158 000036D9 [010D000000000000] 
  5159 000036E1 B800000000              	mov rax, 0
  5160                                          ENTER
    44 000036E6 C8000000            <1>  enter 0, 0
    45 000036EA 4883E4F0            <1>  and rsp, ~15
  5161 000036EE E8(00000000)            	call printf
  5162                                          LEAVE
    49 000036F3 C9                  <1>  leave
  5163 000036F4 C9                      	leave
  5164 000036F5 C3                      	ret
  5165                                  
  5166                                  .Lcdr_pair:
  5167 000036F6 57                      	push rdi
  5168 000036F7 48BF-                   	mov rdi, fmt_space
  5168 000036F9 [030D000000000000] 
  5169 00003701 B800000000              	mov rax, 0
  5170                                          ENTER
    44 00003706 C8000000            <1>  enter 0, 0
    45 0000370A 4883E4F0            <1>  and rsp, ~15
  5171 0000370E E8(00000000)            	call printf
  5172                                          LEAVE
    49 00003713 C9                  <1>  leave
  5173 00003714 488B3C24                	mov rdi, qword [rsp]
  5174 00003718 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  5175 0000371C E805FDFFFF              	call print_sexpr
  5176 00003721 5F                      	pop rdi
  5177 00003722 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  5178 00003726 E95FFFFFFF              	jmp .Lcdr
  5179                                  
  5180                                  .Lvector:
  5181 0000372B 488B4701                	mov rax, qword [rdi + 1] ; length
  5182 0000372F 4883F800                	cmp rax, 0
  5183 00003733 0F8484000000            	je .Lvector_empty
  5184 00003739 57                      	push rdi
  5185 0000373A 48BF-                   	mov rdi, fmt_vector
  5185 0000373C [090D000000000000] 
  5186 00003744 B800000000              	mov rax, 0
  5187                                          ENTER
    44 00003749 C8000000            <1>  enter 0, 0
    45 0000374D 4883E4F0            <1>  and rsp, ~15
  5188 00003751 E8(00000000)            	call printf
  5189                                          LEAVE
    49 00003756 C9                  <1>  leave
  5190 00003757 488B3C24                	mov rdi, qword [rsp]
  5191 0000375B FF7701                  	push qword [rdi + 1]
  5192 0000375E 6A01                    	push 1
  5193 00003760 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  5194 00003764 E8BDFCFFFF              	call print_sexpr
  5195                                  .Lvector_loop:
  5196                                  	; [rsp] index
  5197                                  	; [rsp + 8*1] limit
  5198                                  	; [rsp + 8*2] vector
  5199 00003769 488B0424                	mov rax, qword [rsp]
  5200 0000376D 483B442408              	cmp rax, qword [rsp + 8*1]
  5201 00003772 7436                    	je .Lvector_end
  5202 00003774 48BF-                   	mov rdi, fmt_space
  5202 00003776 [030D000000000000] 
  5203 0000377E B800000000              	mov rax, 0
  5204                                          ENTER
    44 00003783 C8000000            <1>  enter 0, 0
    45 00003787 4883E4F0            <1>  and rsp, ~15
  5205 0000378B E8(00000000)            	call printf
  5206                                          LEAVE
    49 00003790 C9                  <1>  leave
  5207 00003791 488B0424                	mov rax, qword [rsp]
  5208 00003795 488B5C2410              	mov rbx, qword [rsp + 8*2]
  5209 0000379A 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  5210 0000379F E882FCFFFF              	call print_sexpr
  5211 000037A4 48FF0424                	inc qword [rsp]
  5212 000037A8 EBBF                    	jmp .Lvector_loop
  5213                                  
  5214                                  .Lvector_end:
  5215 000037AA 4883C418                	add rsp, 8*3
  5216 000037AE 48BF-                   	mov rdi, fmt_rparen
  5216 000037B0 [010D000000000000] 
  5217 000037B8 E901020000              	jmp .Lemit	
  5218                                  
  5219                                  .Lvector_empty:
  5220 000037BD 48BF-                   	mov rdi, fmt_empty_vector
  5220 000037BF [050D000000000000] 
  5221 000037C7 E9F2010000              	jmp .Lemit
  5222                                  
  5223                                  .Lreal:
  5224 000037CC FF7701                  	push qword [rdi + 1]
  5225 000037CF F20F100424              	movsd xmm0, qword [rsp]
  5226 000037D4 4883C408                	add rsp, 8*1
  5227 000037D8 48BF-                   	mov rdi, fmt_real
  5227 000037DA [0C0D000000000000] 
  5228 000037E2 B801000000              	mov rax, 1
  5229                                  	ENTER
    44 000037E7 C8000000            <1>  enter 0, 0
    45 000037EB 4883E4F0            <1>  and rsp, ~15
  5230 000037EF E8(00000000)            	call printf
  5231                                  	LEAVE
    49 000037F4 C9                  <1>  leave
  5232 000037F5 E9D9010000              	jmp .Lend
  5233                                  
  5234                                  .Lfraction:
  5235 000037FA 488B7701                	mov rsi, qword [rdi + 1]
  5236 000037FE 488B5709                	mov rdx, qword [rdi + 1 + 8]
  5237 00003802 4883FE00                	cmp rsi, 0
  5238 00003806 7415                    	je .Lrat_zero
  5239 00003808 4883FA01                	cmp rdx, 1
  5240 0000380C 741E                    	je .Lrat_int
  5241 0000380E 48BF-                   	mov rdi, fmt_fraction
  5241 00003810 [0F0D000000000000] 
  5242 00003818 E9A1010000              	jmp .Lemit
  5243                                  
  5244                                  .Lrat_zero:
  5245 0000381D 48BF-                   	mov rdi, fmt_zero
  5245 0000381F [170D000000000000] 
  5246 00003827 E992010000              	jmp .Lemit
  5247                                  
  5248                                  .Lrat_int:
  5249 0000382C 48BF-                   	mov rdi, fmt_int
  5249 0000382E [190D000000000000] 
  5250 00003836 E983010000              	jmp .Lemit
  5251                                  
  5252                                  .Linteger:
  5253 0000383B 488B7701                	mov rsi, qword [rdi + 1]
  5254 0000383F 48BF-                   	mov rdi, fmt_int
  5254 00003841 [190D000000000000] 
  5255 00003849 E970010000              	jmp .Lemit
  5256                                  
  5257                                  .Lstring:
  5258 0000384E 488D4709                	lea rax, [rdi + 1 + 8]
  5259 00003852 50                      	push rax
  5260 00003853 FF7701                  	push qword [rdi + 1]
  5261 00003856 48BF-                   	mov rdi, fmt_dquote
  5261 00003858 [620D000000000000] 
  5262 00003860 B800000000              	mov rax, 0
  5263                                  	ENTER
    44 00003865 C8000000            <1>  enter 0, 0
    45 00003869 4883E4F0            <1>  and rsp, ~15
  5264 0000386D E8(00000000)            	call printf
  5265                                  	LEAVE
    49 00003872 C9                  <1>  leave
  5266                                  .Lstring_loop:
  5267                                  	; qword [rsp]: limit
  5268                                  	; qword [rsp + 8*1]: char *
  5269 00003873 48833C2400              	cmp qword [rsp], 0
  5270 00003878 0F84FD000000            	je .Lstring_end
  5271 0000387E 488B442408              	mov rax, qword [rsp + 8*1]
  5272 00003883 8A00                    	mov al, byte [rax]
  5273 00003885 4825FF000000            	and rax, 255
  5274 0000388B 3C07                    	cmp al, 7
  5275 0000388D 7468                            je .Lstring_char_7
  5276 0000388F 3C08                            cmp al, 8
  5277 00003891 7470                            je .Lstring_char_8
  5278 00003893 3C09                            cmp al, 9
  5279 00003895 7478                            je .Lstring_char_9
  5280 00003897 3C0A                            cmp al, 10
  5281 00003899 0F847C000000                    je .Lstring_char_10
  5282 0000389F 3C0B                            cmp al, 11
  5283 000038A1 0F8480000000                    je .Lstring_char_11
  5284 000038A7 3C0C                            cmp al, 12
  5285 000038A9 0F8484000000                    je .Lstring_char_12
  5286 000038AF 3C0D                            cmp al, 13
  5287 000038B1 0F8488000000                    je .Lstring_char_13
  5288 000038B7 3C22                            cmp al, 34
  5289 000038B9 0F848C000000                    je .Lstring_char_34
  5290 000038BF 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  5292 000038C1 3C20                            cmp al, ' '
  5293 000038C3 0F8CA0000000                    jl .Lstring_char_hex
  5294 000038C9 48BF-                           mov rdi, fmt_string_char
  5294 000038CB [640D000000000000] 
  5295 000038D3 4889C6                          mov rsi, rax
  5296                                  .Lstring_char_emit:
  5297 000038D6 B800000000                      mov rax, 0
  5298                                          ENTER
    44 000038DB C8000000            <1>  enter 0, 0
    45 000038DF 4883E4F0            <1>  and rsp, ~15
  5299 000038E3 E8(00000000)                    call printf
  5300                                          LEAVE
    49 000038E8 C9                  <1>  leave
  5301 000038E9 48FF0C24                        dec qword [rsp]
  5302 000038ED 48FF442408                      inc qword [rsp + 8*1]
  5303 000038F2 E97CFFFFFF                      jmp .Lstring_loop
  5304                                  
  5305                                  .Lstring_char_7:
  5306 000038F7 48BF-                           mov rdi, fmt_string_char_7
  5306 000038F9 [670D000000000000] 
  5307 00003901 EBD3                            jmp .Lstring_char_emit
  5308                                  
  5309                                  .Lstring_char_8:
  5310 00003903 48BF-                           mov rdi, fmt_string_char_8
  5310 00003905 [6A0D000000000000] 
  5311 0000390D EBC7                            jmp .Lstring_char_emit
  5312                                          
  5313                                  .Lstring_char_9:
  5314 0000390F 48BF-                           mov rdi, fmt_string_char_9
  5314 00003911 [6D0D000000000000] 
  5315 00003919 EBBB                            jmp .Lstring_char_emit
  5316                                  
  5317                                  .Lstring_char_10:
  5318 0000391B 48BF-                           mov rdi, fmt_string_char_10
  5318 0000391D [700D000000000000] 
  5319 00003925 EBAF                            jmp .Lstring_char_emit
  5320                                  
  5321                                  .Lstring_char_11:
  5322 00003927 48BF-                           mov rdi, fmt_string_char_11
  5322 00003929 [730D000000000000] 
  5323 00003931 EBA3                            jmp .Lstring_char_emit
  5324                                  
  5325                                  .Lstring_char_12:
  5326 00003933 48BF-                           mov rdi, fmt_string_char_12
  5326 00003935 [760D000000000000] 
  5327 0000393D EB97                            jmp .Lstring_char_emit
  5328                                  
  5329                                  .Lstring_char_13:
  5330 0000393F 48BF-                           mov rdi, fmt_string_char_13
  5330 00003941 [790D000000000000] 
  5331 00003949 EB8B                            jmp .Lstring_char_emit
  5332                                  
  5333                                  .Lstring_char_34:
  5334 0000394B 48BF-                           mov rdi, fmt_string_char_34
  5334 0000394D [7C0D000000000000] 
  5335 00003955 E97CFFFFFF                      jmp .Lstring_char_emit
  5336                                  
  5337                                  .Lstring_char_92:
  5338 0000395A 48BF-                           mov rdi, fmt_string_char_92
  5338 0000395C [7F0D000000000000] 
  5339 00003964 E96DFFFFFF                      jmp .Lstring_char_emit
  5340                                  
  5341                                  .Lstring_char_hex:
  5342 00003969 48BF-                           mov rdi, fmt_string_char_hex
  5342 0000396B [820D000000000000] 
  5343 00003973 4889C6                          mov rsi, rax
  5344 00003976 E95BFFFFFF                      jmp .Lstring_char_emit        
  5345                                  
  5346                                  .Lstring_end:
  5347 0000397B 4883C410                	add rsp, 8 * 2
  5348 0000397F 48BF-                   	mov rdi, fmt_dquote
  5348 00003981 [620D000000000000] 
  5349 00003989 EB33                    	jmp .Lemit
  5350                                  
  5351                                  .Lunknown_sexpr_type:
  5352 0000398B 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  5352 0000398D [1D0D000000000000] 
  5353 00003995 4825FF000000            	and rax, 255
  5354 0000399B 4889C2                  	mov rdx, rax
  5355 0000399E 4889F9                  	mov rcx, rdi
  5356 000039A1 488B3C25[00000000]      	mov rdi, qword [stderr]
  5357 000039A9 B800000000              	mov rax, 0
  5358                                          ENTER
    44 000039AE C8000000            <1>  enter 0, 0
    45 000039B2 4883E4F0            <1>  and rsp, ~15
  5359 000039B6 E8(00000000)            	call fprintf
  5360                                          LEAVE
    49 000039BB C9                  <1>  leave
  5361 000039BC C9                              leave
  5362 000039BD C3                              ret
  5363                                  
  5364                                  .Lemit:
  5365 000039BE B800000000              	mov rax, 0
  5366                                          ENTER
    44 000039C3 C8000000            <1>  enter 0, 0
    45 000039C7 4883E4F0            <1>  and rsp, ~15
  5367 000039CB E8(00000000)            	call printf
  5368                                          LEAVE
    49 000039D0 C9                  <1>  leave
  5369 000039D1 EB00                    	jmp .Lend
  5370                                  
  5371                                  .Lend:
  5372                                  	LEAVE
    49 000039D3 C9                  <1>  leave
  5373 000039D4 C3                      	ret
  5374                                  
  5375                                  ;;; rdi: address of free variable
  5376                                  ;;; rsi: address of code-pointer
  5377                                  bind_primitive:
  5378 000039D5 C8000000                        enter 0, 0
  5379 000039D9 57                              push rdi
  5380 000039DA BF11000000                      mov rdi, (1 + 8 + 8)
  5381 000039DF E8C1F7FFFF                      call malloc
  5382 000039E4 5F                              pop rdi
  5383 000039E5 C60004                          mov byte [rax], T_closure
  5384 000039E8 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  5385 000039F0 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  5386 000039F4 488907                          mov qword [rdi], rax
  5387 000039F7 48B8-                           mov rax, sob_void
  5387 000039F9 [0000000000000000] 
  5388 00003A01 C9                              leave
  5389 00003A02 C3                              ret
  5390                                  
  5391                                  L_code_ptr_ash:
  5392 00003A03 C8000000                        enter 0, 0
  5393 00003A07 48837D1802                      cmp COUNT, 2
  5394 00003A0C 0F85A2140000                    jne L_error_arg_count_2
  5395 00003A12 488B7D20                        mov rdi, PARAM(0)
  5396                                          assert_integer(rdi)
    53 00003A16 803F11              <1>  cmp byte [%1], %2
    54 00003A19 0F8534150000        <1>  jne L_error_incorrect_type
  5397 00003A1F 488B4D28                        mov rcx, PARAM(1)
  5398                                          assert_integer(rcx)
    53 00003A23 803911              <1>  cmp byte [%1], %2
    54 00003A26 0F8527150000        <1>  jne L_error_incorrect_type
  5399 00003A2C 488B7F01                        mov rdi, qword [rdi + 1]
  5400 00003A30 488B4901                        mov rcx, qword [rcx + 1]
  5401 00003A34 4883F900                        cmp rcx, 0
  5402 00003A38 7C0F                            jl .L_negative
  5403                                  .L_loop_positive:
  5404 00003A3A 4883F900                        cmp rcx, 0
  5405 00003A3E 741B                            je .L_exit
  5406 00003A40 48D3E7                          sal rdi, cl
  5407 00003A43 48C1E908                        shr rcx, 8
  5408 00003A47 EBF1                            jmp .L_loop_positive
  5409                                  .L_negative:
  5410 00003A49 48F7D9                          neg rcx
  5411                                  .L_loop_negative:
  5412 00003A4C 4883F900                        cmp rcx, 0
  5413 00003A50 7409                            je .L_exit
  5414 00003A52 48D3FF                          sar rdi, cl
  5415 00003A55 48C1E908                        shr rcx, 8
  5416 00003A59 EBF1                            jmp .L_loop_negative
  5417                                  .L_exit:
  5418 00003A5B E86E130000                      call make_integer
  5419 00003A60 C9                              leave
  5420 00003A61 C22000                          ret AND_KILL_FRAME(2)
  5421                                  
  5422                                  L_code_ptr_logand:
  5423 00003A64 C8000000                        enter 0, 0
  5424 00003A68 48837D1802                      cmp COUNT, 2
  5425 00003A6D 0F8541140000                    jne L_error_arg_count_2
  5426 00003A73 4C8B4520                        mov r8, PARAM(0)
  5427                                          assert_integer(r8)
    53 00003A77 41803811            <1>  cmp byte [%1], %2
    54 00003A7B 0F85D2140000        <1>  jne L_error_incorrect_type
  5428 00003A81 4C8B4D28                        mov r9, PARAM(1)
  5429                                          assert_integer(r9)
    53 00003A85 41803911            <1>  cmp byte [%1], %2
    54 00003A89 0F85C4140000        <1>  jne L_error_incorrect_type
  5430 00003A8F 498B7801                        mov rdi, qword [r8 + 1]
  5431 00003A93 49237901                        and rdi, qword [r9 + 1]
  5432 00003A97 E832130000                      call make_integer
  5433 00003A9C C9                              leave
  5434 00003A9D C22000                          ret AND_KILL_FRAME(2)
  5435                                  
  5436                                  L_code_ptr_logor:
  5437 00003AA0 C8000000                        enter 0, 0
  5438 00003AA4 48837D1802                      cmp COUNT, 2
  5439 00003AA9 0F8505140000                    jne L_error_arg_count_2
  5440 00003AAF 4C8B4520                        mov r8, PARAM(0)
  5441                                          assert_integer(r8)
    53 00003AB3 41803811            <1>  cmp byte [%1], %2
    54 00003AB7 0F8596140000        <1>  jne L_error_incorrect_type
  5442 00003ABD 4C8B4D28                        mov r9, PARAM(1)
  5443                                          assert_integer(r9)
    53 00003AC1 41803911            <1>  cmp byte [%1], %2
    54 00003AC5 0F8588140000        <1>  jne L_error_incorrect_type
  5444 00003ACB 498B7801                        mov rdi, qword [r8 + 1]
  5445 00003ACF 490B7901                        or rdi, qword [r9 + 1]
  5446 00003AD3 E8F6120000                      call make_integer
  5447 00003AD8 C9                              leave
  5448 00003AD9 C22000                          ret AND_KILL_FRAME(2)
  5449                                  
  5450                                  L_code_ptr_logxor:
  5451 00003ADC C8000000                        enter 0, 0
  5452 00003AE0 48837D1802                      cmp COUNT, 2
  5453 00003AE5 0F85C9130000                    jne L_error_arg_count_2
  5454 00003AEB 4C8B4520                        mov r8, PARAM(0)
  5455                                          assert_integer(r8)
    53 00003AEF 41803811            <1>  cmp byte [%1], %2
    54 00003AF3 0F855A140000        <1>  jne L_error_incorrect_type
  5456 00003AF9 4C8B4D28                        mov r9, PARAM(1)
  5457                                          assert_integer(r9)
    53 00003AFD 41803911            <1>  cmp byte [%1], %2
    54 00003B01 0F854C140000        <1>  jne L_error_incorrect_type
  5458 00003B07 498B7801                        mov rdi, qword [r8 + 1]
  5459 00003B0B 49337901                        xor rdi, qword [r9 + 1]
  5460 00003B0F E8BA120000                      call make_integer
  5461                                          LEAVE
    49 00003B14 C9                  <1>  leave
  5462 00003B15 C22000                          ret AND_KILL_FRAME(2)
  5463                                  
  5464                                  L_code_ptr_lognot:
  5465 00003B18 C8000000                        enter 0, 0
  5466 00003B1C 48837D1801                      cmp COUNT, 1
  5467 00003B21 0F8558130000                    jne L_error_arg_count_1
  5468 00003B27 4C8B4520                        mov r8, PARAM(0)
  5469                                          assert_integer(r8)
    53 00003B2B 41803811            <1>  cmp byte [%1], %2
    54 00003B2F 0F851E140000        <1>  jne L_error_incorrect_type
  5470 00003B35 498B7801                        mov rdi, qword [r8 + 1]
  5471 00003B39 48F7D7                          not rdi
  5472 00003B3C E88D120000                      call make_integer
  5473 00003B41 C9                              leave
  5474 00003B42 C21800                          ret AND_KILL_FRAME(1)
  5475                                  
  5476                                  
  5477                                  L_code_ptr_bin_apply:
  5478 00003B45 C8000000                        enter 0, 0
  5479 00003B49 48837D1802                      cmp COUNT, 2
  5480 00003B4E 0F8560130000                    jne L_error_arg_count_2
  5481 00003B54 488B4528                        mov rax, PARAM(1) ; list
  5482 00003B58 BB00000000                      mov rbx,0 ;list length count
  5483                                  .L_length_loop: ;this loop is to iterate through the list and count it's  (stop when encountering nil)
  5484 00003B5D 803801                          cmp byte [rax], T_nil ;TODO: check if correct
  5485 00003B60 7413                            je .L_length_loop_exit
  5486                                          assert_pair(rax)
    53 00003B62 803821              <1>  cmp byte [%1], %2
    54 00003B65 0F85E8130000        <1>  jne L_error_incorrect_type
  5487 00003B6B 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  5488 00003B6F 4883C301                        add rbx,1
  5489 00003B73 EBE8                            jmp .L_length_loop
  5490                                  .L_length_loop_exit: ;1381
  5491 00003B75 488B4528                        mov rax, PARAM(1) ; list
  5492                                          ;rbx contains list's length
  5493 00003B79 488B4D20                        mov rcx, PARAM(0) ; PROC
  5494                                          assert_closure(rcx)
    53 00003B7D 803904              <1>  cmp byte [%1], %2
    54 00003B80 0F85CD130000        <1>  jne L_error_incorrect_type
  5495 00003B86 BA00000000                      mov rdx, 0 ;i in (int i =0;i<list.length;i++)
  5496 00003B8B 4C8B4508                        mov r8, RET_ADDR
  5497 00003B8F 488B6D00                        mov rbp, OLD_RBP
  5498 00003B93 4889EC                          mov rsp, rbp
  5499                                  .L_loop: ;loop to push list's to stack. not done with push because we need to invert it's order on stack.
  5500 00003B96 4839DA                          cmp rdx, rbx ; rdx=index, rbx=count
  5501 00003B99 7422                            je .L_loop_exit
  5502 00003B9B 4989D9                          mov r9, rbx
  5503 00003B9E 4929D1                          sub r9, rdx
  5504 00003BA1 4983C101                        add r9, 1
  5505 00003BA5 4D6BC9F8                        imul r9, -8
  5506 00003BA9 4901E9                          add r9, rbp
  5507                                          ;mov [rbp-8*(rbx - rdx + 1)], SOB_PAIR_CAR(rax)
  5508 00003BAC 488B7801                        mov rdi, SOB_PAIR_CAR(rax)
  5509 00003BB0 498939                          mov [r9], rdi
  5510                                          ;;above line should push parameters in backward order (for list (1 2 3) should push 1 2 3 to stack)
  5511 00003BB3 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  5512 00003BB7 4883C201                        add rdx, 1
  5513 00003BBB EBD9                            jmp .L_loop
  5514                                  .L_loop_exit:
  5515 00003BBD 4989D9                          mov r9, rbx
  5516 00003BC0 4983C101                        add r9,1
  5517 00003BC4 4D6BC9F8                        imul r9, -8
  5518 00003BC8 4901E9                          add r9,rbp
  5519                                         ; mov rsp, rbp- 8 * (rbx + 1) ;fix stack pointer to include added parameters in loop.
  5520 00003BCB 4C89CC                          mov rsp, r9
  5521 00003BCE 53                              push rbx
  5522 00003BCF FF7101                          push SOB_CLOSURE_ENV(rcx)
  5523 00003BD2 4150                            push r8
  5524 00003BD4 FF6109                          jmp SOB_CLOSURE_CODE(rcx)
  5525                                  
  5526                                  
  5527                                  L_code_ptr_is_null:
  5528 00003BD7 C8000000                        enter 0, 0
  5529 00003BDB 48837D1801                      cmp COUNT, 1
  5530 00003BE0 0F8599120000                    jne L_error_arg_count_1
  5531 00003BE6 488B4520                        mov rax, PARAM(0)
  5532 00003BEA 803801                          cmp byte [rax], T_nil
  5533 00003BED 750C                            jne .L_false
  5534 00003BEF 48B8-                           mov rax, sob_boolean_true
  5534 00003BF1 [0300000000000000] 
  5535 00003BF9 EB0A                            jmp .L_end
  5536                                  .L_false:
  5537 00003BFB 48B8-                           mov rax, sob_boolean_false
  5537 00003BFD [0200000000000000] 
  5538                                  .L_end:
  5539 00003C05 C9                              leave
  5540 00003C06 C21800                          ret AND_KILL_FRAME(1)
  5541                                  
  5542                                  L_code_ptr_is_pair:
  5543 00003C09 C8000000                        enter 0, 0
  5544 00003C0D 48837D1801                      cmp COUNT, 1
  5545 00003C12 0F8567120000                    jne L_error_arg_count_1
  5546 00003C18 488B4520                        mov rax, PARAM(0)
  5547 00003C1C 803821                          cmp byte [rax], T_pair
  5548 00003C1F 750C                            jne .L_false
  5549 00003C21 48B8-                           mov rax, sob_boolean_true
  5549 00003C23 [0300000000000000] 
  5550 00003C2B EB0A                            jmp .L_end
  5551                                  .L_false:
  5552 00003C2D 48B8-                           mov rax, sob_boolean_false
  5552 00003C2F [0200000000000000] 
  5553                                  .L_end:
  5554 00003C37 C9                              leave
  5555 00003C38 C21800                          ret AND_KILL_FRAME(1)
  5556                                          
  5557                                  L_code_ptr_is_void:
  5558 00003C3B C8000000                        enter 0, 0
  5559 00003C3F 48837D1801                      cmp COUNT, 1
  5560 00003C44 0F8535120000                    jne L_error_arg_count_1
  5561 00003C4A 488B4520                        mov rax, PARAM(0)
  5562 00003C4E 803800                          cmp byte [rax], T_void
  5563 00003C51 750C                            jne .L_false
  5564 00003C53 48B8-                           mov rax, sob_boolean_true
  5564 00003C55 [0300000000000000] 
  5565 00003C5D EB0A                            jmp .L_end
  5566                                  .L_false:
  5567 00003C5F 48B8-                           mov rax, sob_boolean_false
  5567 00003C61 [0200000000000000] 
  5568                                  .L_end:
  5569 00003C69 C9                              leave
  5570 00003C6A C21800                          ret AND_KILL_FRAME(1)
  5571                                  
  5572                                  L_code_ptr_is_char:
  5573 00003C6D C8000000                        enter 0, 0
  5574 00003C71 48837D1801                      cmp COUNT, 1
  5575 00003C76 0F8503120000                    jne L_error_arg_count_1
  5576 00003C7C 488B4520                        mov rax, PARAM(0)
  5577 00003C80 803802                          cmp byte [rax], T_char
  5578 00003C83 750C                            jne .L_false
  5579 00003C85 48B8-                           mov rax, sob_boolean_true
  5579 00003C87 [0300000000000000] 
  5580 00003C8F EB0A                            jmp .L_end
  5581                                  .L_false:
  5582 00003C91 48B8-                           mov rax, sob_boolean_false
  5582 00003C93 [0200000000000000] 
  5583                                  .L_end:
  5584 00003C9B C9                              leave
  5585 00003C9C C21800                          ret AND_KILL_FRAME(1)
  5586                                  
  5587                                  L_code_ptr_is_string:
  5588 00003C9F C8000000                        enter 0, 0
  5589 00003CA3 48837D1801                      cmp COUNT, 1
  5590 00003CA8 0F85D1110000                    jne L_error_arg_count_1
  5591 00003CAE 488B4520                        mov rax, PARAM(0)
  5592 00003CB2 803803                          cmp byte [rax], T_string
  5593 00003CB5 750C                            jne .L_false
  5594 00003CB7 48B8-                           mov rax, sob_boolean_true
  5594 00003CB9 [0300000000000000] 
  5595 00003CC1 EB0A                            jmp .L_end
  5596                                  .L_false:
  5597 00003CC3 48B8-                           mov rax, sob_boolean_false
  5597 00003CC5 [0200000000000000] 
  5598                                  .L_end:
  5599 00003CCD C9                              leave
  5600 00003CCE C21800                          ret AND_KILL_FRAME(1)
  5601                                  
  5602                                  L_code_ptr_is_symbol:
  5603 00003CD1 C8000000                        enter 0, 0
  5604 00003CD5 48837D1801                      cmp COUNT, 1
  5605 00003CDA 0F859F110000                    jne L_error_arg_count_1
  5606 00003CE0 4C8B4520                        mov r8, PARAM(0)
  5607 00003CE4 41802040                        and byte [r8], T_symbol
  5608 00003CE8 740C                            jz .L_false
  5609 00003CEA 48B8-                           mov rax, sob_boolean_true
  5609 00003CEC [0300000000000000] 
  5610 00003CF4 EB0A                            jmp .L_exit
  5611                                  .L_false:
  5612 00003CF6 48B8-                           mov rax, sob_boolean_false
  5612 00003CF8 [0200000000000000] 
  5613                                  .L_exit:
  5614 00003D00 C9                              leave
  5615 00003D01 C21800                          ret AND_KILL_FRAME(1)
  5616                                  
  5617                                  L_code_ptr_is_uninterned_symbol:
  5618 00003D04 C8000000                        enter 0, 0
  5619 00003D08 48837D1801                      cmp COUNT, 1
  5620 00003D0D 0F856C110000                    jne L_error_arg_count_1
  5621 00003D13 4C8B4520                        mov r8, PARAM(0)
  5622 00003D17 41803842                        cmp byte [r8], T_uninterned_symbol
  5623 00003D1B 750C                            jne .L_false
  5624 00003D1D 48B8-                           mov rax, sob_boolean_true
  5624 00003D1F [0300000000000000] 
  5625 00003D27 EB0A                            jmp .L_exit
  5626                                  .L_false:
  5627 00003D29 48B8-                           mov rax, sob_boolean_false
  5627 00003D2B [0200000000000000] 
  5628                                  .L_exit:
  5629 00003D33 C9                              leave
  5630 00003D34 C21800                          ret AND_KILL_FRAME(1)
  5631                                  
  5632                                  L_code_ptr_is_interned_symbol:
  5633 00003D37 C8000000                        enter 0, 0
  5634 00003D3B 48837D1801                      cmp COUNT, 1
  5635 00003D40 0F8539110000                    jne L_error_arg_count_1
  5636 00003D46 488B4520                        mov rax, PARAM(0)
  5637 00003D4A 803841                          cmp byte [rax], T_interned_symbol
  5638 00003D4D 750C                            jne .L_false
  5639 00003D4F 48B8-                           mov rax, sob_boolean_true
  5639 00003D51 [0300000000000000] 
  5640 00003D59 EB0A                            jmp .L_end
  5641                                  .L_false:
  5642 00003D5B 48B8-                           mov rax, sob_boolean_false
  5642 00003D5D [0200000000000000] 
  5643                                  .L_end:
  5644 00003D65 C9                              leave
  5645 00003D66 C21800                          ret AND_KILL_FRAME(1)
  5646                                  
  5647                                  L_code_ptr_gensym:
  5648 00003D69 C8000000                        enter 0, 0
  5649 00003D6D 48837D1800                      cmp COUNT, 0
  5650 00003D72 0F85D2100000                    jne L_error_arg_count_0
  5651 00003D78 48FF0425[880D0000]              inc qword [gensym_count]
  5652 00003D80 BF09000000                      mov rdi, (1 + 8)
  5653 00003D85 E81BF4FFFF                      call malloc
  5654 00003D8A C60042                          mov byte [rax], T_uninterned_symbol
  5655 00003D8D 488B0C25[880D0000]              mov rcx, qword [gensym_count]
  5656 00003D95 48894801                        mov qword [rax + 1], rcx
  5657 00003D99 C9                              leave
  5658 00003D9A C21000                          ret AND_KILL_FRAME(0)
  5659                                  
  5660                                  L_code_ptr_is_vector:
  5661 00003D9D C8000000                        enter 0, 0
  5662 00003DA1 48837D1801                      cmp COUNT, 1
  5663 00003DA6 0F85D3100000                    jne L_error_arg_count_1
  5664 00003DAC 488B4520                        mov rax, PARAM(0)
  5665 00003DB0 803822                          cmp byte [rax], T_vector
  5666 00003DB3 750C                            jne .L_false
  5667 00003DB5 48B8-                           mov rax, sob_boolean_true
  5667 00003DB7 [0300000000000000] 
  5668 00003DBF EB0A                            jmp .L_end
  5669                                  .L_false:
  5670 00003DC1 48B8-                           mov rax, sob_boolean_false
  5670 00003DC3 [0200000000000000] 
  5671                                  .L_end:
  5672 00003DCB C9                              leave
  5673 00003DCC C21800                          ret AND_KILL_FRAME(1)
  5674                                  
  5675                                  L_code_ptr_is_closure:
  5676 00003DCF C8000000                        enter 0, 0
  5677 00003DD3 48837D1801                      cmp COUNT, 1
  5678 00003DD8 0F85A1100000                    jne L_error_arg_count_1
  5679 00003DDE 488B4520                        mov rax, PARAM(0)
  5680 00003DE2 803804                          cmp byte [rax], T_closure
  5681 00003DE5 750C                            jne .L_false
  5682 00003DE7 48B8-                           mov rax, sob_boolean_true
  5682 00003DE9 [0300000000000000] 
  5683 00003DF1 EB0A                            jmp .L_end
  5684                                  .L_false:
  5685 00003DF3 48B8-                           mov rax, sob_boolean_false
  5685 00003DF5 [0200000000000000] 
  5686                                  .L_end:
  5687 00003DFD C9                              leave
  5688 00003DFE C21800                          ret AND_KILL_FRAME(1)
  5689                                  
  5690                                  L_code_ptr_is_real:
  5691 00003E01 C8000000                        enter 0, 0
  5692 00003E05 48837D1801                      cmp COUNT, 1
  5693 00003E0A 0F856F100000                    jne L_error_arg_count_1
  5694 00003E10 488B4520                        mov rax, PARAM(0)
  5695 00003E14 803813                          cmp byte [rax], T_real
  5696 00003E17 750C                            jne .L_false
  5697 00003E19 48B8-                           mov rax, sob_boolean_true
  5697 00003E1B [0300000000000000] 
  5698 00003E23 EB0A                            jmp .L_end
  5699                                  .L_false:
  5700 00003E25 48B8-                           mov rax, sob_boolean_false
  5700 00003E27 [0200000000000000] 
  5701                                  .L_end:
  5702 00003E2F C9                              leave
  5703 00003E30 C21800                          ret AND_KILL_FRAME(1)
  5704                                  
  5705                                  L_code_ptr_is_fraction:
  5706 00003E33 C8000000                        enter 0, 0
  5707 00003E37 48837D1801                      cmp COUNT, 1
  5708 00003E3C 0F853D100000                    jne L_error_arg_count_1
  5709 00003E42 488B4520                        mov rax, PARAM(0)
  5710 00003E46 803812                          cmp byte [rax], T_fraction
  5711 00003E49 750C                            jne .L_false
  5712 00003E4B 48B8-                           mov rax, sob_boolean_true
  5712 00003E4D [0300000000000000] 
  5713 00003E55 EB0A                            jmp .L_end
  5714                                  .L_false:
  5715 00003E57 48B8-                           mov rax, sob_boolean_false
  5715 00003E59 [0200000000000000] 
  5716                                  .L_end:
  5717 00003E61 C9                              leave
  5718 00003E62 C21800                          ret AND_KILL_FRAME(1)
  5719                                  
  5720                                  L_code_ptr_is_boolean:
  5721 00003E65 C8000000                        enter 0, 0
  5722 00003E69 48837D1801                      cmp COUNT, 1
  5723 00003E6E 0F850B100000                    jne L_error_arg_count_1
  5724 00003E74 488B4520                        mov rax, PARAM(0)
  5725 00003E78 8A18                            mov bl, byte [rax]
  5726 00003E7A 80E308                          and bl, T_boolean
  5727 00003E7D 740C                            je .L_false
  5728 00003E7F 48B8-                           mov rax, sob_boolean_true
  5728 00003E81 [0300000000000000] 
  5729 00003E89 EB0A                            jmp .L_end
  5730                                  .L_false:
  5731 00003E8B 48B8-                           mov rax, sob_boolean_false
  5731 00003E8D [0200000000000000] 
  5732                                  .L_end:
  5733 00003E95 C9                              leave
  5734 00003E96 C21800                          ret AND_KILL_FRAME(1)
  5735                                          
  5736                                  L_code_ptr_is_boolean_false:
  5737 00003E99 C8000000                        enter 0, 0
  5738 00003E9D 48837D1801                      cmp COUNT, 1
  5739 00003EA2 0F85D70F0000                    jne L_error_arg_count_1
  5740 00003EA8 488B4520                        mov rax, PARAM(0)
  5741 00003EAC 8A18                            mov bl, byte [rax]
  5742 00003EAE 80FB09                          cmp bl, T_boolean_false
  5743 00003EB1 750C                            jne .L_false
  5744 00003EB3 48B8-                           mov rax, sob_boolean_true
  5744 00003EB5 [0300000000000000] 
  5745 00003EBD EB0A                            jmp .L_end
  5746                                  .L_false:
  5747 00003EBF 48B8-                           mov rax, sob_boolean_false
  5747 00003EC1 [0200000000000000] 
  5748                                  .L_end:
  5749 00003EC9 C9                              leave
  5750 00003ECA C21800                          ret AND_KILL_FRAME(1)
  5751                                  
  5752                                  L_code_ptr_is_boolean_true:
  5753 00003ECD C8000000                        enter 0, 0
  5754 00003ED1 48837D1801                      cmp COUNT, 1
  5755 00003ED6 0F85A30F0000                    jne L_error_arg_count_1
  5756 00003EDC 488B4520                        mov rax, PARAM(0)
  5757 00003EE0 8A18                            mov bl, byte [rax]
  5758 00003EE2 80FB0A                          cmp bl, T_boolean_true
  5759 00003EE5 750C                            jne .L_false
  5760 00003EE7 48B8-                           mov rax, sob_boolean_true
  5760 00003EE9 [0300000000000000] 
  5761 00003EF1 EB0A                            jmp .L_end
  5762                                  .L_false:
  5763 00003EF3 48B8-                           mov rax, sob_boolean_false
  5763 00003EF5 [0200000000000000] 
  5764                                  .L_end:
  5765 00003EFD C9                              leave
  5766 00003EFE C21800                          ret AND_KILL_FRAME(1)
  5767                                  
  5768                                  L_code_ptr_is_number:
  5769 00003F01 C8000000                        enter 0, 0
  5770 00003F05 48837D1801                      cmp COUNT, 1
  5771 00003F0A 0F856F0F0000                    jne L_error_arg_count_1
  5772 00003F10 488B4520                        mov rax, PARAM(0)
  5773 00003F14 8A18                            mov bl, byte [rax]
  5774 00003F16 80E310                          and bl, T_number
  5775 00003F19 740C                            jz .L_false
  5776 00003F1B 48B8-                           mov rax, sob_boolean_true
  5776 00003F1D [0300000000000000] 
  5777 00003F25 EB0A                            jmp .L_end
  5778                                  .L_false:
  5779 00003F27 48B8-                           mov rax, sob_boolean_false
  5779 00003F29 [0200000000000000] 
  5780                                  .L_end:
  5781 00003F31 C9                              leave
  5782 00003F32 C21800                          ret AND_KILL_FRAME(1)
  5783                                          
  5784                                  L_code_ptr_is_collection:
  5785 00003F35 C8000000                        enter 0, 0
  5786 00003F39 48837D1801                      cmp COUNT, 1
  5787 00003F3E 0F853B0F0000                    jne L_error_arg_count_1
  5788 00003F44 488B4520                        mov rax, PARAM(0)
  5789 00003F48 8A18                            mov bl, byte [rax]
  5790 00003F4A 80E320                          and bl, T_collection
  5791 00003F4D 740C                            je .L_false
  5792 00003F4F 48B8-                           mov rax, sob_boolean_true
  5792 00003F51 [0300000000000000] 
  5793 00003F59 EB0A                            jmp .L_end
  5794                                  .L_false:
  5795 00003F5B 48B8-                           mov rax, sob_boolean_false
  5795 00003F5D [0200000000000000] 
  5796                                  .L_end:
  5797 00003F65 C9                              leave
  5798 00003F66 C21800                          ret AND_KILL_FRAME(1)
  5799                                  
  5800                                  L_code_ptr_cons:
  5801 00003F69 C8000000                        enter 0, 0
  5802 00003F6D 48837D1802                      cmp COUNT, 2
  5803 00003F72 0F853C0F0000                    jne L_error_arg_count_2
  5804 00003F78 BF11000000                      mov rdi, (1 + 8 + 8)
  5805 00003F7D E823F2FFFF                      call malloc
  5806 00003F82 C60021                          mov byte [rax], T_pair
  5807 00003F85 488B5D20                        mov rbx, PARAM(0)
  5808 00003F89 48895801                        mov SOB_PAIR_CAR(rax), rbx
  5809 00003F8D 488B5D28                        mov rbx, PARAM(1)
  5810 00003F91 48895809                        mov SOB_PAIR_CDR(rax), rbx
  5811 00003F95 C9                              leave
  5812 00003F96 C22000                          ret AND_KILL_FRAME(2)
  5813                                  
  5814                                  L_code_ptr_display_sexpr:
  5815 00003F99 C8000000                        enter 0, 0
  5816 00003F9D 48837D1801                      cmp COUNT, 1
  5817 00003FA2 0F85D70E0000                    jne L_error_arg_count_1
  5818 00003FA8 488B7D20                        mov rdi, PARAM(0)
  5819 00003FAC E875F4FFFF                      call print_sexpr
  5820 00003FB1 48B8-                           mov rax, sob_void
  5820 00003FB3 [0000000000000000] 
  5821 00003FBB C9                              leave
  5822 00003FBC C21800                          ret AND_KILL_FRAME(1)
  5823                                  
  5824                                  L_code_ptr_write_char:
  5825 00003FBF C8000000                        enter 0, 0
  5826 00003FC3 48837D1801                      cmp COUNT, 1
  5827 00003FC8 0F85B10E0000                    jne L_error_arg_count_1
  5828 00003FCE 488B4520                        mov rax, PARAM(0)
  5829                                          assert_char(rax)
    53 00003FD2 803802              <1>  cmp byte [%1], %2
    54 00003FD5 0F85780F0000        <1>  jne L_error_incorrect_type
  5830 00003FDB 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  5831 00003FDE 4825FF000000                    and rax, 255
  5832 00003FE4 48BF-                           mov rdi, fmt_char
  5832 00003FE6 [900D000000000000] 
  5833 00003FEE 4889C6                          mov rsi, rax
  5834 00003FF1 B800000000                      mov rax, 0
  5835                                          ENTER
    44 00003FF6 C8000000            <1>  enter 0, 0
    45 00003FFA 4883E4F0            <1>  and rsp, ~15
  5836 00003FFE E8(00000000)                    call printf
  5837                                          LEAVE
    49 00004003 C9                  <1>  leave
  5838 00004004 48B8-                           mov rax, sob_void
  5838 00004006 [0000000000000000] 
  5839 0000400E C9                              leave
  5840 0000400F C21800                          ret AND_KILL_FRAME(1)
  5841                                  
  5842                                  L_code_ptr_car:
  5843 00004012 C8000000                        enter 0, 0
  5844 00004016 48837D1801                      cmp COUNT, 1
  5845 0000401B 0F855E0E0000                    jne L_error_arg_count_1
  5846 00004021 488B4520                        mov rax, PARAM(0)
  5847                                          assert_pair(rax)
    53 00004025 803821              <1>  cmp byte [%1], %2
    54 00004028 0F85250F0000        <1>  jne L_error_incorrect_type
  5848 0000402E 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  5849 00004032 C9                              leave
  5850 00004033 C21800                          ret AND_KILL_FRAME(1)
  5851                                          
  5852                                  L_code_ptr_cdr:
  5853 00004036 C8000000                        enter 0, 0
  5854 0000403A 48837D1801                      cmp COUNT, 1
  5855 0000403F 0F853A0E0000                    jne L_error_arg_count_1
  5856 00004045 488B4520                        mov rax, PARAM(0)
  5857                                          assert_pair(rax)
    53 00004049 803821              <1>  cmp byte [%1], %2
    54 0000404C 0F85010F0000        <1>  jne L_error_incorrect_type
  5858 00004052 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  5859 00004056 C9                              leave
  5860 00004057 C21800                          ret AND_KILL_FRAME(1)
  5861                                          
  5862                                  L_code_ptr_string_length:
  5863 0000405A C8000000                        enter 0, 0
  5864 0000405E 48837D1801                      cmp COUNT, 1
  5865 00004063 0F85160E0000                    jne L_error_arg_count_1
  5866 00004069 488B4520                        mov rax, PARAM(0)
  5867                                          assert_string(rax)
    53 0000406D 803803              <1>  cmp byte [%1], %2
    54 00004070 0F85DD0E0000        <1>  jne L_error_incorrect_type
  5868 00004076 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  5869 0000407A E84F0D0000                      call make_integer
  5870 0000407F C9                              leave
  5871 00004080 C21800                          ret AND_KILL_FRAME(1)
  5872                                  
  5873                                  L_code_ptr_vector_length:
  5874 00004083 C8000000                        enter 0, 0
  5875 00004087 48837D1801                      cmp COUNT, 1
  5876 0000408C 0F85ED0D0000                    jne L_error_arg_count_1
  5877 00004092 488B4520                        mov rax, PARAM(0)
  5878                                          assert_vector(rax)
    53 00004096 803822              <1>  cmp byte [%1], %2
    54 00004099 0F85B40E0000        <1>  jne L_error_incorrect_type
  5879 0000409F 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  5880 000040A3 E8260D0000                      call make_integer
  5881 000040A8 C9                              leave
  5882 000040A9 C21800                          ret AND_KILL_FRAME(1)
  5883                                  
  5884                                  L_code_ptr_real_to_integer:
  5885 000040AC C8000000                        enter 0, 0
  5886 000040B0 48837D1801                      cmp COUNT, 1
  5887 000040B5 0F85C40D0000                    jne L_error_arg_count_1
  5888 000040BB 488B5D20                        mov rbx, PARAM(0)
  5889                                          assert_real(rbx)
    53 000040BF 803B13              <1>  cmp byte [%1], %2
    54 000040C2 0F858B0E0000        <1>  jne L_error_incorrect_type
  5890 000040C8 F20F104301                      movsd xmm0, qword [rbx + 1]
  5891 000040CD F2480F2CF8                      cvttsd2si rdi, xmm0
  5892 000040D2 E8F70C0000                      call make_integer
  5893 000040D7 C9                              leave
  5894 000040D8 C21800                          ret AND_KILL_FRAME(1)
  5895                                  
  5896                                  L_code_ptr_exit:
  5897 000040DB C8000000                        enter 0, 0
  5898 000040DF 48837D1800                      cmp COUNT, 0
  5899 000040E4 0F85600D0000                    jne L_error_arg_count_0
  5900 000040EA B800000000                      mov rax, 0
  5901 000040EF E8(00000000)                    call exit
  5902                                  
  5903                                  L_code_ptr_integer_to_real:
  5904 000040F4 C8000000                        enter 0, 0
  5905 000040F8 48837D1801                      cmp COUNT, 1
  5906 000040FD 0F857C0D0000                    jne L_error_arg_count_1
  5907 00004103 488B4520                        mov rax, PARAM(0)
  5908                                          assert_integer(rax)
    53 00004107 803811              <1>  cmp byte [%1], %2
    54 0000410A 0F85430E0000        <1>  jne L_error_incorrect_type
  5909 00004110 FF7001                          push qword [rax + 1]
  5910 00004113 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  5911 00004119 E8980C0000                      call make_real
  5912 0000411E C9                              leave
  5913 0000411F C21800                          ret AND_KILL_FRAME(1)
  5914                                  
  5915                                  L_code_ptr_fraction_to_real:
  5916 00004122 C8000000                        enter 0, 0
  5917 00004126 48837D1801                      cmp COUNT, 1
  5918 0000412B 0F854E0D0000                    jne L_error_arg_count_1
  5919 00004131 488B4520                        mov rax, PARAM(0)
  5920                                          assert_fraction(rax)
    53 00004135 803812              <1>  cmp byte [%1], %2
    54 00004138 0F85150E0000        <1>  jne L_error_incorrect_type
  5921 0000413E FF7001                          push qword [rax + 1]
  5922 00004141 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  5923 00004147 FF7009                          push qword [rax + 1 + 8]
  5924 0000414A F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  5925 00004150 F20F5EC1                        divsd xmm0, xmm1
  5926 00004154 E85D0C0000                      call make_real
  5927 00004159 C9                              leave
  5928 0000415A C21800                          ret AND_KILL_FRAME(1)
  5929                                  
  5930                                  L_code_ptr_char_to_integer:
  5931 0000415D C8000000                        enter 0, 0
  5932 00004161 48837D1801                      cmp COUNT, 1
  5933 00004166 0F85130D0000                    jne L_error_arg_count_1
  5934 0000416C 488B4520                        mov rax, PARAM(0)
  5935                                          assert_char(rax)
    53 00004170 803802              <1>  cmp byte [%1], %2
    54 00004173 0F85DA0D0000        <1>  jne L_error_incorrect_type
  5936 00004179 8A4001                          mov al, byte [rax + 1]
  5937 0000417C 4825FF000000                    and rax, 255
  5938 00004182 4889C7                          mov rdi, rax
  5939 00004185 E8440C0000                      call make_integer
  5940 0000418A C9                              leave
  5941 0000418B C21800                          ret AND_KILL_FRAME(1)
  5942                                  
  5943                                  L_code_ptr_integer_to_fraction:
  5944 0000418E C8000000                        enter 0, 0
  5945 00004192 48837D1801                      cmp COUNT, 1
  5946 00004197 0F85E20C0000                    jne L_error_arg_count_1
  5947 0000419D 4C8B4520                        mov r8, PARAM(0)
  5948                                          assert_integer(r8)
    53 000041A1 41803811            <1>  cmp byte [%1], %2
    54 000041A5 0F85A80D0000        <1>  jne L_error_incorrect_type
  5949 000041AB BF11000000                      mov rdi, (1 + 8 + 8)
  5950 000041B0 E8F0EFFFFF                      call malloc
  5951 000041B5 498B5801                        mov rbx, qword [r8 + 1]
  5952 000041B9 C60012                          mov byte [rax], T_fraction
  5953 000041BC 48895801                        mov qword [rax + 1], rbx
  5954 000041C0 48C7400901000000                mov qword [rax + 1 + 8], 1
  5955 000041C8 C9                              leave
  5956 000041C9 C21800                          ret AND_KILL_FRAME(1)
  5957                                  
  5958                                  L_code_ptr_integer_to_char:
  5959 000041CC C8000000                        enter 0, 0
  5960 000041D0 48837D1801                      cmp COUNT, 1
  5961 000041D5 0F85A40C0000                    jne L_error_arg_count_1
  5962 000041DB 488B4520                        mov rax, PARAM(0)
  5963                                          assert_integer(rax)
    53 000041DF 803811              <1>  cmp byte [%1], %2
    54 000041E2 0F856B0D0000        <1>  jne L_error_incorrect_type
  5964 000041E8 488B5801                        mov rbx, qword [rax + 1]
  5965 000041EC 4883FB00                        cmp rbx, 0
  5966 000041F0 0F8EF20B0000                    jle L_error_integer_range
  5967 000041F6 4881FB00010000                  cmp rbx, 256
  5968 000041FD 0F8DE50B0000                    jge L_error_integer_range
  5969 00004203 BF02000000                      mov rdi, (1 + 1)
  5970 00004208 E898EFFFFF                      call malloc
  5971 0000420D C60002                          mov byte [rax], T_char
  5972 00004210 885801                          mov byte [rax + 1], bl
  5973 00004213 C9                              leave
  5974 00004214 C21800                          ret AND_KILL_FRAME(1)
  5975                                  
  5976                                  L_code_ptr_trng:
  5977 00004217 C8000000                        enter 0, 0
  5978 0000421B 48837D1800                      cmp COUNT, 0
  5979 00004220 0F85240C0000                    jne L_error_arg_count_0
  5980 00004226 480FC7F7                        rdrand rdi
  5981 0000422A 48D1EF                          shr rdi, 1
  5982 0000422D E89C0B0000                      call make_integer
  5983 00004232 C9                              leave
  5984 00004233 C21000                          ret AND_KILL_FRAME(0)
  5985                                  
  5986                                  L_code_ptr_is_zero:
  5987 00004236 C8000000                        enter 0, 0
  5988 0000423A 48837D1801                      cmp COUNT, 1
  5989 0000423F 0F853A0C0000                    jne L_error_arg_count_1
  5990 00004245 488B4520                        mov rax, PARAM(0)
  5991 00004249 803811                          cmp byte [rax], T_integer
  5992 0000424C 740F                            je .L_integer
  5993 0000424E 803812                          cmp byte [rax], T_fraction
  5994 00004251 7413                            je .L_fraction
  5995 00004253 803813                          cmp byte [rax], T_real
  5996 00004256 7417                            je .L_real
  5997 00004258 E9F60C0000                      jmp L_error_incorrect_type
  5998                                  .L_integer:
  5999 0000425D 4883780100                      cmp qword [rax + 1], 0
  6000 00004262 7429                            je .L_zero
  6001 00004264 EB1B                            jmp .L_not_zero
  6002                                  .L_fraction:
  6003 00004266 4883780100                      cmp qword [rax + 1], 0
  6004 0000426B 7420                            je .L_zero
  6005 0000426D EB12                            jmp .L_not_zero
  6006                                  .L_real:
  6007 0000426F 660FEFC0                        pxor xmm0, xmm0
  6008 00004273 FF7001                          push qword [rax + 1]
  6009 00004276 F20F100C24                      movsd xmm1, qword [rsp]
  6010 0000427B 660F2EC1                        ucomisd xmm0, xmm1
  6011 0000427F 740C                            je .L_zero
  6012                                  .L_not_zero:
  6013 00004281 48B8-                           mov rax, sob_boolean_false
  6013 00004283 [0200000000000000] 
  6014 0000428B EB0A                            jmp .L_end
  6015                                  .L_zero:
  6016 0000428D 48B8-                           mov rax, sob_boolean_true
  6016 0000428F [0300000000000000] 
  6017                                  .L_end:
  6018 00004297 C9                              leave
  6019 00004298 C21800                          ret AND_KILL_FRAME(1)
  6020                                  
  6021                                  L_code_ptr_is_integer:
  6022 0000429B C8000000                        enter 0, 0
  6023 0000429F 48837D1801                      cmp COUNT, 1
  6024 000042A4 0F85D50B0000                    jne L_error_arg_count_1
  6025 000042AA 488B4520                        mov rax, PARAM(0)
  6026 000042AE 803811                          cmp byte [rax], T_integer
  6027 000042B1 750C                            jne .L_false
  6028 000042B3 48B8-                           mov rax, sob_boolean_true
  6028 000042B5 [0300000000000000] 
  6029 000042BD EB0A                            jmp .L_exit
  6030                                  .L_false:
  6031 000042BF 48B8-                           mov rax, sob_boolean_false
  6031 000042C1 [0200000000000000] 
  6032                                  .L_exit:
  6033 000042C9 C9                              leave
  6034 000042CA C21800                          ret AND_KILL_FRAME(1)
  6035                                  
  6036                                  L_code_ptr_raw_bin_add_rr:
  6037 000042CD C8000000                        enter 0, 0
  6038 000042D1 48837D1802                      cmp COUNT, 2
  6039 000042D6 0F85D80B0000                    jne L_error_arg_count_2
  6040 000042DC 488B5D20                        mov rbx, PARAM(0)
  6041                                          assert_real(rbx)
    53 000042E0 803B13              <1>  cmp byte [%1], %2
    54 000042E3 0F856A0C0000        <1>  jne L_error_incorrect_type
  6042 000042E9 488B4D28                        mov rcx, PARAM(1)
  6043                                          assert_real(rcx)
    53 000042ED 803913              <1>  cmp byte [%1], %2
    54 000042F0 0F855D0C0000        <1>  jne L_error_incorrect_type
  6044 000042F6 F20F104301                      movsd xmm0, qword [rbx + 1]
  6045 000042FB F20F104901                      movsd xmm1, qword [rcx + 1]
  6046 00004300 F20F58C1                        addsd xmm0, xmm1
  6047 00004304 E8AD0A0000                      call make_real
  6048 00004309 C9                              leave
  6049 0000430A C22000                          ret AND_KILL_FRAME(2)
  6050                                  
  6051                                  L_code_ptr_raw_bin_sub_rr:
  6052 0000430D C8000000                        enter 0, 0
  6053 00004311 48837D1802                      cmp COUNT, 2
  6054 00004316 0F85980B0000                    jne L_error_arg_count_2
  6055 0000431C 488B5D20                        mov rbx, PARAM(0)
  6056                                          assert_real(rbx)
    53 00004320 803B13              <1>  cmp byte [%1], %2
    54 00004323 0F852A0C0000        <1>  jne L_error_incorrect_type
  6057 00004329 488B4D28                        mov rcx, PARAM(1)
  6058                                          assert_real(rcx)
    53 0000432D 803913              <1>  cmp byte [%1], %2
    54 00004330 0F851D0C0000        <1>  jne L_error_incorrect_type
  6059 00004336 F20F104301                      movsd xmm0, qword [rbx + 1]
  6060 0000433B F20F104901                      movsd xmm1, qword [rcx + 1]
  6061 00004340 F20F5CC1                        subsd xmm0, xmm1
  6062 00004344 E86D0A0000                      call make_real
  6063 00004349 C9                              leave
  6064 0000434A C22000                          ret AND_KILL_FRAME(2)
  6065                                  
  6066                                  L_code_ptr_raw_bin_mul_rr:
  6067 0000434D C8000000                        enter 0, 0
  6068 00004351 48837D1802                      cmp COUNT, 2
  6069 00004356 0F85580B0000                    jne L_error_arg_count_2
  6070 0000435C 488B5D20                        mov rbx, PARAM(0)
  6071                                          assert_real(rbx)
    53 00004360 803B13              <1>  cmp byte [%1], %2
    54 00004363 0F85EA0B0000        <1>  jne L_error_incorrect_type
  6072 00004369 488B4D28                        mov rcx, PARAM(1)
  6073                                          assert_real(rcx)
    53 0000436D 803913              <1>  cmp byte [%1], %2
    54 00004370 0F85DD0B0000        <1>  jne L_error_incorrect_type
  6074 00004376 F20F104301                      movsd xmm0, qword [rbx + 1]
  6075 0000437B F20F104901                      movsd xmm1, qword [rcx + 1]
  6076 00004380 F20F59C1                        mulsd xmm0, xmm1
  6077 00004384 E82D0A0000                      call make_real
  6078 00004389 C9                              leave
  6079 0000438A C22000                          ret AND_KILL_FRAME(2)
  6080                                  
  6081                                  L_code_ptr_raw_bin_div_rr:
  6082 0000438D C8000000                        enter 0, 0
  6083 00004391 48837D1802                      cmp COUNT, 2
  6084 00004396 0F85180B0000                    jne L_error_arg_count_2
  6085 0000439C 488B5D20                        mov rbx, PARAM(0)
  6086                                          assert_real(rbx)
    53 000043A0 803B13              <1>  cmp byte [%1], %2
    54 000043A3 0F85AA0B0000        <1>  jne L_error_incorrect_type
  6087 000043A9 488B4D28                        mov rcx, PARAM(1)
  6088                                          assert_real(rcx)
    53 000043AD 803913              <1>  cmp byte [%1], %2
    54 000043B0 0F859D0B0000        <1>  jne L_error_incorrect_type
  6089 000043B6 F20F104301                      movsd xmm0, qword [rbx + 1]
  6090 000043BB F20F104901                      movsd xmm1, qword [rcx + 1]
  6091 000043C0 660FEFD2                        pxor xmm2, xmm2
  6092 000043C4 660F2ECA                        ucomisd xmm1, xmm2
  6093 000043C8 0F84B60B0000                    je L_error_division_by_zero
  6094 000043CE F20F5EC1                        divsd xmm0, xmm1
  6095 000043D2 E8DF090000                      call make_real
  6096 000043D7 C9                              leave
  6097 000043D8 C22000                          ret AND_KILL_FRAME(2)
  6098                                  
  6099                                  L_code_ptr_raw_bin_add_zz:
  6100 000043DB C8000000                	enter 0, 0
  6101 000043DF 48837D1802              	cmp COUNT, 2
  6102 000043E4 0F85CA0A0000            	jne L_error_arg_count_2
  6103 000043EA 4C8B4520                	mov r8, PARAM(0)
  6104                                  	assert_integer(r8)
    53 000043EE 41803811            <1>  cmp byte [%1], %2
    54 000043F2 0F855B0B0000        <1>  jne L_error_incorrect_type
  6105 000043F8 4C8B4D28                	mov r9, PARAM(1)
  6106                                  	assert_integer(r9)
    53 000043FC 41803911            <1>  cmp byte [%1], %2
    54 00004400 0F854D0B0000        <1>  jne L_error_incorrect_type
  6107 00004406 498B7801                	mov rdi, qword [r8 + 1]
  6108 0000440A 49037901                	add rdi, qword [r9 + 1]
  6109 0000440E E8BB090000              	call make_integer
  6110 00004413 C9                      	leave
  6111 00004414 C22000                  	ret AND_KILL_FRAME(2)
  6112                                  
  6113                                  L_code_ptr_raw_bin_add_qq:
  6114 00004417 C8000000                        enter 0, 0
  6115 0000441B 48837D1802                      cmp COUNT, 2
  6116 00004420 0F858E0A0000                    jne L_error_arg_count_2
  6117 00004426 4C8B4520                        mov r8, PARAM(0)
  6118                                          assert_fraction(r8)
    53 0000442A 41803812            <1>  cmp byte [%1], %2
    54 0000442E 0F851F0B0000        <1>  jne L_error_incorrect_type
  6119 00004434 4C8B4D28                        mov r9, PARAM(1)
  6120                                          assert_fraction(r9)
    53 00004438 41803912            <1>  cmp byte [%1], %2
    54 0000443C 0F85110B0000        <1>  jne L_error_incorrect_type
  6121 00004442 498B4001                        mov rax, qword [r8 + 1] ; num1
  6122 00004446 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  6123 0000444A 4899                            cqo
  6124 0000444C 48F7EB                          imul rbx
  6125 0000444F 4889C6                          mov rsi, rax
  6126 00004452 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6127 00004456 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  6128 0000445A 4899                            cqo
  6129 0000445C 48F7EB                          imul rbx
  6130 0000445F 4801C6                          add rsi, rax
  6131 00004462 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6132 00004466 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  6133 0000446A 4899                            cqo
  6134 0000446C 48F7EB                          imul rbx
  6135 0000446F 4889C7                          mov rdi, rax
  6136 00004472 E8DE010000                      call normalize_fraction
  6137 00004477 C9                              leave
  6138 00004478 C22000                          ret AND_KILL_FRAME(2)
  6139                                  
  6140                                  L_code_ptr_raw_bin_sub_zz:
  6141 0000447B C8000000                	enter 0, 0
  6142 0000447F 48837D1802              	cmp COUNT, 2
  6143 00004484 0F852A0A0000            	jne L_error_arg_count_2
  6144 0000448A 4C8B4520                	mov r8, PARAM(0)
  6145                                  	assert_integer(r8)
    53 0000448E 41803811            <1>  cmp byte [%1], %2
    54 00004492 0F85BB0A0000        <1>  jne L_error_incorrect_type
  6146 00004498 4C8B4D28                	mov r9, PARAM(1)
  6147                                  	assert_integer(r9)
    53 0000449C 41803911            <1>  cmp byte [%1], %2
    54 000044A0 0F85AD0A0000        <1>  jne L_error_incorrect_type
  6148 000044A6 498B7801                	mov rdi, qword [r8 + 1]
  6149 000044AA 492B7901                	sub rdi, qword [r9 + 1]
  6150 000044AE E81B090000              	call make_integer
  6151 000044B3 C9                      	leave
  6152 000044B4 C22000                  	ret AND_KILL_FRAME(2)
  6153                                  
  6154                                  L_code_ptr_raw_bin_sub_qq:
  6155 000044B7 C8000000                        enter 0, 0
  6156 000044BB 48837D1802                      cmp COUNT, 2
  6157 000044C0 0F85EE090000                    jne L_error_arg_count_2
  6158 000044C6 4C8B4520                        mov r8, PARAM(0)
  6159                                          assert_fraction(r8)
    53 000044CA 41803812            <1>  cmp byte [%1], %2
    54 000044CE 0F857F0A0000        <1>  jne L_error_incorrect_type
  6160 000044D4 4C8B4D28                        mov r9, PARAM(1)
  6161                                          assert_fraction(r9)
    53 000044D8 41803912            <1>  cmp byte [%1], %2
    54 000044DC 0F85710A0000        <1>  jne L_error_incorrect_type
  6162 000044E2 498B4001                        mov rax, qword [r8 + 1] ; num1
  6163 000044E6 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  6164 000044EA 4899                            cqo
  6165 000044EC 48F7EB                          imul rbx
  6166 000044EF 4889C6                          mov rsi, rax
  6167 000044F2 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6168 000044F6 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  6169 000044FA 4899                            cqo
  6170 000044FC 48F7EB                          imul rbx
  6171 000044FF 4829C6                          sub rsi, rax
  6172 00004502 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6173 00004506 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  6174 0000450A 4899                            cqo
  6175 0000450C 48F7EB                          imul rbx
  6176 0000450F 4889C7                          mov rdi, rax
  6177 00004512 E83E010000                      call normalize_fraction
  6178 00004517 C9                              leave
  6179 00004518 C22000                          ret AND_KILL_FRAME(2)
  6180                                  
  6181                                  L_code_ptr_raw_bin_mul_zz:
  6182 0000451B C8000000                	enter 0, 0
  6183 0000451F 48837D1802              	cmp COUNT, 2
  6184 00004524 0F858A090000            	jne L_error_arg_count_2
  6185 0000452A 4C8B4520                	mov r8, PARAM(0)
  6186                                  	assert_integer(r8)
    53 0000452E 41803811            <1>  cmp byte [%1], %2
    54 00004532 0F851B0A0000        <1>  jne L_error_incorrect_type
  6187 00004538 4C8B4D28                	mov r9, PARAM(1)
  6188                                  	assert_integer(r9)
    53 0000453C 41803911            <1>  cmp byte [%1], %2
    54 00004540 0F850D0A0000        <1>  jne L_error_incorrect_type
  6189 00004546 4899                    	cqo
  6190 00004548 498B4001                	mov rax, qword [r8 + 1]
  6191 0000454C 49F76101                	mul qword [r9 + 1]
  6192 00004550 4889C7                  	mov rdi, rax
  6193 00004553 E876080000              	call make_integer
  6194 00004558 C9                      	leave
  6195 00004559 C22000                  	ret AND_KILL_FRAME(2)
  6196                                  
  6197                                  L_code_ptr_raw_bin_mul_qq:
  6198 0000455C C8000000                        enter 0, 0
  6199 00004560 48837D1802                      cmp COUNT, 2
  6200 00004565 0F8549090000                    jne L_error_arg_count_2
  6201 0000456B 4C8B4520                        mov r8, PARAM(0)
  6202                                          assert_fraction(r8)
    53 0000456F 41803812            <1>  cmp byte [%1], %2
    54 00004573 0F85DA090000        <1>  jne L_error_incorrect_type
  6203 00004579 4C8B4D28                        mov r9, PARAM(1)
  6204                                          assert_fraction(r9)
    53 0000457D 41803912            <1>  cmp byte [%1], %2
    54 00004581 0F85CC090000        <1>  jne L_error_incorrect_type
  6205 00004587 498B4001                        mov rax, qword [r8 + 1] ; num1
  6206 0000458B 498B5901                        mov rbx, qword [r9 + 1] ; num2
  6207 0000458F 4899                            cqo
  6208 00004591 48F7EB                          imul rbx
  6209 00004594 4889C6                          mov rsi, rax
  6210 00004597 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6211 0000459B 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  6212 0000459F 4899                            cqo
  6213 000045A1 48F7EB                          imul rbx
  6214 000045A4 4889C7                          mov rdi, rax
  6215 000045A7 E8A9000000                      call normalize_fraction
  6216 000045AC C9                              leave
  6217 000045AD C22000                          ret AND_KILL_FRAME(2)
  6218                                          
  6219                                  L_code_ptr_raw_bin_div_zz:
  6220 000045B0 C8000000                	enter 0, 0
  6221 000045B4 48837D1802              	cmp COUNT, 2
  6222 000045B9 0F85F5080000            	jne L_error_arg_count_2
  6223 000045BF 4C8B4520                	mov r8, PARAM(0)
  6224                                  	assert_integer(r8)
    53 000045C3 41803811            <1>  cmp byte [%1], %2
    54 000045C7 0F8586090000        <1>  jne L_error_incorrect_type
  6225 000045CD 4C8B4D28                	mov r9, PARAM(1)
  6226                                  	assert_integer(r9)
    53 000045D1 41803911            <1>  cmp byte [%1], %2
    54 000045D5 0F8578090000        <1>  jne L_error_incorrect_type
  6227 000045DB 498B7901                	mov rdi, qword [r9 + 1]
  6228 000045DF 4883FF00                	cmp rdi, 0
  6229 000045E3 0F849B090000            	je L_error_division_by_zero
  6230 000045E9 498B7001                	mov rsi, qword [r8 + 1]
  6231 000045ED E863000000              	call normalize_fraction
  6232 000045F2 C9                      	leave
  6233 000045F3 C22000                  	ret AND_KILL_FRAME(2)
  6234                                  
  6235                                  L_code_ptr_raw_bin_div_qq:
  6236 000045F6 C8000000                        enter 0, 0
  6237 000045FA 48837D1802                      cmp COUNT, 2
  6238 000045FF 0F85AF080000                    jne L_error_arg_count_2
  6239 00004605 4C8B4520                        mov r8, PARAM(0)
  6240                                          assert_fraction(r8)
    53 00004609 41803812            <1>  cmp byte [%1], %2
    54 0000460D 0F8540090000        <1>  jne L_error_incorrect_type
  6241 00004613 4C8B4D28                        mov r9, PARAM(1)
  6242                                          assert_fraction(r9)
    53 00004617 41803912            <1>  cmp byte [%1], %2
    54 0000461B 0F8532090000        <1>  jne L_error_incorrect_type
  6243 00004621 4983790100                      cmp qword [r9 + 1], 0
  6244 00004626 0F8458090000                    je L_error_division_by_zero
  6245 0000462C 498B4001                        mov rax, qword [r8 + 1] ; num1
  6246 00004630 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  6247 00004634 4899                            cqo
  6248 00004636 48F7EB                          imul rbx
  6249 00004639 4889C6                          mov rsi, rax
  6250 0000463C 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  6251 00004640 498B5901                        mov rbx, qword [r9 + 1] ; num2
  6252 00004644 4899                            cqo
  6253 00004646 48F7EB                          imul rbx
  6254 00004649 4889C7                          mov rdi, rax
  6255 0000464C E804000000                      call normalize_fraction
  6256 00004651 C9                              leave
  6257 00004652 C22000                          ret AND_KILL_FRAME(2)
  6258                                          
  6259                                  normalize_fraction:
  6260 00004655 56                              push rsi
  6261 00004656 57                              push rdi
  6262 00004657 E859000000                      call gcd
  6263 0000465C 4889C3                          mov rbx, rax
  6264 0000465F 58                              pop rax
  6265 00004660 4899                            cqo
  6266 00004662 48F7FB                          idiv rbx
  6267 00004665 4989C0                          mov r8, rax
  6268 00004668 58                              pop rax
  6269 00004669 4899                            cqo
  6270 0000466B 48F7FB                          idiv rbx
  6271 0000466E 4989C1                          mov r9, rax
  6272 00004671 4983F900                        cmp r9, 0
  6273 00004675 741C                            je .L_zero
  6274 00004677 4983F801                        cmp r8, 1
  6275 0000467B 7421                            je .L_int
  6276 0000467D BF11000000                      mov rdi, (1 + 8 + 8)
  6277 00004682 E81EEBFFFF                      call malloc
  6278 00004687 C60012                          mov byte [rax], T_fraction
  6279 0000468A 4C894801                        mov qword [rax + 1], r9
  6280 0000468E 4C894009                        mov qword [rax + 1 + 8], r8
  6281 00004692 C3                              ret
  6282                                  .L_zero:
  6283 00004693 BF00000000                      mov rdi, 0
  6284 00004698 E831070000                      call make_integer
  6285 0000469D C3                              ret
  6286                                  .L_int:
  6287 0000469E 4C89CF                          mov rdi, r9
  6288 000046A1 E828070000                      call make_integer
  6289 000046A6 C3                              ret
  6290                                  
  6291                                  iabs:
  6292 000046A7 4889F8                          mov rax, rdi
  6293 000046AA 4883F800                        cmp rax, 0
  6294 000046AE 7C01                            jl .Lneg
  6295 000046B0 C3                              ret
  6296                                  .Lneg:
  6297 000046B1 48F7D8                          neg rax
  6298 000046B4 C3                              ret
  6299                                  
  6300                                  gcd:
  6301 000046B5 E8EDFFFFFF                      call iabs
  6302 000046BA 4889C3                          mov rbx, rax
  6303 000046BD 4889F7                          mov rdi, rsi
  6304 000046C0 E8E2FFFFFF                      call iabs
  6305 000046C5 4883F800                        cmp rax, 0
  6306 000046C9 7502                            jne .L0
  6307 000046CB 4893                            xchg rax, rbx
  6308                                  .L0:
  6309 000046CD 4883FB00                        cmp rbx, 0
  6310 000046D1 740C                            je .L1
  6311 000046D3 4899                            cqo
  6312 000046D5 48F7F3                          div rbx
  6313 000046D8 4889D0                          mov rax, rdx
  6314 000046DB 4893                            xchg rax, rbx
  6315 000046DD EBEE                            jmp .L0
  6316                                  .L1:
  6317 000046DF C3                              ret
  6318                                  
  6319                                  L_code_ptr_error:
  6320 000046E0 C8000000                        enter 0, 0
  6321 000046E4 48837D1802                      cmp COUNT, 2
  6322 000046E9 0F85C5070000                    jne L_error_arg_count_2
  6323 000046EF 488B7520                        mov rsi, PARAM(0)
  6324                                          assert_interned_symbol(rsi)
    53 000046F3 803E41              <1>  cmp byte [%1], %2
    54 000046F6 0F8557080000        <1>  jne L_error_incorrect_type
  6325 000046FC 488B7528                        mov rsi, PARAM(1)
  6326                                          assert_string(rsi)
    53 00004700 803E03              <1>  cmp byte [%1], %2
    54 00004703 0F854A080000        <1>  jne L_error_incorrect_type
  6327 00004709 48BF-                           mov rdi, fmt_scheme_error_part_1
  6327 0000470B [EE0E000000000000] 
  6328 00004713 B800000000                      mov rax, 0
  6329                                          ENTER
    44 00004718 C8000000            <1>  enter 0, 0
    45 0000471C 4883E4F0            <1>  and rsp, ~15
  6330 00004720 E8(00000000)                    call printf
  6331                                          LEAVE
    49 00004725 C9                  <1>  leave
  6332 00004726 488B7D20                        mov rdi, PARAM(0)
  6333 0000472A E8F7ECFFFF                      call print_sexpr
  6334 0000472F 48BF-                           mov rdi, fmt_scheme_error_part_2
  6334 00004731 [020F000000000000] 
  6335 00004739 B800000000                      mov rax, 0
  6336                                          ENTER
    44 0000473E C8000000            <1>  enter 0, 0
    45 00004742 4883E4F0            <1>  and rsp, ~15
  6337 00004746 E8(00000000)                    call printf
  6338                                          LEAVE
    49 0000474B C9                  <1>  leave
  6339 0000474C 488B4528                        mov rax, PARAM(1)       ; sob_string
  6340 00004750 BE01000000                      mov rsi, 1              ; size = 1 byte
  6341 00004755 488B5001                        mov rdx, qword [rax + 1] ; length
  6342 00004759 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  6343 0000475D 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  6344                                  	ENTER
    44 00004765 C8000000            <1>  enter 0, 0
    45 00004769 4883E4F0            <1>  and rsp, ~15
  6345 0000476D E8(00000000)                    call fwrite
  6346                                  	LEAVE
    49 00004772 C9                  <1>  leave
  6347 00004773 48BF-                           mov rdi, fmt_scheme_error_part_3
  6347 00004775 [440F000000000000] 
  6348 0000477D B800000000                      mov rax, 0
  6349                                          ENTER
    44 00004782 C8000000            <1>  enter 0, 0
    45 00004786 4883E4F0            <1>  and rsp, ~15
  6350 0000478A E8(00000000)                    call printf
  6351                                          LEAVE
    49 0000478F C9                  <1>  leave
  6352 00004790 48C7C0F7FFFFFF                  mov rax, -9
  6353 00004797 E8(00000000)                    call exit
  6354                                  
  6355                                  L_code_ptr_raw_less_than_rr:
  6356 0000479C C8000000                        enter 0, 0
  6357 000047A0 48837D1802                      cmp COUNT, 2
  6358 000047A5 0F8509070000                    jne L_error_arg_count_2
  6359 000047AB 488B7520                        mov rsi, PARAM(0)
  6360                                          assert_real(rsi)
    53 000047AF 803E13              <1>  cmp byte [%1], %2
    54 000047B2 0F859B070000        <1>  jne L_error_incorrect_type
  6361 000047B8 488B7D28                        mov rdi, PARAM(1)
  6362                                          assert_real(rdi)
    53 000047BC 803F13              <1>  cmp byte [%1], %2
    54 000047BF 0F858E070000        <1>  jne L_error_incorrect_type
  6363 000047C5 F20F104601                      movsd xmm0, qword [rsi + 1]
  6364 000047CA F20F104F01                      movsd xmm1, qword [rdi + 1]
  6365 000047CF 660F2FC1                        comisd xmm0, xmm1
  6366 000047D3 730C                            jae .L_false
  6367 000047D5 48B8-                           mov rax, sob_boolean_true
  6367 000047D7 [0300000000000000] 
  6368 000047DF EB0A                            jmp .L_exit
  6369                                  .L_false:
  6370 000047E1 48B8-                           mov rax, sob_boolean_false
  6370 000047E3 [0200000000000000] 
  6371                                  .L_exit:
  6372 000047EB C9                              leave
  6373 000047EC C22000                          ret AND_KILL_FRAME(2)
  6374                                          
  6375                                  L_code_ptr_raw_less_than_zz:
  6376 000047EF C8000000                	enter 0, 0
  6377 000047F3 48837D1802              	cmp COUNT, 2
  6378 000047F8 0F85B6060000            	jne L_error_arg_count_2
  6379 000047FE 4C8B4520                	mov r8, PARAM(0)
  6380                                  	assert_integer(r8)
    53 00004802 41803811            <1>  cmp byte [%1], %2
    54 00004806 0F8547070000        <1>  jne L_error_incorrect_type
  6381 0000480C 4C8B4D28                	mov r9, PARAM(1)
  6382                                  	assert_integer(r9)
    53 00004810 41803911            <1>  cmp byte [%1], %2
    54 00004814 0F8539070000        <1>  jne L_error_incorrect_type
  6383 0000481A 498B7801                	mov rdi, qword [r8 + 1]
  6384 0000481E 493B7901                	cmp rdi, qword [r9 + 1]
  6385 00004822 7D0C                    	jge .L_false
  6386 00004824 48B8-                   	mov rax, sob_boolean_true
  6386 00004826 [0300000000000000] 
  6387 0000482E EB0A                    	jmp .L_exit
  6388                                  .L_false:
  6389 00004830 48B8-                   	mov rax, sob_boolean_false
  6389 00004832 [0200000000000000] 
  6390                                  .L_exit:
  6391 0000483A C9                      	leave
  6392 0000483B C22000                  	ret AND_KILL_FRAME(2)
  6393                                  
  6394                                  L_code_ptr_raw_less_than_qq:
  6395 0000483E C8000000                        enter 0, 0
  6396 00004842 48837D1802                      cmp COUNT, 2
  6397 00004847 0F8567060000                    jne L_error_arg_count_2
  6398 0000484D 488B7520                        mov rsi, PARAM(0)
  6399                                          assert_fraction(rsi)
    53 00004851 803E12              <1>  cmp byte [%1], %2
    54 00004854 0F85F9060000        <1>  jne L_error_incorrect_type
  6400 0000485A 488B7D28                        mov rdi, PARAM(1)
  6401                                          assert_fraction(rdi)
    53 0000485E 803F12              <1>  cmp byte [%1], %2
    54 00004861 0F85EC060000        <1>  jne L_error_incorrect_type
  6402 00004867 488B4601                        mov rax, qword [rsi + 1] ; num1
  6403 0000486B 4899                            cqo
  6404 0000486D 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  6405 00004871 4889C1                          mov rcx, rax
  6406 00004874 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  6407 00004878 4899                            cqo
  6408 0000487A 48F76F01                        imul qword [rdi + 1]          ; num2
  6409 0000487E 4829C1                          sub rcx, rax
  6410 00004881 7D0C                            jge .L_false
  6411 00004883 48B8-                           mov rax, sob_boolean_true
  6411 00004885 [0300000000000000] 
  6412 0000488D EB0A                            jmp .L_exit
  6413                                  .L_false:
  6414 0000488F 48B8-                           mov rax, sob_boolean_false
  6414 00004891 [0200000000000000] 
  6415                                  .L_exit:
  6416 00004899 C9                              leave
  6417 0000489A C22000                          ret AND_KILL_FRAME(2)
  6418                                  
  6419                                  L_code_ptr_raw_equal_rr:
  6420 0000489D C8000000                        enter 0, 0
  6421 000048A1 48837D1802                      cmp COUNT, 2
  6422 000048A6 0F8508060000                    jne L_error_arg_count_2
  6423 000048AC 488B7520                        mov rsi, PARAM(0)
  6424                                          assert_real(rsi)
    53 000048B0 803E13              <1>  cmp byte [%1], %2
    54 000048B3 0F859A060000        <1>  jne L_error_incorrect_type
  6425 000048B9 488B7D28                        mov rdi, PARAM(1)
  6426                                          assert_real(rdi)
    53 000048BD 803F13              <1>  cmp byte [%1], %2
    54 000048C0 0F858D060000        <1>  jne L_error_incorrect_type
  6427 000048C6 F20F104601                      movsd xmm0, qword [rsi + 1]
  6428 000048CB F20F104F01                      movsd xmm1, qword [rdi + 1]
  6429 000048D0 660F2FC1                        comisd xmm0, xmm1
  6430 000048D4 750C                            jne .L_false
  6431 000048D6 48B8-                           mov rax, sob_boolean_true
  6431 000048D8 [0300000000000000] 
  6432 000048E0 EB0A                            jmp .L_exit
  6433                                  .L_false:
  6434 000048E2 48B8-                           mov rax, sob_boolean_false
  6434 000048E4 [0200000000000000] 
  6435                                  .L_exit:
  6436 000048EC C9                              leave
  6437 000048ED C22000                          ret AND_KILL_FRAME(2)
  6438                                          
  6439                                  L_code_ptr_raw_equal_zz:
  6440 000048F0 C8000000                	enter 0, 0
  6441 000048F4 48837D1802              	cmp COUNT, 2
  6442 000048F9 0F85B5050000            	jne L_error_arg_count_2
  6443 000048FF 4C8B4520                	mov r8, PARAM(0)
  6444                                  	assert_integer(r8)
    53 00004903 41803811            <1>  cmp byte [%1], %2
    54 00004907 0F8546060000        <1>  jne L_error_incorrect_type
  6445 0000490D 4C8B4D28                	mov r9, PARAM(1)
  6446                                  	assert_integer(r9)
    53 00004911 41803911            <1>  cmp byte [%1], %2
    54 00004915 0F8538060000        <1>  jne L_error_incorrect_type
  6447 0000491B 498B7801                	mov rdi, qword [r8 + 1]
  6448 0000491F 493B7901                	cmp rdi, qword [r9 + 1]
  6449 00004923 750C                    	jne .L_false
  6450 00004925 48B8-                   	mov rax, sob_boolean_true
  6450 00004927 [0300000000000000] 
  6451 0000492F EB0A                    	jmp .L_exit
  6452                                  .L_false:
  6453 00004931 48B8-                   	mov rax, sob_boolean_false
  6453 00004933 [0200000000000000] 
  6454                                  .L_exit:
  6455 0000493B C9                      	leave
  6456 0000493C C22000                  	ret AND_KILL_FRAME(2)
  6457                                  
  6458                                  L_code_ptr_raw_equal_qq:
  6459 0000493F C8000000                        enter 0, 0
  6460 00004943 48837D1802                      cmp COUNT, 2
  6461 00004948 0F8566050000                    jne L_error_arg_count_2
  6462 0000494E 488B7520                        mov rsi, PARAM(0)
  6463                                          assert_fraction(rsi)
    53 00004952 803E12              <1>  cmp byte [%1], %2
    54 00004955 0F85F8050000        <1>  jne L_error_incorrect_type
  6464 0000495B 488B7D28                        mov rdi, PARAM(1)
  6465                                          assert_fraction(rdi)
    53 0000495F 803F12              <1>  cmp byte [%1], %2
    54 00004962 0F85EB050000        <1>  jne L_error_incorrect_type
  6466 00004968 488B4601                        mov rax, qword [rsi + 1] ; num1
  6467 0000496C 4899                            cqo
  6468 0000496E 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  6469 00004972 4889C1                          mov rcx, rax
  6470 00004975 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  6471 00004979 4899                            cqo
  6472 0000497B 48F76F01                        imul qword [rdi + 1]          ; num2
  6473 0000497F 4829C1                          sub rcx, rax
  6474 00004982 750C                            jne .L_false
  6475 00004984 48B8-                           mov rax, sob_boolean_true
  6475 00004986 [0300000000000000] 
  6476 0000498E EB0A                            jmp .L_exit
  6477                                  .L_false:
  6478 00004990 48B8-                           mov rax, sob_boolean_false
  6478 00004992 [0200000000000000] 
  6479                                  .L_exit:
  6480 0000499A C9                              leave
  6481 0000499B C22000                          ret AND_KILL_FRAME(2)
  6482                                  
  6483                                  L_code_ptr_quotient:
  6484 0000499E C8000000                        enter 0, 0
  6485 000049A2 48837D1802                      cmp COUNT, 2
  6486 000049A7 0F8507050000                    jne L_error_arg_count_2
  6487 000049AD 488B7520                        mov rsi, PARAM(0)
  6488                                          assert_integer(rsi)
    53 000049B1 803E11              <1>  cmp byte [%1], %2
    54 000049B4 0F8599050000        <1>  jne L_error_incorrect_type
  6489 000049BA 488B7D28                        mov rdi, PARAM(1)
  6490                                          assert_integer(rdi)
    53 000049BE 803F11              <1>  cmp byte [%1], %2
    54 000049C1 0F858C050000        <1>  jne L_error_incorrect_type
  6491 000049C7 488B4601                        mov rax, qword [rsi + 1]
  6492 000049CB 488B5F01                        mov rbx, qword [rdi + 1]
  6493 000049CF 4883FB00                        cmp rbx, 0
  6494 000049D3 0F84AB050000                    je L_error_division_by_zero
  6495 000049D9 4899                            cqo
  6496 000049DB 48F7FB                          idiv rbx
  6497 000049DE 4889C7                          mov rdi, rax
  6498 000049E1 E8E8030000                      call make_integer
  6499 000049E6 C9                              leave
  6500 000049E7 C22000                          ret AND_KILL_FRAME(2)
  6501                                          
  6502                                  L_code_ptr_remainder:
  6503 000049EA C8000000                        enter 0, 0
  6504 000049EE 48837D1802                      cmp COUNT, 2
  6505 000049F3 0F85BB040000                    jne L_error_arg_count_2
  6506 000049F9 488B7520                        mov rsi, PARAM(0)
  6507                                          assert_integer(rsi)
    53 000049FD 803E11              <1>  cmp byte [%1], %2
    54 00004A00 0F854D050000        <1>  jne L_error_incorrect_type
  6508 00004A06 488B7D28                        mov rdi, PARAM(1)
  6509                                          assert_integer(rdi)
    53 00004A0A 803F11              <1>  cmp byte [%1], %2
    54 00004A0D 0F8540050000        <1>  jne L_error_incorrect_type
  6510 00004A13 488B4601                        mov rax, qword [rsi + 1]
  6511 00004A17 488B5F01                        mov rbx, qword [rdi + 1]
  6512 00004A1B 4883FB00                        cmp rbx, 0
  6513 00004A1F 0F845F050000                    je L_error_division_by_zero
  6514 00004A25 4899                            cqo
  6515 00004A27 48F7FB                          idiv rbx
  6516 00004A2A 4889D7                          mov rdi, rdx
  6517 00004A2D E89C030000                      call make_integer
  6518 00004A32 C9                              leave
  6519 00004A33 C22000                          ret AND_KILL_FRAME(2)
  6520                                  
  6521                                  L_code_ptr_set_car:
  6522 00004A36 C8000000                        enter 0, 0
  6523 00004A3A 48837D1802                      cmp COUNT, 2
  6524 00004A3F 0F856F040000                    jne L_error_arg_count_2
  6525 00004A45 488B4520                        mov rax, PARAM(0)
  6526                                          assert_pair(rax)
    53 00004A49 803821              <1>  cmp byte [%1], %2
    54 00004A4C 0F8501050000        <1>  jne L_error_incorrect_type
  6527 00004A52 488B5D28                        mov rbx, PARAM(1)
  6528 00004A56 48895801                        mov SOB_PAIR_CAR(rax), rbx
  6529 00004A5A 48B8-                           mov rax, sob_void
  6529 00004A5C [0000000000000000] 
  6530 00004A64 C9                              leave
  6531 00004A65 C22000                          ret AND_KILL_FRAME(2)
  6532                                  
  6533                                  L_code_ptr_set_cdr:
  6534 00004A68 C8000000                        enter 0, 0
  6535 00004A6C 48837D1802                      cmp COUNT, 2
  6536 00004A71 0F853D040000                    jne L_error_arg_count_2
  6537 00004A77 488B4520                        mov rax, PARAM(0)
  6538                                          assert_pair(rax)
    53 00004A7B 803821              <1>  cmp byte [%1], %2
    54 00004A7E 0F85CF040000        <1>  jne L_error_incorrect_type
  6539 00004A84 488B5D28                        mov rbx, PARAM(1)
  6540 00004A88 48895809                        mov SOB_PAIR_CDR(rax), rbx
  6541 00004A8C 48B8-                           mov rax, sob_void
  6541 00004A8E [0000000000000000] 
  6542 00004A96 C9                              leave
  6543 00004A97 C22000                          ret AND_KILL_FRAME(2)
  6544                                  
  6545                                  L_code_ptr_string_ref:
  6546 00004A9A C8000000                        enter 0, 0
  6547 00004A9E 48837D1802                      cmp COUNT, 2
  6548 00004AA3 0F850B040000                    jne L_error_arg_count_2
  6549 00004AA9 488B7D20                        mov rdi, PARAM(0)
  6550                                          assert_string(rdi)
    53 00004AAD 803F03              <1>  cmp byte [%1], %2
    54 00004AB0 0F859D040000        <1>  jne L_error_incorrect_type
  6551 00004AB6 488B7528                        mov rsi, PARAM(1)
  6552                                          assert_integer(rsi)
    53 00004ABA 803E11              <1>  cmp byte [%1], %2
    54 00004ABD 0F8590040000        <1>  jne L_error_incorrect_type
  6553 00004AC3 488B5701                        mov rdx, qword [rdi + 1]
  6554 00004AC7 488B4E01                        mov rcx, qword [rsi + 1]
  6555 00004ACB 4839D1                          cmp rcx, rdx
  6556 00004ACE 0F8D14030000                    jge L_error_integer_range
  6557 00004AD4 4883F900                        cmp rcx, 0
  6558 00004AD8 0F8C0A030000                    jl L_error_integer_range
  6559 00004ADE 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  6560 00004AE2 BF02000000                      mov rdi, 2
  6561 00004AE7 E8B9E6FFFF                      call malloc
  6562 00004AEC C60002                          mov byte [rax], T_char
  6563 00004AEF 885801                          mov byte [rax + 1], bl
  6564 00004AF2 C9                              leave
  6565 00004AF3 C22000                          ret AND_KILL_FRAME(2)
  6566                                  
  6567                                  L_code_ptr_vector_ref:
  6568 00004AF6 C8000000                        enter 0, 0
  6569 00004AFA 48837D1802                      cmp COUNT, 2
  6570 00004AFF 0F85AF030000                    jne L_error_arg_count_2
  6571 00004B05 488B7D20                        mov rdi, PARAM(0)
  6572                                          assert_vector(rdi)
    53 00004B09 803F22              <1>  cmp byte [%1], %2
    54 00004B0C 0F8541040000        <1>  jne L_error_incorrect_type
  6573 00004B12 488B7528                        mov rsi, PARAM(1)
  6574                                          assert_integer(rsi)
    53 00004B16 803E11              <1>  cmp byte [%1], %2
    54 00004B19 0F8534040000        <1>  jne L_error_incorrect_type
  6575 00004B1F 488B5701                        mov rdx, qword [rdi + 1]
  6576 00004B23 488B4E01                        mov rcx, qword [rsi + 1]
  6577 00004B27 4839D1                          cmp rcx, rdx
  6578 00004B2A 0F8DB8020000                    jge L_error_integer_range
  6579 00004B30 4883F900                        cmp rcx, 0
  6580 00004B34 0F8CAE020000                    jl L_error_integer_range
  6581 00004B3A 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  6582 00004B3F C9                              leave
  6583 00004B40 C22000                          ret AND_KILL_FRAME(2)
  6584                                  
  6585                                  L_code_ptr_vector_set:
  6586 00004B43 C8000000                        enter 0, 0
  6587 00004B47 48837D1803                      cmp COUNT, 3
  6588 00004B4C 0F85CC030000                    jne L_error_arg_count_3
  6589 00004B52 488B7D20                        mov rdi, PARAM(0)
  6590                                          assert_vector(rdi)
    53 00004B56 803F22              <1>  cmp byte [%1], %2
    54 00004B59 0F85F4030000        <1>  jne L_error_incorrect_type
  6591 00004B5F 488B7528                        mov rsi, PARAM(1)
  6592                                          assert_integer(rsi)
    53 00004B63 803E11              <1>  cmp byte [%1], %2
    54 00004B66 0F85E7030000        <1>  jne L_error_incorrect_type
  6593 00004B6C 488B5701                        mov rdx, qword [rdi + 1]
  6594 00004B70 488B4E01                        mov rcx, qword [rsi + 1]
  6595 00004B74 4839D1                          cmp rcx, rdx
  6596 00004B77 0F8D6B020000                    jge L_error_integer_range
  6597 00004B7D 4883F900                        cmp rcx, 0
  6598 00004B81 0F8C61020000                    jl L_error_integer_range
  6599 00004B87 488B4530                        mov rax, PARAM(2)
  6600 00004B8B 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  6601 00004B90 48B8-                           mov rax, sob_void
  6601 00004B92 [0000000000000000] 
  6602 00004B9A C9                              leave
  6603 00004B9B C22800                          ret AND_KILL_FRAME(3)
  6604                                  
  6605                                  L_code_ptr_string_set:
  6606 00004B9E C8000000                        enter 0, 0
  6607 00004BA2 48837D1803                      cmp COUNT, 3
  6608 00004BA7 0F8571030000                    jne L_error_arg_count_3
  6609 00004BAD 488B7D20                        mov rdi, PARAM(0)
  6610                                          assert_string(rdi)
    53 00004BB1 803F03              <1>  cmp byte [%1], %2
    54 00004BB4 0F8599030000        <1>  jne L_error_incorrect_type
  6611 00004BBA 488B7528                        mov rsi, PARAM(1)
  6612                                          assert_integer(rsi)
    53 00004BBE 803E11              <1>  cmp byte [%1], %2
    54 00004BC1 0F858C030000        <1>  jne L_error_incorrect_type
  6613 00004BC7 488B5701                        mov rdx, qword [rdi + 1]
  6614 00004BCB 488B4E01                        mov rcx, qword [rsi + 1]
  6615 00004BCF 4839D1                          cmp rcx, rdx
  6616 00004BD2 0F8D10020000                    jge L_error_integer_range
  6617 00004BD8 4883F900                        cmp rcx, 0
  6618 00004BDC 0F8C06020000                    jl L_error_integer_range
  6619 00004BE2 488B4530                        mov rax, PARAM(2)
  6620                                          assert_char(rax)
    53 00004BE6 803802              <1>  cmp byte [%1], %2
    54 00004BE9 0F8564030000        <1>  jne L_error_incorrect_type
  6621 00004BEF 8A4001                          mov al, byte [rax + 1]
  6622 00004BF2 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  6623 00004BF6 48B8-                           mov rax, sob_void
  6623 00004BF8 [0000000000000000] 
  6624 00004C00 C9                              leave
  6625 00004C01 C22800                          ret AND_KILL_FRAME(3)
  6626                                  
  6627                                  L_code_ptr_make_vector:
  6628 00004C04 C8000000                        enter 0, 0
  6629 00004C08 48837D1802                      cmp COUNT, 2
  6630 00004C0D 0F85A1020000                    jne L_error_arg_count_2
  6631 00004C13 488B4D20                        mov rcx, PARAM(0)
  6632                                          assert_integer(rcx)
    53 00004C17 803911              <1>  cmp byte [%1], %2
    54 00004C1A 0F8533030000        <1>  jne L_error_incorrect_type
  6633 00004C20 488B4901                        mov rcx, qword [rcx + 1]
  6634 00004C24 4883F900                        cmp rcx, 0
  6635 00004C28 0F8CBA010000                    jl L_error_integer_range
  6636 00004C2E 488B5528                        mov rdx, PARAM(1)
  6637 00004C32 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  6638 00004C3A E866E5FFFF                      call malloc
  6639 00004C3F C60022                          mov byte [rax], T_vector
  6640 00004C42 48894801                        mov qword [rax + 1], rcx
  6641 00004C46 41B800000000                    mov r8, 0
  6642                                  .L0:
  6643 00004C4C 4939C8                          cmp r8, rcx
  6644 00004C4F 740A                            je .L1
  6645 00004C51 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  6646 00004C56 49FFC0                          inc r8
  6647 00004C59 EBF1                            jmp .L0
  6648                                  .L1:
  6649 00004C5B C9                              leave
  6650 00004C5C C22000                          ret AND_KILL_FRAME(2)
  6651                                          
  6652                                  L_code_ptr_make_string:
  6653 00004C5F C8000000                        enter 0, 0
  6654 00004C63 48837D1802                      cmp COUNT, 2
  6655 00004C68 0F8546020000                    jne L_error_arg_count_2
  6656 00004C6E 488B4D20                        mov rcx, PARAM(0)
  6657                                          assert_integer(rcx)
    53 00004C72 803911              <1>  cmp byte [%1], %2
    54 00004C75 0F85D8020000        <1>  jne L_error_incorrect_type
  6658 00004C7B 488B4901                        mov rcx, qword [rcx + 1]
  6659 00004C7F 4883F900                        cmp rcx, 0
  6660 00004C83 0F8C5F010000                    jl L_error_integer_range
  6661 00004C89 488B5528                        mov rdx, PARAM(1)
  6662                                          assert_char(rdx)
    53 00004C8D 803A02              <1>  cmp byte [%1], %2
    54 00004C90 0F85BD020000        <1>  jne L_error_incorrect_type
  6663 00004C96 8A5201                          mov dl, byte [rdx + 1]
  6664 00004C99 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  6665 00004C9D E803E5FFFF                      call malloc
  6666 00004CA2 C60003                          mov byte [rax], T_string
  6667 00004CA5 48894801                        mov qword [rax + 1], rcx
  6668 00004CA9 41B800000000                    mov r8, 0
  6669                                  .L0:
  6670 00004CAF 4939C8                          cmp r8, rcx
  6671 00004CB2 740A                            je .L1
  6672 00004CB4 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  6673 00004CB9 49FFC0                          inc r8
  6674 00004CBC EBF1                            jmp .L0
  6675                                  .L1:
  6676 00004CBE C9                              leave
  6677 00004CBF C22000                          ret AND_KILL_FRAME(2)
  6678                                  
  6679                                  L_code_ptr_numerator:
  6680 00004CC2 C8000000                        enter 0, 0
  6681 00004CC6 48837D1801                      cmp COUNT, 1
  6682 00004CCB 0F85AE010000                    jne L_error_arg_count_1
  6683 00004CD1 488B4520                        mov rax, PARAM(0)
  6684                                          assert_fraction(rax)
    53 00004CD5 803812              <1>  cmp byte [%1], %2
    54 00004CD8 0F8575020000        <1>  jne L_error_incorrect_type
  6685 00004CDE 488B7801                        mov rdi, qword [rax + 1]
  6686 00004CE2 E8E7000000                      call make_integer
  6687 00004CE7 C9                              leave
  6688 00004CE8 C21800                          ret AND_KILL_FRAME(1)
  6689                                          
  6690                                  L_code_ptr_denominator:
  6691 00004CEB C8000000                        enter 0, 0
  6692 00004CEF 48837D1801                      cmp COUNT, 1
  6693 00004CF4 0F8585010000                    jne L_error_arg_count_1
  6694 00004CFA 488B4520                        mov rax, PARAM(0)
  6695                                          assert_fraction(rax)
    53 00004CFE 803812              <1>  cmp byte [%1], %2
    54 00004D01 0F854C020000        <1>  jne L_error_incorrect_type
  6696 00004D07 488B7809                        mov rdi, qword [rax + 1 + 8]
  6697 00004D0B E8BE000000                      call make_integer
  6698 00004D10 C9                              leave
  6699 00004D11 C21800                          ret AND_KILL_FRAME(1)
  6700                                  
  6701                                  L_code_ptr_is_eq:
  6702 00004D14 C8000000                	enter 0, 0
  6703 00004D18 48837D1802              	cmp COUNT, 2
  6704 00004D1D 0F8591010000            	jne L_error_arg_count_2
  6705 00004D23 488B7D20                	mov rdi, PARAM(0)
  6706 00004D27 488B7528                	mov rsi, PARAM(1)
  6707 00004D2B 4839F7                  	cmp rdi, rsi
  6708 00004D2E 746C                    	je .L_eq_true
  6709 00004D30 8A17                    	mov dl, byte [rdi]
  6710 00004D32 3A16                    	cmp dl, byte [rsi]
  6711 00004D34 7572                    	jne .L_eq_false
  6712 00004D36 80FA02                  	cmp dl, T_char
  6713 00004D39 7459                    	je .L_char
  6714 00004D3B 80FA41                  	cmp dl, T_interned_symbol
  6715 00004D3E 7440                    	je .L_interned_symbol
  6716 00004D40 80FA42                          cmp dl, T_uninterned_symbol
  6717 00004D43 7443                            je .L_uninterned_symbol
  6718 00004D45 80FA13                  	cmp dl, T_real
  6719 00004D48 742E                    	je .L_real
  6720 00004D4A 80FA12                  	cmp dl, T_fraction
  6721 00004D4D 7413                    	je .L_fraction
  6722 00004D4F 80FA11                          cmp dl, T_integer
  6723 00004D52 7402                            je .L_integer
  6724 00004D54 EB52                    	jmp .L_eq_false
  6725                                  .L_integer:
  6726 00004D56 488B4601                        mov rax, qword [rsi + 1]
  6727 00004D5A 483B4701                        cmp rax, qword [rdi + 1]
  6728 00004D5E 7548                            jne .L_eq_false
  6729 00004D60 EB3A                            jmp .L_eq_true
  6730                                  .L_fraction:
  6731 00004D62 488B4601                	mov rax, qword [rsi + 1]
  6732 00004D66 483B4701                	cmp rax, qword [rdi + 1]
  6733 00004D6A 753C                    	jne .L_eq_false
  6734 00004D6C 488B4609                	mov rax, qword [rsi + 1 + 8]
  6735 00004D70 483B4709                	cmp rax, qword [rdi + 1 + 8]
  6736 00004D74 7532                    	jne .L_eq_false
  6737 00004D76 EB24                    	jmp .L_eq_true
  6738                                  .L_real:
  6739 00004D78 488B4601                	mov rax, qword [rsi + 1]
  6740 00004D7C 483B4701                	cmp rax, qword [rdi + 1]
  6741                                  .L_interned_symbol:
  6742                                  	; never reached, because interned_symbols are static!
  6743                                  	; but I'm keeping it in case, I'll ever change
  6744                                  	; the implementation
  6745 00004D80 488B4601                	mov rax, qword [rsi + 1]
  6746 00004D84 483B4701                	cmp rax, qword [rdi + 1]
  6747                                  .L_uninterned_symbol:
  6748 00004D88 4C8B4701                        mov r8, qword [rdi + 1]
  6749 00004D8C 4C3B4601                        cmp r8, qword [rsi + 1]
  6750 00004D90 7516                            jne .L_eq_false
  6751 00004D92 EB08                            jmp .L_eq_true
  6752                                  .L_char:
  6753 00004D94 8A5E01                  	mov bl, byte [rsi + 1]
  6754 00004D97 3A5F01                  	cmp bl, byte [rdi + 1]
  6755 00004D9A 750C                    	jne .L_eq_false
  6756                                  .L_eq_true:
  6757 00004D9C 48B8-                   	mov rax, sob_boolean_true
  6757 00004D9E [0300000000000000] 
  6758 00004DA6 EB0A                    	jmp .L_eq_exit
  6759                                  .L_eq_false:
  6760 00004DA8 48B8-                   	mov rax, sob_boolean_false
  6760 00004DAA [0200000000000000] 
  6761                                  .L_eq_exit:
  6762 00004DB2 C9                      	leave
  6763 00004DB3 C22000                  	ret AND_KILL_FRAME(2)
  6764                                  
  6765                                  make_real:
  6766 00004DB6 C8000000                        enter 0, 0
  6767 00004DBA BF09000000                      mov rdi, (1 + 8)
  6768 00004DBF E8E1E3FFFF                      call malloc
  6769 00004DC4 C60013                          mov byte [rax], T_real
  6770 00004DC7 F20F114001                      movsd qword [rax + 1], xmm0
  6771 00004DCC C9                              leave 
  6772 00004DCD C3                              ret
  6773                                          
  6774                                  make_integer:
  6775 00004DCE C8000000                        enter 0, 0
  6776 00004DD2 4889FE                          mov rsi, rdi
  6777 00004DD5 BF09000000                      mov rdi, (1 + 8)
  6778 00004DDA E8C6E3FFFF                      call malloc
  6779 00004DDF C60011                          mov byte [rax], T_integer
  6780 00004DE2 48897001                        mov qword [rax + 1], rsi
  6781 00004DE6 C9                              leave
  6782 00004DE7 C3                              ret
  6783                                          
  6784                                  L_error_integer_range:
  6785 00004DE8 488B3C25[00000000]              mov rdi, qword [stderr]
  6786 00004DF0 48BE-                           mov rsi, fmt_integer_range
  6786 00004DF2 [BB0E000000000000] 
  6787 00004DFA B800000000                      mov rax, 0
  6788                                          ENTER
    44 00004DFF C8000000            <1>  enter 0, 0
    45 00004E03 4883E4F0            <1>  and rsp, ~15
  6789 00004E07 E8(00000000)                    call fprintf
  6790                                          LEAVE
    49 00004E0C C9                  <1>  leave
  6791 00004E0D 48C7C0FBFFFFFF                  mov rax, -5
  6792 00004E14 E8(00000000)                    call exit
  6793                                  
  6794                                  L_error_arg_negative:
  6795 00004E19 488B3C25[00000000]              mov rdi, qword [stderr]
  6796 00004E21 48BE-                           mov rsi, fmt_arg_negative
  6796 00004E23 [930D000000000000] 
  6797 00004E2B B800000000                      mov rax, 0
  6798                                          ENTER
    44 00004E30 C8000000            <1>  enter 0, 0
    45 00004E34 4883E4F0            <1>  and rsp, ~15
  6799 00004E38 E8(00000000)                    call fprintf
  6800                                          LEAVE
    49 00004E3D C9                  <1>  leave
  6801 00004E3E 48C7C0FDFFFFFF                  mov rax, -3
  6802 00004E45 E8(00000000)                    call exit
  6803                                  
  6804                                  L_error_arg_count_0:
  6805 00004E4A 488B3C25[00000000]              mov rdi, qword [stderr]
  6806 00004E52 48BE-                           mov rsi, fmt_arg_count_0
  6806 00004E54 [B90D000000000000] 
  6807 00004E5C 488B5518                        mov rdx, COUNT
  6808 00004E60 B800000000                      mov rax, 0
  6809                                          ENTER
    44 00004E65 C8000000            <1>  enter 0, 0
    45 00004E69 4883E4F0            <1>  and rsp, ~15
  6810 00004E6D E8(00000000)                    call fprintf
  6811                                          LEAVE
    49 00004E72 C9                  <1>  leave
  6812 00004E73 48C7C0FDFFFFFF                  mov rax, -3
  6813 00004E7A E8(00000000)                    call exit
  6814                                  
  6815                                  L_error_arg_count_1:
  6816 00004E7F 488B3C25[00000000]              mov rdi, qword [stderr]
  6817 00004E87 48BE-                           mov rsi, fmt_arg_count_1
  6817 00004E89 [E10D000000000000] 
  6818 00004E91 488B5518                        mov rdx, COUNT
  6819 00004E95 B800000000                      mov rax, 0
  6820                                          ENTER
    44 00004E9A C8000000            <1>  enter 0, 0
    45 00004E9E 4883E4F0            <1>  and rsp, ~15
  6821 00004EA2 E8(00000000)                    call fprintf
  6822                                          LEAVE
    49 00004EA7 C9                  <1>  leave
  6823 00004EA8 48C7C0FDFFFFFF                  mov rax, -3
  6824 00004EAF E8(00000000)                    call exit
  6825                                  
  6826                                  L_error_arg_count_2:
  6827 00004EB4 488B3C25[00000000]              mov rdi, qword [stderr]
  6828 00004EBC 48BE-                           mov rsi, fmt_arg_count_2
  6828 00004EBE [470E000000000000] 
  6829 00004EC6 488B5518                        mov rdx, COUNT
  6830 00004ECA B800000000                      mov rax, 0
  6831                                          ENTER
    44 00004ECF C8000000            <1>  enter 0, 0
    45 00004ED3 4883E4F0            <1>  and rsp, ~15
  6832 00004ED7 E8(00000000)                    call fprintf
  6833                                          LEAVE
    49 00004EDC C9                  <1>  leave
  6834 00004EDD 48C7C0FDFFFFFF                  mov rax, -3
  6835 00004EE4 E8(00000000)                    call exit
  6836                                  
  6837                                  L_error_arg_count_12:
  6838 00004EE9 488B3C25[00000000]              mov rdi, qword [stderr]
  6839 00004EF1 48BE-                           mov rsi, fmt_arg_count_12
  6839 00004EF3 [070E000000000000] 
  6840 00004EFB 488B5518                        mov rdx, COUNT
  6841 00004EFF B800000000                      mov rax, 0
  6842                                          ENTER
    44 00004F04 C8000000            <1>  enter 0, 0
    45 00004F08 4883E4F0            <1>  and rsp, ~15
  6843 00004F0C E8(00000000)                    call fprintf
  6844                                          LEAVE
    49 00004F11 C9                  <1>  leave
  6845 00004F12 48C7C0FDFFFFFF                  mov rax, -3
  6846 00004F19 E8(00000000)                    call exit
  6847                                  
  6848                                  L_error_arg_count_3:
  6849 00004F1E 488B3C25[00000000]              mov rdi, qword [stderr]
  6850 00004F26 48BE-                           mov rsi, fmt_arg_count_3
  6850 00004F28 [6E0E000000000000] 
  6851 00004F30 488B5518                        mov rdx, COUNT
  6852 00004F34 B800000000                      mov rax, 0
  6853                                          ENTER
    44 00004F39 C8000000            <1>  enter 0, 0
    45 00004F3D 4883E4F0            <1>  and rsp, ~15
  6854 00004F41 E8(00000000)                    call fprintf
  6855                                          LEAVE
    49 00004F46 C9                  <1>  leave
  6856 00004F47 48C7C0FDFFFFFF                  mov rax, -3
  6857 00004F4E E8(00000000)                    call exit
  6858                                          
  6859                                  L_error_incorrect_type:
  6860 00004F53 488B3C25[00000000]              mov rdi, qword [stderr]
  6861 00004F5B 48BE-                           mov rsi, fmt_type
  6861 00004F5D [970E000000000000] 
  6862 00004F65 B800000000                      mov rax, 0
  6863                                          ENTER
    44 00004F6A C8000000            <1>  enter 0, 0
    45 00004F6E 4883E4F0            <1>  and rsp, ~15
  6864 00004F72 E8(00000000)                    call fprintf
  6865                                          LEAVE
    49 00004F77 C9                  <1>  leave
  6866 00004F78 48C7C0FCFFFFFF                  mov rax, -4
  6867 00004F7F E8(00000000)                    call exit
  6868                                  
  6869                                  L_error_division_by_zero:
  6870 00004F84 488B3C25[00000000]              mov rdi, qword [stderr]
  6871 00004F8C 48BE-                           mov rsi, fmt_division_by_zero
  6871 00004F8E [D80E000000000000] 
  6872 00004F96 B800000000                      mov rax, 0
  6873                                          ENTER
    44 00004F9B C8000000            <1>  enter 0, 0
    45 00004F9F 4883E4F0            <1>  and rsp, ~15
  6874 00004FA3 E8(00000000)                    call fprintf
  6875                                          LEAVE
    49 00004FA8 C9                  <1>  leave
  6876 00004FA9 48C7C0F8FFFFFF                  mov rax, -8
  6877 00004FB0 E8(00000000)                    call exit
  6878                                  
  6879                                  section .data
  6880                                  gensym_count:
  6881 00000D88 0000000000000000                dq 0
  6882                                  fmt_char:
  6883 00000D90 256300                          db `%c\0`
  6884                                  fmt_arg_negative:
  6885 00000D93 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  6885 00000D9C 7267756D656E742063-
  6885 00000DA5 616E6E6F7420626520-
  6885 00000DAE 6E656761746976652E-
  6885 00000DB7 0A00               
  6886                                  fmt_arg_count_0:
  6887 00000DB9 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  6887 00000DC2 74696E67207A65726F-
  6887 00000DCB 20617267756D656E74-
  6887 00000DD4 732E20466F756E6420-
  6887 00000DDD 25640A00           
  6888                                  fmt_arg_count_1:
  6889 00000DE1 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  6889 00000DEA 74696E67206F6E6520-
  6889 00000DF3 617267756D656E742E-
  6889 00000DFC 20466F756E64202564-
  6889 00000E05 0A00               
  6890                                  fmt_arg_count_12:
  6891 00000E07 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  6891 00000E10 74696E67206F6E6520-
  6891 00000E19 726571756972656420-
  6891 00000E22 616E64206F6E65206F-
  6891 00000E2B 7074696F6E616C2061-
  6891 00000E34 7267756D656E742E20-
  6891 00000E3D 466F756E642025640A-
  6891 00000E46 00                 
  6892                                  fmt_arg_count_2:
  6893 00000E47 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  6893 00000E50 74696E672074776F20-
  6893 00000E59 617267756D656E7473-
  6893 00000E62 2E20466F756E642025-
  6893 00000E6B 640A00             
  6894                                  fmt_arg_count_3:
  6895 00000E6E 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  6895 00000E77 74696E672074687265-
  6895 00000E80 6520617267756D656E-
  6895 00000E89 74732E20466F756E64-
  6895 00000E92 2025640A00         
  6896                                  fmt_type:
  6897 00000E97 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  6897 00000EA0 696F6E207061737365-
  6897 00000EA9 6420696E636F727265-
  6897 00000EB2 637420747970650A00 
  6898                                  fmt_integer_range:
  6899 00000EBB 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  6899 00000EC4 7265637420696E7465-
  6899 00000ECD 6765722072616E6765-
  6899 00000ED6 0A00               
  6900                                  fmt_division_by_zero:
  6901 00000ED8 212121204469766973-             db `!!! Division by zero\n\0`
  6901 00000EE1 696F6E206279207A65-
  6901 00000EEA 726F0A00           
  6902                                  fmt_scheme_error_part_1:
  6903 00000EEE 0A2121212054686520-             db `\n!!! The procedure \0`
  6903 00000EF7 70726F636564757265-
  6903 00000F00 2000               
  6904                                  fmt_scheme_error_part_2:
  6905 00000F02 2061736B656420746F-             db ` asked to terminate the program\n`
  6905 00000F0B 207465726D696E6174-
  6905 00000F14 65207468652070726F-
  6905 00000F1D 6772616D0A         
  6906 00000F22 202020207769746820-             db `    with the following message:\n\n\0`
  6906 00000F2B 74686520666F6C6C6F-
  6906 00000F34 77696E67206D657373-
  6906 00000F3D 6167653A0A0A00     
  6907                                  fmt_scheme_error_part_3:
  6908 00000F44 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  6908 00000F4D 210A0A00           

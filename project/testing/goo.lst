     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "caar"
   469 000005DE 0400000000000000        	dq 4
   470 000005E6 63616172                	db 0x63, 0x61, 0x61, 0x72
   471                                  	; L_constants + 1514:
   472 000005EA 03                      	db T_string	; "cadr"
   473 000005EB 0400000000000000        	dq 4
   474 000005F3 63616472                	db 0x63, 0x61, 0x64, 0x72
   475                                  	; L_constants + 1527:
   476 000005F7 03                      	db T_string	; "cdar"
   477 000005F8 0400000000000000        	dq 4
   478 00000600 63646172                	db 0x63, 0x64, 0x61, 0x72
   479                                  	; L_constants + 1540:
   480 00000604 03                      	db T_string	; "cddr"
   481 00000605 0400000000000000        	dq 4
   482 0000060D 63646472                	db 0x63, 0x64, 0x64, 0x72
   483                                  	; L_constants + 1553:
   484 00000611 03                      	db T_string	; "caaar"
   485 00000612 0500000000000000        	dq 5
   486 0000061A 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   487                                  	; L_constants + 1567:
   488 0000061F 03                      	db T_string	; "caadr"
   489 00000620 0500000000000000        	dq 5
   490 00000628 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   491                                  	; L_constants + 1581:
   492 0000062D 03                      	db T_string	; "cadar"
   493 0000062E 0500000000000000        	dq 5
   494 00000636 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   495                                  	; L_constants + 1595:
   496 0000063B 03                      	db T_string	; "caddr"
   497 0000063C 0500000000000000        	dq 5
   498 00000644 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   499                                  	; L_constants + 1609:
   500 00000649 03                      	db T_string	; "cdaar"
   501 0000064A 0500000000000000        	dq 5
   502 00000652 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   503                                  	; L_constants + 1623:
   504 00000657 03                      	db T_string	; "cdadr"
   505 00000658 0500000000000000        	dq 5
   506 00000660 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   507                                  	; L_constants + 1637:
   508 00000665 03                      	db T_string	; "cddar"
   509 00000666 0500000000000000        	dq 5
   510 0000066E 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   511                                  	; L_constants + 1651:
   512 00000673 03                      	db T_string	; "cdddr"
   513 00000674 0500000000000000        	dq 5
   514 0000067C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   515                                  	; L_constants + 1665:
   516 00000681 03                      	db T_string	; "caaaar"
   517 00000682 0600000000000000        	dq 6
   518 0000068A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   519                                  	; L_constants + 1680:
   520 00000690 03                      	db T_string	; "caaadr"
   521 00000691 0600000000000000        	dq 6
   522 00000699 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   523                                  	; L_constants + 1695:
   524 0000069F 03                      	db T_string	; "caadar"
   525 000006A0 0600000000000000        	dq 6
   526 000006A8 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   527                                  	; L_constants + 1710:
   528 000006AE 03                      	db T_string	; "caaddr"
   529 000006AF 0600000000000000        	dq 6
   530 000006B7 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   531                                  	; L_constants + 1725:
   532 000006BD 03                      	db T_string	; "cadaar"
   533 000006BE 0600000000000000        	dq 6
   534 000006C6 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   535                                  	; L_constants + 1740:
   536 000006CC 03                      	db T_string	; "cadadr"
   537 000006CD 0600000000000000        	dq 6
   538 000006D5 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   539                                  	; L_constants + 1755:
   540 000006DB 03                      	db T_string	; "caddar"
   541 000006DC 0600000000000000        	dq 6
   542 000006E4 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   543                                  	; L_constants + 1770:
   544 000006EA 03                      	db T_string	; "cadddr"
   545 000006EB 0600000000000000        	dq 6
   546 000006F3 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   547                                  	; L_constants + 1785:
   548 000006F9 03                      	db T_string	; "cdaaar"
   549 000006FA 0600000000000000        	dq 6
   550 00000702 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   551                                  	; L_constants + 1800:
   552 00000708 03                      	db T_string	; "cdaadr"
   553 00000709 0600000000000000        	dq 6
   554 00000711 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   555                                  	; L_constants + 1815:
   556 00000717 03                      	db T_string	; "cdadar"
   557 00000718 0600000000000000        	dq 6
   558 00000720 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   559                                  	; L_constants + 1830:
   560 00000726 03                      	db T_string	; "cdaddr"
   561 00000727 0600000000000000        	dq 6
   562 0000072F 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   563                                  	; L_constants + 1845:
   564 00000735 03                      	db T_string	; "cddaar"
   565 00000736 0600000000000000        	dq 6
   566 0000073E 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   567                                  	; L_constants + 1860:
   568 00000744 03                      	db T_string	; "cddadr"
   569 00000745 0600000000000000        	dq 6
   570 0000074D 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   571                                  	; L_constants + 1875:
   572 00000753 03                      	db T_string	; "cdddar"
   573 00000754 0600000000000000        	dq 6
   574 0000075C 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   575                                  	; L_constants + 1890:
   576 00000762 03                      	db T_string	; "cddddr"
   577 00000763 0600000000000000        	dq 6
   578 0000076B 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   579                                  	; L_constants + 1905:
   580 00000771 03                      	db T_string	; "list?"
   581 00000772 0500000000000000        	dq 5
   582 0000077A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   583                                  	; L_constants + 1919:
   584 0000077F 03                      	db T_string	; "list"
   585 00000780 0400000000000000        	dq 4
   586 00000788 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   587                                  	; L_constants + 1932:
   588 0000078C 03                      	db T_string	; "not"
   589 0000078D 0300000000000000        	dq 3
   590 00000795 6E6F74                  	db 0x6E, 0x6F, 0x74
   591                                  	; L_constants + 1944:
   592 00000798 03                      	db T_string	; "rational?"
   593 00000799 0900000000000000        	dq 9
   594 000007A1 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   595 000007A9 3F                      	db 0x3F
   596                                  	; L_constants + 1962:
   597 000007AA 03                      	db T_string	; "list*"
   598 000007AB 0500000000000000        	dq 5
   599 000007B3 6C6973742A              	db 0x6C, 0x69, 0x73, 0x74, 0x2A
   600                                  	; L_constants + 1976:
   601 000007B8 03                      	db T_string	; "whatever"
   602 000007B9 0800000000000000        	dq 8
   603 000007C1 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   604                                  	; L_constants + 1993:
   605 000007C9 41                      	db T_interned_symbol	; whatever
   606 000007CA [B807000000000000]      	dq L_constants + 1976
   607                                  	; L_constants + 2002:
   608 000007D2 03                      	db T_string	; "apply"
   609 000007D3 0500000000000000        	dq 5
   610 000007DB 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   611                                  	; L_constants + 2016:
   612 000007E0 03                      	db T_string	; "ormap"
   613 000007E1 0500000000000000        	dq 5
   614 000007E9 6F726D6170              	db 0x6F, 0x72, 0x6D, 0x61, 0x70
   615                                  	; L_constants + 2030:
   616 000007EE 03                      	db T_string	; "map"
   617 000007EF 0300000000000000        	dq 3
   618 000007F7 6D6170                  	db 0x6D, 0x61, 0x70
   619                                  	; L_constants + 2042:
   620 000007FA 03                      	db T_string	; "andmap"
   621 000007FB 0600000000000000        	dq 6
   622 00000803 616E646D6170            	db 0x61, 0x6E, 0x64, 0x6D, 0x61, 0x70
   623                                  	; L_constants + 2057:
   624 00000809 03                      	db T_string	; "reverse"
   625 0000080A 0700000000000000        	dq 7
   626 00000812 72657665727365          	db 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   627                                  	; L_constants + 2073:
   628 00000819 03                      	db T_string	; "fold-left"
   629 0000081A 0900000000000000        	dq 9
   630 00000822 666F6C642D6C6566        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x6C, 0x65, 0x66
   631 0000082A 74                      	db 0x74
   632                                  	; L_constants + 2091:
   633 0000082B 03                      	db T_string	; "append"
   634 0000082C 0600000000000000        	dq 6
   635 00000834 617070656E64            	db 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64
   636                                  	; L_constants + 2106:
   637 0000083A 03                      	db T_string	; "fold-right"
   638 0000083B 0A00000000000000        	dq 10
   639 00000843 666F6C642D726967        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x72, 0x69, 0x67
   640 0000084B 6874                    	db 0x68, 0x74
   641                                  	; L_constants + 2125:
   642 0000084D 03                      	db T_string	; "+"
   643 0000084E 0100000000000000        	dq 1
   644 00000856 2B                      	db 0x2B
   645                                  	; L_constants + 2135:
   646 00000857 11                      	db T_integer	; 0
   647 00000858 0000000000000000        	dq 0
   648                                  	; L_constants + 2144:
   649 00000860 03                      	db T_string	; "__bin_integer_to_fr...
   650 00000861 1900000000000000        	dq 25
   651 00000869 5F5F62696E5F696E        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x5F, 0x69, 0x6E
   652 00000871 74656765725F746F        	db 0x74, 0x65, 0x67, 0x65, 0x72, 0x5F, 0x74, 0x6F
   653 00000879 5F6672616374696F        	db 0x5F, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F
   654 00000881 6E                      	db 0x6E
   655                                  	; L_constants + 2178:
   656 00000882 41                      	db T_interned_symbol	; +
   657 00000883 [4D08000000000000]      	dq L_constants + 2125
   658                                  	; L_constants + 2187:
   659 0000088B 03                      	db T_string	; "all arguments need ...
   660 0000088C 2000000000000000        	dq 32
   661 00000894 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
   662 0000089C 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
   663 000008A4 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   664 000008AC 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   665                                  	; L_constants + 2228:
   666 000008B4 03                      	db T_string	; "-"
   667 000008B5 0100000000000000        	dq 1
   668 000008BD 2D                      	db 0x2D
   669                                  	; L_constants + 2238:
   670 000008BE 03                      	db T_string	; "real"
   671 000008BF 0400000000000000        	dq 4
   672 000008C7 7265616C                	db 0x72, 0x65, 0x61, 0x6C
   673                                  	; L_constants + 2251:
   674 000008CB 41                      	db T_interned_symbol	; -
   675 000008CC [B408000000000000]      	dq L_constants + 2228
   676                                  	; L_constants + 2260:
   677 000008D4 03                      	db T_string	; "*"
   678 000008D5 0100000000000000        	dq 1
   679 000008DD 2A                      	db 0x2A
   680                                  	; L_constants + 2270:
   681 000008DE 11                      	db T_integer	; 1
   682 000008DF 0100000000000000        	dq 1
   683                                  	; L_constants + 2279:
   684 000008E7 41                      	db T_interned_symbol	; *
   685 000008E8 [D408000000000000]      	dq L_constants + 2260
   686                                  	; L_constants + 2288:
   687 000008F0 03                      	db T_string	; "/"
   688 000008F1 0100000000000000        	dq 1
   689 000008F9 2F                      	db 0x2F
   690                                  	; L_constants + 2298:
   691 000008FA 41                      	db T_interned_symbol	; /
   692 000008FB [F008000000000000]      	dq L_constants + 2288
   693                                  	; L_constants + 2307:
   694 00000903 03                      	db T_string	; "fact"
   695 00000904 0400000000000000        	dq 4
   696 0000090C 66616374                	db 0x66, 0x61, 0x63, 0x74
   697                                  	; L_constants + 2320:
   698 00000910 03                      	db T_string	; "<"
   699 00000911 0100000000000000        	dq 1
   700 00000919 3C                      	db 0x3C
   701                                  	; L_constants + 2330:
   702 0000091A 03                      	db T_string	; "<="
   703 0000091B 0200000000000000        	dq 2
   704 00000923 3C3D                    	db 0x3C, 0x3D
   705                                  	; L_constants + 2341:
   706 00000925 03                      	db T_string	; ">"
   707 00000926 0100000000000000        	dq 1
   708 0000092E 3E                      	db 0x3E
   709                                  	; L_constants + 2351:
   710 0000092F 03                      	db T_string	; ">="
   711 00000930 0200000000000000        	dq 2
   712 00000938 3E3D                    	db 0x3E, 0x3D
   713                                  	; L_constants + 2362:
   714 0000093A 03                      	db T_string	; "="
   715 0000093B 0100000000000000        	dq 1
   716 00000943 3D                      	db 0x3D
   717                                  	; L_constants + 2372:
   718 00000944 03                      	db T_string	; "generic-comparator"
   719 00000945 1200000000000000        	dq 18
   720 0000094D 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   721 00000955 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   722 0000095D 6F72                    	db 0x6F, 0x72
   723                                  	; L_constants + 2399:
   724 0000095F 41                      	db T_interned_symbol	; generic-comparator
   725 00000960 [4409000000000000]      	dq L_constants + 2372
   726                                  	; L_constants + 2408:
   727 00000968 03                      	db T_string	; "all the arguments m...
   728 00000969 2100000000000000        	dq 33
   729 00000971 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   730 00000979 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   731 00000981 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   732 00000989 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   733 00000991 73                      	db 0x73
   734                                  	; L_constants + 2450:
   735 00000992 03                      	db T_string	; "char<?"
   736 00000993 0600000000000000        	dq 6
   737 0000099B 636861723C3F            	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3F
   738                                  	; L_constants + 2465:
   739 000009A1 03                      	db T_string	; "char<=?"
   740 000009A2 0700000000000000        	dq 7
   741 000009AA 636861723C3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3D, 0x3F
   742                                  	; L_constants + 2481:
   743 000009B1 03                      	db T_string	; "char=?"
   744 000009B2 0600000000000000        	dq 6
   745 000009BA 636861723D3F            	db 0x63, 0x68, 0x61, 0x72, 0x3D, 0x3F
   746                                  	; L_constants + 2496:
   747 000009C0 03                      	db T_string	; "char>?"
   748 000009C1 0600000000000000        	dq 6
   749 000009C9 636861723E3F            	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3F
   750                                  	; L_constants + 2511:
   751 000009CF 03                      	db T_string	; "char>=?"
   752 000009D0 0700000000000000        	dq 7
   753 000009D8 636861723E3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3D, 0x3F
   754                                  	; L_constants + 2527:
   755 000009DF 03                      	db T_string	; "char-downcase"
   756 000009E0 0D00000000000000        	dq 13
   757 000009E8 636861722D646F77        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x64, 0x6F, 0x77
   758 000009F0 6E63617365              	db 0x6E, 0x63, 0x61, 0x73, 0x65
   759                                  	; L_constants + 2549:
   760 000009F5 03                      	db T_string	; "char-upcase"
   761 000009F6 0B00000000000000        	dq 11
   762 000009FE 636861722D757063        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x75, 0x70, 0x63
   763 00000A06 617365                  	db 0x61, 0x73, 0x65
   764                                  	; L_constants + 2569:
   765 00000A09 0241                    	db T_char, 0x41	; #\A
   766                                  	; L_constants + 2571:
   767 00000A0B 025A                    	db T_char, 0x5A	; #\Z
   768                                  	; L_constants + 2573:
   769 00000A0D 0261                    	db T_char, 0x61	; #\a
   770                                  	; L_constants + 2575:
   771 00000A0F 027A                    	db T_char, 0x7A	; #\z
   772                                  free_var_0:	; location of *
   773 00000A11 [190A000000000000]      	dq .undefined_object
   774                                  .undefined_object:
   775 00000A19 05                      	db T_undefined
   776 00000A1A [D408000000000000]      	dq L_constants + 2260
   777                                  
   778                                  free_var_1:	; location of +
   779 00000A22 [2A0A000000000000]      	dq .undefined_object
   780                                  .undefined_object:
   781 00000A2A 05                      	db T_undefined
   782 00000A2B [4D08000000000000]      	dq L_constants + 2125
   783                                  
   784                                  free_var_2:	; location of -
   785 00000A33 [3B0A000000000000]      	dq .undefined_object
   786                                  .undefined_object:
   787 00000A3B 05                      	db T_undefined
   788 00000A3C [B408000000000000]      	dq L_constants + 2228
   789                                  
   790                                  free_var_3:	; location of /
   791 00000A44 [4C0A000000000000]      	dq .undefined_object
   792                                  .undefined_object:
   793 00000A4C 05                      	db T_undefined
   794 00000A4D [F008000000000000]      	dq L_constants + 2288
   795                                  
   796                                  free_var_4:	; location of <
   797 00000A55 [5D0A000000000000]      	dq .undefined_object
   798                                  .undefined_object:
   799 00000A5D 05                      	db T_undefined
   800 00000A5E [1009000000000000]      	dq L_constants + 2320
   801                                  
   802                                  free_var_5:	; location of <=
   803 00000A66 [6E0A000000000000]      	dq .undefined_object
   804                                  .undefined_object:
   805 00000A6E 05                      	db T_undefined
   806 00000A6F [1A09000000000000]      	dq L_constants + 2330
   807                                  
   808                                  free_var_6:	; location of =
   809 00000A77 [7F0A000000000000]      	dq .undefined_object
   810                                  .undefined_object:
   811 00000A7F 05                      	db T_undefined
   812 00000A80 [3A09000000000000]      	dq L_constants + 2362
   813                                  
   814                                  free_var_7:	; location of >
   815 00000A88 [900A000000000000]      	dq .undefined_object
   816                                  .undefined_object:
   817 00000A90 05                      	db T_undefined
   818 00000A91 [2509000000000000]      	dq L_constants + 2341
   819                                  
   820                                  free_var_8:	; location of >=
   821 00000A99 [A10A000000000000]      	dq .undefined_object
   822                                  .undefined_object:
   823 00000AA1 05                      	db T_undefined
   824 00000AA2 [2F09000000000000]      	dq L_constants + 2351
   825                                  
   826                                  free_var_9:	; location of __bin-add-qq
   827 00000AAA [B20A000000000000]      	dq .undefined_object
   828                                  .undefined_object:
   829 00000AB2 05                      	db T_undefined
   830 00000AB3 [6902000000000000]      	dq L_constants + 617
   831                                  
   832                                  free_var_10:	; location of __bin-add-rr
   833 00000ABB [C30A000000000000]      	dq .undefined_object
   834                                  .undefined_object:
   835 00000AC3 05                      	db T_undefined
   836 00000AC4 [1502000000000000]      	dq L_constants + 533
   837                                  
   838                                  free_var_11:	; location of __bin-add-zz
   839 00000ACC [D40A000000000000]      	dq .undefined_object
   840                                  .undefined_object:
   841 00000AD4 05                      	db T_undefined
   842 00000AD5 [BD02000000000000]      	dq L_constants + 701
   843                                  
   844                                  free_var_12:	; location of __bin-apply
   845 00000ADD [E50A000000000000]      	dq .undefined_object
   846                                  .undefined_object:
   847 00000AE5 05                      	db T_undefined
   848 00000AE6 [0102000000000000]      	dq L_constants + 513
   849                                  
   850                                  free_var_13:	; location of __bin-div-qq
   851 00000AEE [F60A000000000000]      	dq .undefined_object
   852                                  .undefined_object:
   853 00000AF6 05                      	db T_undefined
   854 00000AF7 [A802000000000000]      	dq L_constants + 680
   855                                  
   856                                  free_var_14:	; location of __bin-div-rr
   857 00000AFF [070B000000000000]      	dq .undefined_object
   858                                  .undefined_object:
   859 00000B07 05                      	db T_undefined
   860 00000B08 [5402000000000000]      	dq L_constants + 596
   861                                  
   862                                  free_var_15:	; location of __bin-div-zz
   863 00000B10 [180B000000000000]      	dq .undefined_object
   864                                  .undefined_object:
   865 00000B18 05                      	db T_undefined
   866 00000B19 [FC02000000000000]      	dq L_constants + 764
   867                                  
   868                                  free_var_16:	; location of __bin-equal-qq
   869 00000B21 [290B000000000000]      	dq .undefined_object
   870                                  .undefined_object:
   871 00000B29 05                      	db T_undefined
   872 00000B2A [8703000000000000]      	dq L_constants + 903
   873                                  
   874                                  free_var_17:	; location of __bin-equal-rr
   875 00000B32 [3A0B000000000000]      	dq .undefined_object
   876                                  .undefined_object:
   877 00000B3A 05                      	db T_undefined
   878 00000B3B [7003000000000000]      	dq L_constants + 880
   879                                  
   880                                  free_var_18:	; location of __bin-equal-zz
   881 00000B43 [4B0B000000000000]      	dq .undefined_object
   882                                  .undefined_object:
   883 00000B4B 05                      	db T_undefined
   884 00000B4C [9E03000000000000]      	dq L_constants + 926
   885                                  
   886                                  free_var_19:	; location of __bin-less-than-qq
   887 00000B54 [5C0B000000000000]      	dq .undefined_object
   888                                  .undefined_object:
   889 00000B5C 05                      	db T_undefined
   890 00000B5D [3A03000000000000]      	dq L_constants + 826
   891                                  
   892                                  free_var_20:	; location of __bin-less-than-rr
   893 00000B65 [6D0B000000000000]      	dq .undefined_object
   894                                  .undefined_object:
   895 00000B6D 05                      	db T_undefined
   896 00000B6E [1F03000000000000]      	dq L_constants + 799
   897                                  
   898                                  free_var_21:	; location of __bin-less-than-zz
   899 00000B76 [7E0B000000000000]      	dq .undefined_object
   900                                  .undefined_object:
   901 00000B7E 05                      	db T_undefined
   902 00000B7F [5503000000000000]      	dq L_constants + 853
   903                                  
   904                                  free_var_22:	; location of __bin-mul-qq
   905 00000B87 [8F0B000000000000]      	dq .undefined_object
   906                                  .undefined_object:
   907 00000B8F 05                      	db T_undefined
   908 00000B90 [9302000000000000]      	dq L_constants + 659
   909                                  
   910                                  free_var_23:	; location of __bin-mul-rr
   911 00000B98 [A00B000000000000]      	dq .undefined_object
   912                                  .undefined_object:
   913 00000BA0 05                      	db T_undefined
   914 00000BA1 [3F02000000000000]      	dq L_constants + 575
   915                                  
   916                                  free_var_24:	; location of __bin-mul-zz
   917 00000BA9 [B10B000000000000]      	dq .undefined_object
   918                                  .undefined_object:
   919 00000BB1 05                      	db T_undefined
   920 00000BB2 [E702000000000000]      	dq L_constants + 743
   921                                  
   922                                  free_var_25:	; location of __bin-sub-qq
   923 00000BBA [C20B000000000000]      	dq .undefined_object
   924                                  .undefined_object:
   925 00000BC2 05                      	db T_undefined
   926 00000BC3 [7E02000000000000]      	dq L_constants + 638
   927                                  
   928                                  free_var_26:	; location of __bin-sub-rr
   929 00000BCB [D30B000000000000]      	dq .undefined_object
   930                                  .undefined_object:
   931 00000BD3 05                      	db T_undefined
   932 00000BD4 [2A02000000000000]      	dq L_constants + 554
   933                                  
   934                                  free_var_27:	; location of __bin-sub-zz
   935 00000BDC [E40B000000000000]      	dq .undefined_object
   936                                  .undefined_object:
   937 00000BE4 05                      	db T_undefined
   938 00000BE5 [D202000000000000]      	dq L_constants + 722
   939                                  
   940                                  free_var_28:	; location of __bin_integer_to_fraction
   941 00000BED [F50B000000000000]      	dq .undefined_object
   942                                  .undefined_object:
   943 00000BF5 05                      	db T_undefined
   944 00000BF6 [6008000000000000]      	dq L_constants + 2144
   945                                  
   946                                  free_var_29:	; location of __integer-to-fraction
   947 00000BFE [060C000000000000]      	dq .undefined_object
   948                                  .undefined_object:
   949 00000C06 05                      	db T_undefined
   950 00000C07 [A204000000000000]      	dq L_constants + 1186
   951                                  
   952                                  free_var_30:	; location of andmap
   953 00000C0F [170C000000000000]      	dq .undefined_object
   954                                  .undefined_object:
   955 00000C17 05                      	db T_undefined
   956 00000C18 [FA07000000000000]      	dq L_constants + 2042
   957                                  
   958                                  free_var_31:	; location of append
   959 00000C20 [280C000000000000]      	dq .undefined_object
   960                                  .undefined_object:
   961 00000C28 05                      	db T_undefined
   962 00000C29 [2B08000000000000]      	dq L_constants + 2091
   963                                  
   964                                  free_var_32:	; location of apply
   965 00000C31 [390C000000000000]      	dq .undefined_object
   966                                  .undefined_object:
   967 00000C39 05                      	db T_undefined
   968 00000C3A [D207000000000000]      	dq L_constants + 2002
   969                                  
   970                                  free_var_33:	; location of caaaar
   971 00000C42 [4A0C000000000000]      	dq .undefined_object
   972                                  .undefined_object:
   973 00000C4A 05                      	db T_undefined
   974 00000C4B [8106000000000000]      	dq L_constants + 1665
   975                                  
   976                                  free_var_34:	; location of caaadr
   977 00000C53 [5B0C000000000000]      	dq .undefined_object
   978                                  .undefined_object:
   979 00000C5B 05                      	db T_undefined
   980 00000C5C [9006000000000000]      	dq L_constants + 1680
   981                                  
   982                                  free_var_35:	; location of caaar
   983 00000C64 [6C0C000000000000]      	dq .undefined_object
   984                                  .undefined_object:
   985 00000C6C 05                      	db T_undefined
   986 00000C6D [1106000000000000]      	dq L_constants + 1553
   987                                  
   988                                  free_var_36:	; location of caadar
   989 00000C75 [7D0C000000000000]      	dq .undefined_object
   990                                  .undefined_object:
   991 00000C7D 05                      	db T_undefined
   992 00000C7E [9F06000000000000]      	dq L_constants + 1695
   993                                  
   994                                  free_var_37:	; location of caaddr
   995 00000C86 [8E0C000000000000]      	dq .undefined_object
   996                                  .undefined_object:
   997 00000C8E 05                      	db T_undefined
   998 00000C8F [AE06000000000000]      	dq L_constants + 1710
   999                                  
  1000                                  free_var_38:	; location of caadr
  1001 00000C97 [9F0C000000000000]      	dq .undefined_object
  1002                                  .undefined_object:
  1003 00000C9F 05                      	db T_undefined
  1004 00000CA0 [1F06000000000000]      	dq L_constants + 1567
  1005                                  
  1006                                  free_var_39:	; location of caar
  1007 00000CA8 [B00C000000000000]      	dq .undefined_object
  1008                                  .undefined_object:
  1009 00000CB0 05                      	db T_undefined
  1010 00000CB1 [DD05000000000000]      	dq L_constants + 1501
  1011                                  
  1012                                  free_var_40:	; location of cadaar
  1013 00000CB9 [C10C000000000000]      	dq .undefined_object
  1014                                  .undefined_object:
  1015 00000CC1 05                      	db T_undefined
  1016 00000CC2 [BD06000000000000]      	dq L_constants + 1725
  1017                                  
  1018                                  free_var_41:	; location of cadadr
  1019 00000CCA [D20C000000000000]      	dq .undefined_object
  1020                                  .undefined_object:
  1021 00000CD2 05                      	db T_undefined
  1022 00000CD3 [CC06000000000000]      	dq L_constants + 1740
  1023                                  
  1024                                  free_var_42:	; location of cadar
  1025 00000CDB [E30C000000000000]      	dq .undefined_object
  1026                                  .undefined_object:
  1027 00000CE3 05                      	db T_undefined
  1028 00000CE4 [2D06000000000000]      	dq L_constants + 1581
  1029                                  
  1030                                  free_var_43:	; location of caddar
  1031 00000CEC [F40C000000000000]      	dq .undefined_object
  1032                                  .undefined_object:
  1033 00000CF4 05                      	db T_undefined
  1034 00000CF5 [DB06000000000000]      	dq L_constants + 1755
  1035                                  
  1036                                  free_var_44:	; location of cadddr
  1037 00000CFD [050D000000000000]      	dq .undefined_object
  1038                                  .undefined_object:
  1039 00000D05 05                      	db T_undefined
  1040 00000D06 [EA06000000000000]      	dq L_constants + 1770
  1041                                  
  1042                                  free_var_45:	; location of caddr
  1043 00000D0E [160D000000000000]      	dq .undefined_object
  1044                                  .undefined_object:
  1045 00000D16 05                      	db T_undefined
  1046 00000D17 [3B06000000000000]      	dq L_constants + 1595
  1047                                  
  1048                                  free_var_46:	; location of cadr
  1049 00000D1F [270D000000000000]      	dq .undefined_object
  1050                                  .undefined_object:
  1051 00000D27 05                      	db T_undefined
  1052 00000D28 [EA05000000000000]      	dq L_constants + 1514
  1053                                  
  1054                                  free_var_47:	; location of car
  1055 00000D30 [380D000000000000]      	dq .undefined_object
  1056                                  .undefined_object:
  1057 00000D38 05                      	db T_undefined
  1058 00000D39 [1501000000000000]      	dq L_constants + 277
  1059                                  
  1060                                  free_var_48:	; location of cdaaar
  1061 00000D41 [490D000000000000]      	dq .undefined_object
  1062                                  .undefined_object:
  1063 00000D49 05                      	db T_undefined
  1064 00000D4A [F906000000000000]      	dq L_constants + 1785
  1065                                  
  1066                                  free_var_49:	; location of cdaadr
  1067 00000D52 [5A0D000000000000]      	dq .undefined_object
  1068                                  .undefined_object:
  1069 00000D5A 05                      	db T_undefined
  1070 00000D5B [0807000000000000]      	dq L_constants + 1800
  1071                                  
  1072                                  free_var_50:	; location of cdaar
  1073 00000D63 [6B0D000000000000]      	dq .undefined_object
  1074                                  .undefined_object:
  1075 00000D6B 05                      	db T_undefined
  1076 00000D6C [4906000000000000]      	dq L_constants + 1609
  1077                                  
  1078                                  free_var_51:	; location of cdadar
  1079 00000D74 [7C0D000000000000]      	dq .undefined_object
  1080                                  .undefined_object:
  1081 00000D7C 05                      	db T_undefined
  1082 00000D7D [1707000000000000]      	dq L_constants + 1815
  1083                                  
  1084                                  free_var_52:	; location of cdaddr
  1085 00000D85 [8D0D000000000000]      	dq .undefined_object
  1086                                  .undefined_object:
  1087 00000D8D 05                      	db T_undefined
  1088 00000D8E [2607000000000000]      	dq L_constants + 1830
  1089                                  
  1090                                  free_var_53:	; location of cdadr
  1091 00000D96 [9E0D000000000000]      	dq .undefined_object
  1092                                  .undefined_object:
  1093 00000D9E 05                      	db T_undefined
  1094 00000D9F [5706000000000000]      	dq L_constants + 1623
  1095                                  
  1096                                  free_var_54:	; location of cdar
  1097 00000DA7 [AF0D000000000000]      	dq .undefined_object
  1098                                  .undefined_object:
  1099 00000DAF 05                      	db T_undefined
  1100 00000DB0 [F705000000000000]      	dq L_constants + 1527
  1101                                  
  1102                                  free_var_55:	; location of cddaar
  1103 00000DB8 [C00D000000000000]      	dq .undefined_object
  1104                                  .undefined_object:
  1105 00000DC0 05                      	db T_undefined
  1106 00000DC1 [3507000000000000]      	dq L_constants + 1845
  1107                                  
  1108                                  free_var_56:	; location of cddadr
  1109 00000DC9 [D10D000000000000]      	dq .undefined_object
  1110                                  .undefined_object:
  1111 00000DD1 05                      	db T_undefined
  1112 00000DD2 [4407000000000000]      	dq L_constants + 1860
  1113                                  
  1114                                  free_var_57:	; location of cddar
  1115 00000DDA [E20D000000000000]      	dq .undefined_object
  1116                                  .undefined_object:
  1117 00000DE2 05                      	db T_undefined
  1118 00000DE3 [6506000000000000]      	dq L_constants + 1637
  1119                                  
  1120                                  free_var_58:	; location of cdddar
  1121 00000DEB [F30D000000000000]      	dq .undefined_object
  1122                                  .undefined_object:
  1123 00000DF3 05                      	db T_undefined
  1124 00000DF4 [5307000000000000]      	dq L_constants + 1875
  1125                                  
  1126                                  free_var_59:	; location of cddddr
  1127 00000DFC [040E000000000000]      	dq .undefined_object
  1128                                  .undefined_object:
  1129 00000E04 05                      	db T_undefined
  1130 00000E05 [6207000000000000]      	dq L_constants + 1890
  1131                                  
  1132                                  free_var_60:	; location of cdddr
  1133 00000E0D [150E000000000000]      	dq .undefined_object
  1134                                  .undefined_object:
  1135 00000E15 05                      	db T_undefined
  1136 00000E16 [7306000000000000]      	dq L_constants + 1651
  1137                                  
  1138                                  free_var_61:	; location of cddr
  1139 00000E1E [260E000000000000]      	dq .undefined_object
  1140                                  .undefined_object:
  1141 00000E26 05                      	db T_undefined
  1142 00000E27 [0406000000000000]      	dq L_constants + 1540
  1143                                  
  1144                                  free_var_62:	; location of cdr
  1145 00000E2F [370E000000000000]      	dq .undefined_object
  1146                                  .undefined_object:
  1147 00000E37 05                      	db T_undefined
  1148 00000E38 [2101000000000000]      	dq L_constants + 289
  1149                                  
  1150                                  free_var_63:	; location of char->integer
  1151 00000E40 [480E000000000000]      	dq .undefined_object
  1152                                  .undefined_object:
  1153 00000E48 05                      	db T_undefined
  1154 00000E49 [A901000000000000]      	dq L_constants + 425
  1155                                  
  1156                                  free_var_64:	; location of char-downcase
  1157 00000E51 [590E000000000000]      	dq .undefined_object
  1158                                  .undefined_object:
  1159 00000E59 05                      	db T_undefined
  1160 00000E5A [DF09000000000000]      	dq L_constants + 2527
  1161                                  
  1162                                  free_var_65:	; location of char-upcase
  1163 00000E62 [6A0E000000000000]      	dq .undefined_object
  1164                                  .undefined_object:
  1165 00000E6A 05                      	db T_undefined
  1166 00000E6B [F509000000000000]      	dq L_constants + 2549
  1167                                  
  1168                                  free_var_66:	; location of char<=?
  1169 00000E73 [7B0E000000000000]      	dq .undefined_object
  1170                                  .undefined_object:
  1171 00000E7B 05                      	db T_undefined
  1172 00000E7C [A109000000000000]      	dq L_constants + 2465
  1173                                  
  1174                                  free_var_67:	; location of char<?
  1175 00000E84 [8C0E000000000000]      	dq .undefined_object
  1176                                  .undefined_object:
  1177 00000E8C 05                      	db T_undefined
  1178 00000E8D [9209000000000000]      	dq L_constants + 2450
  1179                                  
  1180                                  free_var_68:	; location of char=?
  1181 00000E95 [9D0E000000000000]      	dq .undefined_object
  1182                                  .undefined_object:
  1183 00000E9D 05                      	db T_undefined
  1184 00000E9E [B109000000000000]      	dq L_constants + 2481
  1185                                  
  1186                                  free_var_69:	; location of char>=?
  1187 00000EA6 [AE0E000000000000]      	dq .undefined_object
  1188                                  .undefined_object:
  1189 00000EAE 05                      	db T_undefined
  1190 00000EAF [CF09000000000000]      	dq L_constants + 2511
  1191                                  
  1192                                  free_var_70:	; location of char>?
  1193 00000EB7 [BF0E000000000000]      	dq .undefined_object
  1194                                  .undefined_object:
  1195 00000EBF 05                      	db T_undefined
  1196 00000EC0 [C009000000000000]      	dq L_constants + 2496
  1197                                  
  1198                                  free_var_71:	; location of cons
  1199 00000EC8 [D00E000000000000]      	dq .undefined_object
  1200                                  .undefined_object:
  1201 00000ED0 05                      	db T_undefined
  1202 00000ED1 [DF00000000000000]      	dq L_constants + 223
  1203                                  
  1204                                  free_var_72:	; location of error
  1205 00000ED9 [E10E000000000000]      	dq .undefined_object
  1206                                  .undefined_object:
  1207 00000EE1 05                      	db T_undefined
  1208 00000EE2 [1103000000000000]      	dq L_constants + 785
  1209                                  
  1210                                  free_var_73:	; location of fact
  1211 00000EEA [F20E000000000000]      	dq .undefined_object
  1212                                  .undefined_object:
  1213 00000EF2 05                      	db T_undefined
  1214 00000EF3 [0309000000000000]      	dq L_constants + 2307
  1215                                  
  1216                                  free_var_74:	; location of fold-left
  1217 00000EFB [030F000000000000]      	dq .undefined_object
  1218                                  .undefined_object:
  1219 00000F03 05                      	db T_undefined
  1220 00000F04 [1908000000000000]      	dq L_constants + 2073
  1221                                  
  1222                                  free_var_75:	; location of fold-right
  1223 00000F0C [140F000000000000]      	dq .undefined_object
  1224                                  .undefined_object:
  1225 00000F14 05                      	db T_undefined
  1226 00000F15 [3A08000000000000]      	dq L_constants + 2106
  1227                                  
  1228                                  free_var_76:	; location of fraction->real
  1229 00000F1D [250F000000000000]      	dq .undefined_object
  1230                                  .undefined_object:
  1231 00000F25 05                      	db T_undefined
  1232 00000F26 [9201000000000000]      	dq L_constants + 402
  1233                                  
  1234                                  free_var_77:	; location of fraction?
  1235 00000F2E [360F000000000000]      	dq .undefined_object
  1236                                  .undefined_object:
  1237 00000F36 05                      	db T_undefined
  1238 00000F37 [9800000000000000]      	dq L_constants + 152
  1239                                  
  1240                                  free_var_78:	; location of integer->char
  1241 00000F3F [470F000000000000]      	dq .undefined_object
  1242                                  .undefined_object:
  1243 00000F47 05                      	db T_undefined
  1244 00000F48 [BF01000000000000]      	dq L_constants + 447
  1245                                  
  1246                                  free_var_79:	; location of integer->real
  1247 00000F50 [580F000000000000]      	dq .undefined_object
  1248                                  .undefined_object:
  1249 00000F58 05                      	db T_undefined
  1250 00000F59 [7C01000000000000]      	dq L_constants + 380
  1251                                  
  1252                                  free_var_80:	; location of integer?
  1253 00000F61 [690F000000000000]      	dq .undefined_object
  1254                                  .undefined_object:
  1255 00000F69 05                      	db T_undefined
  1256 00000F6A [F001000000000000]      	dq L_constants + 496
  1257                                  
  1258                                  free_var_81:	; location of list
  1259 00000F72 [7A0F000000000000]      	dq .undefined_object
  1260                                  .undefined_object:
  1261 00000F7A 05                      	db T_undefined
  1262 00000F7B [7F07000000000000]      	dq L_constants + 1919
  1263                                  
  1264                                  free_var_82:	; location of list*
  1265 00000F83 [8B0F000000000000]      	dq .undefined_object
  1266                                  .undefined_object:
  1267 00000F8B 05                      	db T_undefined
  1268 00000F8C [AA07000000000000]      	dq L_constants + 1962
  1269                                  
  1270                                  free_var_83:	; location of list?
  1271 00000F94 [9C0F000000000000]      	dq .undefined_object
  1272                                  .undefined_object:
  1273 00000F9C 05                      	db T_undefined
  1274 00000F9D [7107000000000000]      	dq L_constants + 1905
  1275                                  
  1276                                  free_var_84:	; location of map
  1277 00000FA5 [AD0F000000000000]      	dq .undefined_object
  1278                                  .undefined_object:
  1279 00000FAD 05                      	db T_undefined
  1280 00000FAE [EE07000000000000]      	dq L_constants + 2030
  1281                                  
  1282                                  free_var_85:	; location of not
  1283 00000FB6 [BE0F000000000000]      	dq .undefined_object
  1284                                  .undefined_object:
  1285 00000FBE 05                      	db T_undefined
  1286 00000FBF [8C07000000000000]      	dq L_constants + 1932
  1287                                  
  1288                                  free_var_86:	; location of null?
  1289 00000FC7 [CF0F000000000000]      	dq .undefined_object
  1290                                  .undefined_object:
  1291 00000FCF 05                      	db T_undefined
  1292 00000FD0 [0600000000000000]      	dq L_constants + 6
  1293                                  
  1294                                  free_var_87:	; location of ormap
  1295 00000FD8 [E00F000000000000]      	dq .undefined_object
  1296                                  .undefined_object:
  1297 00000FE0 05                      	db T_undefined
  1298 00000FE1 [E007000000000000]      	dq L_constants + 2016
  1299                                  
  1300                                  free_var_88:	; location of pair?
  1301 00000FE9 [F10F000000000000]      	dq .undefined_object
  1302                                  .undefined_object:
  1303 00000FF1 05                      	db T_undefined
  1304 00000FF2 [1400000000000000]      	dq L_constants + 20
  1305                                  
  1306                                  free_var_89:	; location of rational?
  1307 00000FFA [0210000000000000]      	dq .undefined_object
  1308                                  .undefined_object:
  1309 00001002 05                      	db T_undefined
  1310 00001003 [9807000000000000]      	dq L_constants + 1944
  1311                                  
  1312                                  free_var_90:	; location of real
  1313 0000100B [1310000000000000]      	dq .undefined_object
  1314                                  .undefined_object:
  1315 00001013 05                      	db T_undefined
  1316 00001014 [BE08000000000000]      	dq L_constants + 2238
  1317                                  
  1318                                  free_var_91:	; location of real?
  1319 0000101C [2410000000000000]      	dq .undefined_object
  1320                                  .undefined_object:
  1321 00001024 05                      	db T_undefined
  1322 00001025 [8A00000000000000]      	dq L_constants + 138
  1323                                  
  1324                                  free_var_92:	; location of reverse
  1325 0000102D [3510000000000000]      	dq .undefined_object
  1326                                  .undefined_object:
  1327 00001035 05                      	db T_undefined
  1328 00001036 [0908000000000000]      	dq L_constants + 2057
  1329                                  
  1330                                  free_var_93:	; location of zero?
  1331 0000103E [4610000000000000]      	dq .undefined_object
  1332                                  .undefined_object:
  1333 00001046 05                      	db T_undefined
  1334 00001047 [E201000000000000]      	dq L_constants + 482
  1335                                  
  1336                                  
  1337                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
  1338                                  global main
  1339                                  section .text
  1340                                  main:
  1341 00000000 C8000000                        enter 0, 0
  1342 00000004 6A00                            push 0
  1343 00000006 6A00                            push 0
  1344 00000008 68[36960000]                    push Lend
  1345 0000000D C8000000                        enter 0, 0
  1346                                  	; building closure for null?
  1347 00000011 48BF-                   	mov rdi, free_var_86
  1347 00000013 [C70F000000000000] 
  1348 0000001B 48BE-                   	mov rsi, L_code_ptr_is_null
  1348 0000001D [D3A1000000000000] 
  1349 00000025 E8A79F0000              	call bind_primitive
  1350                                  
  1351                                  	; building closure for pair?
  1352 0000002A 48BF-                   	mov rdi, free_var_88
  1352 0000002C [E90F000000000000] 
  1353 00000034 48BE-                   	mov rsi, L_code_ptr_is_pair
  1353 00000036 [05A2000000000000] 
  1354 0000003E E88E9F0000              	call bind_primitive
  1355                                  
  1356                                  	; building closure for real?
  1357 00000043 48BF-                   	mov rdi, free_var_91
  1357 00000045 [1C10000000000000] 
  1358 0000004D 48BE-                   	mov rsi, L_code_ptr_is_real
  1358 0000004F [FDA3000000000000] 
  1359 00000057 E8759F0000              	call bind_primitive
  1360                                  
  1361                                  	; building closure for fraction?
  1362 0000005C 48BF-                   	mov rdi, free_var_77
  1362 0000005E [2E0F000000000000] 
  1363 00000066 48BE-                   	mov rsi, L_code_ptr_is_fraction
  1363 00000068 [2FA4000000000000] 
  1364 00000070 E85C9F0000              	call bind_primitive
  1365                                  
  1366                                  	; building closure for cons
  1367 00000075 48BF-                   	mov rdi, free_var_71
  1367 00000077 [C80E000000000000] 
  1368 0000007F 48BE-                   	mov rsi, L_code_ptr_cons
  1368 00000081 [65A5000000000000] 
  1369 00000089 E8439F0000              	call bind_primitive
  1370                                  
  1371                                  	; building closure for car
  1372 0000008E 48BF-                   	mov rdi, free_var_47
  1372 00000090 [300D000000000000] 
  1373 00000098 48BE-                   	mov rsi, L_code_ptr_car
  1373 0000009A [0EA6000000000000] 
  1374 000000A2 E82A9F0000              	call bind_primitive
  1375                                  
  1376                                  	; building closure for cdr
  1377 000000A7 48BF-                   	mov rdi, free_var_62
  1377 000000A9 [2F0E000000000000] 
  1378 000000B1 48BE-                   	mov rsi, L_code_ptr_cdr
  1378 000000B3 [32A6000000000000] 
  1379 000000BB E8119F0000              	call bind_primitive
  1380                                  
  1381                                  	; building closure for integer->real
  1382 000000C0 48BF-                   	mov rdi, free_var_79
  1382 000000C2 [500F000000000000] 
  1383 000000CA 48BE-                   	mov rsi, L_code_ptr_integer_to_real
  1383 000000CC [F0A6000000000000] 
  1384 000000D4 E8F89E0000              	call bind_primitive
  1385                                  
  1386                                  	; building closure for fraction->real
  1387 000000D9 48BF-                   	mov rdi, free_var_76
  1387 000000DB [1D0F000000000000] 
  1388 000000E3 48BE-                   	mov rsi, L_code_ptr_fraction_to_real
  1388 000000E5 [1EA7000000000000] 
  1389 000000ED E8DF9E0000              	call bind_primitive
  1390                                  
  1391                                  	; building closure for char->integer
  1392 000000F2 48BF-                   	mov rdi, free_var_63
  1392 000000F4 [400E000000000000] 
  1393 000000FC 48BE-                   	mov rsi, L_code_ptr_char_to_integer
  1393 000000FE [59A7000000000000] 
  1394 00000106 E8C69E0000              	call bind_primitive
  1395                                  
  1396                                  	; building closure for integer->char
  1397 0000010B 48BF-                   	mov rdi, free_var_78
  1397 0000010D [3F0F000000000000] 
  1398 00000115 48BE-                   	mov rsi, L_code_ptr_integer_to_char
  1398 00000117 [C8A7000000000000] 
  1399 0000011F E8AD9E0000              	call bind_primitive
  1400                                  
  1401                                  	; building closure for zero?
  1402 00000124 48BF-                   	mov rdi, free_var_93
  1402 00000126 [3E10000000000000] 
  1403 0000012E 48BE-                   	mov rsi, L_code_ptr_is_zero
  1403 00000130 [32A8000000000000] 
  1404 00000138 E8949E0000              	call bind_primitive
  1405                                  
  1406                                  	; building closure for integer?
  1407 0000013D 48BF-                   	mov rdi, free_var_80
  1407 0000013F [610F000000000000] 
  1408 00000147 48BE-                   	mov rsi, L_code_ptr_is_integer
  1408 00000149 [97A8000000000000] 
  1409 00000151 E87B9E0000              	call bind_primitive
  1410                                  
  1411                                  	; building closure for __bin-apply
  1412 00000156 48BF-                   	mov rdi, free_var_12
  1412 00000158 [DD0A000000000000] 
  1413 00000160 48BE-                   	mov rsi, L_code_ptr_bin_apply
  1413 00000162 [41A1000000000000] 
  1414 0000016A E8629E0000              	call bind_primitive
  1415                                  
  1416                                  	; building closure for __bin-add-rr
  1417 0000016F 48BF-                   	mov rdi, free_var_10
  1417 00000171 [BB0A000000000000] 
  1418 00000179 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
  1418 0000017B [C9A8000000000000] 
  1419 00000183 E8499E0000              	call bind_primitive
  1420                                  
  1421                                  	; building closure for __bin-sub-rr
  1422 00000188 48BF-                   	mov rdi, free_var_26
  1422 0000018A [CB0B000000000000] 
  1423 00000192 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
  1423 00000194 [09A9000000000000] 
  1424 0000019C E8309E0000              	call bind_primitive
  1425                                  
  1426                                  	; building closure for __bin-mul-rr
  1427 000001A1 48BF-                   	mov rdi, free_var_23
  1427 000001A3 [980B000000000000] 
  1428 000001AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
  1428 000001AD [49A9000000000000] 
  1429 000001B5 E8179E0000              	call bind_primitive
  1430                                  
  1431                                  	; building closure for __bin-div-rr
  1432 000001BA 48BF-                   	mov rdi, free_var_14
  1432 000001BC [FF0A000000000000] 
  1433 000001C4 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
  1433 000001C6 [89A9000000000000] 
  1434 000001CE E8FE9D0000              	call bind_primitive
  1435                                  
  1436                                  	; building closure for __bin-add-qq
  1437 000001D3 48BF-                   	mov rdi, free_var_9
  1437 000001D5 [AA0A000000000000] 
  1438 000001DD 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
  1438 000001DF [13AA000000000000] 
  1439 000001E7 E8E59D0000              	call bind_primitive
  1440                                  
  1441                                  	; building closure for __bin-sub-qq
  1442 000001EC 48BF-                   	mov rdi, free_var_25
  1442 000001EE [BA0B000000000000] 
  1443 000001F6 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
  1443 000001F8 [B3AA000000000000] 
  1444 00000200 E8CC9D0000              	call bind_primitive
  1445                                  
  1446                                  	; building closure for __bin-mul-qq
  1447 00000205 48BF-                   	mov rdi, free_var_22
  1447 00000207 [870B000000000000] 
  1448 0000020F 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
  1448 00000211 [58AB000000000000] 
  1449 00000219 E8B39D0000              	call bind_primitive
  1450                                  
  1451                                  	; building closure for __bin-div-qq
  1452 0000021E 48BF-                   	mov rdi, free_var_13
  1452 00000220 [EE0A000000000000] 
  1453 00000228 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
  1453 0000022A [F2AB000000000000] 
  1454 00000232 E89A9D0000              	call bind_primitive
  1455                                  
  1456                                  	; building closure for __bin-add-zz
  1457 00000237 48BF-                   	mov rdi, free_var_11
  1457 00000239 [CC0A000000000000] 
  1458 00000241 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_zz
  1458 00000243 [D7A9000000000000] 
  1459 0000024B E8819D0000              	call bind_primitive
  1460                                  
  1461                                  	; building closure for __bin-sub-zz
  1462 00000250 48BF-                   	mov rdi, free_var_27
  1462 00000252 [DC0B000000000000] 
  1463 0000025A 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_zz
  1463 0000025C [77AA000000000000] 
  1464 00000264 E8689D0000              	call bind_primitive
  1465                                  
  1466                                  	; building closure for __bin-mul-zz
  1467 00000269 48BF-                   	mov rdi, free_var_24
  1467 0000026B [A90B000000000000] 
  1468 00000273 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_zz
  1468 00000275 [17AB000000000000] 
  1469 0000027D E84F9D0000              	call bind_primitive
  1470                                  
  1471                                  	; building closure for __bin-div-zz
  1472 00000282 48BF-                   	mov rdi, free_var_15
  1472 00000284 [100B000000000000] 
  1473 0000028C 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_zz
  1473 0000028E [ACAB000000000000] 
  1474 00000296 E8369D0000              	call bind_primitive
  1475                                  
  1476                                  	; building closure for error
  1477 0000029B 48BF-                   	mov rdi, free_var_72
  1477 0000029D [D90E000000000000] 
  1478 000002A5 48BE-                   	mov rsi, L_code_ptr_error
  1478 000002A7 [DCAC000000000000] 
  1479 000002AF E81D9D0000              	call bind_primitive
  1480                                  
  1481                                  	; building closure for __bin-less-than-rr
  1482 000002B4 48BF-                   	mov rdi, free_var_20
  1482 000002B6 [650B000000000000] 
  1483 000002BE 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
  1483 000002C0 [98AD000000000000] 
  1484 000002C8 E8049D0000              	call bind_primitive
  1485                                  
  1486                                  	; building closure for __bin-less-than-qq
  1487 000002CD 48BF-                   	mov rdi, free_var_19
  1487 000002CF [540B000000000000] 
  1488 000002D7 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
  1488 000002D9 [3AAE000000000000] 
  1489 000002E1 E8EB9C0000              	call bind_primitive
  1490                                  
  1491                                  	; building closure for __bin-less-than-zz
  1492 000002E6 48BF-                   	mov rdi, free_var_21
  1492 000002E8 [760B000000000000] 
  1493 000002F0 48BE-                   	mov rsi, L_code_ptr_raw_less_than_zz
  1493 000002F2 [EBAD000000000000] 
  1494 000002FA E8D29C0000              	call bind_primitive
  1495                                  
  1496                                  	; building closure for __bin-equal-rr
  1497 000002FF 48BF-                   	mov rdi, free_var_17
  1497 00000301 [320B000000000000] 
  1498 00000309 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
  1498 0000030B [99AE000000000000] 
  1499 00000313 E8B99C0000              	call bind_primitive
  1500                                  
  1501                                  	; building closure for __bin-equal-qq
  1502 00000318 48BF-                   	mov rdi, free_var_16
  1502 0000031A [210B000000000000] 
  1503 00000322 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
  1503 00000324 [3BAF000000000000] 
  1504 0000032C E8A09C0000              	call bind_primitive
  1505                                  
  1506                                  	; building closure for __bin-equal-zz
  1507 00000331 48BF-                   	mov rdi, free_var_18
  1507 00000333 [430B000000000000] 
  1508 0000033B 48BE-                   	mov rsi, L_code_ptr_raw_equal_zz
  1508 0000033D [ECAE000000000000] 
  1509 00000345 E8879C0000              	call bind_primitive
  1510                                  
  1511                                  	; building closure for __integer-to-fraction
  1512 0000034A 48BF-                   	mov rdi, free_var_29
  1512 0000034C [FE0B000000000000] 
  1513 00000354 48BE-                   	mov rsi, L_code_ptr_integer_to_fraction
  1513 00000356 [8AA7000000000000] 
  1514 0000035E E86E9C0000              	call bind_primitive
  1515                                  
  1516 00000363 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1517 00000368 E834940000              	call malloc
  1518 0000036D 50                      	push rax
  1519 0000036E BF00000000              	mov rdi, 8 * 0	; new rib
  1520 00000373 E829940000              	call malloc
  1521 00000378 50                      	push rax
  1522 00000379 BF08000000              	mov rdi, 8 * 1	; extended env
  1523 0000037E E81E940000              	call malloc
  1524 00000383 488B7D10                	mov rdi, ENV
  1525 00000387 BE00000000              	mov rsi, 0
  1526 0000038C BA01000000              	mov rdx, 1
  1527                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
  1528 00000391 4883FE00                	cmp rsi, 0
  1529 00000395 7410                    	je .L_lambda_simple_env_end_0001
  1530 00000397 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1531 0000039B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1532 0000039F 48FFC6                  	inc rsi
  1533 000003A2 48FFC2                  	inc rdx
  1534 000003A5 EBEA                    	jmp .L_lambda_simple_env_loop_0001
  1535                                  .L_lambda_simple_env_end_0001:
  1536 000003A7 5B                      	pop rbx
  1537 000003A8 BE00000000              	mov rsi, 0
  1538                                  .L_lambda_simple_params_loop_0001:	; copy params
  1539 000003AD 4883FE00                	cmp rsi, 0
  1540 000003B1 740E                    	je .L_lambda_simple_params_end_0001
  1541 000003B3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1542 000003B8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1543 000003BC 48FFC6                  	inc rsi
  1544 000003BF EBEC                    	jmp .L_lambda_simple_params_loop_0001
  1545                                  .L_lambda_simple_params_end_0001:
  1546 000003C1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1547 000003C4 4889C3                  	mov rbx, rax
  1548 000003C7 58                      	pop rax
  1549 000003C8 C60004                  	mov byte [rax], T_closure
  1550 000003CB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1551 000003CF 48C74009[D9030000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
  1552 000003D7 EB65                    	jmp .L_lambda_simple_end_0001
  1553                                  .L_lambda_simple_code_0001:	; lambda-simple body
  1554 000003D9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1555 000003DF 740B                    	je .L_lambda_simple_arity_check_ok_0001
  1556 000003E1 FF742410                	push qword [rsp + 8 * 2]
  1557 000003E5 6A01                    	push 1
  1558 000003E7 E96E930000              	jmp L_error_incorrect_arity_simple
  1559                                  .L_lambda_simple_arity_check_ok_0001:
  1560 000003EC C8000000                	enter 0, 0
  1561                                  	; preparing a non-tail-call
  1562                                  	; preparing a non-tail-call
  1563 000003F0 488B4520                	mov rax, PARAM(0)	; param x
  1564 000003F4 50                      	push rax
  1565 000003F5 6A01                    	push 1	; arg count
  1566 000003F7 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  1567 000003FF 803805                  	cmp byte [rax], T_undefined
  1568 00000402 0F846C920000            	je L_error_fvar_undefined
  1569 00000408 803804                  	cmp byte [rax], T_closure
  1570 0000040B 0F85E7920000            	jne L_error_non_closure
  1571 00000411 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1572 00000414 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1573 00000417 50                      	push rax
  1574 00000418 6A01                    	push 1	; arg count
  1575 0000041A 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  1576 00000422 803805                  	cmp byte [rax], T_undefined
  1577 00000425 0F8449920000            	je L_error_fvar_undefined
  1578 0000042B 803804                  	cmp byte [rax], T_closure
  1579 0000042E 0F85C4920000            	jne L_error_non_closure
  1580 00000434 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1581 00000437 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1582 0000043A C9                      	leave
  1583 0000043B C21800                  	ret AND_KILL_FRAME(1)
  1584                                  .L_lambda_simple_end_0001:	; new closure is in rax
  1585 0000043E 48890425[A80C0000]      	mov qword [free_var_39], rax
  1586 00000446 48B8-                   	mov rax, sob_void
  1586 00000448 [0000000000000000] 
  1587                                  
  1588 00000450 4889C7                  	mov rdi, rax
  1589 00000453 E89E950000              	call print_sexpr_if_not_void
  1590 00000458 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1591 0000045D E83F930000              	call malloc
  1592 00000462 50                      	push rax
  1593 00000463 BF00000000              	mov rdi, 8 * 0	; new rib
  1594 00000468 E834930000              	call malloc
  1595 0000046D 50                      	push rax
  1596 0000046E BF08000000              	mov rdi, 8 * 1	; extended env
  1597 00000473 E829930000              	call malloc
  1598 00000478 488B7D10                	mov rdi, ENV
  1599 0000047C BE00000000              	mov rsi, 0
  1600 00000481 BA01000000              	mov rdx, 1
  1601                                  .L_lambda_simple_env_loop_0002:	; ext_env[i + 1] <-- env[i]
  1602 00000486 4883FE00                	cmp rsi, 0
  1603 0000048A 7410                    	je .L_lambda_simple_env_end_0002
  1604 0000048C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1605 00000490 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1606 00000494 48FFC6                  	inc rsi
  1607 00000497 48FFC2                  	inc rdx
  1608 0000049A EBEA                    	jmp .L_lambda_simple_env_loop_0002
  1609                                  .L_lambda_simple_env_end_0002:
  1610 0000049C 5B                      	pop rbx
  1611 0000049D BE00000000              	mov rsi, 0
  1612                                  .L_lambda_simple_params_loop_0002:	; copy params
  1613 000004A2 4883FE00                	cmp rsi, 0
  1614 000004A6 740E                    	je .L_lambda_simple_params_end_0002
  1615 000004A8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1616 000004AD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1617 000004B1 48FFC6                  	inc rsi
  1618 000004B4 EBEC                    	jmp .L_lambda_simple_params_loop_0002
  1619                                  .L_lambda_simple_params_end_0002:
  1620 000004B6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1621 000004B9 4889C3                  	mov rbx, rax
  1622 000004BC 58                      	pop rax
  1623 000004BD C60004                  	mov byte [rax], T_closure
  1624 000004C0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1625 000004C4 48C74009[CE040000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0002
  1626 000004CC EB65                    	jmp .L_lambda_simple_end_0002
  1627                                  .L_lambda_simple_code_0002:	; lambda-simple body
  1628 000004CE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1629 000004D4 740B                    	je .L_lambda_simple_arity_check_ok_0002
  1630 000004D6 FF742410                	push qword [rsp + 8 * 2]
  1631 000004DA 6A01                    	push 1
  1632 000004DC E979920000              	jmp L_error_incorrect_arity_simple
  1633                                  .L_lambda_simple_arity_check_ok_0002:
  1634 000004E1 C8000000                	enter 0, 0
  1635                                  	; preparing a non-tail-call
  1636                                  	; preparing a non-tail-call
  1637 000004E5 488B4520                	mov rax, PARAM(0)	; param x
  1638 000004E9 50                      	push rax
  1639 000004EA 6A01                    	push 1	; arg count
  1640 000004EC 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  1641 000004F4 803805                  	cmp byte [rax], T_undefined
  1642 000004F7 0F8477910000            	je L_error_fvar_undefined
  1643 000004FD 803804                  	cmp byte [rax], T_closure
  1644 00000500 0F85F2910000            	jne L_error_non_closure
  1645 00000506 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1646 00000509 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1647 0000050C 50                      	push rax
  1648 0000050D 6A01                    	push 1	; arg count
  1649 0000050F 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  1650 00000517 803805                  	cmp byte [rax], T_undefined
  1651 0000051A 0F8454910000            	je L_error_fvar_undefined
  1652 00000520 803804                  	cmp byte [rax], T_closure
  1653 00000523 0F85CF910000            	jne L_error_non_closure
  1654 00000529 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1655 0000052C FF5009                  	call SOB_CLOSURE_CODE(rax)
  1656 0000052F C9                      	leave
  1657 00000530 C21800                  	ret AND_KILL_FRAME(1)
  1658                                  .L_lambda_simple_end_0002:	; new closure is in rax
  1659 00000533 48890425[1F0D0000]      	mov qword [free_var_46], rax
  1660 0000053B 48B8-                   	mov rax, sob_void
  1660 0000053D [0000000000000000] 
  1661                                  
  1662 00000545 4889C7                  	mov rdi, rax
  1663 00000548 E8A9940000              	call print_sexpr_if_not_void
  1664 0000054D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1665 00000552 E84A920000              	call malloc
  1666 00000557 50                      	push rax
  1667 00000558 BF00000000              	mov rdi, 8 * 0	; new rib
  1668 0000055D E83F920000              	call malloc
  1669 00000562 50                      	push rax
  1670 00000563 BF08000000              	mov rdi, 8 * 1	; extended env
  1671 00000568 E834920000              	call malloc
  1672 0000056D 488B7D10                	mov rdi, ENV
  1673 00000571 BE00000000              	mov rsi, 0
  1674 00000576 BA01000000              	mov rdx, 1
  1675                                  .L_lambda_simple_env_loop_0003:	; ext_env[i + 1] <-- env[i]
  1676 0000057B 4883FE00                	cmp rsi, 0
  1677 0000057F 7410                    	je .L_lambda_simple_env_end_0003
  1678 00000581 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1679 00000585 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1680 00000589 48FFC6                  	inc rsi
  1681 0000058C 48FFC2                  	inc rdx
  1682 0000058F EBEA                    	jmp .L_lambda_simple_env_loop_0003
  1683                                  .L_lambda_simple_env_end_0003:
  1684 00000591 5B                      	pop rbx
  1685 00000592 BE00000000              	mov rsi, 0
  1686                                  .L_lambda_simple_params_loop_0003:	; copy params
  1687 00000597 4883FE00                	cmp rsi, 0
  1688 0000059B 740E                    	je .L_lambda_simple_params_end_0003
  1689 0000059D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1690 000005A2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1691 000005A6 48FFC6                  	inc rsi
  1692 000005A9 EBEC                    	jmp .L_lambda_simple_params_loop_0003
  1693                                  .L_lambda_simple_params_end_0003:
  1694 000005AB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1695 000005AE 4889C3                  	mov rbx, rax
  1696 000005B1 58                      	pop rax
  1697 000005B2 C60004                  	mov byte [rax], T_closure
  1698 000005B5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1699 000005B9 48C74009[C3050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0003
  1700 000005C1 EB65                    	jmp .L_lambda_simple_end_0003
  1701                                  .L_lambda_simple_code_0003:	; lambda-simple body
  1702 000005C3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1703 000005C9 740B                    	je .L_lambda_simple_arity_check_ok_0003
  1704 000005CB FF742410                	push qword [rsp + 8 * 2]
  1705 000005CF 6A01                    	push 1
  1706 000005D1 E984910000              	jmp L_error_incorrect_arity_simple
  1707                                  .L_lambda_simple_arity_check_ok_0003:
  1708 000005D6 C8000000                	enter 0, 0
  1709                                  	; preparing a non-tail-call
  1710                                  	; preparing a non-tail-call
  1711 000005DA 488B4520                	mov rax, PARAM(0)	; param x
  1712 000005DE 50                      	push rax
  1713 000005DF 6A01                    	push 1	; arg count
  1714 000005E1 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  1715 000005E9 803805                  	cmp byte [rax], T_undefined
  1716 000005EC 0F8482900000            	je L_error_fvar_undefined
  1717 000005F2 803804                  	cmp byte [rax], T_closure
  1718 000005F5 0F85FD900000            	jne L_error_non_closure
  1719 000005FB FF7001                  	push SOB_CLOSURE_ENV(rax)
  1720 000005FE FF5009                  	call SOB_CLOSURE_CODE(rax)
  1721 00000601 50                      	push rax
  1722 00000602 6A01                    	push 1	; arg count
  1723 00000604 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  1724 0000060C 803805                  	cmp byte [rax], T_undefined
  1725 0000060F 0F845F900000            	je L_error_fvar_undefined
  1726 00000615 803804                  	cmp byte [rax], T_closure
  1727 00000618 0F85DA900000            	jne L_error_non_closure
  1728 0000061E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1729 00000621 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1730 00000624 C9                      	leave
  1731 00000625 C21800                  	ret AND_KILL_FRAME(1)
  1732                                  .L_lambda_simple_end_0003:	; new closure is in rax
  1733 00000628 48890425[A70D0000]      	mov qword [free_var_54], rax
  1734 00000630 48B8-                   	mov rax, sob_void
  1734 00000632 [0000000000000000] 
  1735                                  
  1736 0000063A 4889C7                  	mov rdi, rax
  1737 0000063D E8B4930000              	call print_sexpr_if_not_void
  1738 00000642 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1739 00000647 E855910000              	call malloc
  1740 0000064C 50                      	push rax
  1741 0000064D BF00000000              	mov rdi, 8 * 0	; new rib
  1742 00000652 E84A910000              	call malloc
  1743 00000657 50                      	push rax
  1744 00000658 BF08000000              	mov rdi, 8 * 1	; extended env
  1745 0000065D E83F910000              	call malloc
  1746 00000662 488B7D10                	mov rdi, ENV
  1747 00000666 BE00000000              	mov rsi, 0
  1748 0000066B BA01000000              	mov rdx, 1
  1749                                  .L_lambda_simple_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  1750 00000670 4883FE00                	cmp rsi, 0
  1751 00000674 7410                    	je .L_lambda_simple_env_end_0004
  1752 00000676 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1753 0000067A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1754 0000067E 48FFC6                  	inc rsi
  1755 00000681 48FFC2                  	inc rdx
  1756 00000684 EBEA                    	jmp .L_lambda_simple_env_loop_0004
  1757                                  .L_lambda_simple_env_end_0004:
  1758 00000686 5B                      	pop rbx
  1759 00000687 BE00000000              	mov rsi, 0
  1760                                  .L_lambda_simple_params_loop_0004:	; copy params
  1761 0000068C 4883FE00                	cmp rsi, 0
  1762 00000690 740E                    	je .L_lambda_simple_params_end_0004
  1763 00000692 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1764 00000697 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1765 0000069B 48FFC6                  	inc rsi
  1766 0000069E EBEC                    	jmp .L_lambda_simple_params_loop_0004
  1767                                  .L_lambda_simple_params_end_0004:
  1768 000006A0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1769 000006A3 4889C3                  	mov rbx, rax
  1770 000006A6 58                      	pop rax
  1771 000006A7 C60004                  	mov byte [rax], T_closure
  1772 000006AA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1773 000006AE 48C74009[B8060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0004
  1774 000006B6 EB65                    	jmp .L_lambda_simple_end_0004
  1775                                  .L_lambda_simple_code_0004:	; lambda-simple body
  1776 000006B8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1777 000006BE 740B                    	je .L_lambda_simple_arity_check_ok_0004
  1778 000006C0 FF742410                	push qword [rsp + 8 * 2]
  1779 000006C4 6A01                    	push 1
  1780 000006C6 E98F900000              	jmp L_error_incorrect_arity_simple
  1781                                  .L_lambda_simple_arity_check_ok_0004:
  1782 000006CB C8000000                	enter 0, 0
  1783                                  	; preparing a non-tail-call
  1784                                  	; preparing a non-tail-call
  1785 000006CF 488B4520                	mov rax, PARAM(0)	; param x
  1786 000006D3 50                      	push rax
  1787 000006D4 6A01                    	push 1	; arg count
  1788 000006D6 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  1789 000006DE 803805                  	cmp byte [rax], T_undefined
  1790 000006E1 0F848D8F0000            	je L_error_fvar_undefined
  1791 000006E7 803804                  	cmp byte [rax], T_closure
  1792 000006EA 0F8508900000            	jne L_error_non_closure
  1793 000006F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1794 000006F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1795 000006F6 50                      	push rax
  1796 000006F7 6A01                    	push 1	; arg count
  1797 000006F9 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  1798 00000701 803805                  	cmp byte [rax], T_undefined
  1799 00000704 0F846A8F0000            	je L_error_fvar_undefined
  1800 0000070A 803804                  	cmp byte [rax], T_closure
  1801 0000070D 0F85E58F0000            	jne L_error_non_closure
  1802 00000713 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1803 00000716 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1804 00000719 C9                      	leave
  1805 0000071A C21800                  	ret AND_KILL_FRAME(1)
  1806                                  .L_lambda_simple_end_0004:	; new closure is in rax
  1807 0000071D 48890425[1E0E0000]      	mov qword [free_var_61], rax
  1808 00000725 48B8-                   	mov rax, sob_void
  1808 00000727 [0000000000000000] 
  1809                                  
  1810 0000072F 4889C7                  	mov rdi, rax
  1811 00000732 E8BF920000              	call print_sexpr_if_not_void
  1812 00000737 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1813 0000073C E860900000              	call malloc
  1814 00000741 50                      	push rax
  1815 00000742 BF00000000              	mov rdi, 8 * 0	; new rib
  1816 00000747 E855900000              	call malloc
  1817 0000074C 50                      	push rax
  1818 0000074D BF08000000              	mov rdi, 8 * 1	; extended env
  1819 00000752 E84A900000              	call malloc
  1820 00000757 488B7D10                	mov rdi, ENV
  1821 0000075B BE00000000              	mov rsi, 0
  1822 00000760 BA01000000              	mov rdx, 1
  1823                                  .L_lambda_simple_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  1824 00000765 4883FE00                	cmp rsi, 0
  1825 00000769 7410                    	je .L_lambda_simple_env_end_0005
  1826 0000076B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1827 0000076F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1828 00000773 48FFC6                  	inc rsi
  1829 00000776 48FFC2                  	inc rdx
  1830 00000779 EBEA                    	jmp .L_lambda_simple_env_loop_0005
  1831                                  .L_lambda_simple_env_end_0005:
  1832 0000077B 5B                      	pop rbx
  1833 0000077C BE00000000              	mov rsi, 0
  1834                                  .L_lambda_simple_params_loop_0005:	; copy params
  1835 00000781 4883FE00                	cmp rsi, 0
  1836 00000785 740E                    	je .L_lambda_simple_params_end_0005
  1837 00000787 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1838 0000078C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1839 00000790 48FFC6                  	inc rsi
  1840 00000793 EBEC                    	jmp .L_lambda_simple_params_loop_0005
  1841                                  .L_lambda_simple_params_end_0005:
  1842 00000795 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1843 00000798 4889C3                  	mov rbx, rax
  1844 0000079B 58                      	pop rax
  1845 0000079C C60004                  	mov byte [rax], T_closure
  1846 0000079F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1847 000007A3 48C74009[AD070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0005
  1848 000007AB EB65                    	jmp .L_lambda_simple_end_0005
  1849                                  .L_lambda_simple_code_0005:	; lambda-simple body
  1850 000007AD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1851 000007B3 740B                    	je .L_lambda_simple_arity_check_ok_0005
  1852 000007B5 FF742410                	push qword [rsp + 8 * 2]
  1853 000007B9 6A01                    	push 1
  1854 000007BB E99A8F0000              	jmp L_error_incorrect_arity_simple
  1855                                  .L_lambda_simple_arity_check_ok_0005:
  1856 000007C0 C8000000                	enter 0, 0
  1857                                  	; preparing a non-tail-call
  1858                                  	; preparing a non-tail-call
  1859 000007C4 488B4520                	mov rax, PARAM(0)	; param x
  1860 000007C8 50                      	push rax
  1861 000007C9 6A01                    	push 1	; arg count
  1862 000007CB 488B0425[A80C0000]      	mov rax, qword [free_var_39]	; free var caar
  1863 000007D3 803805                  	cmp byte [rax], T_undefined
  1864 000007D6 0F84988E0000            	je L_error_fvar_undefined
  1865 000007DC 803804                  	cmp byte [rax], T_closure
  1866 000007DF 0F85138F0000            	jne L_error_non_closure
  1867 000007E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1868 000007E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1869 000007EB 50                      	push rax
  1870 000007EC 6A01                    	push 1	; arg count
  1871 000007EE 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  1872 000007F6 803805                  	cmp byte [rax], T_undefined
  1873 000007F9 0F84758E0000            	je L_error_fvar_undefined
  1874 000007FF 803804                  	cmp byte [rax], T_closure
  1875 00000802 0F85F08E0000            	jne L_error_non_closure
  1876 00000808 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1877 0000080B FF5009                  	call SOB_CLOSURE_CODE(rax)
  1878 0000080E C9                      	leave
  1879 0000080F C21800                  	ret AND_KILL_FRAME(1)
  1880                                  .L_lambda_simple_end_0005:	; new closure is in rax
  1881 00000812 48890425[640C0000]      	mov qword [free_var_35], rax
  1882 0000081A 48B8-                   	mov rax, sob_void
  1882 0000081C [0000000000000000] 
  1883                                  
  1884 00000824 4889C7                  	mov rdi, rax
  1885 00000827 E8CA910000              	call print_sexpr_if_not_void
  1886 0000082C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1887 00000831 E86B8F0000              	call malloc
  1888 00000836 50                      	push rax
  1889 00000837 BF00000000              	mov rdi, 8 * 0	; new rib
  1890 0000083C E8608F0000              	call malloc
  1891 00000841 50                      	push rax
  1892 00000842 BF08000000              	mov rdi, 8 * 1	; extended env
  1893 00000847 E8558F0000              	call malloc
  1894 0000084C 488B7D10                	mov rdi, ENV
  1895 00000850 BE00000000              	mov rsi, 0
  1896 00000855 BA01000000              	mov rdx, 1
  1897                                  .L_lambda_simple_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  1898 0000085A 4883FE00                	cmp rsi, 0
  1899 0000085E 7410                    	je .L_lambda_simple_env_end_0006
  1900 00000860 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1901 00000864 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1902 00000868 48FFC6                  	inc rsi
  1903 0000086B 48FFC2                  	inc rdx
  1904 0000086E EBEA                    	jmp .L_lambda_simple_env_loop_0006
  1905                                  .L_lambda_simple_env_end_0006:
  1906 00000870 5B                      	pop rbx
  1907 00000871 BE00000000              	mov rsi, 0
  1908                                  .L_lambda_simple_params_loop_0006:	; copy params
  1909 00000876 4883FE00                	cmp rsi, 0
  1910 0000087A 740E                    	je .L_lambda_simple_params_end_0006
  1911 0000087C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1912 00000881 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1913 00000885 48FFC6                  	inc rsi
  1914 00000888 EBEC                    	jmp .L_lambda_simple_params_loop_0006
  1915                                  .L_lambda_simple_params_end_0006:
  1916 0000088A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1917 0000088D 4889C3                  	mov rbx, rax
  1918 00000890 58                      	pop rax
  1919 00000891 C60004                  	mov byte [rax], T_closure
  1920 00000894 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1921 00000898 48C74009[A2080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0006
  1922 000008A0 EB65                    	jmp .L_lambda_simple_end_0006
  1923                                  .L_lambda_simple_code_0006:	; lambda-simple body
  1924 000008A2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1925 000008A8 740B                    	je .L_lambda_simple_arity_check_ok_0006
  1926 000008AA FF742410                	push qword [rsp + 8 * 2]
  1927 000008AE 6A01                    	push 1
  1928 000008B0 E9A58E0000              	jmp L_error_incorrect_arity_simple
  1929                                  .L_lambda_simple_arity_check_ok_0006:
  1930 000008B5 C8000000                	enter 0, 0
  1931                                  	; preparing a non-tail-call
  1932                                  	; preparing a non-tail-call
  1933 000008B9 488B4520                	mov rax, PARAM(0)	; param x
  1934 000008BD 50                      	push rax
  1935 000008BE 6A01                    	push 1	; arg count
  1936 000008C0 488B0425[1F0D0000]      	mov rax, qword [free_var_46]	; free var cadr
  1937 000008C8 803805                  	cmp byte [rax], T_undefined
  1938 000008CB 0F84A38D0000            	je L_error_fvar_undefined
  1939 000008D1 803804                  	cmp byte [rax], T_closure
  1940 000008D4 0F851E8E0000            	jne L_error_non_closure
  1941 000008DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  1942 000008DD FF5009                  	call SOB_CLOSURE_CODE(rax)
  1943 000008E0 50                      	push rax
  1944 000008E1 6A01                    	push 1	; arg count
  1945 000008E3 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  1946 000008EB 803805                  	cmp byte [rax], T_undefined
  1947 000008EE 0F84808D0000            	je L_error_fvar_undefined
  1948 000008F4 803804                  	cmp byte [rax], T_closure
  1949 000008F7 0F85FB8D0000            	jne L_error_non_closure
  1950 000008FD FF7001                  	push SOB_CLOSURE_ENV(rax)
  1951 00000900 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1952 00000903 C9                      	leave
  1953 00000904 C21800                  	ret AND_KILL_FRAME(1)
  1954                                  .L_lambda_simple_end_0006:	; new closure is in rax
  1955 00000907 48890425[970C0000]      	mov qword [free_var_38], rax
  1956 0000090F 48B8-                   	mov rax, sob_void
  1956 00000911 [0000000000000000] 
  1957                                  
  1958 00000919 4889C7                  	mov rdi, rax
  1959 0000091C E8D5900000              	call print_sexpr_if_not_void
  1960 00000921 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1961 00000926 E8768E0000              	call malloc
  1962 0000092B 50                      	push rax
  1963 0000092C BF00000000              	mov rdi, 8 * 0	; new rib
  1964 00000931 E86B8E0000              	call malloc
  1965 00000936 50                      	push rax
  1966 00000937 BF08000000              	mov rdi, 8 * 1	; extended env
  1967 0000093C E8608E0000              	call malloc
  1968 00000941 488B7D10                	mov rdi, ENV
  1969 00000945 BE00000000              	mov rsi, 0
  1970 0000094A BA01000000              	mov rdx, 1
  1971                                  .L_lambda_simple_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  1972 0000094F 4883FE00                	cmp rsi, 0
  1973 00000953 7410                    	je .L_lambda_simple_env_end_0007
  1974 00000955 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1975 00000959 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1976 0000095D 48FFC6                  	inc rsi
  1977 00000960 48FFC2                  	inc rdx
  1978 00000963 EBEA                    	jmp .L_lambda_simple_env_loop_0007
  1979                                  .L_lambda_simple_env_end_0007:
  1980 00000965 5B                      	pop rbx
  1981 00000966 BE00000000              	mov rsi, 0
  1982                                  .L_lambda_simple_params_loop_0007:	; copy params
  1983 0000096B 4883FE00                	cmp rsi, 0
  1984 0000096F 740E                    	je .L_lambda_simple_params_end_0007
  1985 00000971 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1986 00000976 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1987 0000097A 48FFC6                  	inc rsi
  1988 0000097D EBEC                    	jmp .L_lambda_simple_params_loop_0007
  1989                                  .L_lambda_simple_params_end_0007:
  1990 0000097F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1991 00000982 4889C3                  	mov rbx, rax
  1992 00000985 58                      	pop rax
  1993 00000986 C60004                  	mov byte [rax], T_closure
  1994 00000989 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1995 0000098D 48C74009[97090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0007
  1996 00000995 EB65                    	jmp .L_lambda_simple_end_0007
  1997                                  .L_lambda_simple_code_0007:	; lambda-simple body
  1998 00000997 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1999 0000099D 740B                    	je .L_lambda_simple_arity_check_ok_0007
  2000 0000099F FF742410                	push qword [rsp + 8 * 2]
  2001 000009A3 6A01                    	push 1
  2002 000009A5 E9B08D0000              	jmp L_error_incorrect_arity_simple
  2003                                  .L_lambda_simple_arity_check_ok_0007:
  2004 000009AA C8000000                	enter 0, 0
  2005                                  	; preparing a non-tail-call
  2006                                  	; preparing a non-tail-call
  2007 000009AE 488B4520                	mov rax, PARAM(0)	; param x
  2008 000009B2 50                      	push rax
  2009 000009B3 6A01                    	push 1	; arg count
  2010 000009B5 488B0425[A70D0000]      	mov rax, qword [free_var_54]	; free var cdar
  2011 000009BD 803805                  	cmp byte [rax], T_undefined
  2012 000009C0 0F84AE8C0000            	je L_error_fvar_undefined
  2013 000009C6 803804                  	cmp byte [rax], T_closure
  2014 000009C9 0F85298D0000            	jne L_error_non_closure
  2015 000009CF FF7001                  	push SOB_CLOSURE_ENV(rax)
  2016 000009D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2017 000009D5 50                      	push rax
  2018 000009D6 6A01                    	push 1	; arg count
  2019 000009D8 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  2020 000009E0 803805                  	cmp byte [rax], T_undefined
  2021 000009E3 0F848B8C0000            	je L_error_fvar_undefined
  2022 000009E9 803804                  	cmp byte [rax], T_closure
  2023 000009EC 0F85068D0000            	jne L_error_non_closure
  2024 000009F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2025 000009F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2026 000009F8 C9                      	leave
  2027 000009F9 C21800                  	ret AND_KILL_FRAME(1)
  2028                                  .L_lambda_simple_end_0007:	; new closure is in rax
  2029 000009FC 48890425[DB0C0000]      	mov qword [free_var_42], rax
  2030 00000A04 48B8-                   	mov rax, sob_void
  2030 00000A06 [0000000000000000] 
  2031                                  
  2032 00000A0E 4889C7                  	mov rdi, rax
  2033 00000A11 E8E08F0000              	call print_sexpr_if_not_void
  2034 00000A16 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2035 00000A1B E8818D0000              	call malloc
  2036 00000A20 50                      	push rax
  2037 00000A21 BF00000000              	mov rdi, 8 * 0	; new rib
  2038 00000A26 E8768D0000              	call malloc
  2039 00000A2B 50                      	push rax
  2040 00000A2C BF08000000              	mov rdi, 8 * 1	; extended env
  2041 00000A31 E86B8D0000              	call malloc
  2042 00000A36 488B7D10                	mov rdi, ENV
  2043 00000A3A BE00000000              	mov rsi, 0
  2044 00000A3F BA01000000              	mov rdx, 1
  2045                                  .L_lambda_simple_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  2046 00000A44 4883FE00                	cmp rsi, 0
  2047 00000A48 7410                    	je .L_lambda_simple_env_end_0008
  2048 00000A4A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2049 00000A4E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2050 00000A52 48FFC6                  	inc rsi
  2051 00000A55 48FFC2                  	inc rdx
  2052 00000A58 EBEA                    	jmp .L_lambda_simple_env_loop_0008
  2053                                  .L_lambda_simple_env_end_0008:
  2054 00000A5A 5B                      	pop rbx
  2055 00000A5B BE00000000              	mov rsi, 0
  2056                                  .L_lambda_simple_params_loop_0008:	; copy params
  2057 00000A60 4883FE00                	cmp rsi, 0
  2058 00000A64 740E                    	je .L_lambda_simple_params_end_0008
  2059 00000A66 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2060 00000A6B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2061 00000A6F 48FFC6                  	inc rsi
  2062 00000A72 EBEC                    	jmp .L_lambda_simple_params_loop_0008
  2063                                  .L_lambda_simple_params_end_0008:
  2064 00000A74 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2065 00000A77 4889C3                  	mov rbx, rax
  2066 00000A7A 58                      	pop rax
  2067 00000A7B C60004                  	mov byte [rax], T_closure
  2068 00000A7E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2069 00000A82 48C74009[8C0A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0008
  2070 00000A8A EB65                    	jmp .L_lambda_simple_end_0008
  2071                                  .L_lambda_simple_code_0008:	; lambda-simple body
  2072 00000A8C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2073 00000A92 740B                    	je .L_lambda_simple_arity_check_ok_0008
  2074 00000A94 FF742410                	push qword [rsp + 8 * 2]
  2075 00000A98 6A01                    	push 1
  2076 00000A9A E9BB8C0000              	jmp L_error_incorrect_arity_simple
  2077                                  .L_lambda_simple_arity_check_ok_0008:
  2078 00000A9F C8000000                	enter 0, 0
  2079                                  	; preparing a non-tail-call
  2080                                  	; preparing a non-tail-call
  2081 00000AA3 488B4520                	mov rax, PARAM(0)	; param x
  2082 00000AA7 50                      	push rax
  2083 00000AA8 6A01                    	push 1	; arg count
  2084 00000AAA 488B0425[1E0E0000]      	mov rax, qword [free_var_61]	; free var cddr
  2085 00000AB2 803805                  	cmp byte [rax], T_undefined
  2086 00000AB5 0F84B98B0000            	je L_error_fvar_undefined
  2087 00000ABB 803804                  	cmp byte [rax], T_closure
  2088 00000ABE 0F85348C0000            	jne L_error_non_closure
  2089 00000AC4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2090 00000AC7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2091 00000ACA 50                      	push rax
  2092 00000ACB 6A01                    	push 1	; arg count
  2093 00000ACD 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  2094 00000AD5 803805                  	cmp byte [rax], T_undefined
  2095 00000AD8 0F84968B0000            	je L_error_fvar_undefined
  2096 00000ADE 803804                  	cmp byte [rax], T_closure
  2097 00000AE1 0F85118C0000            	jne L_error_non_closure
  2098 00000AE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2099 00000AEA FF5009                  	call SOB_CLOSURE_CODE(rax)
  2100 00000AED C9                      	leave
  2101 00000AEE C21800                  	ret AND_KILL_FRAME(1)
  2102                                  .L_lambda_simple_end_0008:	; new closure is in rax
  2103 00000AF1 48890425[0E0D0000]      	mov qword [free_var_45], rax
  2104 00000AF9 48B8-                   	mov rax, sob_void
  2104 00000AFB [0000000000000000] 
  2105                                  
  2106 00000B03 4889C7                  	mov rdi, rax
  2107 00000B06 E8EB8E0000              	call print_sexpr_if_not_void
  2108 00000B0B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2109 00000B10 E88C8C0000              	call malloc
  2110 00000B15 50                      	push rax
  2111 00000B16 BF00000000              	mov rdi, 8 * 0	; new rib
  2112 00000B1B E8818C0000              	call malloc
  2113 00000B20 50                      	push rax
  2114 00000B21 BF08000000              	mov rdi, 8 * 1	; extended env
  2115 00000B26 E8768C0000              	call malloc
  2116 00000B2B 488B7D10                	mov rdi, ENV
  2117 00000B2F BE00000000              	mov rsi, 0
  2118 00000B34 BA01000000              	mov rdx, 1
  2119                                  .L_lambda_simple_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  2120 00000B39 4883FE00                	cmp rsi, 0
  2121 00000B3D 7410                    	je .L_lambda_simple_env_end_0009
  2122 00000B3F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2123 00000B43 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2124 00000B47 48FFC6                  	inc rsi
  2125 00000B4A 48FFC2                  	inc rdx
  2126 00000B4D EBEA                    	jmp .L_lambda_simple_env_loop_0009
  2127                                  .L_lambda_simple_env_end_0009:
  2128 00000B4F 5B                      	pop rbx
  2129 00000B50 BE00000000              	mov rsi, 0
  2130                                  .L_lambda_simple_params_loop_0009:	; copy params
  2131 00000B55 4883FE00                	cmp rsi, 0
  2132 00000B59 740E                    	je .L_lambda_simple_params_end_0009
  2133 00000B5B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2134 00000B60 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2135 00000B64 48FFC6                  	inc rsi
  2136 00000B67 EBEC                    	jmp .L_lambda_simple_params_loop_0009
  2137                                  .L_lambda_simple_params_end_0009:
  2138 00000B69 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2139 00000B6C 4889C3                  	mov rbx, rax
  2140 00000B6F 58                      	pop rax
  2141 00000B70 C60004                  	mov byte [rax], T_closure
  2142 00000B73 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2143 00000B77 48C74009[810B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0009
  2144 00000B7F EB65                    	jmp .L_lambda_simple_end_0009
  2145                                  .L_lambda_simple_code_0009:	; lambda-simple body
  2146 00000B81 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2147 00000B87 740B                    	je .L_lambda_simple_arity_check_ok_0009
  2148 00000B89 FF742410                	push qword [rsp + 8 * 2]
  2149 00000B8D 6A01                    	push 1
  2150 00000B8F E9C68B0000              	jmp L_error_incorrect_arity_simple
  2151                                  .L_lambda_simple_arity_check_ok_0009:
  2152 00000B94 C8000000                	enter 0, 0
  2153                                  	; preparing a non-tail-call
  2154                                  	; preparing a non-tail-call
  2155 00000B98 488B4520                	mov rax, PARAM(0)	; param x
  2156 00000B9C 50                      	push rax
  2157 00000B9D 6A01                    	push 1	; arg count
  2158 00000B9F 488B0425[A80C0000]      	mov rax, qword [free_var_39]	; free var caar
  2159 00000BA7 803805                  	cmp byte [rax], T_undefined
  2160 00000BAA 0F84C48A0000            	je L_error_fvar_undefined
  2161 00000BB0 803804                  	cmp byte [rax], T_closure
  2162 00000BB3 0F853F8B0000            	jne L_error_non_closure
  2163 00000BB9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2164 00000BBC FF5009                  	call SOB_CLOSURE_CODE(rax)
  2165 00000BBF 50                      	push rax
  2166 00000BC0 6A01                    	push 1	; arg count
  2167 00000BC2 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  2168 00000BCA 803805                  	cmp byte [rax], T_undefined
  2169 00000BCD 0F84A18A0000            	je L_error_fvar_undefined
  2170 00000BD3 803804                  	cmp byte [rax], T_closure
  2171 00000BD6 0F851C8B0000            	jne L_error_non_closure
  2172 00000BDC FF7001                  	push SOB_CLOSURE_ENV(rax)
  2173 00000BDF FF5009                  	call SOB_CLOSURE_CODE(rax)
  2174 00000BE2 C9                      	leave
  2175 00000BE3 C21800                  	ret AND_KILL_FRAME(1)
  2176                                  .L_lambda_simple_end_0009:	; new closure is in rax
  2177 00000BE6 48890425[630D0000]      	mov qword [free_var_50], rax
  2178 00000BEE 48B8-                   	mov rax, sob_void
  2178 00000BF0 [0000000000000000] 
  2179                                  
  2180 00000BF8 4889C7                  	mov rdi, rax
  2181 00000BFB E8F68D0000              	call print_sexpr_if_not_void
  2182 00000C00 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2183 00000C05 E8978B0000              	call malloc
  2184 00000C0A 50                      	push rax
  2185 00000C0B BF00000000              	mov rdi, 8 * 0	; new rib
  2186 00000C10 E88C8B0000              	call malloc
  2187 00000C15 50                      	push rax
  2188 00000C16 BF08000000              	mov rdi, 8 * 1	; extended env
  2189 00000C1B E8818B0000              	call malloc
  2190 00000C20 488B7D10                	mov rdi, ENV
  2191 00000C24 BE00000000              	mov rsi, 0
  2192 00000C29 BA01000000              	mov rdx, 1
  2193                                  .L_lambda_simple_env_loop_000a:	; ext_env[i + 1] <-- env[i]
  2194 00000C2E 4883FE00                	cmp rsi, 0
  2195 00000C32 7410                    	je .L_lambda_simple_env_end_000a
  2196 00000C34 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2197 00000C38 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2198 00000C3C 48FFC6                  	inc rsi
  2199 00000C3F 48FFC2                  	inc rdx
  2200 00000C42 EBEA                    	jmp .L_lambda_simple_env_loop_000a
  2201                                  .L_lambda_simple_env_end_000a:
  2202 00000C44 5B                      	pop rbx
  2203 00000C45 BE00000000              	mov rsi, 0
  2204                                  .L_lambda_simple_params_loop_000a:	; copy params
  2205 00000C4A 4883FE00                	cmp rsi, 0
  2206 00000C4E 740E                    	je .L_lambda_simple_params_end_000a
  2207 00000C50 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2208 00000C55 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2209 00000C59 48FFC6                  	inc rsi
  2210 00000C5C EBEC                    	jmp .L_lambda_simple_params_loop_000a
  2211                                  .L_lambda_simple_params_end_000a:
  2212 00000C5E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2213 00000C61 4889C3                  	mov rbx, rax
  2214 00000C64 58                      	pop rax
  2215 00000C65 C60004                  	mov byte [rax], T_closure
  2216 00000C68 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2217 00000C6C 48C74009[760C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000a
  2218 00000C74 EB65                    	jmp .L_lambda_simple_end_000a
  2219                                  .L_lambda_simple_code_000a:	; lambda-simple body
  2220 00000C76 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2221 00000C7C 740B                    	je .L_lambda_simple_arity_check_ok_000a
  2222 00000C7E FF742410                	push qword [rsp + 8 * 2]
  2223 00000C82 6A01                    	push 1
  2224 00000C84 E9D18A0000              	jmp L_error_incorrect_arity_simple
  2225                                  .L_lambda_simple_arity_check_ok_000a:
  2226 00000C89 C8000000                	enter 0, 0
  2227                                  	; preparing a non-tail-call
  2228                                  	; preparing a non-tail-call
  2229 00000C8D 488B4520                	mov rax, PARAM(0)	; param x
  2230 00000C91 50                      	push rax
  2231 00000C92 6A01                    	push 1	; arg count
  2232 00000C94 488B0425[1F0D0000]      	mov rax, qword [free_var_46]	; free var cadr
  2233 00000C9C 803805                  	cmp byte [rax], T_undefined
  2234 00000C9F 0F84CF890000            	je L_error_fvar_undefined
  2235 00000CA5 803804                  	cmp byte [rax], T_closure
  2236 00000CA8 0F854A8A0000            	jne L_error_non_closure
  2237 00000CAE FF7001                  	push SOB_CLOSURE_ENV(rax)
  2238 00000CB1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2239 00000CB4 50                      	push rax
  2240 00000CB5 6A01                    	push 1	; arg count
  2241 00000CB7 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  2242 00000CBF 803805                  	cmp byte [rax], T_undefined
  2243 00000CC2 0F84AC890000            	je L_error_fvar_undefined
  2244 00000CC8 803804                  	cmp byte [rax], T_closure
  2245 00000CCB 0F85278A0000            	jne L_error_non_closure
  2246 00000CD1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2247 00000CD4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2248 00000CD7 C9                      	leave
  2249 00000CD8 C21800                  	ret AND_KILL_FRAME(1)
  2250                                  .L_lambda_simple_end_000a:	; new closure is in rax
  2251 00000CDB 48890425[960D0000]      	mov qword [free_var_53], rax
  2252 00000CE3 48B8-                   	mov rax, sob_void
  2252 00000CE5 [0000000000000000] 
  2253                                  
  2254 00000CED 4889C7                  	mov rdi, rax
  2255 00000CF0 E8018D0000              	call print_sexpr_if_not_void
  2256 00000CF5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2257 00000CFA E8A28A0000              	call malloc
  2258 00000CFF 50                      	push rax
  2259 00000D00 BF00000000              	mov rdi, 8 * 0	; new rib
  2260 00000D05 E8978A0000              	call malloc
  2261 00000D0A 50                      	push rax
  2262 00000D0B BF08000000              	mov rdi, 8 * 1	; extended env
  2263 00000D10 E88C8A0000              	call malloc
  2264 00000D15 488B7D10                	mov rdi, ENV
  2265 00000D19 BE00000000              	mov rsi, 0
  2266 00000D1E BA01000000              	mov rdx, 1
  2267                                  .L_lambda_simple_env_loop_000b:	; ext_env[i + 1] <-- env[i]
  2268 00000D23 4883FE00                	cmp rsi, 0
  2269 00000D27 7410                    	je .L_lambda_simple_env_end_000b
  2270 00000D29 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2271 00000D2D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2272 00000D31 48FFC6                  	inc rsi
  2273 00000D34 48FFC2                  	inc rdx
  2274 00000D37 EBEA                    	jmp .L_lambda_simple_env_loop_000b
  2275                                  .L_lambda_simple_env_end_000b:
  2276 00000D39 5B                      	pop rbx
  2277 00000D3A BE00000000              	mov rsi, 0
  2278                                  .L_lambda_simple_params_loop_000b:	; copy params
  2279 00000D3F 4883FE00                	cmp rsi, 0
  2280 00000D43 740E                    	je .L_lambda_simple_params_end_000b
  2281 00000D45 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2282 00000D4A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2283 00000D4E 48FFC6                  	inc rsi
  2284 00000D51 EBEC                    	jmp .L_lambda_simple_params_loop_000b
  2285                                  .L_lambda_simple_params_end_000b:
  2286 00000D53 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2287 00000D56 4889C3                  	mov rbx, rax
  2288 00000D59 58                      	pop rax
  2289 00000D5A C60004                  	mov byte [rax], T_closure
  2290 00000D5D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2291 00000D61 48C74009[6B0D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000b
  2292 00000D69 EB65                    	jmp .L_lambda_simple_end_000b
  2293                                  .L_lambda_simple_code_000b:	; lambda-simple body
  2294 00000D6B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2295 00000D71 740B                    	je .L_lambda_simple_arity_check_ok_000b
  2296 00000D73 FF742410                	push qword [rsp + 8 * 2]
  2297 00000D77 6A01                    	push 1
  2298 00000D79 E9DC890000              	jmp L_error_incorrect_arity_simple
  2299                                  .L_lambda_simple_arity_check_ok_000b:
  2300 00000D7E C8000000                	enter 0, 0
  2301                                  	; preparing a non-tail-call
  2302                                  	; preparing a non-tail-call
  2303 00000D82 488B4520                	mov rax, PARAM(0)	; param x
  2304 00000D86 50                      	push rax
  2305 00000D87 6A01                    	push 1	; arg count
  2306 00000D89 488B0425[A70D0000]      	mov rax, qword [free_var_54]	; free var cdar
  2307 00000D91 803805                  	cmp byte [rax], T_undefined
  2308 00000D94 0F84DA880000            	je L_error_fvar_undefined
  2309 00000D9A 803804                  	cmp byte [rax], T_closure
  2310 00000D9D 0F8555890000            	jne L_error_non_closure
  2311 00000DA3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2312 00000DA6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2313 00000DA9 50                      	push rax
  2314 00000DAA 6A01                    	push 1	; arg count
  2315 00000DAC 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  2316 00000DB4 803805                  	cmp byte [rax], T_undefined
  2317 00000DB7 0F84B7880000            	je L_error_fvar_undefined
  2318 00000DBD 803804                  	cmp byte [rax], T_closure
  2319 00000DC0 0F8532890000            	jne L_error_non_closure
  2320 00000DC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2321 00000DC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2322 00000DCC C9                      	leave
  2323 00000DCD C21800                  	ret AND_KILL_FRAME(1)
  2324                                  .L_lambda_simple_end_000b:	; new closure is in rax
  2325 00000DD0 48890425[DA0D0000]      	mov qword [free_var_57], rax
  2326 00000DD8 48B8-                   	mov rax, sob_void
  2326 00000DDA [0000000000000000] 
  2327                                  
  2328 00000DE2 4889C7                  	mov rdi, rax
  2329 00000DE5 E80C8C0000              	call print_sexpr_if_not_void
  2330 00000DEA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2331 00000DEF E8AD890000              	call malloc
  2332 00000DF4 50                      	push rax
  2333 00000DF5 BF00000000              	mov rdi, 8 * 0	; new rib
  2334 00000DFA E8A2890000              	call malloc
  2335 00000DFF 50                      	push rax
  2336 00000E00 BF08000000              	mov rdi, 8 * 1	; extended env
  2337 00000E05 E897890000              	call malloc
  2338 00000E0A 488B7D10                	mov rdi, ENV
  2339 00000E0E BE00000000              	mov rsi, 0
  2340 00000E13 BA01000000              	mov rdx, 1
  2341                                  .L_lambda_simple_env_loop_000c:	; ext_env[i + 1] <-- env[i]
  2342 00000E18 4883FE00                	cmp rsi, 0
  2343 00000E1C 7410                    	je .L_lambda_simple_env_end_000c
  2344 00000E1E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2345 00000E22 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2346 00000E26 48FFC6                  	inc rsi
  2347 00000E29 48FFC2                  	inc rdx
  2348 00000E2C EBEA                    	jmp .L_lambda_simple_env_loop_000c
  2349                                  .L_lambda_simple_env_end_000c:
  2350 00000E2E 5B                      	pop rbx
  2351 00000E2F BE00000000              	mov rsi, 0
  2352                                  .L_lambda_simple_params_loop_000c:	; copy params
  2353 00000E34 4883FE00                	cmp rsi, 0
  2354 00000E38 740E                    	je .L_lambda_simple_params_end_000c
  2355 00000E3A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2356 00000E3F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2357 00000E43 48FFC6                  	inc rsi
  2358 00000E46 EBEC                    	jmp .L_lambda_simple_params_loop_000c
  2359                                  .L_lambda_simple_params_end_000c:
  2360 00000E48 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2361 00000E4B 4889C3                  	mov rbx, rax
  2362 00000E4E 58                      	pop rax
  2363 00000E4F C60004                  	mov byte [rax], T_closure
  2364 00000E52 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2365 00000E56 48C74009[600E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000c
  2366 00000E5E EB65                    	jmp .L_lambda_simple_end_000c
  2367                                  .L_lambda_simple_code_000c:	; lambda-simple body
  2368 00000E60 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2369 00000E66 740B                    	je .L_lambda_simple_arity_check_ok_000c
  2370 00000E68 FF742410                	push qword [rsp + 8 * 2]
  2371 00000E6C 6A01                    	push 1
  2372 00000E6E E9E7880000              	jmp L_error_incorrect_arity_simple
  2373                                  .L_lambda_simple_arity_check_ok_000c:
  2374 00000E73 C8000000                	enter 0, 0
  2375                                  	; preparing a non-tail-call
  2376                                  	; preparing a non-tail-call
  2377 00000E77 488B4520                	mov rax, PARAM(0)	; param x
  2378 00000E7B 50                      	push rax
  2379 00000E7C 6A01                    	push 1	; arg count
  2380 00000E7E 488B0425[1E0E0000]      	mov rax, qword [free_var_61]	; free var cddr
  2381 00000E86 803805                  	cmp byte [rax], T_undefined
  2382 00000E89 0F84E5870000            	je L_error_fvar_undefined
  2383 00000E8F 803804                  	cmp byte [rax], T_closure
  2384 00000E92 0F8560880000            	jne L_error_non_closure
  2385 00000E98 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2386 00000E9B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2387 00000E9E 50                      	push rax
  2388 00000E9F 6A01                    	push 1	; arg count
  2389 00000EA1 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  2390 00000EA9 803805                  	cmp byte [rax], T_undefined
  2391 00000EAC 0F84C2870000            	je L_error_fvar_undefined
  2392 00000EB2 803804                  	cmp byte [rax], T_closure
  2393 00000EB5 0F853D880000            	jne L_error_non_closure
  2394 00000EBB FF7001                  	push SOB_CLOSURE_ENV(rax)
  2395 00000EBE FF5009                  	call SOB_CLOSURE_CODE(rax)
  2396 00000EC1 C9                      	leave
  2397 00000EC2 C21800                  	ret AND_KILL_FRAME(1)
  2398                                  .L_lambda_simple_end_000c:	; new closure is in rax
  2399 00000EC5 48890425[0D0E0000]      	mov qword [free_var_60], rax
  2400 00000ECD 48B8-                   	mov rax, sob_void
  2400 00000ECF [0000000000000000] 
  2401                                  
  2402 00000ED7 4889C7                  	mov rdi, rax
  2403 00000EDA E8178B0000              	call print_sexpr_if_not_void
  2404 00000EDF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2405 00000EE4 E8B8880000              	call malloc
  2406 00000EE9 50                      	push rax
  2407 00000EEA BF00000000              	mov rdi, 8 * 0	; new rib
  2408 00000EEF E8AD880000              	call malloc
  2409 00000EF4 50                      	push rax
  2410 00000EF5 BF08000000              	mov rdi, 8 * 1	; extended env
  2411 00000EFA E8A2880000              	call malloc
  2412 00000EFF 488B7D10                	mov rdi, ENV
  2413 00000F03 BE00000000              	mov rsi, 0
  2414 00000F08 BA01000000              	mov rdx, 1
  2415                                  .L_lambda_simple_env_loop_000d:	; ext_env[i + 1] <-- env[i]
  2416 00000F0D 4883FE00                	cmp rsi, 0
  2417 00000F11 7410                    	je .L_lambda_simple_env_end_000d
  2418 00000F13 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2419 00000F17 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2420 00000F1B 48FFC6                  	inc rsi
  2421 00000F1E 48FFC2                  	inc rdx
  2422 00000F21 EBEA                    	jmp .L_lambda_simple_env_loop_000d
  2423                                  .L_lambda_simple_env_end_000d:
  2424 00000F23 5B                      	pop rbx
  2425 00000F24 BE00000000              	mov rsi, 0
  2426                                  .L_lambda_simple_params_loop_000d:	; copy params
  2427 00000F29 4883FE00                	cmp rsi, 0
  2428 00000F2D 740E                    	je .L_lambda_simple_params_end_000d
  2429 00000F2F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2430 00000F34 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2431 00000F38 48FFC6                  	inc rsi
  2432 00000F3B EBEC                    	jmp .L_lambda_simple_params_loop_000d
  2433                                  .L_lambda_simple_params_end_000d:
  2434 00000F3D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2435 00000F40 4889C3                  	mov rbx, rax
  2436 00000F43 58                      	pop rax
  2437 00000F44 C60004                  	mov byte [rax], T_closure
  2438 00000F47 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2439 00000F4B 48C74009[550F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000d
  2440 00000F53 EB65                    	jmp .L_lambda_simple_end_000d
  2441                                  .L_lambda_simple_code_000d:	; lambda-simple body
  2442 00000F55 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2443 00000F5B 740B                    	je .L_lambda_simple_arity_check_ok_000d
  2444 00000F5D FF742410                	push qword [rsp + 8 * 2]
  2445 00000F61 6A01                    	push 1
  2446 00000F63 E9F2870000              	jmp L_error_incorrect_arity_simple
  2447                                  .L_lambda_simple_arity_check_ok_000d:
  2448 00000F68 C8000000                	enter 0, 0
  2449                                  	; preparing a non-tail-call
  2450                                  	; preparing a non-tail-call
  2451 00000F6C 488B4520                	mov rax, PARAM(0)	; param x
  2452 00000F70 50                      	push rax
  2453 00000F71 6A01                    	push 1	; arg count
  2454 00000F73 488B0425[A80C0000]      	mov rax, qword [free_var_39]	; free var caar
  2455 00000F7B 803805                  	cmp byte [rax], T_undefined
  2456 00000F7E 0F84F0860000            	je L_error_fvar_undefined
  2457 00000F84 803804                  	cmp byte [rax], T_closure
  2458 00000F87 0F856B870000            	jne L_error_non_closure
  2459 00000F8D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2460 00000F90 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2461 00000F93 50                      	push rax
  2462 00000F94 6A01                    	push 1	; arg count
  2463 00000F96 488B0425[A80C0000]      	mov rax, qword [free_var_39]	; free var caar
  2464 00000F9E 803805                  	cmp byte [rax], T_undefined
  2465 00000FA1 0F84CD860000            	je L_error_fvar_undefined
  2466 00000FA7 803804                  	cmp byte [rax], T_closure
  2467 00000FAA 0F8548870000            	jne L_error_non_closure
  2468 00000FB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2469 00000FB3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2470 00000FB6 C9                      	leave
  2471 00000FB7 C21800                  	ret AND_KILL_FRAME(1)
  2472                                  .L_lambda_simple_end_000d:	; new closure is in rax
  2473 00000FBA 48890425[420C0000]      	mov qword [free_var_33], rax
  2474 00000FC2 48B8-                   	mov rax, sob_void
  2474 00000FC4 [0000000000000000] 
  2475                                  
  2476 00000FCC 4889C7                  	mov rdi, rax
  2477 00000FCF E8228A0000              	call print_sexpr_if_not_void
  2478 00000FD4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2479 00000FD9 E8C3870000              	call malloc
  2480 00000FDE 50                      	push rax
  2481 00000FDF BF00000000              	mov rdi, 8 * 0	; new rib
  2482 00000FE4 E8B8870000              	call malloc
  2483 00000FE9 50                      	push rax
  2484 00000FEA BF08000000              	mov rdi, 8 * 1	; extended env
  2485 00000FEF E8AD870000              	call malloc
  2486 00000FF4 488B7D10                	mov rdi, ENV
  2487 00000FF8 BE00000000              	mov rsi, 0
  2488 00000FFD BA01000000              	mov rdx, 1
  2489                                  .L_lambda_simple_env_loop_000e:	; ext_env[i + 1] <-- env[i]
  2490 00001002 4883FE00                	cmp rsi, 0
  2491 00001006 7410                    	je .L_lambda_simple_env_end_000e
  2492 00001008 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2493 0000100C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2494 00001010 48FFC6                  	inc rsi
  2495 00001013 48FFC2                  	inc rdx
  2496 00001016 EBEA                    	jmp .L_lambda_simple_env_loop_000e
  2497                                  .L_lambda_simple_env_end_000e:
  2498 00001018 5B                      	pop rbx
  2499 00001019 BE00000000              	mov rsi, 0
  2500                                  .L_lambda_simple_params_loop_000e:	; copy params
  2501 0000101E 4883FE00                	cmp rsi, 0
  2502 00001022 740E                    	je .L_lambda_simple_params_end_000e
  2503 00001024 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2504 00001029 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2505 0000102D 48FFC6                  	inc rsi
  2506 00001030 EBEC                    	jmp .L_lambda_simple_params_loop_000e
  2507                                  .L_lambda_simple_params_end_000e:
  2508 00001032 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2509 00001035 4889C3                  	mov rbx, rax
  2510 00001038 58                      	pop rax
  2511 00001039 C60004                  	mov byte [rax], T_closure
  2512 0000103C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2513 00001040 48C74009[4A100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000e
  2514 00001048 EB65                    	jmp .L_lambda_simple_end_000e
  2515                                  .L_lambda_simple_code_000e:	; lambda-simple body
  2516 0000104A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2517 00001050 740B                    	je .L_lambda_simple_arity_check_ok_000e
  2518 00001052 FF742410                	push qword [rsp + 8 * 2]
  2519 00001056 6A01                    	push 1
  2520 00001058 E9FD860000              	jmp L_error_incorrect_arity_simple
  2521                                  .L_lambda_simple_arity_check_ok_000e:
  2522 0000105D C8000000                	enter 0, 0
  2523                                  	; preparing a non-tail-call
  2524                                  	; preparing a non-tail-call
  2525 00001061 488B4520                	mov rax, PARAM(0)	; param x
  2526 00001065 50                      	push rax
  2527 00001066 6A01                    	push 1	; arg count
  2528 00001068 488B0425[1F0D0000]      	mov rax, qword [free_var_46]	; free var cadr
  2529 00001070 803805                  	cmp byte [rax], T_undefined
  2530 00001073 0F84FB850000            	je L_error_fvar_undefined
  2531 00001079 803804                  	cmp byte [rax], T_closure
  2532 0000107C 0F8576860000            	jne L_error_non_closure
  2533 00001082 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2534 00001085 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2535 00001088 50                      	push rax
  2536 00001089 6A01                    	push 1	; arg count
  2537 0000108B 488B0425[A80C0000]      	mov rax, qword [free_var_39]	; free var caar
  2538 00001093 803805                  	cmp byte [rax], T_undefined
  2539 00001096 0F84D8850000            	je L_error_fvar_undefined
  2540 0000109C 803804                  	cmp byte [rax], T_closure
  2541 0000109F 0F8553860000            	jne L_error_non_closure
  2542 000010A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2543 000010A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2544 000010AB C9                      	leave
  2545 000010AC C21800                  	ret AND_KILL_FRAME(1)
  2546                                  .L_lambda_simple_end_000e:	; new closure is in rax
  2547 000010AF 48890425[530C0000]      	mov qword [free_var_34], rax
  2548 000010B7 48B8-                   	mov rax, sob_void
  2548 000010B9 [0000000000000000] 
  2549                                  
  2550 000010C1 4889C7                  	mov rdi, rax
  2551 000010C4 E82D890000              	call print_sexpr_if_not_void
  2552 000010C9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2553 000010CE E8CE860000              	call malloc
  2554 000010D3 50                      	push rax
  2555 000010D4 BF00000000              	mov rdi, 8 * 0	; new rib
  2556 000010D9 E8C3860000              	call malloc
  2557 000010DE 50                      	push rax
  2558 000010DF BF08000000              	mov rdi, 8 * 1	; extended env
  2559 000010E4 E8B8860000              	call malloc
  2560 000010E9 488B7D10                	mov rdi, ENV
  2561 000010ED BE00000000              	mov rsi, 0
  2562 000010F2 BA01000000              	mov rdx, 1
  2563                                  .L_lambda_simple_env_loop_000f:	; ext_env[i + 1] <-- env[i]
  2564 000010F7 4883FE00                	cmp rsi, 0
  2565 000010FB 7410                    	je .L_lambda_simple_env_end_000f
  2566 000010FD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2567 00001101 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2568 00001105 48FFC6                  	inc rsi
  2569 00001108 48FFC2                  	inc rdx
  2570 0000110B EBEA                    	jmp .L_lambda_simple_env_loop_000f
  2571                                  .L_lambda_simple_env_end_000f:
  2572 0000110D 5B                      	pop rbx
  2573 0000110E BE00000000              	mov rsi, 0
  2574                                  .L_lambda_simple_params_loop_000f:	; copy params
  2575 00001113 4883FE00                	cmp rsi, 0
  2576 00001117 740E                    	je .L_lambda_simple_params_end_000f
  2577 00001119 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2578 0000111E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2579 00001122 48FFC6                  	inc rsi
  2580 00001125 EBEC                    	jmp .L_lambda_simple_params_loop_000f
  2581                                  .L_lambda_simple_params_end_000f:
  2582 00001127 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2583 0000112A 4889C3                  	mov rbx, rax
  2584 0000112D 58                      	pop rax
  2585 0000112E C60004                  	mov byte [rax], T_closure
  2586 00001131 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2587 00001135 48C74009[3F110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000f
  2588 0000113D EB65                    	jmp .L_lambda_simple_end_000f
  2589                                  .L_lambda_simple_code_000f:	; lambda-simple body
  2590 0000113F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2591 00001145 740B                    	je .L_lambda_simple_arity_check_ok_000f
  2592 00001147 FF742410                	push qword [rsp + 8 * 2]
  2593 0000114B 6A01                    	push 1
  2594 0000114D E908860000              	jmp L_error_incorrect_arity_simple
  2595                                  .L_lambda_simple_arity_check_ok_000f:
  2596 00001152 C8000000                	enter 0, 0
  2597                                  	; preparing a non-tail-call
  2598                                  	; preparing a non-tail-call
  2599 00001156 488B4520                	mov rax, PARAM(0)	; param x
  2600 0000115A 50                      	push rax
  2601 0000115B 6A01                    	push 1	; arg count
  2602 0000115D 488B0425[A70D0000]      	mov rax, qword [free_var_54]	; free var cdar
  2603 00001165 803805                  	cmp byte [rax], T_undefined
  2604 00001168 0F8406850000            	je L_error_fvar_undefined
  2605 0000116E 803804                  	cmp byte [rax], T_closure
  2606 00001171 0F8581850000            	jne L_error_non_closure
  2607 00001177 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2608 0000117A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2609 0000117D 50                      	push rax
  2610 0000117E 6A01                    	push 1	; arg count
  2611 00001180 488B0425[A80C0000]      	mov rax, qword [free_var_39]	; free var caar
  2612 00001188 803805                  	cmp byte [rax], T_undefined
  2613 0000118B 0F84E3840000            	je L_error_fvar_undefined
  2614 00001191 803804                  	cmp byte [rax], T_closure
  2615 00001194 0F855E850000            	jne L_error_non_closure
  2616 0000119A FF7001                  	push SOB_CLOSURE_ENV(rax)
  2617 0000119D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2618 000011A0 C9                      	leave
  2619 000011A1 C21800                  	ret AND_KILL_FRAME(1)
  2620                                  .L_lambda_simple_end_000f:	; new closure is in rax
  2621 000011A4 48890425[750C0000]      	mov qword [free_var_36], rax
  2622 000011AC 48B8-                   	mov rax, sob_void
  2622 000011AE [0000000000000000] 
  2623                                  
  2624 000011B6 4889C7                  	mov rdi, rax
  2625 000011B9 E838880000              	call print_sexpr_if_not_void
  2626 000011BE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2627 000011C3 E8D9850000              	call malloc
  2628 000011C8 50                      	push rax
  2629 000011C9 BF00000000              	mov rdi, 8 * 0	; new rib
  2630 000011CE E8CE850000              	call malloc
  2631 000011D3 50                      	push rax
  2632 000011D4 BF08000000              	mov rdi, 8 * 1	; extended env
  2633 000011D9 E8C3850000              	call malloc
  2634 000011DE 488B7D10                	mov rdi, ENV
  2635 000011E2 BE00000000              	mov rsi, 0
  2636 000011E7 BA01000000              	mov rdx, 1
  2637                                  .L_lambda_simple_env_loop_0010:	; ext_env[i + 1] <-- env[i]
  2638 000011EC 4883FE00                	cmp rsi, 0
  2639 000011F0 7410                    	je .L_lambda_simple_env_end_0010
  2640 000011F2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2641 000011F6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2642 000011FA 48FFC6                  	inc rsi
  2643 000011FD 48FFC2                  	inc rdx
  2644 00001200 EBEA                    	jmp .L_lambda_simple_env_loop_0010
  2645                                  .L_lambda_simple_env_end_0010:
  2646 00001202 5B                      	pop rbx
  2647 00001203 BE00000000              	mov rsi, 0
  2648                                  .L_lambda_simple_params_loop_0010:	; copy params
  2649 00001208 4883FE00                	cmp rsi, 0
  2650 0000120C 740E                    	je .L_lambda_simple_params_end_0010
  2651 0000120E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2652 00001213 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2653 00001217 48FFC6                  	inc rsi
  2654 0000121A EBEC                    	jmp .L_lambda_simple_params_loop_0010
  2655                                  .L_lambda_simple_params_end_0010:
  2656 0000121C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2657 0000121F 4889C3                  	mov rbx, rax
  2658 00001222 58                      	pop rax
  2659 00001223 C60004                  	mov byte [rax], T_closure
  2660 00001226 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2661 0000122A 48C74009[34120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0010
  2662 00001232 EB65                    	jmp .L_lambda_simple_end_0010
  2663                                  .L_lambda_simple_code_0010:	; lambda-simple body
  2664 00001234 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2665 0000123A 740B                    	je .L_lambda_simple_arity_check_ok_0010
  2666 0000123C FF742410                	push qword [rsp + 8 * 2]
  2667 00001240 6A01                    	push 1
  2668 00001242 E913850000              	jmp L_error_incorrect_arity_simple
  2669                                  .L_lambda_simple_arity_check_ok_0010:
  2670 00001247 C8000000                	enter 0, 0
  2671                                  	; preparing a non-tail-call
  2672                                  	; preparing a non-tail-call
  2673 0000124B 488B4520                	mov rax, PARAM(0)	; param x
  2674 0000124F 50                      	push rax
  2675 00001250 6A01                    	push 1	; arg count
  2676 00001252 488B0425[1E0E0000]      	mov rax, qword [free_var_61]	; free var cddr
  2677 0000125A 803805                  	cmp byte [rax], T_undefined
  2678 0000125D 0F8411840000            	je L_error_fvar_undefined
  2679 00001263 803804                  	cmp byte [rax], T_closure
  2680 00001266 0F858C840000            	jne L_error_non_closure
  2681 0000126C FF7001                  	push SOB_CLOSURE_ENV(rax)
  2682 0000126F FF5009                  	call SOB_CLOSURE_CODE(rax)
  2683 00001272 50                      	push rax
  2684 00001273 6A01                    	push 1	; arg count
  2685 00001275 488B0425[A80C0000]      	mov rax, qword [free_var_39]	; free var caar
  2686 0000127D 803805                  	cmp byte [rax], T_undefined
  2687 00001280 0F84EE830000            	je L_error_fvar_undefined
  2688 00001286 803804                  	cmp byte [rax], T_closure
  2689 00001289 0F8569840000            	jne L_error_non_closure
  2690 0000128F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2691 00001292 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2692 00001295 C9                      	leave
  2693 00001296 C21800                  	ret AND_KILL_FRAME(1)
  2694                                  .L_lambda_simple_end_0010:	; new closure is in rax
  2695 00001299 48890425[860C0000]      	mov qword [free_var_37], rax
  2696 000012A1 48B8-                   	mov rax, sob_void
  2696 000012A3 [0000000000000000] 
  2697                                  
  2698 000012AB 4889C7                  	mov rdi, rax
  2699 000012AE E843870000              	call print_sexpr_if_not_void
  2700 000012B3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2701 000012B8 E8E4840000              	call malloc
  2702 000012BD 50                      	push rax
  2703 000012BE BF00000000              	mov rdi, 8 * 0	; new rib
  2704 000012C3 E8D9840000              	call malloc
  2705 000012C8 50                      	push rax
  2706 000012C9 BF08000000              	mov rdi, 8 * 1	; extended env
  2707 000012CE E8CE840000              	call malloc
  2708 000012D3 488B7D10                	mov rdi, ENV
  2709 000012D7 BE00000000              	mov rsi, 0
  2710 000012DC BA01000000              	mov rdx, 1
  2711                                  .L_lambda_simple_env_loop_0011:	; ext_env[i + 1] <-- env[i]
  2712 000012E1 4883FE00                	cmp rsi, 0
  2713 000012E5 7410                    	je .L_lambda_simple_env_end_0011
  2714 000012E7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2715 000012EB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2716 000012EF 48FFC6                  	inc rsi
  2717 000012F2 48FFC2                  	inc rdx
  2718 000012F5 EBEA                    	jmp .L_lambda_simple_env_loop_0011
  2719                                  .L_lambda_simple_env_end_0011:
  2720 000012F7 5B                      	pop rbx
  2721 000012F8 BE00000000              	mov rsi, 0
  2722                                  .L_lambda_simple_params_loop_0011:	; copy params
  2723 000012FD 4883FE00                	cmp rsi, 0
  2724 00001301 740E                    	je .L_lambda_simple_params_end_0011
  2725 00001303 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2726 00001308 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2727 0000130C 48FFC6                  	inc rsi
  2728 0000130F EBEC                    	jmp .L_lambda_simple_params_loop_0011
  2729                                  .L_lambda_simple_params_end_0011:
  2730 00001311 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2731 00001314 4889C3                  	mov rbx, rax
  2732 00001317 58                      	pop rax
  2733 00001318 C60004                  	mov byte [rax], T_closure
  2734 0000131B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2735 0000131F 48C74009[29130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0011
  2736 00001327 EB65                    	jmp .L_lambda_simple_end_0011
  2737                                  .L_lambda_simple_code_0011:	; lambda-simple body
  2738 00001329 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2739 0000132F 740B                    	je .L_lambda_simple_arity_check_ok_0011
  2740 00001331 FF742410                	push qword [rsp + 8 * 2]
  2741 00001335 6A01                    	push 1
  2742 00001337 E91E840000              	jmp L_error_incorrect_arity_simple
  2743                                  .L_lambda_simple_arity_check_ok_0011:
  2744 0000133C C8000000                	enter 0, 0
  2745                                  	; preparing a non-tail-call
  2746                                  	; preparing a non-tail-call
  2747 00001340 488B4520                	mov rax, PARAM(0)	; param x
  2748 00001344 50                      	push rax
  2749 00001345 6A01                    	push 1	; arg count
  2750 00001347 488B0425[A80C0000]      	mov rax, qword [free_var_39]	; free var caar
  2751 0000134F 803805                  	cmp byte [rax], T_undefined
  2752 00001352 0F841C830000            	je L_error_fvar_undefined
  2753 00001358 803804                  	cmp byte [rax], T_closure
  2754 0000135B 0F8597830000            	jne L_error_non_closure
  2755 00001361 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2756 00001364 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2757 00001367 50                      	push rax
  2758 00001368 6A01                    	push 1	; arg count
  2759 0000136A 488B0425[1F0D0000]      	mov rax, qword [free_var_46]	; free var cadr
  2760 00001372 803805                  	cmp byte [rax], T_undefined
  2761 00001375 0F84F9820000            	je L_error_fvar_undefined
  2762 0000137B 803804                  	cmp byte [rax], T_closure
  2763 0000137E 0F8574830000            	jne L_error_non_closure
  2764 00001384 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2765 00001387 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2766 0000138A C9                      	leave
  2767 0000138B C21800                  	ret AND_KILL_FRAME(1)
  2768                                  .L_lambda_simple_end_0011:	; new closure is in rax
  2769 0000138E 48890425[B90C0000]      	mov qword [free_var_40], rax
  2770 00001396 48B8-                   	mov rax, sob_void
  2770 00001398 [0000000000000000] 
  2771                                  
  2772 000013A0 4889C7                  	mov rdi, rax
  2773 000013A3 E84E860000              	call print_sexpr_if_not_void
  2774 000013A8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2775 000013AD E8EF830000              	call malloc
  2776 000013B2 50                      	push rax
  2777 000013B3 BF00000000              	mov rdi, 8 * 0	; new rib
  2778 000013B8 E8E4830000              	call malloc
  2779 000013BD 50                      	push rax
  2780 000013BE BF08000000              	mov rdi, 8 * 1	; extended env
  2781 000013C3 E8D9830000              	call malloc
  2782 000013C8 488B7D10                	mov rdi, ENV
  2783 000013CC BE00000000              	mov rsi, 0
  2784 000013D1 BA01000000              	mov rdx, 1
  2785                                  .L_lambda_simple_env_loop_0012:	; ext_env[i + 1] <-- env[i]
  2786 000013D6 4883FE00                	cmp rsi, 0
  2787 000013DA 7410                    	je .L_lambda_simple_env_end_0012
  2788 000013DC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2789 000013E0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2790 000013E4 48FFC6                  	inc rsi
  2791 000013E7 48FFC2                  	inc rdx
  2792 000013EA EBEA                    	jmp .L_lambda_simple_env_loop_0012
  2793                                  .L_lambda_simple_env_end_0012:
  2794 000013EC 5B                      	pop rbx
  2795 000013ED BE00000000              	mov rsi, 0
  2796                                  .L_lambda_simple_params_loop_0012:	; copy params
  2797 000013F2 4883FE00                	cmp rsi, 0
  2798 000013F6 740E                    	je .L_lambda_simple_params_end_0012
  2799 000013F8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2800 000013FD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2801 00001401 48FFC6                  	inc rsi
  2802 00001404 EBEC                    	jmp .L_lambda_simple_params_loop_0012
  2803                                  .L_lambda_simple_params_end_0012:
  2804 00001406 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2805 00001409 4889C3                  	mov rbx, rax
  2806 0000140C 58                      	pop rax
  2807 0000140D C60004                  	mov byte [rax], T_closure
  2808 00001410 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2809 00001414 48C74009[1E140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0012
  2810 0000141C EB65                    	jmp .L_lambda_simple_end_0012
  2811                                  .L_lambda_simple_code_0012:	; lambda-simple body
  2812 0000141E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2813 00001424 740B                    	je .L_lambda_simple_arity_check_ok_0012
  2814 00001426 FF742410                	push qword [rsp + 8 * 2]
  2815 0000142A 6A01                    	push 1
  2816 0000142C E929830000              	jmp L_error_incorrect_arity_simple
  2817                                  .L_lambda_simple_arity_check_ok_0012:
  2818 00001431 C8000000                	enter 0, 0
  2819                                  	; preparing a non-tail-call
  2820                                  	; preparing a non-tail-call
  2821 00001435 488B4520                	mov rax, PARAM(0)	; param x
  2822 00001439 50                      	push rax
  2823 0000143A 6A01                    	push 1	; arg count
  2824 0000143C 488B0425[1F0D0000]      	mov rax, qword [free_var_46]	; free var cadr
  2825 00001444 803805                  	cmp byte [rax], T_undefined
  2826 00001447 0F8427820000            	je L_error_fvar_undefined
  2827 0000144D 803804                  	cmp byte [rax], T_closure
  2828 00001450 0F85A2820000            	jne L_error_non_closure
  2829 00001456 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2830 00001459 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2831 0000145C 50                      	push rax
  2832 0000145D 6A01                    	push 1	; arg count
  2833 0000145F 488B0425[1F0D0000]      	mov rax, qword [free_var_46]	; free var cadr
  2834 00001467 803805                  	cmp byte [rax], T_undefined
  2835 0000146A 0F8404820000            	je L_error_fvar_undefined
  2836 00001470 803804                  	cmp byte [rax], T_closure
  2837 00001473 0F857F820000            	jne L_error_non_closure
  2838 00001479 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2839 0000147C FF5009                  	call SOB_CLOSURE_CODE(rax)
  2840 0000147F C9                      	leave
  2841 00001480 C21800                  	ret AND_KILL_FRAME(1)
  2842                                  .L_lambda_simple_end_0012:	; new closure is in rax
  2843 00001483 48890425[CA0C0000]      	mov qword [free_var_41], rax
  2844 0000148B 48B8-                   	mov rax, sob_void
  2844 0000148D [0000000000000000] 
  2845                                  
  2846 00001495 4889C7                  	mov rdi, rax
  2847 00001498 E859850000              	call print_sexpr_if_not_void
  2848 0000149D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2849 000014A2 E8FA820000              	call malloc
  2850 000014A7 50                      	push rax
  2851 000014A8 BF00000000              	mov rdi, 8 * 0	; new rib
  2852 000014AD E8EF820000              	call malloc
  2853 000014B2 50                      	push rax
  2854 000014B3 BF08000000              	mov rdi, 8 * 1	; extended env
  2855 000014B8 E8E4820000              	call malloc
  2856 000014BD 488B7D10                	mov rdi, ENV
  2857 000014C1 BE00000000              	mov rsi, 0
  2858 000014C6 BA01000000              	mov rdx, 1
  2859                                  .L_lambda_simple_env_loop_0013:	; ext_env[i + 1] <-- env[i]
  2860 000014CB 4883FE00                	cmp rsi, 0
  2861 000014CF 7410                    	je .L_lambda_simple_env_end_0013
  2862 000014D1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2863 000014D5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2864 000014D9 48FFC6                  	inc rsi
  2865 000014DC 48FFC2                  	inc rdx
  2866 000014DF EBEA                    	jmp .L_lambda_simple_env_loop_0013
  2867                                  .L_lambda_simple_env_end_0013:
  2868 000014E1 5B                      	pop rbx
  2869 000014E2 BE00000000              	mov rsi, 0
  2870                                  .L_lambda_simple_params_loop_0013:	; copy params
  2871 000014E7 4883FE00                	cmp rsi, 0
  2872 000014EB 740E                    	je .L_lambda_simple_params_end_0013
  2873 000014ED 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2874 000014F2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2875 000014F6 48FFC6                  	inc rsi
  2876 000014F9 EBEC                    	jmp .L_lambda_simple_params_loop_0013
  2877                                  .L_lambda_simple_params_end_0013:
  2878 000014FB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2879 000014FE 4889C3                  	mov rbx, rax
  2880 00001501 58                      	pop rax
  2881 00001502 C60004                  	mov byte [rax], T_closure
  2882 00001505 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2883 00001509 48C74009[13150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0013
  2884 00001511 EB65                    	jmp .L_lambda_simple_end_0013
  2885                                  .L_lambda_simple_code_0013:	; lambda-simple body
  2886 00001513 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2887 00001519 740B                    	je .L_lambda_simple_arity_check_ok_0013
  2888 0000151B FF742410                	push qword [rsp + 8 * 2]
  2889 0000151F 6A01                    	push 1
  2890 00001521 E934820000              	jmp L_error_incorrect_arity_simple
  2891                                  .L_lambda_simple_arity_check_ok_0013:
  2892 00001526 C8000000                	enter 0, 0
  2893                                  	; preparing a non-tail-call
  2894                                  	; preparing a non-tail-call
  2895 0000152A 488B4520                	mov rax, PARAM(0)	; param x
  2896 0000152E 50                      	push rax
  2897 0000152F 6A01                    	push 1	; arg count
  2898 00001531 488B0425[A70D0000]      	mov rax, qword [free_var_54]	; free var cdar
  2899 00001539 803805                  	cmp byte [rax], T_undefined
  2900 0000153C 0F8432810000            	je L_error_fvar_undefined
  2901 00001542 803804                  	cmp byte [rax], T_closure
  2902 00001545 0F85AD810000            	jne L_error_non_closure
  2903 0000154B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2904 0000154E FF5009                  	call SOB_CLOSURE_CODE(rax)
  2905 00001551 50                      	push rax
  2906 00001552 6A01                    	push 1	; arg count
  2907 00001554 488B0425[1F0D0000]      	mov rax, qword [free_var_46]	; free var cadr
  2908 0000155C 803805                  	cmp byte [rax], T_undefined
  2909 0000155F 0F840F810000            	je L_error_fvar_undefined
  2910 00001565 803804                  	cmp byte [rax], T_closure
  2911 00001568 0F858A810000            	jne L_error_non_closure
  2912 0000156E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2913 00001571 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2914 00001574 C9                      	leave
  2915 00001575 C21800                  	ret AND_KILL_FRAME(1)
  2916                                  .L_lambda_simple_end_0013:	; new closure is in rax
  2917 00001578 48890425[EC0C0000]      	mov qword [free_var_43], rax
  2918 00001580 48B8-                   	mov rax, sob_void
  2918 00001582 [0000000000000000] 
  2919                                  
  2920 0000158A 4889C7                  	mov rdi, rax
  2921 0000158D E864840000              	call print_sexpr_if_not_void
  2922 00001592 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2923 00001597 E805820000              	call malloc
  2924 0000159C 50                      	push rax
  2925 0000159D BF00000000              	mov rdi, 8 * 0	; new rib
  2926 000015A2 E8FA810000              	call malloc
  2927 000015A7 50                      	push rax
  2928 000015A8 BF08000000              	mov rdi, 8 * 1	; extended env
  2929 000015AD E8EF810000              	call malloc
  2930 000015B2 488B7D10                	mov rdi, ENV
  2931 000015B6 BE00000000              	mov rsi, 0
  2932 000015BB BA01000000              	mov rdx, 1
  2933                                  .L_lambda_simple_env_loop_0014:	; ext_env[i + 1] <-- env[i]
  2934 000015C0 4883FE00                	cmp rsi, 0
  2935 000015C4 7410                    	je .L_lambda_simple_env_end_0014
  2936 000015C6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2937 000015CA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2938 000015CE 48FFC6                  	inc rsi
  2939 000015D1 48FFC2                  	inc rdx
  2940 000015D4 EBEA                    	jmp .L_lambda_simple_env_loop_0014
  2941                                  .L_lambda_simple_env_end_0014:
  2942 000015D6 5B                      	pop rbx
  2943 000015D7 BE00000000              	mov rsi, 0
  2944                                  .L_lambda_simple_params_loop_0014:	; copy params
  2945 000015DC 4883FE00                	cmp rsi, 0
  2946 000015E0 740E                    	je .L_lambda_simple_params_end_0014
  2947 000015E2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2948 000015E7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2949 000015EB 48FFC6                  	inc rsi
  2950 000015EE EBEC                    	jmp .L_lambda_simple_params_loop_0014
  2951                                  .L_lambda_simple_params_end_0014:
  2952 000015F0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2953 000015F3 4889C3                  	mov rbx, rax
  2954 000015F6 58                      	pop rax
  2955 000015F7 C60004                  	mov byte [rax], T_closure
  2956 000015FA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2957 000015FE 48C74009[08160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0014
  2958 00001606 EB65                    	jmp .L_lambda_simple_end_0014
  2959                                  .L_lambda_simple_code_0014:	; lambda-simple body
  2960 00001608 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2961 0000160E 740B                    	je .L_lambda_simple_arity_check_ok_0014
  2962 00001610 FF742410                	push qword [rsp + 8 * 2]
  2963 00001614 6A01                    	push 1
  2964 00001616 E93F810000              	jmp L_error_incorrect_arity_simple
  2965                                  .L_lambda_simple_arity_check_ok_0014:
  2966 0000161B C8000000                	enter 0, 0
  2967                                  	; preparing a non-tail-call
  2968                                  	; preparing a non-tail-call
  2969 0000161F 488B4520                	mov rax, PARAM(0)	; param x
  2970 00001623 50                      	push rax
  2971 00001624 6A01                    	push 1	; arg count
  2972 00001626 488B0425[1E0E0000]      	mov rax, qword [free_var_61]	; free var cddr
  2973 0000162E 803805                  	cmp byte [rax], T_undefined
  2974 00001631 0F843D800000            	je L_error_fvar_undefined
  2975 00001637 803804                  	cmp byte [rax], T_closure
  2976 0000163A 0F85B8800000            	jne L_error_non_closure
  2977 00001640 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2978 00001643 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2979 00001646 50                      	push rax
  2980 00001647 6A01                    	push 1	; arg count
  2981 00001649 488B0425[1F0D0000]      	mov rax, qword [free_var_46]	; free var cadr
  2982 00001651 803805                  	cmp byte [rax], T_undefined
  2983 00001654 0F841A800000            	je L_error_fvar_undefined
  2984 0000165A 803804                  	cmp byte [rax], T_closure
  2985 0000165D 0F8595800000            	jne L_error_non_closure
  2986 00001663 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2987 00001666 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2988 00001669 C9                      	leave
  2989 0000166A C21800                  	ret AND_KILL_FRAME(1)
  2990                                  .L_lambda_simple_end_0014:	; new closure is in rax
  2991 0000166D 48890425[FD0C0000]      	mov qword [free_var_44], rax
  2992 00001675 48B8-                   	mov rax, sob_void
  2992 00001677 [0000000000000000] 
  2993                                  
  2994 0000167F 4889C7                  	mov rdi, rax
  2995 00001682 E86F830000              	call print_sexpr_if_not_void
  2996 00001687 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2997 0000168C E810810000              	call malloc
  2998 00001691 50                      	push rax
  2999 00001692 BF00000000              	mov rdi, 8 * 0	; new rib
  3000 00001697 E805810000              	call malloc
  3001 0000169C 50                      	push rax
  3002 0000169D BF08000000              	mov rdi, 8 * 1	; extended env
  3003 000016A2 E8FA800000              	call malloc
  3004 000016A7 488B7D10                	mov rdi, ENV
  3005 000016AB BE00000000              	mov rsi, 0
  3006 000016B0 BA01000000              	mov rdx, 1
  3007                                  .L_lambda_simple_env_loop_0015:	; ext_env[i + 1] <-- env[i]
  3008 000016B5 4883FE00                	cmp rsi, 0
  3009 000016B9 7410                    	je .L_lambda_simple_env_end_0015
  3010 000016BB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3011 000016BF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3012 000016C3 48FFC6                  	inc rsi
  3013 000016C6 48FFC2                  	inc rdx
  3014 000016C9 EBEA                    	jmp .L_lambda_simple_env_loop_0015
  3015                                  .L_lambda_simple_env_end_0015:
  3016 000016CB 5B                      	pop rbx
  3017 000016CC BE00000000              	mov rsi, 0
  3018                                  .L_lambda_simple_params_loop_0015:	; copy params
  3019 000016D1 4883FE00                	cmp rsi, 0
  3020 000016D5 740E                    	je .L_lambda_simple_params_end_0015
  3021 000016D7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3022 000016DC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3023 000016E0 48FFC6                  	inc rsi
  3024 000016E3 EBEC                    	jmp .L_lambda_simple_params_loop_0015
  3025                                  .L_lambda_simple_params_end_0015:
  3026 000016E5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3027 000016E8 4889C3                  	mov rbx, rax
  3028 000016EB 58                      	pop rax
  3029 000016EC C60004                  	mov byte [rax], T_closure
  3030 000016EF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3031 000016F3 48C74009[FD160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0015
  3032 000016FB EB65                    	jmp .L_lambda_simple_end_0015
  3033                                  .L_lambda_simple_code_0015:	; lambda-simple body
  3034 000016FD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3035 00001703 740B                    	je .L_lambda_simple_arity_check_ok_0015
  3036 00001705 FF742410                	push qword [rsp + 8 * 2]
  3037 00001709 6A01                    	push 1
  3038 0000170B E94A800000              	jmp L_error_incorrect_arity_simple
  3039                                  .L_lambda_simple_arity_check_ok_0015:
  3040 00001710 C8000000                	enter 0, 0
  3041                                  	; preparing a non-tail-call
  3042                                  	; preparing a non-tail-call
  3043 00001714 488B4520                	mov rax, PARAM(0)	; param x
  3044 00001718 50                      	push rax
  3045 00001719 6A01                    	push 1	; arg count
  3046 0000171B 488B0425[A80C0000]      	mov rax, qword [free_var_39]	; free var caar
  3047 00001723 803805                  	cmp byte [rax], T_undefined
  3048 00001726 0F84487F0000            	je L_error_fvar_undefined
  3049 0000172C 803804                  	cmp byte [rax], T_closure
  3050 0000172F 0F85C37F0000            	jne L_error_non_closure
  3051 00001735 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3052 00001738 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3053 0000173B 50                      	push rax
  3054 0000173C 6A01                    	push 1	; arg count
  3055 0000173E 488B0425[A70D0000]      	mov rax, qword [free_var_54]	; free var cdar
  3056 00001746 803805                  	cmp byte [rax], T_undefined
  3057 00001749 0F84257F0000            	je L_error_fvar_undefined
  3058 0000174F 803804                  	cmp byte [rax], T_closure
  3059 00001752 0F85A07F0000            	jne L_error_non_closure
  3060 00001758 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3061 0000175B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3062 0000175E C9                      	leave
  3063 0000175F C21800                  	ret AND_KILL_FRAME(1)
  3064                                  .L_lambda_simple_end_0015:	; new closure is in rax
  3065 00001762 48890425[410D0000]      	mov qword [free_var_48], rax
  3066 0000176A 48B8-                   	mov rax, sob_void
  3066 0000176C [0000000000000000] 
  3067                                  
  3068 00001774 4889C7                  	mov rdi, rax
  3069 00001777 E87A820000              	call print_sexpr_if_not_void
  3070 0000177C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3071 00001781 E81B800000              	call malloc
  3072 00001786 50                      	push rax
  3073 00001787 BF00000000              	mov rdi, 8 * 0	; new rib
  3074 0000178C E810800000              	call malloc
  3075 00001791 50                      	push rax
  3076 00001792 BF08000000              	mov rdi, 8 * 1	; extended env
  3077 00001797 E805800000              	call malloc
  3078 0000179C 488B7D10                	mov rdi, ENV
  3079 000017A0 BE00000000              	mov rsi, 0
  3080 000017A5 BA01000000              	mov rdx, 1
  3081                                  .L_lambda_simple_env_loop_0016:	; ext_env[i + 1] <-- env[i]
  3082 000017AA 4883FE00                	cmp rsi, 0
  3083 000017AE 7410                    	je .L_lambda_simple_env_end_0016
  3084 000017B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3085 000017B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3086 000017B8 48FFC6                  	inc rsi
  3087 000017BB 48FFC2                  	inc rdx
  3088 000017BE EBEA                    	jmp .L_lambda_simple_env_loop_0016
  3089                                  .L_lambda_simple_env_end_0016:
  3090 000017C0 5B                      	pop rbx
  3091 000017C1 BE00000000              	mov rsi, 0
  3092                                  .L_lambda_simple_params_loop_0016:	; copy params
  3093 000017C6 4883FE00                	cmp rsi, 0
  3094 000017CA 740E                    	je .L_lambda_simple_params_end_0016
  3095 000017CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3096 000017D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3097 000017D5 48FFC6                  	inc rsi
  3098 000017D8 EBEC                    	jmp .L_lambda_simple_params_loop_0016
  3099                                  .L_lambda_simple_params_end_0016:
  3100 000017DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3101 000017DD 4889C3                  	mov rbx, rax
  3102 000017E0 58                      	pop rax
  3103 000017E1 C60004                  	mov byte [rax], T_closure
  3104 000017E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3105 000017E8 48C74009[F2170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0016
  3106 000017F0 EB65                    	jmp .L_lambda_simple_end_0016
  3107                                  .L_lambda_simple_code_0016:	; lambda-simple body
  3108 000017F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3109 000017F8 740B                    	je .L_lambda_simple_arity_check_ok_0016
  3110 000017FA FF742410                	push qword [rsp + 8 * 2]
  3111 000017FE 6A01                    	push 1
  3112 00001800 E9557F0000              	jmp L_error_incorrect_arity_simple
  3113                                  .L_lambda_simple_arity_check_ok_0016:
  3114 00001805 C8000000                	enter 0, 0
  3115                                  	; preparing a non-tail-call
  3116                                  	; preparing a non-tail-call
  3117 00001809 488B4520                	mov rax, PARAM(0)	; param x
  3118 0000180D 50                      	push rax
  3119 0000180E 6A01                    	push 1	; arg count
  3120 00001810 488B0425[1F0D0000]      	mov rax, qword [free_var_46]	; free var cadr
  3121 00001818 803805                  	cmp byte [rax], T_undefined
  3122 0000181B 0F84537E0000            	je L_error_fvar_undefined
  3123 00001821 803804                  	cmp byte [rax], T_closure
  3124 00001824 0F85CE7E0000            	jne L_error_non_closure
  3125 0000182A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3126 0000182D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3127 00001830 50                      	push rax
  3128 00001831 6A01                    	push 1	; arg count
  3129 00001833 488B0425[A70D0000]      	mov rax, qword [free_var_54]	; free var cdar
  3130 0000183B 803805                  	cmp byte [rax], T_undefined
  3131 0000183E 0F84307E0000            	je L_error_fvar_undefined
  3132 00001844 803804                  	cmp byte [rax], T_closure
  3133 00001847 0F85AB7E0000            	jne L_error_non_closure
  3134 0000184D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3135 00001850 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3136 00001853 C9                      	leave
  3137 00001854 C21800                  	ret AND_KILL_FRAME(1)
  3138                                  .L_lambda_simple_end_0016:	; new closure is in rax
  3139 00001857 48890425[520D0000]      	mov qword [free_var_49], rax
  3140 0000185F 48B8-                   	mov rax, sob_void
  3140 00001861 [0000000000000000] 
  3141                                  
  3142 00001869 4889C7                  	mov rdi, rax
  3143 0000186C E885810000              	call print_sexpr_if_not_void
  3144 00001871 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3145 00001876 E8267F0000              	call malloc
  3146 0000187B 50                      	push rax
  3147 0000187C BF00000000              	mov rdi, 8 * 0	; new rib
  3148 00001881 E81B7F0000              	call malloc
  3149 00001886 50                      	push rax
  3150 00001887 BF08000000              	mov rdi, 8 * 1	; extended env
  3151 0000188C E8107F0000              	call malloc
  3152 00001891 488B7D10                	mov rdi, ENV
  3153 00001895 BE00000000              	mov rsi, 0
  3154 0000189A BA01000000              	mov rdx, 1
  3155                                  .L_lambda_simple_env_loop_0017:	; ext_env[i + 1] <-- env[i]
  3156 0000189F 4883FE00                	cmp rsi, 0
  3157 000018A3 7410                    	je .L_lambda_simple_env_end_0017
  3158 000018A5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3159 000018A9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3160 000018AD 48FFC6                  	inc rsi
  3161 000018B0 48FFC2                  	inc rdx
  3162 000018B3 EBEA                    	jmp .L_lambda_simple_env_loop_0017
  3163                                  .L_lambda_simple_env_end_0017:
  3164 000018B5 5B                      	pop rbx
  3165 000018B6 BE00000000              	mov rsi, 0
  3166                                  .L_lambda_simple_params_loop_0017:	; copy params
  3167 000018BB 4883FE00                	cmp rsi, 0
  3168 000018BF 740E                    	je .L_lambda_simple_params_end_0017
  3169 000018C1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3170 000018C6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3171 000018CA 48FFC6                  	inc rsi
  3172 000018CD EBEC                    	jmp .L_lambda_simple_params_loop_0017
  3173                                  .L_lambda_simple_params_end_0017:
  3174 000018CF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3175 000018D2 4889C3                  	mov rbx, rax
  3176 000018D5 58                      	pop rax
  3177 000018D6 C60004                  	mov byte [rax], T_closure
  3178 000018D9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3179 000018DD 48C74009[E7180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0017
  3180 000018E5 EB65                    	jmp .L_lambda_simple_end_0017
  3181                                  .L_lambda_simple_code_0017:	; lambda-simple body
  3182 000018E7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3183 000018ED 740B                    	je .L_lambda_simple_arity_check_ok_0017
  3184 000018EF FF742410                	push qword [rsp + 8 * 2]
  3185 000018F3 6A01                    	push 1
  3186 000018F5 E9607E0000              	jmp L_error_incorrect_arity_simple
  3187                                  .L_lambda_simple_arity_check_ok_0017:
  3188 000018FA C8000000                	enter 0, 0
  3189                                  	; preparing a non-tail-call
  3190                                  	; preparing a non-tail-call
  3191 000018FE 488B4520                	mov rax, PARAM(0)	; param x
  3192 00001902 50                      	push rax
  3193 00001903 6A01                    	push 1	; arg count
  3194 00001905 488B0425[A70D0000]      	mov rax, qword [free_var_54]	; free var cdar
  3195 0000190D 803805                  	cmp byte [rax], T_undefined
  3196 00001910 0F845E7D0000            	je L_error_fvar_undefined
  3197 00001916 803804                  	cmp byte [rax], T_closure
  3198 00001919 0F85D97D0000            	jne L_error_non_closure
  3199 0000191F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3200 00001922 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3201 00001925 50                      	push rax
  3202 00001926 6A01                    	push 1	; arg count
  3203 00001928 488B0425[A70D0000]      	mov rax, qword [free_var_54]	; free var cdar
  3204 00001930 803805                  	cmp byte [rax], T_undefined
  3205 00001933 0F843B7D0000            	je L_error_fvar_undefined
  3206 00001939 803804                  	cmp byte [rax], T_closure
  3207 0000193C 0F85B67D0000            	jne L_error_non_closure
  3208 00001942 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3209 00001945 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3210 00001948 C9                      	leave
  3211 00001949 C21800                  	ret AND_KILL_FRAME(1)
  3212                                  .L_lambda_simple_end_0017:	; new closure is in rax
  3213 0000194C 48890425[740D0000]      	mov qword [free_var_51], rax
  3214 00001954 48B8-                   	mov rax, sob_void
  3214 00001956 [0000000000000000] 
  3215                                  
  3216 0000195E 4889C7                  	mov rdi, rax
  3217 00001961 E890800000              	call print_sexpr_if_not_void
  3218 00001966 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3219 0000196B E8317E0000              	call malloc
  3220 00001970 50                      	push rax
  3221 00001971 BF00000000              	mov rdi, 8 * 0	; new rib
  3222 00001976 E8267E0000              	call malloc
  3223 0000197B 50                      	push rax
  3224 0000197C BF08000000              	mov rdi, 8 * 1	; extended env
  3225 00001981 E81B7E0000              	call malloc
  3226 00001986 488B7D10                	mov rdi, ENV
  3227 0000198A BE00000000              	mov rsi, 0
  3228 0000198F BA01000000              	mov rdx, 1
  3229                                  .L_lambda_simple_env_loop_0018:	; ext_env[i + 1] <-- env[i]
  3230 00001994 4883FE00                	cmp rsi, 0
  3231 00001998 7410                    	je .L_lambda_simple_env_end_0018
  3232 0000199A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3233 0000199E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3234 000019A2 48FFC6                  	inc rsi
  3235 000019A5 48FFC2                  	inc rdx
  3236 000019A8 EBEA                    	jmp .L_lambda_simple_env_loop_0018
  3237                                  .L_lambda_simple_env_end_0018:
  3238 000019AA 5B                      	pop rbx
  3239 000019AB BE00000000              	mov rsi, 0
  3240                                  .L_lambda_simple_params_loop_0018:	; copy params
  3241 000019B0 4883FE00                	cmp rsi, 0
  3242 000019B4 740E                    	je .L_lambda_simple_params_end_0018
  3243 000019B6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3244 000019BB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3245 000019BF 48FFC6                  	inc rsi
  3246 000019C2 EBEC                    	jmp .L_lambda_simple_params_loop_0018
  3247                                  .L_lambda_simple_params_end_0018:
  3248 000019C4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3249 000019C7 4889C3                  	mov rbx, rax
  3250 000019CA 58                      	pop rax
  3251 000019CB C60004                  	mov byte [rax], T_closure
  3252 000019CE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3253 000019D2 48C74009[DC190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0018
  3254 000019DA EB65                    	jmp .L_lambda_simple_end_0018
  3255                                  .L_lambda_simple_code_0018:	; lambda-simple body
  3256 000019DC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3257 000019E2 740B                    	je .L_lambda_simple_arity_check_ok_0018
  3258 000019E4 FF742410                	push qword [rsp + 8 * 2]
  3259 000019E8 6A01                    	push 1
  3260 000019EA E96B7D0000              	jmp L_error_incorrect_arity_simple
  3261                                  .L_lambda_simple_arity_check_ok_0018:
  3262 000019EF C8000000                	enter 0, 0
  3263                                  	; preparing a non-tail-call
  3264                                  	; preparing a non-tail-call
  3265 000019F3 488B4520                	mov rax, PARAM(0)	; param x
  3266 000019F7 50                      	push rax
  3267 000019F8 6A01                    	push 1	; arg count
  3268 000019FA 488B0425[1E0E0000]      	mov rax, qword [free_var_61]	; free var cddr
  3269 00001A02 803805                  	cmp byte [rax], T_undefined
  3270 00001A05 0F84697C0000            	je L_error_fvar_undefined
  3271 00001A0B 803804                  	cmp byte [rax], T_closure
  3272 00001A0E 0F85E47C0000            	jne L_error_non_closure
  3273 00001A14 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3274 00001A17 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3275 00001A1A 50                      	push rax
  3276 00001A1B 6A01                    	push 1	; arg count
  3277 00001A1D 488B0425[A70D0000]      	mov rax, qword [free_var_54]	; free var cdar
  3278 00001A25 803805                  	cmp byte [rax], T_undefined
  3279 00001A28 0F84467C0000            	je L_error_fvar_undefined
  3280 00001A2E 803804                  	cmp byte [rax], T_closure
  3281 00001A31 0F85C17C0000            	jne L_error_non_closure
  3282 00001A37 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3283 00001A3A FF5009                  	call SOB_CLOSURE_CODE(rax)
  3284 00001A3D C9                      	leave
  3285 00001A3E C21800                  	ret AND_KILL_FRAME(1)
  3286                                  .L_lambda_simple_end_0018:	; new closure is in rax
  3287 00001A41 48890425[850D0000]      	mov qword [free_var_52], rax
  3288 00001A49 48B8-                   	mov rax, sob_void
  3288 00001A4B [0000000000000000] 
  3289                                  
  3290 00001A53 4889C7                  	mov rdi, rax
  3291 00001A56 E89B7F0000              	call print_sexpr_if_not_void
  3292 00001A5B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3293 00001A60 E83C7D0000              	call malloc
  3294 00001A65 50                      	push rax
  3295 00001A66 BF00000000              	mov rdi, 8 * 0	; new rib
  3296 00001A6B E8317D0000              	call malloc
  3297 00001A70 50                      	push rax
  3298 00001A71 BF08000000              	mov rdi, 8 * 1	; extended env
  3299 00001A76 E8267D0000              	call malloc
  3300 00001A7B 488B7D10                	mov rdi, ENV
  3301 00001A7F BE00000000              	mov rsi, 0
  3302 00001A84 BA01000000              	mov rdx, 1
  3303                                  .L_lambda_simple_env_loop_0019:	; ext_env[i + 1] <-- env[i]
  3304 00001A89 4883FE00                	cmp rsi, 0
  3305 00001A8D 7410                    	je .L_lambda_simple_env_end_0019
  3306 00001A8F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3307 00001A93 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3308 00001A97 48FFC6                  	inc rsi
  3309 00001A9A 48FFC2                  	inc rdx
  3310 00001A9D EBEA                    	jmp .L_lambda_simple_env_loop_0019
  3311                                  .L_lambda_simple_env_end_0019:
  3312 00001A9F 5B                      	pop rbx
  3313 00001AA0 BE00000000              	mov rsi, 0
  3314                                  .L_lambda_simple_params_loop_0019:	; copy params
  3315 00001AA5 4883FE00                	cmp rsi, 0
  3316 00001AA9 740E                    	je .L_lambda_simple_params_end_0019
  3317 00001AAB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3318 00001AB0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3319 00001AB4 48FFC6                  	inc rsi
  3320 00001AB7 EBEC                    	jmp .L_lambda_simple_params_loop_0019
  3321                                  .L_lambda_simple_params_end_0019:
  3322 00001AB9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3323 00001ABC 4889C3                  	mov rbx, rax
  3324 00001ABF 58                      	pop rax
  3325 00001AC0 C60004                  	mov byte [rax], T_closure
  3326 00001AC3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3327 00001AC7 48C74009[D11A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0019
  3328 00001ACF EB65                    	jmp .L_lambda_simple_end_0019
  3329                                  .L_lambda_simple_code_0019:	; lambda-simple body
  3330 00001AD1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3331 00001AD7 740B                    	je .L_lambda_simple_arity_check_ok_0019
  3332 00001AD9 FF742410                	push qword [rsp + 8 * 2]
  3333 00001ADD 6A01                    	push 1
  3334 00001ADF E9767C0000              	jmp L_error_incorrect_arity_simple
  3335                                  .L_lambda_simple_arity_check_ok_0019:
  3336 00001AE4 C8000000                	enter 0, 0
  3337                                  	; preparing a non-tail-call
  3338                                  	; preparing a non-tail-call
  3339 00001AE8 488B4520                	mov rax, PARAM(0)	; param x
  3340 00001AEC 50                      	push rax
  3341 00001AED 6A01                    	push 1	; arg count
  3342 00001AEF 488B0425[A80C0000]      	mov rax, qword [free_var_39]	; free var caar
  3343 00001AF7 803805                  	cmp byte [rax], T_undefined
  3344 00001AFA 0F84747B0000            	je L_error_fvar_undefined
  3345 00001B00 803804                  	cmp byte [rax], T_closure
  3346 00001B03 0F85EF7B0000            	jne L_error_non_closure
  3347 00001B09 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3348 00001B0C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3349 00001B0F 50                      	push rax
  3350 00001B10 6A01                    	push 1	; arg count
  3351 00001B12 488B0425[1E0E0000]      	mov rax, qword [free_var_61]	; free var cddr
  3352 00001B1A 803805                  	cmp byte [rax], T_undefined
  3353 00001B1D 0F84517B0000            	je L_error_fvar_undefined
  3354 00001B23 803804                  	cmp byte [rax], T_closure
  3355 00001B26 0F85CC7B0000            	jne L_error_non_closure
  3356 00001B2C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3357 00001B2F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3358 00001B32 C9                      	leave
  3359 00001B33 C21800                  	ret AND_KILL_FRAME(1)
  3360                                  .L_lambda_simple_end_0019:	; new closure is in rax
  3361 00001B36 48890425[B80D0000]      	mov qword [free_var_55], rax
  3362 00001B3E 48B8-                   	mov rax, sob_void
  3362 00001B40 [0000000000000000] 
  3363                                  
  3364 00001B48 4889C7                  	mov rdi, rax
  3365 00001B4B E8A67E0000              	call print_sexpr_if_not_void
  3366 00001B50 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3367 00001B55 E8477C0000              	call malloc
  3368 00001B5A 50                      	push rax
  3369 00001B5B BF00000000              	mov rdi, 8 * 0	; new rib
  3370 00001B60 E83C7C0000              	call malloc
  3371 00001B65 50                      	push rax
  3372 00001B66 BF08000000              	mov rdi, 8 * 1	; extended env
  3373 00001B6B E8317C0000              	call malloc
  3374 00001B70 488B7D10                	mov rdi, ENV
  3375 00001B74 BE00000000              	mov rsi, 0
  3376 00001B79 BA01000000              	mov rdx, 1
  3377                                  .L_lambda_simple_env_loop_001a:	; ext_env[i + 1] <-- env[i]
  3378 00001B7E 4883FE00                	cmp rsi, 0
  3379 00001B82 7410                    	je .L_lambda_simple_env_end_001a
  3380 00001B84 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3381 00001B88 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3382 00001B8C 48FFC6                  	inc rsi
  3383 00001B8F 48FFC2                  	inc rdx
  3384 00001B92 EBEA                    	jmp .L_lambda_simple_env_loop_001a
  3385                                  .L_lambda_simple_env_end_001a:
  3386 00001B94 5B                      	pop rbx
  3387 00001B95 BE00000000              	mov rsi, 0
  3388                                  .L_lambda_simple_params_loop_001a:	; copy params
  3389 00001B9A 4883FE00                	cmp rsi, 0
  3390 00001B9E 740E                    	je .L_lambda_simple_params_end_001a
  3391 00001BA0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3392 00001BA5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3393 00001BA9 48FFC6                  	inc rsi
  3394 00001BAC EBEC                    	jmp .L_lambda_simple_params_loop_001a
  3395                                  .L_lambda_simple_params_end_001a:
  3396 00001BAE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3397 00001BB1 4889C3                  	mov rbx, rax
  3398 00001BB4 58                      	pop rax
  3399 00001BB5 C60004                  	mov byte [rax], T_closure
  3400 00001BB8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3401 00001BBC 48C74009[C61B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001a
  3402 00001BC4 EB65                    	jmp .L_lambda_simple_end_001a
  3403                                  .L_lambda_simple_code_001a:	; lambda-simple body
  3404 00001BC6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3405 00001BCC 740B                    	je .L_lambda_simple_arity_check_ok_001a
  3406 00001BCE FF742410                	push qword [rsp + 8 * 2]
  3407 00001BD2 6A01                    	push 1
  3408 00001BD4 E9817B0000              	jmp L_error_incorrect_arity_simple
  3409                                  .L_lambda_simple_arity_check_ok_001a:
  3410 00001BD9 C8000000                	enter 0, 0
  3411                                  	; preparing a non-tail-call
  3412                                  	; preparing a non-tail-call
  3413 00001BDD 488B4520                	mov rax, PARAM(0)	; param x
  3414 00001BE1 50                      	push rax
  3415 00001BE2 6A01                    	push 1	; arg count
  3416 00001BE4 488B0425[1F0D0000]      	mov rax, qword [free_var_46]	; free var cadr
  3417 00001BEC 803805                  	cmp byte [rax], T_undefined
  3418 00001BEF 0F847F7A0000            	je L_error_fvar_undefined
  3419 00001BF5 803804                  	cmp byte [rax], T_closure
  3420 00001BF8 0F85FA7A0000            	jne L_error_non_closure
  3421 00001BFE FF7001                  	push SOB_CLOSURE_ENV(rax)
  3422 00001C01 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3423 00001C04 50                      	push rax
  3424 00001C05 6A01                    	push 1	; arg count
  3425 00001C07 488B0425[1E0E0000]      	mov rax, qword [free_var_61]	; free var cddr
  3426 00001C0F 803805                  	cmp byte [rax], T_undefined
  3427 00001C12 0F845C7A0000            	je L_error_fvar_undefined
  3428 00001C18 803804                  	cmp byte [rax], T_closure
  3429 00001C1B 0F85D77A0000            	jne L_error_non_closure
  3430 00001C21 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3431 00001C24 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3432 00001C27 C9                      	leave
  3433 00001C28 C21800                  	ret AND_KILL_FRAME(1)
  3434                                  .L_lambda_simple_end_001a:	; new closure is in rax
  3435 00001C2B 48890425[C90D0000]      	mov qword [free_var_56], rax
  3436 00001C33 48B8-                   	mov rax, sob_void
  3436 00001C35 [0000000000000000] 
  3437                                  
  3438 00001C3D 4889C7                  	mov rdi, rax
  3439 00001C40 E8B17D0000              	call print_sexpr_if_not_void
  3440 00001C45 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3441 00001C4A E8527B0000              	call malloc
  3442 00001C4F 50                      	push rax
  3443 00001C50 BF00000000              	mov rdi, 8 * 0	; new rib
  3444 00001C55 E8477B0000              	call malloc
  3445 00001C5A 50                      	push rax
  3446 00001C5B BF08000000              	mov rdi, 8 * 1	; extended env
  3447 00001C60 E83C7B0000              	call malloc
  3448 00001C65 488B7D10                	mov rdi, ENV
  3449 00001C69 BE00000000              	mov rsi, 0
  3450 00001C6E BA01000000              	mov rdx, 1
  3451                                  .L_lambda_simple_env_loop_001b:	; ext_env[i + 1] <-- env[i]
  3452 00001C73 4883FE00                	cmp rsi, 0
  3453 00001C77 7410                    	je .L_lambda_simple_env_end_001b
  3454 00001C79 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3455 00001C7D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3456 00001C81 48FFC6                  	inc rsi
  3457 00001C84 48FFC2                  	inc rdx
  3458 00001C87 EBEA                    	jmp .L_lambda_simple_env_loop_001b
  3459                                  .L_lambda_simple_env_end_001b:
  3460 00001C89 5B                      	pop rbx
  3461 00001C8A BE00000000              	mov rsi, 0
  3462                                  .L_lambda_simple_params_loop_001b:	; copy params
  3463 00001C8F 4883FE00                	cmp rsi, 0
  3464 00001C93 740E                    	je .L_lambda_simple_params_end_001b
  3465 00001C95 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3466 00001C9A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3467 00001C9E 48FFC6                  	inc rsi
  3468 00001CA1 EBEC                    	jmp .L_lambda_simple_params_loop_001b
  3469                                  .L_lambda_simple_params_end_001b:
  3470 00001CA3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3471 00001CA6 4889C3                  	mov rbx, rax
  3472 00001CA9 58                      	pop rax
  3473 00001CAA C60004                  	mov byte [rax], T_closure
  3474 00001CAD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3475 00001CB1 48C74009[BB1C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001b
  3476 00001CB9 EB65                    	jmp .L_lambda_simple_end_001b
  3477                                  .L_lambda_simple_code_001b:	; lambda-simple body
  3478 00001CBB 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3479 00001CC1 740B                    	je .L_lambda_simple_arity_check_ok_001b
  3480 00001CC3 FF742410                	push qword [rsp + 8 * 2]
  3481 00001CC7 6A01                    	push 1
  3482 00001CC9 E98C7A0000              	jmp L_error_incorrect_arity_simple
  3483                                  .L_lambda_simple_arity_check_ok_001b:
  3484 00001CCE C8000000                	enter 0, 0
  3485                                  	; preparing a non-tail-call
  3486                                  	; preparing a non-tail-call
  3487 00001CD2 488B4520                	mov rax, PARAM(0)	; param x
  3488 00001CD6 50                      	push rax
  3489 00001CD7 6A01                    	push 1	; arg count
  3490 00001CD9 488B0425[A70D0000]      	mov rax, qword [free_var_54]	; free var cdar
  3491 00001CE1 803805                  	cmp byte [rax], T_undefined
  3492 00001CE4 0F848A790000            	je L_error_fvar_undefined
  3493 00001CEA 803804                  	cmp byte [rax], T_closure
  3494 00001CED 0F85057A0000            	jne L_error_non_closure
  3495 00001CF3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3496 00001CF6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3497 00001CF9 50                      	push rax
  3498 00001CFA 6A01                    	push 1	; arg count
  3499 00001CFC 488B0425[1E0E0000]      	mov rax, qword [free_var_61]	; free var cddr
  3500 00001D04 803805                  	cmp byte [rax], T_undefined
  3501 00001D07 0F8467790000            	je L_error_fvar_undefined
  3502 00001D0D 803804                  	cmp byte [rax], T_closure
  3503 00001D10 0F85E2790000            	jne L_error_non_closure
  3504 00001D16 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3505 00001D19 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3506 00001D1C C9                      	leave
  3507 00001D1D C21800                  	ret AND_KILL_FRAME(1)
  3508                                  .L_lambda_simple_end_001b:	; new closure is in rax
  3509 00001D20 48890425[EB0D0000]      	mov qword [free_var_58], rax
  3510 00001D28 48B8-                   	mov rax, sob_void
  3510 00001D2A [0000000000000000] 
  3511                                  
  3512 00001D32 4889C7                  	mov rdi, rax
  3513 00001D35 E8BC7C0000              	call print_sexpr_if_not_void
  3514 00001D3A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3515 00001D3F E85D7A0000              	call malloc
  3516 00001D44 50                      	push rax
  3517 00001D45 BF00000000              	mov rdi, 8 * 0	; new rib
  3518 00001D4A E8527A0000              	call malloc
  3519 00001D4F 50                      	push rax
  3520 00001D50 BF08000000              	mov rdi, 8 * 1	; extended env
  3521 00001D55 E8477A0000              	call malloc
  3522 00001D5A 488B7D10                	mov rdi, ENV
  3523 00001D5E BE00000000              	mov rsi, 0
  3524 00001D63 BA01000000              	mov rdx, 1
  3525                                  .L_lambda_simple_env_loop_001c:	; ext_env[i + 1] <-- env[i]
  3526 00001D68 4883FE00                	cmp rsi, 0
  3527 00001D6C 7410                    	je .L_lambda_simple_env_end_001c
  3528 00001D6E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3529 00001D72 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3530 00001D76 48FFC6                  	inc rsi
  3531 00001D79 48FFC2                  	inc rdx
  3532 00001D7C EBEA                    	jmp .L_lambda_simple_env_loop_001c
  3533                                  .L_lambda_simple_env_end_001c:
  3534 00001D7E 5B                      	pop rbx
  3535 00001D7F BE00000000              	mov rsi, 0
  3536                                  .L_lambda_simple_params_loop_001c:	; copy params
  3537 00001D84 4883FE00                	cmp rsi, 0
  3538 00001D88 740E                    	je .L_lambda_simple_params_end_001c
  3539 00001D8A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3540 00001D8F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3541 00001D93 48FFC6                  	inc rsi
  3542 00001D96 EBEC                    	jmp .L_lambda_simple_params_loop_001c
  3543                                  .L_lambda_simple_params_end_001c:
  3544 00001D98 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3545 00001D9B 4889C3                  	mov rbx, rax
  3546 00001D9E 58                      	pop rax
  3547 00001D9F C60004                  	mov byte [rax], T_closure
  3548 00001DA2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3549 00001DA6 48C74009[B01D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001c
  3550 00001DAE EB65                    	jmp .L_lambda_simple_end_001c
  3551                                  .L_lambda_simple_code_001c:	; lambda-simple body
  3552 00001DB0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3553 00001DB6 740B                    	je .L_lambda_simple_arity_check_ok_001c
  3554 00001DB8 FF742410                	push qword [rsp + 8 * 2]
  3555 00001DBC 6A01                    	push 1
  3556 00001DBE E997790000              	jmp L_error_incorrect_arity_simple
  3557                                  .L_lambda_simple_arity_check_ok_001c:
  3558 00001DC3 C8000000                	enter 0, 0
  3559                                  	; preparing a non-tail-call
  3560                                  	; preparing a non-tail-call
  3561 00001DC7 488B4520                	mov rax, PARAM(0)	; param x
  3562 00001DCB 50                      	push rax
  3563 00001DCC 6A01                    	push 1	; arg count
  3564 00001DCE 488B0425[1E0E0000]      	mov rax, qword [free_var_61]	; free var cddr
  3565 00001DD6 803805                  	cmp byte [rax], T_undefined
  3566 00001DD9 0F8495780000            	je L_error_fvar_undefined
  3567 00001DDF 803804                  	cmp byte [rax], T_closure
  3568 00001DE2 0F8510790000            	jne L_error_non_closure
  3569 00001DE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3570 00001DEB FF5009                  	call SOB_CLOSURE_CODE(rax)
  3571 00001DEE 50                      	push rax
  3572 00001DEF 6A01                    	push 1	; arg count
  3573 00001DF1 488B0425[1E0E0000]      	mov rax, qword [free_var_61]	; free var cddr
  3574 00001DF9 803805                  	cmp byte [rax], T_undefined
  3575 00001DFC 0F8472780000            	je L_error_fvar_undefined
  3576 00001E02 803804                  	cmp byte [rax], T_closure
  3577 00001E05 0F85ED780000            	jne L_error_non_closure
  3578 00001E0B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3579 00001E0E FF5009                  	call SOB_CLOSURE_CODE(rax)
  3580 00001E11 C9                      	leave
  3581 00001E12 C21800                  	ret AND_KILL_FRAME(1)
  3582                                  .L_lambda_simple_end_001c:	; new closure is in rax
  3583 00001E15 48890425[FC0D0000]      	mov qword [free_var_59], rax
  3584 00001E1D 48B8-                   	mov rax, sob_void
  3584 00001E1F [0000000000000000] 
  3585                                  
  3586 00001E27 4889C7                  	mov rdi, rax
  3587 00001E2A E8C77B0000              	call print_sexpr_if_not_void
  3588 00001E2F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3589 00001E34 E868790000              	call malloc
  3590 00001E39 50                      	push rax
  3591 00001E3A BF00000000              	mov rdi, 8 * 0	; new rib
  3592 00001E3F E85D790000              	call malloc
  3593 00001E44 50                      	push rax
  3594 00001E45 BF08000000              	mov rdi, 8 * 1	; extended env
  3595 00001E4A E852790000              	call malloc
  3596 00001E4F 488B7D10                	mov rdi, ENV
  3597 00001E53 BE00000000              	mov rsi, 0
  3598 00001E58 BA01000000              	mov rdx, 1
  3599                                  .L_lambda_simple_env_loop_001d:	; ext_env[i + 1] <-- env[i]
  3600 00001E5D 4883FE00                	cmp rsi, 0
  3601 00001E61 7410                    	je .L_lambda_simple_env_end_001d
  3602 00001E63 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3603 00001E67 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3604 00001E6B 48FFC6                  	inc rsi
  3605 00001E6E 48FFC2                  	inc rdx
  3606 00001E71 EBEA                    	jmp .L_lambda_simple_env_loop_001d
  3607                                  .L_lambda_simple_env_end_001d:
  3608 00001E73 5B                      	pop rbx
  3609 00001E74 BE00000000              	mov rsi, 0
  3610                                  .L_lambda_simple_params_loop_001d:	; copy params
  3611 00001E79 4883FE00                	cmp rsi, 0
  3612 00001E7D 740E                    	je .L_lambda_simple_params_end_001d
  3613 00001E7F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3614 00001E84 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3615 00001E88 48FFC6                  	inc rsi
  3616 00001E8B EBEC                    	jmp .L_lambda_simple_params_loop_001d
  3617                                  .L_lambda_simple_params_end_001d:
  3618 00001E8D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3619 00001E90 4889C3                  	mov rbx, rax
  3620 00001E93 58                      	pop rax
  3621 00001E94 C60004                  	mov byte [rax], T_closure
  3622 00001E97 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3623 00001E9B 48C74009[A81E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001d
  3624 00001EA3 E9DB000000              	jmp .L_lambda_simple_end_001d
  3625                                  .L_lambda_simple_code_001d:	; lambda-simple body
  3626 00001EA8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3627 00001EAE 740B                    	je .L_lambda_simple_arity_check_ok_001d
  3628 00001EB0 FF742410                	push qword [rsp + 8 * 2]
  3629 00001EB4 6A01                    	push 1
  3630 00001EB6 E99F780000              	jmp L_error_incorrect_arity_simple
  3631                                  .L_lambda_simple_arity_check_ok_001d:
  3632 00001EBB C8000000                	enter 0, 0
  3633                                  	; preparing a non-tail-call
  3634 00001EBF 488B4520                	mov rax, PARAM(0)	; param e
  3635 00001EC3 50                      	push rax
  3636 00001EC4 6A01                    	push 1	; arg count
  3637 00001EC6 488B0425[C70F0000]      	mov rax, qword [free_var_86]	; free var null?
  3638 00001ECE 803805                  	cmp byte [rax], T_undefined
  3639 00001ED1 0F849D770000            	je L_error_fvar_undefined
  3640 00001ED7 803804                  	cmp byte [rax], T_closure
  3641 00001EDA 0F8518780000            	jne L_error_non_closure
  3642 00001EE0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3643 00001EE3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3644 00001EE6 483D[02000000]          	cmp rax, sob_boolean_false
  3645 00001EEC 0F858D000000            	jne .L_if_end_0001
  3646                                  	; preparing a non-tail-call
  3647 00001EF2 488B4520                	mov rax, PARAM(0)	; param e
  3648 00001EF6 50                      	push rax
  3649 00001EF7 6A01                    	push 1	; arg count
  3650 00001EF9 488B0425[E90F0000]      	mov rax, qword [free_var_88]	; free var pair?
  3651 00001F01 803805                  	cmp byte [rax], T_undefined
  3652 00001F04 0F846A770000            	je L_error_fvar_undefined
  3653 00001F0A 803804                  	cmp byte [rax], T_closure
  3654 00001F0D 0F85E5770000            	jne L_error_non_closure
  3655 00001F13 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3656 00001F16 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3657 00001F19 483D[02000000]          	cmp rax, sob_boolean_false
  3658 00001F1F 744C                    	je .L_if_else_0001
  3659                                  	; preparing a non-tail-call
  3660                                  	; preparing a non-tail-call
  3661 00001F21 488B4520                	mov rax, PARAM(0)	; param e
  3662 00001F25 50                      	push rax
  3663 00001F26 6A01                    	push 1	; arg count
  3664 00001F28 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  3665 00001F30 803805                  	cmp byte [rax], T_undefined
  3666 00001F33 0F843B770000            	je L_error_fvar_undefined
  3667 00001F39 803804                  	cmp byte [rax], T_closure
  3668 00001F3C 0F85B6770000            	jne L_error_non_closure
  3669 00001F42 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3670 00001F45 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3671 00001F48 50                      	push rax
  3672 00001F49 6A01                    	push 1	; arg count
  3673 00001F4B 488B0425[940F0000]      	mov rax, qword [free_var_83]	; free var list?
  3674 00001F53 803805                  	cmp byte [rax], T_undefined
  3675 00001F56 0F8418770000            	je L_error_fvar_undefined
  3676 00001F5C 803804                  	cmp byte [rax], T_closure
  3677 00001F5F 0F8593770000            	jne L_error_non_closure
  3678 00001F65 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3679 00001F68 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3680 00001F6B EB0A                    	jmp .L_if_end_0002
  3681                                  .L_if_else_0001:
  3682 00001F6D 48B8-                   	mov rax, L_constants + 2
  3682 00001F6F [0200000000000000] 
  3683                                  .L_if_end_0002:
  3684 00001F77 483D[02000000]          	cmp rax, sob_boolean_false
  3685 00001F7D 7500                    	jne .L_if_end_0001
  3686                                  .L_if_end_0001:
  3687 00001F7F C9                      	leave
  3688 00001F80 C21800                  	ret AND_KILL_FRAME(1)
  3689                                  .L_lambda_simple_end_001d:	; new closure is in rax
  3690 00001F83 48890425[940F0000]      	mov qword [free_var_83], rax
  3691 00001F8B 48B8-                   	mov rax, sob_void
  3691 00001F8D [0000000000000000] 
  3692                                  
  3693 00001F95 4889C7                  	mov rdi, rax
  3694 00001F98 E8597A0000              	call print_sexpr_if_not_void
  3695 00001F9D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3696 00001FA2 E8FA770000              	call malloc
  3697 00001FA7 50                      	push rax
  3698 00001FA8 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
  3699 00001FAC 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
  3700 00001FB0 BF00000000              	mov rdi, 8 * 0	; new rib for optional parameters
  3701 00001FB5 E8E7770000              	call malloc
  3702 00001FBA 50                      	push rax
  3703 00001FBB BF08000000              	mov rdi, 8 * 1	; extended env
  3704 00001FC0 E8DC770000              	call malloc
  3705 00001FC5 488B7D10                	mov rdi, ENV
  3706 00001FC9 BE00000000              	mov rsi, 0
  3707 00001FCE BA01000000              	mov rdx, 1
  3708                                  .L_lambda_opt_code_0001:	; ext_env[i + 1] <-- env[i] copy all the array
  3709 00001FD3 4883FE00                	cmp rsi, 0
  3710 00001FD7 7410                    	je .L_lambda_opt_end_0001
  3711 00001FD9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3712 00001FDD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3713 00001FE1 48FFC6                  	inc rsi
  3714 00001FE4 48FFC2                  	inc rdx
  3715 00001FE7 EBEA                    	jmp .L_lambda_opt_code_0001
  3716                                  .L_lambda_opt_end_0001:
  3717 00001FE9 5B                      	pop rbx
  3718 00001FEA BE00000000              	mov rsi, 0
  3719                                  .L_lambda_opt_code_0002:	; copy params
  3720 00001FEF 4883FE00                	cmp rsi, 0
  3721 00001FF3 740E                    	je .L_lambda_opt_end_0002
  3722 00001FF5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3723 00001FFA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3724 00001FFE 48FFC6                  	inc rsi
  3725 00002001 EBEC                    	jmp .L_lambda_opt_code_0002
  3726                                  .L_lambda_opt_end_0002:
  3727 00002003 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3728 00002006 4889C3                  	mov rbx, rax
  3729 00002009 58                      	pop rax
  3730 0000200A C60004                  	mov byte [rax], T_closure
  3731 0000200D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3732 00002011 48C74009[1E200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0003
  3733 00002019 E90E010000              	jmp .L_lambda_opt_end_0003
  3734                                  .L_lambda_opt_code_0003:	; lambda-opt body
  3735 0000201E 48837C241000            	cmp qword [rsp + 8 * 2], 0
  3736 00002024 7D0B                    	jge .L_lambda_simple_arity_check_ok_001e
  3737 00002026 FF742410                	push qword [rsp + 8 * 2]
  3738 0000202A 6A00                    	push 0
  3739 0000202C E929770000              	jmp L_error_incorrect_arity_simple
  3740                                  .L_lambda_simple_arity_check_ok_001e:
  3741 00002031 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  3742 00002036 4983E800                	sub r8, 0
  3743 0000203A 4C89C3                  	mov rbx,r8
  3744 0000203D 4983F800                	cmp r8, 0
  3745 00002041 7535                    	jne .L_lambda_opt_params_loop_0003
  3746 00002043 488B542410              	mov rdx, qword [rsp + 8 * 2]
  3747 00002048 4883C203                	add rdx , 3
  3748 0000204C 4883EC08                	sub rsp , 8
  3749 00002050 4889E1                  	mov rcx, rsp
  3750                                  .L_lambda_opt_stack_adjusted_0001: ;pushing down the stack of the current function
  3751 00002053 488B5908                	mov rbx, qword [rcx + 8 * 1]
  3752 00002057 488919                  	mov qword[rcx] , rbx
  3753 0000205A 4883C108                	add rcx , 8
  3754 0000205E 48FFCA                  	dec rdx
  3755 00002061 4883FA00                	cmp rdx, 0
  3756 00002065 75EC                    	jne .L_lambda_opt_stack_adjusted_0001
  3757 00002067 48FF442410              	inc qword [rsp + 8 * 2]
  3758 0000206C 48C701[01000000]        	mov qword [rcx], sob_nil 
  3759 00002073 E9A8000000              	jmp .L_lambda_opt_end_0004
  3760                                  	.L_lambda_opt_params_loop_0003:
  3761 00002078 488B542410              	mov rdx, qword [rsp + 8*2]
  3762 0000207D 488D4CD410              	lea rcx, [rsp + 8*2 + 8*rdx]
  3763 00002082 4C89C2                  	mov rdx, r8
  3764 00002085 49B9-                   	mov r9, sob_nil
  3764 00002087 [0100000000000000] 
  3765 0000208F 4989C9                  	mov r9, rcx
  3766                                  	.L_lambda_opt_params_loop_0001: ;loop for copying the opt into list
  3767 00002092 BF11000000              	mov rdi, (1 + 8 + 8)
  3768 00002097 E805770000              	call malloc
  3769 0000209C C60021                  	mov byte[rax], T_pair
  3770 0000209F 488B19                  	mov rbx, qword [rcx]
  3771 000020A2 48895801                	mov SOB_PAIR_CAR(rax), rbx
  3772 000020A6 4C894809                	mov SOB_PAIR_CDR(rax), r9
  3773 000020AA 4989C1                  	mov r9, rax
  3774 000020AD 48FFCA                  	dec rdx
  3775 000020B0 4883E908                	sub rcx, 8
  3776 000020B4 4883FA00                	cmp rdx, 0
  3777 000020B8 75D8                    	jne .L_lambda_opt_params_loop_0001
  3778 000020BA 488B542410              	mov rdx, qword [rsp + 8 * 2]
  3779 000020BF 4889E0                  	mov rax, rsp
  3780 000020C2 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
  3781 000020C7 4989DC                  	mov r12 , rbx
  3782 000020CA 4C89C1                  	mov rcx, r8
  3783 000020CD 48FFC9                  	dec rcx
  3784 000020D0 4883C203                	add rdx, 3
  3785 000020D4 4829CA                  	sub rdx,rcx
  3786 000020D7 48C1E103                	shl rcx, 3
  3787                                  	.L_lambda_opt_stack_adjusted_0002:
  3788 000020DB 4883FA00                	cmp rdx, 0
  3789 000020DF 7419                    	je .L_lambda_opt_params_end_0002
  3790 000020E1 4889D8                  	mov rax, rbx
  3791 000020E4 4829C8                  	sub rax, rcx
  3792 000020E7 488B30                  	mov rsi, qword [rax]
  3793 000020EA 488933                  	mov [rbx], rsi
  3794 000020ED 4883EB08                	sub rbx, 8
  3795 000020F1 48FFCA                  	dec rdx
  3796 000020F4 4883FA00                	cmp rdx, 0
  3797 000020F8 75E1                    	jne .L_lambda_opt_stack_adjusted_0002
  3798                                  	.L_lambda_opt_params_end_0002:
  3799 000020FA 4801CC                  	add rsp,rcx
  3800 000020FD BB00000000              	mov rbx, 0
  3801 00002102 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  3802 00002107 4883C303                	add rbx,3
  3803 0000210B 4C29C3                  	sub rbx,r8
  3804 0000210E 48C1E303                	shl rbx, 3
  3805 00002112 4801E3                  	add rbx, rsp
  3806 00002115 4C890B                  	mov qword[rbx] , r9
  3807 00002118 49FFC8                  	dec r8
  3808 0000211B 4C29442410              	sub qword [rsp + 8 * 2], r8
  3809                                  	.L_lambda_opt_end_0004:
  3810 00002120 C8000000                	enter 0, 0
  3811 00002124 488B4520                	mov rax, PARAM(0)	; param args
  3812                                  	LEAVE
    49 00002128 C9                  <1>  leave
  3813 00002129 C21800                  	ret AND_KILL_FRAME(1)
  3814                                  .L_lambda_opt_end_0003:
  3815 0000212C 48890425[720F0000]      	mov qword [free_var_81], rax
  3816 00002134 48B8-                   	mov rax, sob_void
  3816 00002136 [0000000000000000] 
  3817                                  
  3818 0000213E 4889C7                  	mov rdi, rax
  3819 00002141 E8B0780000              	call print_sexpr_if_not_void
  3820 00002146 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3821 0000214B E851760000              	call malloc
  3822 00002150 50                      	push rax
  3823 00002151 BF00000000              	mov rdi, 8 * 0	; new rib
  3824 00002156 E846760000              	call malloc
  3825 0000215B 50                      	push rax
  3826 0000215C BF08000000              	mov rdi, 8 * 1	; extended env
  3827 00002161 E83B760000              	call malloc
  3828 00002166 488B7D10                	mov rdi, ENV
  3829 0000216A BE00000000              	mov rsi, 0
  3830 0000216F BA01000000              	mov rdx, 1
  3831                                  .L_lambda_simple_env_loop_001e:	; ext_env[i + 1] <-- env[i]
  3832 00002174 4883FE00                	cmp rsi, 0
  3833 00002178 7410                    	je .L_lambda_simple_env_end_001e
  3834 0000217A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3835 0000217E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3836 00002182 48FFC6                  	inc rsi
  3837 00002185 48FFC2                  	inc rdx
  3838 00002188 EBEA                    	jmp .L_lambda_simple_env_loop_001e
  3839                                  .L_lambda_simple_env_end_001e:
  3840 0000218A 5B                      	pop rbx
  3841 0000218B BE00000000              	mov rsi, 0
  3842                                  .L_lambda_simple_params_loop_001e:	; copy params
  3843 00002190 4883FE00                	cmp rsi, 0
  3844 00002194 740E                    	je .L_lambda_simple_params_end_001e
  3845 00002196 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3846 0000219B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3847 0000219F 48FFC6                  	inc rsi
  3848 000021A2 EBEC                    	jmp .L_lambda_simple_params_loop_001e
  3849                                  .L_lambda_simple_params_end_001e:
  3850 000021A4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3851 000021A7 4889C3                  	mov rbx, rax
  3852 000021AA 58                      	pop rax
  3853 000021AB C60004                  	mov byte [rax], T_closure
  3854 000021AE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3855 000021B2 48C74009[BC210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001e
  3856 000021BA EB3D                    	jmp .L_lambda_simple_end_001e
  3857                                  .L_lambda_simple_code_001e:	; lambda-simple body
  3858 000021BC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3859 000021C2 740B                    	je .L_lambda_simple_arity_check_ok_001f
  3860 000021C4 FF742410                	push qword [rsp + 8 * 2]
  3861 000021C8 6A01                    	push 1
  3862 000021CA E98B750000              	jmp L_error_incorrect_arity_simple
  3863                                  .L_lambda_simple_arity_check_ok_001f:
  3864 000021CF C8000000                	enter 0, 0
  3865 000021D3 488B4520                	mov rax, PARAM(0)	; param x
  3866 000021D7 483D[02000000]          	cmp rax, sob_boolean_false
  3867 000021DD 740C                    	je .L_if_else_0002
  3868 000021DF 48B8-                   	mov rax, L_constants + 2
  3868 000021E1 [0200000000000000] 
  3869 000021E9 EB0A                    	jmp .L_if_end_0003
  3870                                  .L_if_else_0002:
  3871 000021EB 48B8-                   	mov rax, L_constants + 3
  3871 000021ED [0300000000000000] 
  3872                                  .L_if_end_0003:
  3873 000021F5 C9                      	leave
  3874 000021F6 C21800                  	ret AND_KILL_FRAME(1)
  3875                                  .L_lambda_simple_end_001e:	; new closure is in rax
  3876 000021F9 48890425[B60F0000]      	mov qword [free_var_85], rax
  3877 00002201 48B8-                   	mov rax, sob_void
  3877 00002203 [0000000000000000] 
  3878                                  
  3879 0000220B 4889C7                  	mov rdi, rax
  3880 0000220E E8E3770000              	call print_sexpr_if_not_void
  3881 00002213 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3882 00002218 E884750000              	call malloc
  3883 0000221D 50                      	push rax
  3884 0000221E BF00000000              	mov rdi, 8 * 0	; new rib
  3885 00002223 E879750000              	call malloc
  3886 00002228 50                      	push rax
  3887 00002229 BF08000000              	mov rdi, 8 * 1	; extended env
  3888 0000222E E86E750000              	call malloc
  3889 00002233 488B7D10                	mov rdi, ENV
  3890 00002237 BE00000000              	mov rsi, 0
  3891 0000223C BA01000000              	mov rdx, 1
  3892                                  .L_lambda_simple_env_loop_001f:	; ext_env[i + 1] <-- env[i]
  3893 00002241 4883FE00                	cmp rsi, 0
  3894 00002245 7410                    	je .L_lambda_simple_env_end_001f
  3895 00002247 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3896 0000224B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3897 0000224F 48FFC6                  	inc rsi
  3898 00002252 48FFC2                  	inc rdx
  3899 00002255 EBEA                    	jmp .L_lambda_simple_env_loop_001f
  3900                                  .L_lambda_simple_env_end_001f:
  3901 00002257 5B                      	pop rbx
  3902 00002258 BE00000000              	mov rsi, 0
  3903                                  .L_lambda_simple_params_loop_001f:	; copy params
  3904 0000225D 4883FE00                	cmp rsi, 0
  3905 00002261 740E                    	je .L_lambda_simple_params_end_001f
  3906 00002263 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3907 00002268 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3908 0000226C 48FFC6                  	inc rsi
  3909 0000226F EBEC                    	jmp .L_lambda_simple_params_loop_001f
  3910                                  .L_lambda_simple_params_end_001f:
  3911 00002271 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3912 00002274 4889C3                  	mov rbx, rax
  3913 00002277 58                      	pop rax
  3914 00002278 C60004                  	mov byte [rax], T_closure
  3915 0000227B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3916 0000227F 48C74009[89220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001f
  3917 00002287 EB79                    	jmp .L_lambda_simple_end_001f
  3918                                  .L_lambda_simple_code_001f:	; lambda-simple body
  3919 00002289 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3920 0000228F 740B                    	je .L_lambda_simple_arity_check_ok_0020
  3921 00002291 FF742410                	push qword [rsp + 8 * 2]
  3922 00002295 6A01                    	push 1
  3923 00002297 E9BE740000              	jmp L_error_incorrect_arity_simple
  3924                                  .L_lambda_simple_arity_check_ok_0020:
  3925 0000229C C8000000                	enter 0, 0
  3926                                  	; preparing a non-tail-call
  3927 000022A0 488B4520                	mov rax, PARAM(0)	; param q
  3928 000022A4 50                      	push rax
  3929 000022A5 6A01                    	push 1	; arg count
  3930 000022A7 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  3931 000022AF 803805                  	cmp byte [rax], T_undefined
  3932 000022B2 0F84BC730000            	je L_error_fvar_undefined
  3933 000022B8 803804                  	cmp byte [rax], T_closure
  3934 000022BB 0F8537740000            	jne L_error_non_closure
  3935 000022C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3936 000022C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3937 000022C7 483D[02000000]          	cmp rax, sob_boolean_false
  3938 000022CD 752F                    	jne .L_if_end_0004
  3939                                  	; preparing a non-tail-call
  3940 000022CF 488B4520                	mov rax, PARAM(0)	; param q
  3941 000022D3 50                      	push rax
  3942 000022D4 6A01                    	push 1	; arg count
  3943 000022D6 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
  3944 000022DE 803805                  	cmp byte [rax], T_undefined
  3945 000022E1 0F848D730000            	je L_error_fvar_undefined
  3946 000022E7 803804                  	cmp byte [rax], T_closure
  3947 000022EA 0F8508740000            	jne L_error_non_closure
  3948 000022F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3949 000022F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3950 000022F6 483D[02000000]          	cmp rax, sob_boolean_false
  3951 000022FC 7500                    	jne .L_if_end_0004
  3952                                  .L_if_end_0004:
  3953 000022FE C9                      	leave
  3954 000022FF C21800                  	ret AND_KILL_FRAME(1)
  3955                                  .L_lambda_simple_end_001f:	; new closure is in rax
  3956 00002302 48890425[FA0F0000]      	mov qword [free_var_89], rax
  3957 0000230A 48B8-                   	mov rax, sob_void
  3957 0000230C [0000000000000000] 
  3958                                  
  3959 00002314 4889C7                  	mov rdi, rax
  3960 00002317 E8DA760000              	call print_sexpr_if_not_void
  3961                                  	; preparing a non-tail-call
  3962 0000231C 48B8-                   	mov rax, L_constants + 1993
  3962 0000231E [C907000000000000] 
  3963 00002326 50                      	push rax
  3964 00002327 6A01                    	push 1	; arg count
  3965 00002329 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3966 0000232E E86E740000              	call malloc
  3967 00002333 50                      	push rax
  3968 00002334 BF00000000              	mov rdi, 8 * 0	; new rib
  3969 00002339 E863740000              	call malloc
  3970 0000233E 50                      	push rax
  3971 0000233F BF08000000              	mov rdi, 8 * 1	; extended env
  3972 00002344 E858740000              	call malloc
  3973 00002349 488B7D10                	mov rdi, ENV
  3974 0000234D BE00000000              	mov rsi, 0
  3975 00002352 BA01000000              	mov rdx, 1
  3976                                  .L_lambda_simple_env_loop_0020:	; ext_env[i + 1] <-- env[i]
  3977 00002357 4883FE00                	cmp rsi, 0
  3978 0000235B 7410                    	je .L_lambda_simple_env_end_0020
  3979 0000235D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3980 00002361 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3981 00002365 48FFC6                  	inc rsi
  3982 00002368 48FFC2                  	inc rdx
  3983 0000236B EBEA                    	jmp .L_lambda_simple_env_loop_0020
  3984                                  .L_lambda_simple_env_end_0020:
  3985 0000236D 5B                      	pop rbx
  3986 0000236E BE00000000              	mov rsi, 0
  3987                                  .L_lambda_simple_params_loop_0020:	; copy params
  3988 00002373 4883FE00                	cmp rsi, 0
  3989 00002377 740E                    	je .L_lambda_simple_params_end_0020
  3990 00002379 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3991 0000237E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3992 00002382 48FFC6                  	inc rsi
  3993 00002385 EBEC                    	jmp .L_lambda_simple_params_loop_0020
  3994                                  .L_lambda_simple_params_end_0020:
  3995 00002387 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3996 0000238A 4889C3                  	mov rbx, rax
  3997 0000238D 58                      	pop rax
  3998 0000238E C60004                  	mov byte [rax], T_closure
  3999 00002391 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4000 00002395 48C74009[A2230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0020
  4001 0000239D E95F030000              	jmp .L_lambda_simple_end_0020
  4002                                  .L_lambda_simple_code_0020:	; lambda-simple body
  4003 000023A2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4004 000023A8 740B                    	je .L_lambda_simple_arity_check_ok_0021
  4005 000023AA FF742410                	push qword [rsp + 8 * 2]
  4006 000023AE 6A01                    	push 1
  4007 000023B0 E9A5730000              	jmp L_error_incorrect_arity_simple
  4008                                  .L_lambda_simple_arity_check_ok_0021:
  4009 000023B5 C8000000                	enter 0, 0
  4010 000023B9 488B5D20                	 mov rbx, qword [rbp + 8 * (4 +0)]
  4011 000023BD BF08000000              	mov rdi, 8
  4012 000023C2 E8DA730000              	call malloc
  4013 000023C7 488918                  	mov qword [rax], rbx
  4014 000023CA 488903                  	mov qword [rbx], rax
  4015 000023CD 48B8-                   	mov rax, sob_void
  4015 000023CF [0000000000000000] 
  4016                                  
  4017 000023D7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4018 000023DC E8C0730000              	call malloc
  4019 000023E1 50                      	push rax
  4020 000023E2 BF08000000              	mov rdi, 8 * 1	; new rib
  4021 000023E7 E8B5730000              	call malloc
  4022 000023EC 50                      	push rax
  4023 000023ED BF10000000              	mov rdi, 8 * 2	; extended env
  4024 000023F2 E8AA730000              	call malloc
  4025 000023F7 488B7D10                	mov rdi, ENV
  4026 000023FB BE00000000              	mov rsi, 0
  4027 00002400 BA01000000              	mov rdx, 1
  4028                                  .L_lambda_simple_env_loop_0021:	; ext_env[i + 1] <-- env[i]
  4029 00002405 4883FE01                	cmp rsi, 1
  4030 00002409 7410                    	je .L_lambda_simple_env_end_0021
  4031 0000240B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4032 0000240F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4033 00002413 48FFC6                  	inc rsi
  4034 00002416 48FFC2                  	inc rdx
  4035 00002419 EBEA                    	jmp .L_lambda_simple_env_loop_0021
  4036                                  .L_lambda_simple_env_end_0021:
  4037 0000241B 5B                      	pop rbx
  4038 0000241C BE00000000              	mov rsi, 0
  4039                                  .L_lambda_simple_params_loop_0021:	; copy params
  4040 00002421 4883FE01                	cmp rsi, 1
  4041 00002425 740E                    	je .L_lambda_simple_params_end_0021
  4042 00002427 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4043 0000242C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4044 00002430 48FFC6                  	inc rsi
  4045 00002433 EBEC                    	jmp .L_lambda_simple_params_loop_0021
  4046                                  .L_lambda_simple_params_end_0021:
  4047 00002435 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4048 00002438 4889C3                  	mov rbx, rax
  4049 0000243B 58                      	pop rax
  4050 0000243C C60004                  	mov byte [rax], T_closure
  4051 0000243F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4052 00002443 48C74009[50240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0021
  4053 0000244B E9E9000000              	jmp .L_lambda_simple_end_0021
  4054                                  .L_lambda_simple_code_0021:	; lambda-simple body
  4055 00002450 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4056 00002456 740B                    	je .L_lambda_simple_arity_check_ok_0022
  4057 00002458 FF742410                	push qword [rsp + 8 * 2]
  4058 0000245C 6A02                    	push 2
  4059 0000245E E9F7720000              	jmp L_error_incorrect_arity_simple
  4060                                  .L_lambda_simple_arity_check_ok_0022:
  4061 00002463 C8000000                	enter 0, 0
  4062                                  	; preparing a non-tail-call
  4063 00002467 488B4528                	mov rax, PARAM(1)	; param s
  4064 0000246B 50                      	push rax
  4065 0000246C 6A01                    	push 1	; arg count
  4066 0000246E 488B0425[C70F0000]      	mov rax, qword [free_var_86]	; free var null?
  4067 00002476 803805                  	cmp byte [rax], T_undefined
  4068 00002479 0F84F5710000            	je L_error_fvar_undefined
  4069 0000247F 803804                  	cmp byte [rax], T_closure
  4070 00002482 0F8570720000            	jne L_error_non_closure
  4071 00002488 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4072 0000248B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4073 0000248E 483D[02000000]          	cmp rax, sob_boolean_false
  4074 00002494 7409                    	je .L_if_else_0003
  4075 00002496 488B4520                	mov rax, PARAM(0)	; param a
  4076 0000249A E996000000              	jmp .L_if_end_0005
  4077                                  .L_if_else_0003:
  4078                                  	; preparing a non-tail-call
  4079                                  	; preparing a non-tail-call
  4080                                  	; preparing a non-tail-call
  4081 0000249F 488B4528                	mov rax, PARAM(1)	; param s
  4082 000024A3 50                      	push rax
  4083 000024A4 6A01                    	push 1	; arg count
  4084 000024A6 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  4085 000024AE 803805                  	cmp byte [rax], T_undefined
  4086 000024B1 0F84BD710000            	je L_error_fvar_undefined
  4087 000024B7 803804                  	cmp byte [rax], T_closure
  4088 000024BA 0F8538720000            	jne L_error_non_closure
  4089 000024C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4090 000024C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4091 000024C6 50                      	push rax
  4092                                  	; preparing a non-tail-call
  4093 000024C7 488B4528                	mov rax, PARAM(1)	; param s
  4094 000024CB 50                      	push rax
  4095 000024CC 6A01                    	push 1	; arg count
  4096 000024CE 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  4097 000024D6 803805                  	cmp byte [rax], T_undefined
  4098 000024D9 0F8495710000            	je L_error_fvar_undefined
  4099 000024DF 803804                  	cmp byte [rax], T_closure
  4100 000024E2 0F8510720000            	jne L_error_non_closure
  4101 000024E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4102 000024EB FF5009                  	call SOB_CLOSURE_CODE(rax)
  4103 000024EE 50                      	push rax
  4104 000024EF 6A02                    	push 2	; arg count
  4105 000024F1 488B4510                	mov rax, ENV
  4106 000024F5 488B00                  	mov rax, qword [rax + 8 * 0]
  4107 000024F8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4108 000024FB 488B00                  	mov rax, qword [rax]
  4109 000024FE 803804                  	cmp byte [rax], T_closure
  4110 00002501 0F85F1710000            	jne L_error_non_closure
  4111 00002507 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4112 0000250A FF5009                  	call SOB_CLOSURE_CODE(rax)
  4113 0000250D 50                      	push rax
  4114 0000250E 488B4520                	mov rax, PARAM(0)	; param a
  4115 00002512 50                      	push rax
  4116 00002513 6A02                    	push 2	; arg count
  4117 00002515 488B0425[C80E0000]      	mov rax, qword [free_var_71]	; free var cons
  4118 0000251D 803805                  	cmp byte [rax], T_undefined
  4119 00002520 0F844E710000            	je L_error_fvar_undefined
  4120 00002526 803804                  	cmp byte [rax], T_closure
  4121 00002529 0F85C9710000            	jne L_error_non_closure
  4122 0000252F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4123 00002532 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4124                                  .L_if_end_0005:
  4125 00002535 C9                      	leave
  4126 00002536 C22000                  	ret AND_KILL_FRAME(2)
  4127                                  .L_lambda_simple_end_0021:	; new closure is in rax
  4128 00002539 50                      	push rax
  4129 0000253A 488B4520                	mov rax, PARAM(0)	; param run
  4130 0000253E 8F00                    	pop qword [rax]
  4131 00002540 48B8-                   	mov rax, sob_void
  4131 00002542 [0000000000000000] 
  4132                                  
  4133 0000254A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4134 0000254F E84D720000              	call malloc
  4135 00002554 50                      	push rax
  4136 00002555 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
  4137 00002559 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
  4138 0000255D BF08000000              	mov rdi, 8 * 1	; new rib for optional parameters
  4139 00002562 E83A720000              	call malloc
  4140 00002567 50                      	push rax
  4141 00002568 BF10000000              	mov rdi, 8 * 2	; extended env
  4142 0000256D E82F720000              	call malloc
  4143 00002572 488B7D10                	mov rdi, ENV
  4144 00002576 BE00000000              	mov rsi, 0
  4145 0000257B BA01000000              	mov rdx, 1
  4146                                  .L_lambda_opt_code_0004:	; ext_env[i + 1] <-- env[i] copy all the array
  4147 00002580 4883FE01                	cmp rsi, 1
  4148 00002584 7410                    	je .L_lambda_opt_end_0005
  4149 00002586 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4150 0000258A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4151 0000258E 48FFC6                  	inc rsi
  4152 00002591 48FFC2                  	inc rdx
  4153 00002594 EBEA                    	jmp .L_lambda_opt_code_0004
  4154                                  .L_lambda_opt_end_0005:
  4155 00002596 5B                      	pop rbx
  4156 00002597 BE00000000              	mov rsi, 0
  4157                                  .L_lambda_opt_code_0005:	; copy params
  4158 0000259C 4883FE01                	cmp rsi, 1
  4159 000025A0 740E                    	je .L_lambda_opt_end_0006
  4160 000025A2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4161 000025A7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4162 000025AB 48FFC6                  	inc rsi
  4163 000025AE EBEC                    	jmp .L_lambda_opt_code_0005
  4164                                  .L_lambda_opt_end_0006:
  4165 000025B0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4166 000025B3 4889C3                  	mov rbx, rax
  4167 000025B6 58                      	pop rax
  4168 000025B7 C60004                  	mov byte [rax], T_closure
  4169 000025BA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4170 000025BE 48C74009[CB250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0006
  4171 000025C6 E932010000              	jmp .L_lambda_opt_end_0007
  4172                                  .L_lambda_opt_code_0006:	; lambda-opt body
  4173 000025CB 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4174 000025D1 7D0B                    	jge .L_lambda_simple_arity_check_ok_0023
  4175 000025D3 FF742410                	push qword [rsp + 8 * 2]
  4176 000025D7 6A01                    	push 1
  4177 000025D9 E97C710000              	jmp L_error_incorrect_arity_simple
  4178                                  .L_lambda_simple_arity_check_ok_0023:
  4179 000025DE 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  4180 000025E3 4983E801                	sub r8, 1
  4181 000025E7 4C89C3                  	mov rbx,r8
  4182 000025EA 4983F800                	cmp r8, 0
  4183 000025EE 7535                    	jne .L_lambda_opt_params_loop_0006
  4184 000025F0 488B542410              	mov rdx, qword [rsp + 8 * 2]
  4185 000025F5 4883C203                	add rdx , 3
  4186 000025F9 4883EC08                	sub rsp , 8
  4187 000025FD 4889E1                  	mov rcx, rsp
  4188                                  .L_lambda_opt_stack_adjusted_0003: ;pushing down the stack of the current function
  4189 00002600 488B5908                	mov rbx, qword [rcx + 8 * 1]
  4190 00002604 488919                  	mov qword[rcx] , rbx
  4191 00002607 4883C108                	add rcx , 8
  4192 0000260B 48FFCA                  	dec rdx
  4193 0000260E 4883FA00                	cmp rdx, 0
  4194 00002612 75EC                    	jne .L_lambda_opt_stack_adjusted_0003
  4195 00002614 48FF442410              	inc qword [rsp + 8 * 2]
  4196 00002619 48C701[01000000]        	mov qword [rcx], sob_nil 
  4197 00002620 E9A8000000              	jmp .L_lambda_opt_end_0008
  4198                                  	.L_lambda_opt_params_loop_0006:
  4199 00002625 488B542410              	mov rdx, qword [rsp + 8*2]
  4200 0000262A 488D4CD410              	lea rcx, [rsp + 8*2 + 8*rdx]
  4201 0000262F 4C89C2                  	mov rdx, r8
  4202 00002632 49B9-                   	mov r9, sob_nil
  4202 00002634 [0100000000000000] 
  4203 0000263C 4989C9                  	mov r9, rcx
  4204                                  	.L_lambda_opt_params_loop_0004: ;loop for copying the opt into list
  4205 0000263F BF11000000              	mov rdi, (1 + 8 + 8)
  4206 00002644 E858710000              	call malloc
  4207 00002649 C60021                  	mov byte[rax], T_pair
  4208 0000264C 488B19                  	mov rbx, qword [rcx]
  4209 0000264F 48895801                	mov SOB_PAIR_CAR(rax), rbx
  4210 00002653 4C894809                	mov SOB_PAIR_CDR(rax), r9
  4211 00002657 4989C1                  	mov r9, rax
  4212 0000265A 48FFCA                  	dec rdx
  4213 0000265D 4883E908                	sub rcx, 8
  4214 00002661 4883FA00                	cmp rdx, 0
  4215 00002665 75D8                    	jne .L_lambda_opt_params_loop_0004
  4216 00002667 488B542410              	mov rdx, qword [rsp + 8 * 2]
  4217 0000266C 4889E0                  	mov rax, rsp
  4218 0000266F 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
  4219 00002674 4989DC                  	mov r12 , rbx
  4220 00002677 4C89C1                  	mov rcx, r8
  4221 0000267A 48FFC9                  	dec rcx
  4222 0000267D 4883C203                	add rdx, 3
  4223 00002681 4829CA                  	sub rdx,rcx
  4224 00002684 48C1E103                	shl rcx, 3
  4225                                  	.L_lambda_opt_stack_adjusted_0004:
  4226 00002688 4883FA00                	cmp rdx, 0
  4227 0000268C 7419                    	je .L_lambda_opt_params_end_0006
  4228 0000268E 4889D8                  	mov rax, rbx
  4229 00002691 4829C8                  	sub rax, rcx
  4230 00002694 488B30                  	mov rsi, qword [rax]
  4231 00002697 488933                  	mov [rbx], rsi
  4232 0000269A 4883EB08                	sub rbx, 8
  4233 0000269E 48FFCA                  	dec rdx
  4234 000026A1 4883FA00                	cmp rdx, 0
  4235 000026A5 75E1                    	jne .L_lambda_opt_stack_adjusted_0004
  4236                                  	.L_lambda_opt_params_end_0006:
  4237 000026A7 4801CC                  	add rsp,rcx
  4238 000026AA BB01000000              	mov rbx, 1
  4239 000026AF 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  4240 000026B4 4883C303                	add rbx,3
  4241 000026B8 4C29C3                  	sub rbx,r8
  4242 000026BB 48C1E303                	shl rbx, 3
  4243 000026BF 4801E3                  	add rbx, rsp
  4244 000026C2 4C890B                  	mov qword[rbx] , r9
  4245 000026C5 49FFC8                  	dec r8
  4246 000026C8 4C29442410              	sub qword [rsp + 8 * 2], r8
  4247                                  	.L_lambda_opt_end_0008:
  4248 000026CD C8000000                	enter 0, 0
  4249                                  	; preparing a non-tail-call
  4250 000026D1 488B4528                	mov rax, PARAM(1)	; param s
  4251 000026D5 50                      	push rax
  4252 000026D6 488B4520                	mov rax, PARAM(0)	; param a
  4253 000026DA 50                      	push rax
  4254 000026DB 6A02                    	push 2	; arg count
  4255 000026DD 488B4510                	mov rax, ENV
  4256 000026E1 488B00                  	mov rax, qword [rax + 8 * 0]
  4257 000026E4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4258 000026E7 488B00                  	mov rax, qword [rax]
  4259 000026EA 803804                  	cmp byte [rax], T_closure
  4260 000026ED 0F8505700000            	jne L_error_non_closure
  4261 000026F3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4262 000026F6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4263                                  	LEAVE
    49 000026F9 C9                  <1>  leave
  4264 000026FA C22000                  	ret AND_KILL_FRAME(2)
  4265                                  .L_lambda_opt_end_0007:
  4266 000026FD C9                      	leave
  4267 000026FE C21800                  	ret AND_KILL_FRAME(1)
  4268                                  .L_lambda_simple_end_0020:	; new closure is in rax
  4269 00002701 803804                  	cmp byte [rax], T_closure
  4270 00002704 0F85EE6F0000            	jne L_error_non_closure
  4271 0000270A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4272 0000270D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4273 00002710 48890425[830F0000]      	mov qword [free_var_82], rax
  4274 00002718 48B8-                   	mov rax, sob_void
  4274 0000271A [0000000000000000] 
  4275                                  
  4276 00002722 4889C7                  	mov rdi, rax
  4277 00002725 E8CC720000              	call print_sexpr_if_not_void
  4278                                  	; preparing a non-tail-call
  4279 0000272A 48B8-                   	mov rax, L_constants + 1993
  4279 0000272C [C907000000000000] 
  4280 00002734 50                      	push rax
  4281 00002735 6A01                    	push 1	; arg count
  4282 00002737 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4283 0000273C E860700000              	call malloc
  4284 00002741 50                      	push rax
  4285 00002742 BF00000000              	mov rdi, 8 * 0	; new rib
  4286 00002747 E855700000              	call malloc
  4287 0000274C 50                      	push rax
  4288 0000274D BF08000000              	mov rdi, 8 * 1	; extended env
  4289 00002752 E84A700000              	call malloc
  4290 00002757 488B7D10                	mov rdi, ENV
  4291 0000275B BE00000000              	mov rsi, 0
  4292 00002760 BA01000000              	mov rdx, 1
  4293                                  .L_lambda_simple_env_loop_0022:	; ext_env[i + 1] <-- env[i]
  4294 00002765 4883FE00                	cmp rsi, 0
  4295 00002769 7410                    	je .L_lambda_simple_env_end_0022
  4296 0000276B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4297 0000276F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4298 00002773 48FFC6                  	inc rsi
  4299 00002776 48FFC2                  	inc rdx
  4300 00002779 EBEA                    	jmp .L_lambda_simple_env_loop_0022
  4301                                  .L_lambda_simple_env_end_0022:
  4302 0000277B 5B                      	pop rbx
  4303 0000277C BE00000000              	mov rsi, 0
  4304                                  .L_lambda_simple_params_loop_0022:	; copy params
  4305 00002781 4883FE00                	cmp rsi, 0
  4306 00002785 740E                    	je .L_lambda_simple_params_end_0022
  4307 00002787 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4308 0000278C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4309 00002790 48FFC6                  	inc rsi
  4310 00002793 EBEC                    	jmp .L_lambda_simple_params_loop_0022
  4311                                  .L_lambda_simple_params_end_0022:
  4312 00002795 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4313 00002798 4889C3                  	mov rbx, rax
  4314 0000279B 58                      	pop rax
  4315 0000279C C60004                  	mov byte [rax], T_closure
  4316 0000279F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4317 000027A3 48C74009[B0270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0022
  4318 000027AB E9CE030000              	jmp .L_lambda_simple_end_0022
  4319                                  .L_lambda_simple_code_0022:	; lambda-simple body
  4320 000027B0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4321 000027B6 740B                    	je .L_lambda_simple_arity_check_ok_0024
  4322 000027B8 FF742410                	push qword [rsp + 8 * 2]
  4323 000027BC 6A01                    	push 1
  4324 000027BE E9976F0000              	jmp L_error_incorrect_arity_simple
  4325                                  .L_lambda_simple_arity_check_ok_0024:
  4326 000027C3 C8000000                	enter 0, 0
  4327 000027C7 488B5D20                	 mov rbx, qword [rbp + 8 * (4 +0)]
  4328 000027CB BF08000000              	mov rdi, 8
  4329 000027D0 E8CC6F0000              	call malloc
  4330 000027D5 488918                  	mov qword [rax], rbx
  4331 000027D8 488903                  	mov qword [rbx], rax
  4332 000027DB 48B8-                   	mov rax, sob_void
  4332 000027DD [0000000000000000] 
  4333                                  
  4334 000027E5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4335 000027EA E8B26F0000              	call malloc
  4336 000027EF 50                      	push rax
  4337 000027F0 BF08000000              	mov rdi, 8 * 1	; new rib
  4338 000027F5 E8A76F0000              	call malloc
  4339 000027FA 50                      	push rax
  4340 000027FB BF10000000              	mov rdi, 8 * 2	; extended env
  4341 00002800 E89C6F0000              	call malloc
  4342 00002805 488B7D10                	mov rdi, ENV
  4343 00002809 BE00000000              	mov rsi, 0
  4344 0000280E BA01000000              	mov rdx, 1
  4345                                  .L_lambda_simple_env_loop_0023:	; ext_env[i + 1] <-- env[i]
  4346 00002813 4883FE01                	cmp rsi, 1
  4347 00002817 7410                    	je .L_lambda_simple_env_end_0023
  4348 00002819 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4349 0000281D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4350 00002821 48FFC6                  	inc rsi
  4351 00002824 48FFC2                  	inc rdx
  4352 00002827 EBEA                    	jmp .L_lambda_simple_env_loop_0023
  4353                                  .L_lambda_simple_env_end_0023:
  4354 00002829 5B                      	pop rbx
  4355 0000282A BE00000000              	mov rsi, 0
  4356                                  .L_lambda_simple_params_loop_0023:	; copy params
  4357 0000282F 4883FE01                	cmp rsi, 1
  4358 00002833 740E                    	je .L_lambda_simple_params_end_0023
  4359 00002835 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4360 0000283A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4361 0000283E 48FFC6                  	inc rsi
  4362 00002841 EBEC                    	jmp .L_lambda_simple_params_loop_0023
  4363                                  .L_lambda_simple_params_end_0023:
  4364 00002843 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4365 00002846 4889C3                  	mov rbx, rax
  4366 00002849 58                      	pop rax
  4367 0000284A C60004                  	mov byte [rax], T_closure
  4368 0000284D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4369 00002851 48C74009[5E280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0023
  4370 00002859 E9EA000000              	jmp .L_lambda_simple_end_0023
  4371                                  .L_lambda_simple_code_0023:	; lambda-simple body
  4372 0000285E 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4373 00002864 740B                    	je .L_lambda_simple_arity_check_ok_0025
  4374 00002866 FF742410                	push qword [rsp + 8 * 2]
  4375 0000286A 6A02                    	push 2
  4376 0000286C E9E96E0000              	jmp L_error_incorrect_arity_simple
  4377                                  .L_lambda_simple_arity_check_ok_0025:
  4378 00002871 C8000000                	enter 0, 0
  4379                                  	; preparing a non-tail-call
  4380 00002875 488B4528                	mov rax, PARAM(1)	; param s
  4381 00002879 50                      	push rax
  4382 0000287A 6A01                    	push 1	; arg count
  4383 0000287C 488B0425[E90F0000]      	mov rax, qword [free_var_88]	; free var pair?
  4384 00002884 803805                  	cmp byte [rax], T_undefined
  4385 00002887 0F84E76D0000            	je L_error_fvar_undefined
  4386 0000288D 803804                  	cmp byte [rax], T_closure
  4387 00002890 0F85626E0000            	jne L_error_non_closure
  4388 00002896 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4389 00002899 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4390 0000289C 483D[02000000]          	cmp rax, sob_boolean_false
  4391 000028A2 0F8498000000            	je .L_if_else_0004
  4392                                  	; preparing a non-tail-call
  4393                                  	; preparing a non-tail-call
  4394                                  	; preparing a non-tail-call
  4395 000028A8 488B4528                	mov rax, PARAM(1)	; param s
  4396 000028AC 50                      	push rax
  4397 000028AD 6A01                    	push 1	; arg count
  4398 000028AF 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  4399 000028B7 803805                  	cmp byte [rax], T_undefined
  4400 000028BA 0F84B46D0000            	je L_error_fvar_undefined
  4401 000028C0 803804                  	cmp byte [rax], T_closure
  4402 000028C3 0F852F6E0000            	jne L_error_non_closure
  4403 000028C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4404 000028CC FF5009                  	call SOB_CLOSURE_CODE(rax)
  4405 000028CF 50                      	push rax
  4406                                  	; preparing a non-tail-call
  4407 000028D0 488B4528                	mov rax, PARAM(1)	; param s
  4408 000028D4 50                      	push rax
  4409 000028D5 6A01                    	push 1	; arg count
  4410 000028D7 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  4411 000028DF 803805                  	cmp byte [rax], T_undefined
  4412 000028E2 0F848C6D0000            	je L_error_fvar_undefined
  4413 000028E8 803804                  	cmp byte [rax], T_closure
  4414 000028EB 0F85076E0000            	jne L_error_non_closure
  4415 000028F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4416 000028F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4417 000028F7 50                      	push rax
  4418 000028F8 6A02                    	push 2	; arg count
  4419 000028FA 488B4510                	mov rax, ENV
  4420 000028FE 488B00                  	mov rax, qword [rax + 8 * 0]
  4421 00002901 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4422 00002904 488B00                  	mov rax, qword [rax]
  4423 00002907 803804                  	cmp byte [rax], T_closure
  4424 0000290A 0F85E86D0000            	jne L_error_non_closure
  4425 00002910 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4426 00002913 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4427 00002916 50                      	push rax
  4428 00002917 488B4520                	mov rax, PARAM(0)	; param a
  4429 0000291B 50                      	push rax
  4430 0000291C 6A02                    	push 2	; arg count
  4431 0000291E 488B0425[C80E0000]      	mov rax, qword [free_var_71]	; free var cons
  4432 00002926 803805                  	cmp byte [rax], T_undefined
  4433 00002929 0F84456D0000            	je L_error_fvar_undefined
  4434 0000292F 803804                  	cmp byte [rax], T_closure
  4435 00002932 0F85C06D0000            	jne L_error_non_closure
  4436 00002938 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4437 0000293B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4438 0000293E EB04                    	jmp .L_if_end_0006
  4439                                  .L_if_else_0004:
  4440 00002940 488B4520                	mov rax, PARAM(0)	; param a
  4441                                  .L_if_end_0006:
  4442 00002944 C9                      	leave
  4443 00002945 C22000                  	ret AND_KILL_FRAME(2)
  4444                                  .L_lambda_simple_end_0023:	; new closure is in rax
  4445 00002948 50                      	push rax
  4446 00002949 488B4520                	mov rax, PARAM(0)	; param run
  4447 0000294D 8F00                    	pop qword [rax]
  4448 0000294F 48B8-                   	mov rax, sob_void
  4448 00002951 [0000000000000000] 
  4449                                  
  4450 00002959 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4451 0000295E E83E6E0000              	call malloc
  4452 00002963 50                      	push rax
  4453 00002964 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
  4454 00002968 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
  4455 0000296C BF08000000              	mov rdi, 8 * 1	; new rib for optional parameters
  4456 00002971 E82B6E0000              	call malloc
  4457 00002976 50                      	push rax
  4458 00002977 BF10000000              	mov rdi, 8 * 2	; extended env
  4459 0000297C E8206E0000              	call malloc
  4460 00002981 488B7D10                	mov rdi, ENV
  4461 00002985 BE00000000              	mov rsi, 0
  4462 0000298A BA01000000              	mov rdx, 1
  4463                                  .L_lambda_opt_code_0007:	; ext_env[i + 1] <-- env[i] copy all the array
  4464 0000298F 4883FE01                	cmp rsi, 1
  4465 00002993 7410                    	je .L_lambda_opt_end_0009
  4466 00002995 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4467 00002999 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4468 0000299D 48FFC6                  	inc rsi
  4469 000029A0 48FFC2                  	inc rdx
  4470 000029A3 EBEA                    	jmp .L_lambda_opt_code_0007
  4471                                  .L_lambda_opt_end_0009:
  4472 000029A5 5B                      	pop rbx
  4473 000029A6 BE00000000              	mov rsi, 0
  4474                                  .L_lambda_opt_code_0008:	; copy params
  4475 000029AB 4883FE01                	cmp rsi, 1
  4476 000029AF 740E                    	je .L_lambda_opt_end_000a
  4477 000029B1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4478 000029B6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4479 000029BA 48FFC6                  	inc rsi
  4480 000029BD EBEC                    	jmp .L_lambda_opt_code_0008
  4481                                  .L_lambda_opt_end_000a:
  4482 000029BF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4483 000029C2 4889C3                  	mov rbx, rax
  4484 000029C5 58                      	pop rax
  4485 000029C6 C60004                  	mov byte [rax], T_closure
  4486 000029C9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4487 000029CD 48C74009[DA290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0009
  4488 000029D5 E9A0010000              	jmp .L_lambda_opt_end_000b
  4489                                  .L_lambda_opt_code_0009:	; lambda-opt body
  4490 000029DA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4491 000029E0 7D0B                    	jge .L_lambda_simple_arity_check_ok_0026
  4492 000029E2 FF742410                	push qword [rsp + 8 * 2]
  4493 000029E6 6A01                    	push 1
  4494 000029E8 E96D6D0000              	jmp L_error_incorrect_arity_simple
  4495                                  .L_lambda_simple_arity_check_ok_0026:
  4496 000029ED 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  4497 000029F2 4983E801                	sub r8, 1
  4498 000029F6 4C89C3                  	mov rbx,r8
  4499 000029F9 4983F800                	cmp r8, 0
  4500 000029FD 7535                    	jne .L_lambda_opt_params_loop_0009
  4501 000029FF 488B542410              	mov rdx, qword [rsp + 8 * 2]
  4502 00002A04 4883C203                	add rdx , 3
  4503 00002A08 4883EC08                	sub rsp , 8
  4504 00002A0C 4889E1                  	mov rcx, rsp
  4505                                  .L_lambda_opt_stack_adjusted_0005: ;pushing down the stack of the current function
  4506 00002A0F 488B5908                	mov rbx, qword [rcx + 8 * 1]
  4507 00002A13 488919                  	mov qword[rcx] , rbx
  4508 00002A16 4883C108                	add rcx , 8
  4509 00002A1A 48FFCA                  	dec rdx
  4510 00002A1D 4883FA00                	cmp rdx, 0
  4511 00002A21 75EC                    	jne .L_lambda_opt_stack_adjusted_0005
  4512 00002A23 48FF442410              	inc qword [rsp + 8 * 2]
  4513 00002A28 48C701[01000000]        	mov qword [rcx], sob_nil 
  4514 00002A2F E9A8000000              	jmp .L_lambda_opt_end_000c
  4515                                  	.L_lambda_opt_params_loop_0009:
  4516 00002A34 488B542410              	mov rdx, qword [rsp + 8*2]
  4517 00002A39 488D4CD410              	lea rcx, [rsp + 8*2 + 8*rdx]
  4518 00002A3E 4C89C2                  	mov rdx, r8
  4519 00002A41 49B9-                   	mov r9, sob_nil
  4519 00002A43 [0100000000000000] 
  4520 00002A4B 4989C9                  	mov r9, rcx
  4521                                  	.L_lambda_opt_params_loop_0007: ;loop for copying the opt into list
  4522 00002A4E BF11000000              	mov rdi, (1 + 8 + 8)
  4523 00002A53 E8496D0000              	call malloc
  4524 00002A58 C60021                  	mov byte[rax], T_pair
  4525 00002A5B 488B19                  	mov rbx, qword [rcx]
  4526 00002A5E 48895801                	mov SOB_PAIR_CAR(rax), rbx
  4527 00002A62 4C894809                	mov SOB_PAIR_CDR(rax), r9
  4528 00002A66 4989C1                  	mov r9, rax
  4529 00002A69 48FFCA                  	dec rdx
  4530 00002A6C 4883E908                	sub rcx, 8
  4531 00002A70 4883FA00                	cmp rdx, 0
  4532 00002A74 75D8                    	jne .L_lambda_opt_params_loop_0007
  4533 00002A76 488B542410              	mov rdx, qword [rsp + 8 * 2]
  4534 00002A7B 4889E0                  	mov rax, rsp
  4535 00002A7E 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
  4536 00002A83 4989DC                  	mov r12 , rbx
  4537 00002A86 4C89C1                  	mov rcx, r8
  4538 00002A89 48FFC9                  	dec rcx
  4539 00002A8C 4883C203                	add rdx, 3
  4540 00002A90 4829CA                  	sub rdx,rcx
  4541 00002A93 48C1E103                	shl rcx, 3
  4542                                  	.L_lambda_opt_stack_adjusted_0006:
  4543 00002A97 4883FA00                	cmp rdx, 0
  4544 00002A9B 7419                    	je .L_lambda_opt_params_end_000a
  4545 00002A9D 4889D8                  	mov rax, rbx
  4546 00002AA0 4829C8                  	sub rax, rcx
  4547 00002AA3 488B30                  	mov rsi, qword [rax]
  4548 00002AA6 488933                  	mov [rbx], rsi
  4549 00002AA9 4883EB08                	sub rbx, 8
  4550 00002AAD 48FFCA                  	dec rdx
  4551 00002AB0 4883FA00                	cmp rdx, 0
  4552 00002AB4 75E1                    	jne .L_lambda_opt_stack_adjusted_0006
  4553                                  	.L_lambda_opt_params_end_000a:
  4554 00002AB6 4801CC                  	add rsp,rcx
  4555 00002AB9 BB01000000              	mov rbx, 1
  4556 00002ABE 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  4557 00002AC3 4883C303                	add rbx,3
  4558 00002AC7 4C29C3                  	sub rbx,r8
  4559 00002ACA 48C1E303                	shl rbx, 3
  4560 00002ACE 4801E3                  	add rbx, rsp
  4561 00002AD1 4C890B                  	mov qword[rbx] , r9
  4562 00002AD4 49FFC8                  	dec r8
  4563 00002AD7 4C29442410              	sub qword [rsp + 8 * 2], r8
  4564                                  	.L_lambda_opt_end_000c:
  4565 00002ADC C8000000                	enter 0, 0
  4566                                  	; preparing a non-tail-call
  4567                                  	; preparing a non-tail-call
  4568                                  	; preparing a non-tail-call
  4569 00002AE0 488B4528                	mov rax, PARAM(1)	; param s
  4570 00002AE4 50                      	push rax
  4571 00002AE5 6A01                    	push 1	; arg count
  4572 00002AE7 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  4573 00002AEF 803805                  	cmp byte [rax], T_undefined
  4574 00002AF2 0F847C6B0000            	je L_error_fvar_undefined
  4575 00002AF8 803804                  	cmp byte [rax], T_closure
  4576 00002AFB 0F85F76B0000            	jne L_error_non_closure
  4577 00002B01 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4578 00002B04 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4579 00002B07 50                      	push rax
  4580                                  	; preparing a non-tail-call
  4581 00002B08 488B4528                	mov rax, PARAM(1)	; param s
  4582 00002B0C 50                      	push rax
  4583 00002B0D 6A01                    	push 1	; arg count
  4584 00002B0F 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  4585 00002B17 803805                  	cmp byte [rax], T_undefined
  4586 00002B1A 0F84546B0000            	je L_error_fvar_undefined
  4587 00002B20 803804                  	cmp byte [rax], T_closure
  4588 00002B23 0F85CF6B0000            	jne L_error_non_closure
  4589 00002B29 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4590 00002B2C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4591 00002B2F 50                      	push rax
  4592 00002B30 6A02                    	push 2	; arg count
  4593 00002B32 488B4510                	mov rax, ENV
  4594 00002B36 488B00                  	mov rax, qword [rax + 8 * 0]
  4595 00002B39 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4596 00002B3C 488B00                  	mov rax, qword [rax]
  4597 00002B3F 803804                  	cmp byte [rax], T_closure
  4598 00002B42 0F85B06B0000            	jne L_error_non_closure
  4599 00002B48 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4600 00002B4B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4601 00002B4E 50                      	push rax
  4602 00002B4F 488B4520                	mov rax, PARAM(0)	; param f
  4603 00002B53 50                      	push rax
  4604 00002B54 6A02                    	push 2	; arg count
  4605 00002B56 488B0425[DD0A0000]      	mov rax, qword [free_var_12]	; free var __bin-apply
  4606 00002B5E 803805                  	cmp byte [rax], T_undefined
  4607 00002B61 0F840D6B0000            	je L_error_fvar_undefined
  4608 00002B67 803804                  	cmp byte [rax], T_closure
  4609 00002B6A 0F85886B0000            	jne L_error_non_closure
  4610 00002B70 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4611 00002B73 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4612                                  	LEAVE
    49 00002B76 C9                  <1>  leave
  4613 00002B77 C22000                  	ret AND_KILL_FRAME(2)
  4614                                  .L_lambda_opt_end_000b:
  4615 00002B7A C9                      	leave
  4616 00002B7B C21800                  	ret AND_KILL_FRAME(1)
  4617                                  .L_lambda_simple_end_0022:	; new closure is in rax
  4618 00002B7E 803804                  	cmp byte [rax], T_closure
  4619 00002B81 0F85716B0000            	jne L_error_non_closure
  4620 00002B87 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4621 00002B8A FF5009                  	call SOB_CLOSURE_CODE(rax)
  4622 00002B8D 48890425[310C0000]      	mov qword [free_var_32], rax
  4623 00002B95 48B8-                   	mov rax, sob_void
  4623 00002B97 [0000000000000000] 
  4624                                  
  4625 00002B9F 4889C7                  	mov rdi, rax
  4626 00002BA2 E84F6E0000              	call print_sexpr_if_not_void
  4627 00002BA7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4628 00002BAC E8F06B0000              	call malloc
  4629 00002BB1 50                      	push rax
  4630 00002BB2 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
  4631 00002BB6 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
  4632 00002BBA BF00000000              	mov rdi, 8 * 0	; new rib for optional parameters
  4633 00002BBF E8DD6B0000              	call malloc
  4634 00002BC4 50                      	push rax
  4635 00002BC5 BF08000000              	mov rdi, 8 * 1	; extended env
  4636 00002BCA E8D26B0000              	call malloc
  4637 00002BCF 488B7D10                	mov rdi, ENV
  4638 00002BD3 BE00000000              	mov rsi, 0
  4639 00002BD8 BA01000000              	mov rdx, 1
  4640                                  .L_lambda_opt_code_000a:	; ext_env[i + 1] <-- env[i] copy all the array
  4641 00002BDD 4883FE00                	cmp rsi, 0
  4642 00002BE1 7410                    	je .L_lambda_opt_end_000d
  4643 00002BE3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4644 00002BE7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4645 00002BEB 48FFC6                  	inc rsi
  4646 00002BEE 48FFC2                  	inc rdx
  4647 00002BF1 EBEA                    	jmp .L_lambda_opt_code_000a
  4648                                  .L_lambda_opt_end_000d:
  4649 00002BF3 5B                      	pop rbx
  4650 00002BF4 BE00000000              	mov rsi, 0
  4651                                  .L_lambda_opt_code_000b:	; copy params
  4652 00002BF9 4883FE00                	cmp rsi, 0
  4653 00002BFD 740E                    	je .L_lambda_opt_end_000e
  4654 00002BFF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4655 00002C04 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4656 00002C08 48FFC6                  	inc rsi
  4657 00002C0B EBEC                    	jmp .L_lambda_opt_code_000b
  4658                                  .L_lambda_opt_end_000e:
  4659 00002C0D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4660 00002C10 4889C3                  	mov rbx, rax
  4661 00002C13 58                      	pop rax
  4662 00002C14 C60004                  	mov byte [rax], T_closure
  4663 00002C17 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4664 00002C1B 48C74009[282C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000c
  4665 00002C23 E915040000              	jmp .L_lambda_opt_end_000f
  4666                                  .L_lambda_opt_code_000c:	; lambda-opt body
  4667 00002C28 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4668 00002C2E 7D0B                    	jge .L_lambda_simple_arity_check_ok_0027
  4669 00002C30 FF742410                	push qword [rsp + 8 * 2]
  4670 00002C34 6A01                    	push 1
  4671 00002C36 E91F6B0000              	jmp L_error_incorrect_arity_simple
  4672                                  .L_lambda_simple_arity_check_ok_0027:
  4673 00002C3B 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  4674 00002C40 4983E801                	sub r8, 1
  4675 00002C44 4C89C3                  	mov rbx,r8
  4676 00002C47 4983F800                	cmp r8, 0
  4677 00002C4B 7535                    	jne .L_lambda_opt_params_loop_000c
  4678 00002C4D 488B542410              	mov rdx, qword [rsp + 8 * 2]
  4679 00002C52 4883C203                	add rdx , 3
  4680 00002C56 4883EC08                	sub rsp , 8
  4681 00002C5A 4889E1                  	mov rcx, rsp
  4682                                  .L_lambda_opt_stack_adjusted_0007: ;pushing down the stack of the current function
  4683 00002C5D 488B5908                	mov rbx, qword [rcx + 8 * 1]
  4684 00002C61 488919                  	mov qword[rcx] , rbx
  4685 00002C64 4883C108                	add rcx , 8
  4686 00002C68 48FFCA                  	dec rdx
  4687 00002C6B 4883FA00                	cmp rdx, 0
  4688 00002C6F 75EC                    	jne .L_lambda_opt_stack_adjusted_0007
  4689 00002C71 48FF442410              	inc qword [rsp + 8 * 2]
  4690 00002C76 48C701[01000000]        	mov qword [rcx], sob_nil 
  4691 00002C7D E9A8000000              	jmp .L_lambda_opt_end_0010
  4692                                  	.L_lambda_opt_params_loop_000c:
  4693 00002C82 488B542410              	mov rdx, qword [rsp + 8*2]
  4694 00002C87 488D4CD410              	lea rcx, [rsp + 8*2 + 8*rdx]
  4695 00002C8C 4C89C2                  	mov rdx, r8
  4696 00002C8F 49B9-                   	mov r9, sob_nil
  4696 00002C91 [0100000000000000] 
  4697 00002C99 4989C9                  	mov r9, rcx
  4698                                  	.L_lambda_opt_params_loop_000a: ;loop for copying the opt into list
  4699 00002C9C BF11000000              	mov rdi, (1 + 8 + 8)
  4700 00002CA1 E8FB6A0000              	call malloc
  4701 00002CA6 C60021                  	mov byte[rax], T_pair
  4702 00002CA9 488B19                  	mov rbx, qword [rcx]
  4703 00002CAC 48895801                	mov SOB_PAIR_CAR(rax), rbx
  4704 00002CB0 4C894809                	mov SOB_PAIR_CDR(rax), r9
  4705 00002CB4 4989C1                  	mov r9, rax
  4706 00002CB7 48FFCA                  	dec rdx
  4707 00002CBA 4883E908                	sub rcx, 8
  4708 00002CBE 4883FA00                	cmp rdx, 0
  4709 00002CC2 75D8                    	jne .L_lambda_opt_params_loop_000a
  4710 00002CC4 488B542410              	mov rdx, qword [rsp + 8 * 2]
  4711 00002CC9 4889E0                  	mov rax, rsp
  4712 00002CCC 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
  4713 00002CD1 4989DC                  	mov r12 , rbx
  4714 00002CD4 4C89C1                  	mov rcx, r8
  4715 00002CD7 48FFC9                  	dec rcx
  4716 00002CDA 4883C203                	add rdx, 3
  4717 00002CDE 4829CA                  	sub rdx,rcx
  4718 00002CE1 48C1E103                	shl rcx, 3
  4719                                  	.L_lambda_opt_stack_adjusted_0008:
  4720 00002CE5 4883FA00                	cmp rdx, 0
  4721 00002CE9 7419                    	je .L_lambda_opt_params_end_000e
  4722 00002CEB 4889D8                  	mov rax, rbx
  4723 00002CEE 4829C8                  	sub rax, rcx
  4724 00002CF1 488B30                  	mov rsi, qword [rax]
  4725 00002CF4 488933                  	mov [rbx], rsi
  4726 00002CF7 4883EB08                	sub rbx, 8
  4727 00002CFB 48FFCA                  	dec rdx
  4728 00002CFE 4883FA00                	cmp rdx, 0
  4729 00002D02 75E1                    	jne .L_lambda_opt_stack_adjusted_0008
  4730                                  	.L_lambda_opt_params_end_000e:
  4731 00002D04 4801CC                  	add rsp,rcx
  4732 00002D07 BB01000000              	mov rbx, 1
  4733 00002D0C 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  4734 00002D11 4883C303                	add rbx,3
  4735 00002D15 4C29C3                  	sub rbx,r8
  4736 00002D18 48C1E303                	shl rbx, 3
  4737 00002D1C 4801E3                  	add rbx, rsp
  4738 00002D1F 4C890B                  	mov qword[rbx] , r9
  4739 00002D22 49FFC8                  	dec r8
  4740 00002D25 4C29442410              	sub qword [rsp + 8 * 2], r8
  4741                                  	.L_lambda_opt_end_0010:
  4742 00002D2A C8000000                	enter 0, 0
  4743                                  	; preparing a non-tail-call
  4744 00002D2E 48B8-                   	mov rax, L_constants + 1993
  4744 00002D30 [C907000000000000] 
  4745 00002D38 50                      	push rax
  4746 00002D39 6A01                    	push 1	; arg count
  4747 00002D3B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4748 00002D40 E85C6A0000              	call malloc
  4749 00002D45 50                      	push rax
  4750 00002D46 BF10000000              	mov rdi, 8 * 2	; new rib
  4751 00002D4B E8516A0000              	call malloc
  4752 00002D50 50                      	push rax
  4753 00002D51 BF10000000              	mov rdi, 8 * 2	; extended env
  4754 00002D56 E8466A0000              	call malloc
  4755 00002D5B 488B7D10                	mov rdi, ENV
  4756 00002D5F BE00000000              	mov rsi, 0
  4757 00002D64 BA01000000              	mov rdx, 1
  4758                                  .L_lambda_simple_env_loop_0024:	; ext_env[i + 1] <-- env[i]
  4759 00002D69 4883FE01                	cmp rsi, 1
  4760 00002D6D 7410                    	je .L_lambda_simple_env_end_0024
  4761 00002D6F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4762 00002D73 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4763 00002D77 48FFC6                  	inc rsi
  4764 00002D7A 48FFC2                  	inc rdx
  4765 00002D7D EBEA                    	jmp .L_lambda_simple_env_loop_0024
  4766                                  .L_lambda_simple_env_end_0024:
  4767 00002D7F 5B                      	pop rbx
  4768 00002D80 BE00000000              	mov rsi, 0
  4769                                  .L_lambda_simple_params_loop_0024:	; copy params
  4770 00002D85 4883FE02                	cmp rsi, 2
  4771 00002D89 740E                    	je .L_lambda_simple_params_end_0024
  4772 00002D8B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4773 00002D90 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4774 00002D94 48FFC6                  	inc rsi
  4775 00002D97 EBEC                    	jmp .L_lambda_simple_params_loop_0024
  4776                                  .L_lambda_simple_params_end_0024:
  4777 00002D99 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4778 00002D9C 4889C3                  	mov rbx, rax
  4779 00002D9F 58                      	pop rax
  4780 00002DA0 C60004                  	mov byte [rax], T_closure
  4781 00002DA3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4782 00002DA7 48C74009[B42D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0024
  4783 00002DAF E976020000              	jmp .L_lambda_simple_end_0024
  4784                                  .L_lambda_simple_code_0024:	; lambda-simple body
  4785 00002DB4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4786 00002DBA 740B                    	je .L_lambda_simple_arity_check_ok_0028
  4787 00002DBC FF742410                	push qword [rsp + 8 * 2]
  4788 00002DC0 6A01                    	push 1
  4789 00002DC2 E993690000              	jmp L_error_incorrect_arity_simple
  4790                                  .L_lambda_simple_arity_check_ok_0028:
  4791 00002DC7 C8000000                	enter 0, 0
  4792 00002DCB 488B5D20                	 mov rbx, qword [rbp + 8 * (4 +0)]
  4793 00002DCF BF08000000              	mov rdi, 8
  4794 00002DD4 E8C8690000              	call malloc
  4795 00002DD9 488918                  	mov qword [rax], rbx
  4796 00002DDC 488903                  	mov qword [rbx], rax
  4797 00002DDF 48B8-                   	mov rax, sob_void
  4797 00002DE1 [0000000000000000] 
  4798                                  
  4799 00002DE9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4800 00002DEE E8AE690000              	call malloc
  4801 00002DF3 50                      	push rax
  4802 00002DF4 BF08000000              	mov rdi, 8 * 1	; new rib
  4803 00002DF9 E8A3690000              	call malloc
  4804 00002DFE 50                      	push rax
  4805 00002DFF BF18000000              	mov rdi, 8 * 3	; extended env
  4806 00002E04 E898690000              	call malloc
  4807 00002E09 488B7D10                	mov rdi, ENV
  4808 00002E0D BE00000000              	mov rsi, 0
  4809 00002E12 BA01000000              	mov rdx, 1
  4810                                  .L_lambda_simple_env_loop_0025:	; ext_env[i + 1] <-- env[i]
  4811 00002E17 4883FE02                	cmp rsi, 2
  4812 00002E1B 7410                    	je .L_lambda_simple_env_end_0025
  4813 00002E1D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4814 00002E21 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4815 00002E25 48FFC6                  	inc rsi
  4816 00002E28 48FFC2                  	inc rdx
  4817 00002E2B EBEA                    	jmp .L_lambda_simple_env_loop_0025
  4818                                  .L_lambda_simple_env_end_0025:
  4819 00002E2D 5B                      	pop rbx
  4820 00002E2E BE00000000              	mov rsi, 0
  4821                                  .L_lambda_simple_params_loop_0025:	; copy params
  4822 00002E33 4883FE01                	cmp rsi, 1
  4823 00002E37 740E                    	je .L_lambda_simple_params_end_0025
  4824 00002E39 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4825 00002E3E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4826 00002E42 48FFC6                  	inc rsi
  4827 00002E45 EBEC                    	jmp .L_lambda_simple_params_loop_0025
  4828                                  .L_lambda_simple_params_end_0025:
  4829 00002E47 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4830 00002E4A 4889C3                  	mov rbx, rax
  4831 00002E4D 58                      	pop rax
  4832 00002E4E C60004                  	mov byte [rax], T_closure
  4833 00002E51 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4834 00002E55 48C74009[622E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0025
  4835 00002E5D E94D010000              	jmp .L_lambda_simple_end_0025
  4836                                  .L_lambda_simple_code_0025:	; lambda-simple body
  4837 00002E62 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4838 00002E68 740B                    	je .L_lambda_simple_arity_check_ok_0029
  4839 00002E6A FF742410                	push qword [rsp + 8 * 2]
  4840 00002E6E 6A01                    	push 1
  4841 00002E70 E9E5680000              	jmp L_error_incorrect_arity_simple
  4842                                  .L_lambda_simple_arity_check_ok_0029:
  4843 00002E75 C8000000                	enter 0, 0
  4844                                  	; preparing a non-tail-call
  4845                                  	; preparing a non-tail-call
  4846 00002E79 488B4520                	mov rax, PARAM(0)	; param s
  4847 00002E7D 50                      	push rax
  4848 00002E7E 6A01                    	push 1	; arg count
  4849 00002E80 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  4850 00002E88 803805                  	cmp byte [rax], T_undefined
  4851 00002E8B 0F84E3670000            	je L_error_fvar_undefined
  4852 00002E91 803804                  	cmp byte [rax], T_closure
  4853 00002E94 0F855E680000            	jne L_error_non_closure
  4854 00002E9A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4855 00002E9D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4856 00002EA0 50                      	push rax
  4857 00002EA1 6A01                    	push 1	; arg count
  4858 00002EA3 488B0425[E90F0000]      	mov rax, qword [free_var_88]	; free var pair?
  4859 00002EAB 803805                  	cmp byte [rax], T_undefined
  4860 00002EAE 0F84C0670000            	je L_error_fvar_undefined
  4861 00002EB4 803804                  	cmp byte [rax], T_closure
  4862 00002EB7 0F853B680000            	jne L_error_non_closure
  4863 00002EBD FF7001                  	push SOB_CLOSURE_ENV(rax)
  4864 00002EC0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4865 00002EC3 483D[02000000]          	cmp rax, sob_boolean_false
  4866 00002EC9 0F84D2000000            	je .L_if_else_0005
  4867                                  	; preparing a non-tail-call
  4868                                  	; preparing a non-tail-call
  4869 00002ECF 488B4520                	mov rax, PARAM(0)	; param s
  4870 00002ED3 50                      	push rax
  4871 00002ED4 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  4872 00002EDC 803805                  	cmp byte [rax], T_undefined
  4873 00002EDF 0F848F670000            	je L_error_fvar_undefined
  4874 00002EE5 50                      	push rax
  4875 00002EE6 6A02                    	push 2	; arg count
  4876 00002EE8 488B0425[A50F0000]      	mov rax, qword [free_var_84]	; free var map
  4877 00002EF0 803805                  	cmp byte [rax], T_undefined
  4878 00002EF3 0F847B670000            	je L_error_fvar_undefined
  4879 00002EF9 803804                  	cmp byte [rax], T_closure
  4880 00002EFC 0F85F6670000            	jne L_error_non_closure
  4881 00002F02 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4882 00002F05 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4883 00002F08 50                      	push rax
  4884 00002F09 488B4510                	mov rax, ENV
  4885 00002F0D 488B4008                	mov rax, qword [rax + 8 * 1]
  4886 00002F11 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  4887 00002F14 50                      	push rax
  4888 00002F15 6A02                    	push 2	; arg count
  4889 00002F17 488B0425[310C0000]      	mov rax, qword [free_var_32]	; free var apply
  4890 00002F1F 803805                  	cmp byte [rax], T_undefined
  4891 00002F22 0F844C670000            	je L_error_fvar_undefined
  4892 00002F28 803804                  	cmp byte [rax], T_closure
  4893 00002F2B 0F85C7670000            	jne L_error_non_closure
  4894 00002F31 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4895 00002F34 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4896 00002F37 483D[02000000]          	cmp rax, sob_boolean_false
  4897 00002F3D 7560                    	jne .L_if_end_0007
  4898                                  	; preparing a non-tail-call
  4899                                  	; preparing a non-tail-call
  4900 00002F3F 488B4520                	mov rax, PARAM(0)	; param s
  4901 00002F43 50                      	push rax
  4902 00002F44 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  4903 00002F4C 803805                  	cmp byte [rax], T_undefined
  4904 00002F4F 0F841F670000            	je L_error_fvar_undefined
  4905 00002F55 50                      	push rax
  4906 00002F56 6A02                    	push 2	; arg count
  4907 00002F58 488B0425[A50F0000]      	mov rax, qword [free_var_84]	; free var map
  4908 00002F60 803805                  	cmp byte [rax], T_undefined
  4909 00002F63 0F840B670000            	je L_error_fvar_undefined
  4910 00002F69 803804                  	cmp byte [rax], T_closure
  4911 00002F6C 0F8586670000            	jne L_error_non_closure
  4912 00002F72 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4913 00002F75 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4914 00002F78 50                      	push rax
  4915 00002F79 6A01                    	push 1	; arg count
  4916 00002F7B 488B4510                	mov rax, ENV
  4917 00002F7F 488B00                  	mov rax, qword [rax + 8 * 0]
  4918 00002F82 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  4919 00002F85 488B00                  	mov rax, qword [rax]
  4920 00002F88 803804                  	cmp byte [rax], T_closure
  4921 00002F8B 0F8567670000            	jne L_error_non_closure
  4922 00002F91 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4923 00002F94 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4924 00002F97 483D[02000000]          	cmp rax, sob_boolean_false
  4925 00002F9D 7500                    	jne .L_if_end_0007
  4926                                  .L_if_end_0007:
  4927 00002F9F EB0A                    	jmp .L_if_end_0008
  4928                                  .L_if_else_0005:
  4929 00002FA1 48B8-                   	mov rax, L_constants + 2
  4929 00002FA3 [0200000000000000] 
  4930                                  .L_if_end_0008:
  4931 00002FAB C9                      	leave
  4932 00002FAC C21800                  	ret AND_KILL_FRAME(1)
  4933                                  .L_lambda_simple_end_0025:	; new closure is in rax
  4934 00002FAF 50                      	push rax
  4935 00002FB0 488B4520                	mov rax, PARAM(0)	; param loop
  4936 00002FB4 8F00                    	pop qword [rax]
  4937 00002FB6 48B8-                   	mov rax, sob_void
  4937 00002FB8 [0000000000000000] 
  4938                                  
  4939                                  	; preparing a non-tail-call
  4940 00002FC0 488B4510                	mov rax, ENV
  4941 00002FC4 488B00                  	mov rax, qword [rax + 8 * 0]
  4942 00002FC7 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  4943 00002FCB 50                      	push rax
  4944 00002FCC 6A01                    	push 1	; arg count
  4945 00002FCE 488B0425[E90F0000]      	mov rax, qword [free_var_88]	; free var pair?
  4946 00002FD6 803805                  	cmp byte [rax], T_undefined
  4947 00002FD9 0F8495660000            	je L_error_fvar_undefined
  4948 00002FDF 803804                  	cmp byte [rax], T_closure
  4949 00002FE2 0F8510670000            	jne L_error_non_closure
  4950 00002FE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4951 00002FEB FF5009                  	call SOB_CLOSURE_CODE(rax)
  4952 00002FEE 483D[02000000]          	cmp rax, sob_boolean_false
  4953 00002FF4 7426                    	je .L_if_else_0006
  4954                                  	; preparing a non-tail-call
  4955 00002FF6 488B4510                	mov rax, ENV
  4956 00002FFA 488B00                  	mov rax, qword [rax + 8 * 0]
  4957 00002FFD 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  4958 00003001 50                      	push rax
  4959 00003002 6A01                    	push 1	; arg count
  4960 00003004 488B4520                	mov rax, PARAM(0)	; param loop
  4961 00003008 488B00                  	mov rax, qword [rax]
  4962 0000300B 803804                  	cmp byte [rax], T_closure
  4963 0000300E 0F85E4660000            	jne L_error_non_closure
  4964 00003014 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4965 00003017 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4966 0000301A EB0A                    	jmp .L_if_end_0009
  4967                                  .L_if_else_0006:
  4968 0000301C 48B8-                   	mov rax, L_constants + 2
  4968 0000301E [0200000000000000] 
  4969                                  .L_if_end_0009:
  4970 00003026 C9                      	leave
  4971 00003027 C21800                  	ret AND_KILL_FRAME(1)
  4972                                  .L_lambda_simple_end_0024:	; new closure is in rax
  4973 0000302A 803804                  	cmp byte [rax], T_closure
  4974 0000302D 0F85C5660000            	jne L_error_non_closure
  4975 00003033 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4976 00003036 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4977                                  	LEAVE
    49 00003039 C9                  <1>  leave
  4978 0000303A C22000                  	ret AND_KILL_FRAME(2)
  4979                                  .L_lambda_opt_end_000f:
  4980 0000303D 48890425[D80F0000]      	mov qword [free_var_87], rax
  4981 00003045 48B8-                   	mov rax, sob_void
  4981 00003047 [0000000000000000] 
  4982                                  
  4983 0000304F 4889C7                  	mov rdi, rax
  4984 00003052 E89F690000              	call print_sexpr_if_not_void
  4985 00003057 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4986 0000305C E840670000              	call malloc
  4987 00003061 50                      	push rax
  4988 00003062 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
  4989 00003066 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
  4990 0000306A BF00000000              	mov rdi, 8 * 0	; new rib for optional parameters
  4991 0000306F E82D670000              	call malloc
  4992 00003074 50                      	push rax
  4993 00003075 BF08000000              	mov rdi, 8 * 1	; extended env
  4994 0000307A E822670000              	call malloc
  4995 0000307F 488B7D10                	mov rdi, ENV
  4996 00003083 BE00000000              	mov rsi, 0
  4997 00003088 BA01000000              	mov rdx, 1
  4998                                  .L_lambda_opt_code_000d:	; ext_env[i + 1] <-- env[i] copy all the array
  4999 0000308D 4883FE00                	cmp rsi, 0
  5000 00003091 7410                    	je .L_lambda_opt_end_0011
  5001 00003093 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5002 00003097 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5003 0000309B 48FFC6                  	inc rsi
  5004 0000309E 48FFC2                  	inc rdx
  5005 000030A1 EBEA                    	jmp .L_lambda_opt_code_000d
  5006                                  .L_lambda_opt_end_0011:
  5007 000030A3 5B                      	pop rbx
  5008 000030A4 BE00000000              	mov rsi, 0
  5009                                  .L_lambda_opt_code_000e:	; copy params
  5010 000030A9 4883FE00                	cmp rsi, 0
  5011 000030AD 740E                    	je .L_lambda_opt_end_0012
  5012 000030AF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5013 000030B4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5014 000030B8 48FFC6                  	inc rsi
  5015 000030BB EBEC                    	jmp .L_lambda_opt_code_000e
  5016                                  .L_lambda_opt_end_0012:
  5017 000030BD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5018 000030C0 4889C3                  	mov rbx, rax
  5019 000030C3 58                      	pop rax
  5020 000030C4 C60004                  	mov byte [rax], T_closure
  5021 000030C7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5022 000030CB 48C74009[D8300000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000f
  5023 000030D3 E953040000              	jmp .L_lambda_opt_end_0013
  5024                                  .L_lambda_opt_code_000f:	; lambda-opt body
  5025 000030D8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5026 000030DE 7D0B                    	jge .L_lambda_simple_arity_check_ok_002a
  5027 000030E0 FF742410                	push qword [rsp + 8 * 2]
  5028 000030E4 6A01                    	push 1
  5029 000030E6 E96F660000              	jmp L_error_incorrect_arity_simple
  5030                                  .L_lambda_simple_arity_check_ok_002a:
  5031 000030EB 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  5032 000030F0 4983E801                	sub r8, 1
  5033 000030F4 4C89C3                  	mov rbx,r8
  5034 000030F7 4983F800                	cmp r8, 0
  5035 000030FB 7535                    	jne .L_lambda_opt_params_loop_000f
  5036 000030FD 488B542410              	mov rdx, qword [rsp + 8 * 2]
  5037 00003102 4883C203                	add rdx , 3
  5038 00003106 4883EC08                	sub rsp , 8
  5039 0000310A 4889E1                  	mov rcx, rsp
  5040                                  .L_lambda_opt_stack_adjusted_0009: ;pushing down the stack of the current function
  5041 0000310D 488B5908                	mov rbx, qword [rcx + 8 * 1]
  5042 00003111 488919                  	mov qword[rcx] , rbx
  5043 00003114 4883C108                	add rcx , 8
  5044 00003118 48FFCA                  	dec rdx
  5045 0000311B 4883FA00                	cmp rdx, 0
  5046 0000311F 75EC                    	jne .L_lambda_opt_stack_adjusted_0009
  5047 00003121 48FF442410              	inc qword [rsp + 8 * 2]
  5048 00003126 48C701[01000000]        	mov qword [rcx], sob_nil 
  5049 0000312D E9A8000000              	jmp .L_lambda_opt_end_0014
  5050                                  	.L_lambda_opt_params_loop_000f:
  5051 00003132 488B542410              	mov rdx, qword [rsp + 8*2]
  5052 00003137 488D4CD410              	lea rcx, [rsp + 8*2 + 8*rdx]
  5053 0000313C 4C89C2                  	mov rdx, r8
  5054 0000313F 49B9-                   	mov r9, sob_nil
  5054 00003141 [0100000000000000] 
  5055 00003149 4989C9                  	mov r9, rcx
  5056                                  	.L_lambda_opt_params_loop_000d: ;loop for copying the opt into list
  5057 0000314C BF11000000              	mov rdi, (1 + 8 + 8)
  5058 00003151 E84B660000              	call malloc
  5059 00003156 C60021                  	mov byte[rax], T_pair
  5060 00003159 488B19                  	mov rbx, qword [rcx]
  5061 0000315C 48895801                	mov SOB_PAIR_CAR(rax), rbx
  5062 00003160 4C894809                	mov SOB_PAIR_CDR(rax), r9
  5063 00003164 4989C1                  	mov r9, rax
  5064 00003167 48FFCA                  	dec rdx
  5065 0000316A 4883E908                	sub rcx, 8
  5066 0000316E 4883FA00                	cmp rdx, 0
  5067 00003172 75D8                    	jne .L_lambda_opt_params_loop_000d
  5068 00003174 488B542410              	mov rdx, qword [rsp + 8 * 2]
  5069 00003179 4889E0                  	mov rax, rsp
  5070 0000317C 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
  5071 00003181 4989DC                  	mov r12 , rbx
  5072 00003184 4C89C1                  	mov rcx, r8
  5073 00003187 48FFC9                  	dec rcx
  5074 0000318A 4883C203                	add rdx, 3
  5075 0000318E 4829CA                  	sub rdx,rcx
  5076 00003191 48C1E103                	shl rcx, 3
  5077                                  	.L_lambda_opt_stack_adjusted_000a:
  5078 00003195 4883FA00                	cmp rdx, 0
  5079 00003199 7419                    	je .L_lambda_opt_params_end_0012
  5080 0000319B 4889D8                  	mov rax, rbx
  5081 0000319E 4829C8                  	sub rax, rcx
  5082 000031A1 488B30                  	mov rsi, qword [rax]
  5083 000031A4 488933                  	mov [rbx], rsi
  5084 000031A7 4883EB08                	sub rbx, 8
  5085 000031AB 48FFCA                  	dec rdx
  5086 000031AE 4883FA00                	cmp rdx, 0
  5087 000031B2 75E1                    	jne .L_lambda_opt_stack_adjusted_000a
  5088                                  	.L_lambda_opt_params_end_0012:
  5089 000031B4 4801CC                  	add rsp,rcx
  5090 000031B7 BB01000000              	mov rbx, 1
  5091 000031BC 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  5092 000031C1 4883C303                	add rbx,3
  5093 000031C5 4C29C3                  	sub rbx,r8
  5094 000031C8 48C1E303                	shl rbx, 3
  5095 000031CC 4801E3                  	add rbx, rsp
  5096 000031CF 4C890B                  	mov qword[rbx] , r9
  5097 000031D2 49FFC8                  	dec r8
  5098 000031D5 4C29442410              	sub qword [rsp + 8 * 2], r8
  5099                                  	.L_lambda_opt_end_0014:
  5100 000031DA C8000000                	enter 0, 0
  5101                                  	; preparing a non-tail-call
  5102 000031DE 48B8-                   	mov rax, L_constants + 1993
  5102 000031E0 [C907000000000000] 
  5103 000031E8 50                      	push rax
  5104 000031E9 6A01                    	push 1	; arg count
  5105 000031EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5106 000031F0 E8AC650000              	call malloc
  5107 000031F5 50                      	push rax
  5108 000031F6 BF10000000              	mov rdi, 8 * 2	; new rib
  5109 000031FB E8A1650000              	call malloc
  5110 00003200 50                      	push rax
  5111 00003201 BF10000000              	mov rdi, 8 * 2	; extended env
  5112 00003206 E896650000              	call malloc
  5113 0000320B 488B7D10                	mov rdi, ENV
  5114 0000320F BE00000000              	mov rsi, 0
  5115 00003214 BA01000000              	mov rdx, 1
  5116                                  .L_lambda_simple_env_loop_0026:	; ext_env[i + 1] <-- env[i]
  5117 00003219 4883FE01                	cmp rsi, 1
  5118 0000321D 7410                    	je .L_lambda_simple_env_end_0026
  5119 0000321F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5120 00003223 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5121 00003227 48FFC6                  	inc rsi
  5122 0000322A 48FFC2                  	inc rdx
  5123 0000322D EBEA                    	jmp .L_lambda_simple_env_loop_0026
  5124                                  .L_lambda_simple_env_end_0026:
  5125 0000322F 5B                      	pop rbx
  5126 00003230 BE00000000              	mov rsi, 0
  5127                                  .L_lambda_simple_params_loop_0026:	; copy params
  5128 00003235 4883FE02                	cmp rsi, 2
  5129 00003239 740E                    	je .L_lambda_simple_params_end_0026
  5130 0000323B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5131 00003240 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5132 00003244 48FFC6                  	inc rsi
  5133 00003247 EBEC                    	jmp .L_lambda_simple_params_loop_0026
  5134                                  .L_lambda_simple_params_end_0026:
  5135 00003249 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5136 0000324C 4889C3                  	mov rbx, rax
  5137 0000324F 58                      	pop rax
  5138 00003250 C60004                  	mov byte [rax], T_closure
  5139 00003253 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5140 00003257 48C74009[64320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0026
  5141 0000325F E9B4020000              	jmp .L_lambda_simple_end_0026
  5142                                  .L_lambda_simple_code_0026:	; lambda-simple body
  5143 00003264 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5144 0000326A 740B                    	je .L_lambda_simple_arity_check_ok_002b
  5145 0000326C FF742410                	push qword [rsp + 8 * 2]
  5146 00003270 6A01                    	push 1
  5147 00003272 E9E3640000              	jmp L_error_incorrect_arity_simple
  5148                                  .L_lambda_simple_arity_check_ok_002b:
  5149 00003277 C8000000                	enter 0, 0
  5150 0000327B 488B5D20                	 mov rbx, qword [rbp + 8 * (4 +0)]
  5151 0000327F BF08000000              	mov rdi, 8
  5152 00003284 E818650000              	call malloc
  5153 00003289 488918                  	mov qword [rax], rbx
  5154 0000328C 488903                  	mov qword [rbx], rax
  5155 0000328F 48B8-                   	mov rax, sob_void
  5155 00003291 [0000000000000000] 
  5156                                  
  5157 00003299 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5158 0000329E E8FE640000              	call malloc
  5159 000032A3 50                      	push rax
  5160 000032A4 BF08000000              	mov rdi, 8 * 1	; new rib
  5161 000032A9 E8F3640000              	call malloc
  5162 000032AE 50                      	push rax
  5163 000032AF BF18000000              	mov rdi, 8 * 3	; extended env
  5164 000032B4 E8E8640000              	call malloc
  5165 000032B9 488B7D10                	mov rdi, ENV
  5166 000032BD BE00000000              	mov rsi, 0
  5167 000032C2 BA01000000              	mov rdx, 1
  5168                                  .L_lambda_simple_env_loop_0027:	; ext_env[i + 1] <-- env[i]
  5169 000032C7 4883FE02                	cmp rsi, 2
  5170 000032CB 7410                    	je .L_lambda_simple_env_end_0027
  5171 000032CD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5172 000032D1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5173 000032D5 48FFC6                  	inc rsi
  5174 000032D8 48FFC2                  	inc rdx
  5175 000032DB EBEA                    	jmp .L_lambda_simple_env_loop_0027
  5176                                  .L_lambda_simple_env_end_0027:
  5177 000032DD 5B                      	pop rbx
  5178 000032DE BE00000000              	mov rsi, 0
  5179                                  .L_lambda_simple_params_loop_0027:	; copy params
  5180 000032E3 4883FE01                	cmp rsi, 1
  5181 000032E7 740E                    	je .L_lambda_simple_params_end_0027
  5182 000032E9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5183 000032EE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5184 000032F2 48FFC6                  	inc rsi
  5185 000032F5 EBEC                    	jmp .L_lambda_simple_params_loop_0027
  5186                                  .L_lambda_simple_params_end_0027:
  5187 000032F7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5188 000032FA 4889C3                  	mov rbx, rax
  5189 000032FD 58                      	pop rax
  5190 000032FE C60004                  	mov byte [rax], T_closure
  5191 00003301 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5192 00003305 48C74009[12330000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0027
  5193 0000330D E94D010000              	jmp .L_lambda_simple_end_0027
  5194                                  .L_lambda_simple_code_0027:	; lambda-simple body
  5195 00003312 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5196 00003318 740B                    	je .L_lambda_simple_arity_check_ok_002c
  5197 0000331A FF742410                	push qword [rsp + 8 * 2]
  5198 0000331E 6A01                    	push 1
  5199 00003320 E935640000              	jmp L_error_incorrect_arity_simple
  5200                                  .L_lambda_simple_arity_check_ok_002c:
  5201 00003325 C8000000                	enter 0, 0
  5202                                  	; preparing a non-tail-call
  5203                                  	; preparing a non-tail-call
  5204 00003329 488B4520                	mov rax, PARAM(0)	; param s
  5205 0000332D 50                      	push rax
  5206 0000332E 6A01                    	push 1	; arg count
  5207 00003330 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  5208 00003338 803805                  	cmp byte [rax], T_undefined
  5209 0000333B 0F8433630000            	je L_error_fvar_undefined
  5210 00003341 803804                  	cmp byte [rax], T_closure
  5211 00003344 0F85AE630000            	jne L_error_non_closure
  5212 0000334A FF7001                  	push SOB_CLOSURE_ENV(rax)
  5213 0000334D FF5009                  	call SOB_CLOSURE_CODE(rax)
  5214 00003350 50                      	push rax
  5215 00003351 6A01                    	push 1	; arg count
  5216 00003353 488B0425[C70F0000]      	mov rax, qword [free_var_86]	; free var null?
  5217 0000335B 803805                  	cmp byte [rax], T_undefined
  5218 0000335E 0F8410630000            	je L_error_fvar_undefined
  5219 00003364 803804                  	cmp byte [rax], T_closure
  5220 00003367 0F858B630000            	jne L_error_non_closure
  5221 0000336D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5222 00003370 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5223 00003373 483D[02000000]          	cmp rax, sob_boolean_false
  5224 00003379 0F85DC000000            	jne .L_if_end_000a
  5225                                  	; preparing a non-tail-call
  5226                                  	; preparing a non-tail-call
  5227 0000337F 488B4520                	mov rax, PARAM(0)	; param s
  5228 00003383 50                      	push rax
  5229 00003384 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  5230 0000338C 803805                  	cmp byte [rax], T_undefined
  5231 0000338F 0F84DF620000            	je L_error_fvar_undefined
  5232 00003395 50                      	push rax
  5233 00003396 6A02                    	push 2	; arg count
  5234 00003398 488B0425[A50F0000]      	mov rax, qword [free_var_84]	; free var map
  5235 000033A0 803805                  	cmp byte [rax], T_undefined
  5236 000033A3 0F84CB620000            	je L_error_fvar_undefined
  5237 000033A9 803804                  	cmp byte [rax], T_closure
  5238 000033AC 0F8546630000            	jne L_error_non_closure
  5239 000033B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5240 000033B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5241 000033B8 50                      	push rax
  5242 000033B9 488B4510                	mov rax, ENV
  5243 000033BD 488B4008                	mov rax, qword [rax + 8 * 1]
  5244 000033C1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  5245 000033C4 50                      	push rax
  5246 000033C5 6A02                    	push 2	; arg count
  5247 000033C7 488B0425[310C0000]      	mov rax, qword [free_var_32]	; free var apply
  5248 000033CF 803805                  	cmp byte [rax], T_undefined
  5249 000033D2 0F849C620000            	je L_error_fvar_undefined
  5250 000033D8 803804                  	cmp byte [rax], T_closure
  5251 000033DB 0F8517630000            	jne L_error_non_closure
  5252 000033E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5253 000033E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5254 000033E7 483D[02000000]          	cmp rax, sob_boolean_false
  5255 000033ED 745A                    	je .L_if_else_0007
  5256                                  	; preparing a non-tail-call
  5257                                  	; preparing a non-tail-call
  5258 000033EF 488B4520                	mov rax, PARAM(0)	; param s
  5259 000033F3 50                      	push rax
  5260 000033F4 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  5261 000033FC 803805                  	cmp byte [rax], T_undefined
  5262 000033FF 0F846F620000            	je L_error_fvar_undefined
  5263 00003405 50                      	push rax
  5264 00003406 6A02                    	push 2	; arg count
  5265 00003408 488B0425[A50F0000]      	mov rax, qword [free_var_84]	; free var map
  5266 00003410 803805                  	cmp byte [rax], T_undefined
  5267 00003413 0F845B620000            	je L_error_fvar_undefined
  5268 00003419 803804                  	cmp byte [rax], T_closure
  5269 0000341C 0F85D6620000            	jne L_error_non_closure
  5270 00003422 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5271 00003425 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5272 00003428 50                      	push rax
  5273 00003429 6A01                    	push 1	; arg count
  5274 0000342B 488B4510                	mov rax, ENV
  5275 0000342F 488B00                  	mov rax, qword [rax + 8 * 0]
  5276 00003432 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  5277 00003435 488B00                  	mov rax, qword [rax]
  5278 00003438 803804                  	cmp byte [rax], T_closure
  5279 0000343B 0F85B7620000            	jne L_error_non_closure
  5280 00003441 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5281 00003444 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5282 00003447 EB0A                    	jmp .L_if_end_000b
  5283                                  .L_if_else_0007:
  5284 00003449 48B8-                   	mov rax, L_constants + 2
  5284 0000344B [0200000000000000] 
  5285                                  .L_if_end_000b:
  5286 00003453 483D[02000000]          	cmp rax, sob_boolean_false
  5287 00003459 7500                    	jne .L_if_end_000a
  5288                                  .L_if_end_000a:
  5289 0000345B C9                      	leave
  5290 0000345C C21800                  	ret AND_KILL_FRAME(1)
  5291                                  .L_lambda_simple_end_0027:	; new closure is in rax
  5292 0000345F 50                      	push rax
  5293 00003460 488B4520                	mov rax, PARAM(0)	; param loop
  5294 00003464 8F00                    	pop qword [rax]
  5295 00003466 48B8-                   	mov rax, sob_void
  5295 00003468 [0000000000000000] 
  5296                                  
  5297                                  	; preparing a non-tail-call
  5298 00003470 488B4510                	mov rax, ENV
  5299 00003474 488B00                  	mov rax, qword [rax + 8 * 0]
  5300 00003477 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5301 0000347B 50                      	push rax
  5302 0000347C 6A01                    	push 1	; arg count
  5303 0000347E 488B0425[C70F0000]      	mov rax, qword [free_var_86]	; free var null?
  5304 00003486 803805                  	cmp byte [rax], T_undefined
  5305 00003489 0F84E5610000            	je L_error_fvar_undefined
  5306 0000348F 803804                  	cmp byte [rax], T_closure
  5307 00003492 0F8560620000            	jne L_error_non_closure
  5308 00003498 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5309 0000349B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5310 0000349E 483D[02000000]          	cmp rax, sob_boolean_false
  5311 000034A4 756E                    	jne .L_if_end_000c
  5312                                  	; preparing a non-tail-call
  5313 000034A6 488B4510                	mov rax, ENV
  5314 000034AA 488B00                  	mov rax, qword [rax + 8 * 0]
  5315 000034AD 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5316 000034B1 50                      	push rax
  5317 000034B2 6A01                    	push 1	; arg count
  5318 000034B4 488B0425[E90F0000]      	mov rax, qword [free_var_88]	; free var pair?
  5319 000034BC 803805                  	cmp byte [rax], T_undefined
  5320 000034BF 0F84AF610000            	je L_error_fvar_undefined
  5321 000034C5 803804                  	cmp byte [rax], T_closure
  5322 000034C8 0F852A620000            	jne L_error_non_closure
  5323 000034CE FF7001                  	push SOB_CLOSURE_ENV(rax)
  5324 000034D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5325 000034D4 483D[02000000]          	cmp rax, sob_boolean_false
  5326 000034DA 7426                    	je .L_if_else_0008
  5327                                  	; preparing a non-tail-call
  5328 000034DC 488B4510                	mov rax, ENV
  5329 000034E0 488B00                  	mov rax, qword [rax + 8 * 0]
  5330 000034E3 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5331 000034E7 50                      	push rax
  5332 000034E8 6A01                    	push 1	; arg count
  5333 000034EA 488B4520                	mov rax, PARAM(0)	; param loop
  5334 000034EE 488B00                  	mov rax, qword [rax]
  5335 000034F1 803804                  	cmp byte [rax], T_closure
  5336 000034F4 0F85FE610000            	jne L_error_non_closure
  5337 000034FA FF7001                  	push SOB_CLOSURE_ENV(rax)
  5338 000034FD FF5009                  	call SOB_CLOSURE_CODE(rax)
  5339 00003500 EB0A                    	jmp .L_if_end_000d
  5340                                  .L_if_else_0008:
  5341 00003502 48B8-                   	mov rax, L_constants + 2
  5341 00003504 [0200000000000000] 
  5342                                  .L_if_end_000d:
  5343 0000350C 483D[02000000]          	cmp rax, sob_boolean_false
  5344 00003512 7500                    	jne .L_if_end_000c
  5345                                  .L_if_end_000c:
  5346 00003514 C9                      	leave
  5347 00003515 C21800                  	ret AND_KILL_FRAME(1)
  5348                                  .L_lambda_simple_end_0026:	; new closure is in rax
  5349 00003518 803804                  	cmp byte [rax], T_closure
  5350 0000351B 0F85D7610000            	jne L_error_non_closure
  5351 00003521 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5352 00003524 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5353                                  	LEAVE
    49 00003527 C9                  <1>  leave
  5354 00003528 C22000                  	ret AND_KILL_FRAME(2)
  5355                                  .L_lambda_opt_end_0013:
  5356 0000352B 48890425[0F0C0000]      	mov qword [free_var_30], rax
  5357 00003533 48B8-                   	mov rax, sob_void
  5357 00003535 [0000000000000000] 
  5358                                  
  5359 0000353D 4889C7                  	mov rdi, rax
  5360 00003540 E8B1640000              	call print_sexpr_if_not_void
  5361                                  	; preparing a non-tail-call
  5362 00003545 48B8-                   	mov rax, L_constants + 1993
  5362 00003547 [C907000000000000] 
  5363 0000354F 50                      	push rax
  5364 00003550 48B8-                   	mov rax, L_constants + 1993
  5364 00003552 [C907000000000000] 
  5365 0000355A 50                      	push rax
  5366 0000355B 6A02                    	push 2	; arg count
  5367 0000355D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5368 00003562 E83A620000              	call malloc
  5369 00003567 50                      	push rax
  5370 00003568 BF00000000              	mov rdi, 8 * 0	; new rib
  5371 0000356D E82F620000              	call malloc
  5372 00003572 50                      	push rax
  5373 00003573 BF08000000              	mov rdi, 8 * 1	; extended env
  5374 00003578 E824620000              	call malloc
  5375 0000357D 488B7D10                	mov rdi, ENV
  5376 00003581 BE00000000              	mov rsi, 0
  5377 00003586 BA01000000              	mov rdx, 1
  5378                                  .L_lambda_simple_env_loop_0028:	; ext_env[i + 1] <-- env[i]
  5379 0000358B 4883FE00                	cmp rsi, 0
  5380 0000358F 7410                    	je .L_lambda_simple_env_end_0028
  5381 00003591 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5382 00003595 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5383 00003599 48FFC6                  	inc rsi
  5384 0000359C 48FFC2                  	inc rdx
  5385 0000359F EBEA                    	jmp .L_lambda_simple_env_loop_0028
  5386                                  .L_lambda_simple_env_end_0028:
  5387 000035A1 5B                      	pop rbx
  5388 000035A2 BE00000000              	mov rsi, 0
  5389                                  .L_lambda_simple_params_loop_0028:	; copy params
  5390 000035A7 4883FE00                	cmp rsi, 0
  5391 000035AB 740E                    	je .L_lambda_simple_params_end_0028
  5392 000035AD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5393 000035B2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5394 000035B6 48FFC6                  	inc rsi
  5395 000035B9 EBEC                    	jmp .L_lambda_simple_params_loop_0028
  5396                                  .L_lambda_simple_params_end_0028:
  5397 000035BB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5398 000035BE 4889C3                  	mov rbx, rax
  5399 000035C1 58                      	pop rax
  5400 000035C2 C60004                  	mov byte [rax], T_closure
  5401 000035C5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5402 000035C9 48C74009[D6350000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0028
  5403 000035D1 E9B6050000              	jmp .L_lambda_simple_end_0028
  5404                                  .L_lambda_simple_code_0028:	; lambda-simple body
  5405 000035D6 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5406 000035DC 740B                    	je .L_lambda_simple_arity_check_ok_002d
  5407 000035DE FF742410                	push qword [rsp + 8 * 2]
  5408 000035E2 6A02                    	push 2
  5409 000035E4 E971610000              	jmp L_error_incorrect_arity_simple
  5410                                  .L_lambda_simple_arity_check_ok_002d:
  5411 000035E9 C8000000                	enter 0, 0
  5412 000035ED 488B5D20                	 mov rbx, qword [rbp + 8 * (4 +0)]
  5413 000035F1 BF08000000              	mov rdi, 8
  5414 000035F6 E8A6610000              	call malloc
  5415 000035FB 488918                  	mov qword [rax], rbx
  5416 000035FE 488903                  	mov qword [rbx], rax
  5417 00003601 48B8-                   	mov rax, sob_void
  5417 00003603 [0000000000000000] 
  5418                                  
  5419 0000360B 488B5D28                	 mov rbx, qword [rbp + 8 * (4 +1)]
  5420 0000360F BF08000000              	mov rdi, 8
  5421 00003614 E888610000              	call malloc
  5422 00003619 488918                  	mov qword [rax], rbx
  5423 0000361C 488903                  	mov qword [rbx], rax
  5424 0000361F 48B8-                   	mov rax, sob_void
  5424 00003621 [0000000000000000] 
  5425                                  
  5426 00003629 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5427 0000362E E86E610000              	call malloc
  5428 00003633 50                      	push rax
  5429 00003634 BF10000000              	mov rdi, 8 * 2	; new rib
  5430 00003639 E863610000              	call malloc
  5431 0000363E 50                      	push rax
  5432 0000363F BF10000000              	mov rdi, 8 * 2	; extended env
  5433 00003644 E858610000              	call malloc
  5434 00003649 488B7D10                	mov rdi, ENV
  5435 0000364D BE00000000              	mov rsi, 0
  5436 00003652 BA01000000              	mov rdx, 1
  5437                                  .L_lambda_simple_env_loop_0029:	; ext_env[i + 1] <-- env[i]
  5438 00003657 4883FE01                	cmp rsi, 1
  5439 0000365B 7410                    	je .L_lambda_simple_env_end_0029
  5440 0000365D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5441 00003661 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5442 00003665 48FFC6                  	inc rsi
  5443 00003668 48FFC2                  	inc rdx
  5444 0000366B EBEA                    	jmp .L_lambda_simple_env_loop_0029
  5445                                  .L_lambda_simple_env_end_0029:
  5446 0000366D 5B                      	pop rbx
  5447 0000366E BE00000000              	mov rsi, 0
  5448                                  .L_lambda_simple_params_loop_0029:	; copy params
  5449 00003673 4883FE02                	cmp rsi, 2
  5450 00003677 740E                    	je .L_lambda_simple_params_end_0029
  5451 00003679 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5452 0000367E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5453 00003682 48FFC6                  	inc rsi
  5454 00003685 EBEC                    	jmp .L_lambda_simple_params_loop_0029
  5455                                  .L_lambda_simple_params_end_0029:
  5456 00003687 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5457 0000368A 4889C3                  	mov rbx, rax
  5458 0000368D 58                      	pop rax
  5459 0000368E C60004                  	mov byte [rax], T_closure
  5460 00003691 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5461 00003695 48C74009[A2360000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0029
  5462 0000369D E905010000              	jmp .L_lambda_simple_end_0029
  5463                                  .L_lambda_simple_code_0029:	; lambda-simple body
  5464 000036A2 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5465 000036A8 740B                    	je .L_lambda_simple_arity_check_ok_002e
  5466 000036AA FF742410                	push qword [rsp + 8 * 2]
  5467 000036AE 6A02                    	push 2
  5468 000036B0 E9A5600000              	jmp L_error_incorrect_arity_simple
  5469                                  .L_lambda_simple_arity_check_ok_002e:
  5470 000036B5 C8000000                	enter 0, 0
  5471                                  	; preparing a non-tail-call
  5472 000036B9 488B4528                	mov rax, PARAM(1)	; param s
  5473 000036BD 50                      	push rax
  5474 000036BE 6A01                    	push 1	; arg count
  5475 000036C0 488B0425[C70F0000]      	mov rax, qword [free_var_86]	; free var null?
  5476 000036C8 803805                  	cmp byte [rax], T_undefined
  5477 000036CB 0F84A35F0000            	je L_error_fvar_undefined
  5478 000036D1 803804                  	cmp byte [rax], T_closure
  5479 000036D4 0F851E600000            	jne L_error_non_closure
  5480 000036DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  5481 000036DD FF5009                  	call SOB_CLOSURE_CODE(rax)
  5482 000036E0 483D[02000000]          	cmp rax, sob_boolean_false
  5483 000036E6 740F                    	je .L_if_else_0009
  5484 000036E8 48B8-                   	mov rax, L_constants + 1
  5484 000036EA [0100000000000000] 
  5485 000036F2 E9AC000000              	jmp .L_if_end_000e
  5486                                  .L_if_else_0009:
  5487                                  	; preparing a non-tail-call
  5488                                  	; preparing a non-tail-call
  5489                                  	; preparing a non-tail-call
  5490 000036F7 488B4528                	mov rax, PARAM(1)	; param s
  5491 000036FB 50                      	push rax
  5492 000036FC 6A01                    	push 1	; arg count
  5493 000036FE 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  5494 00003706 803805                  	cmp byte [rax], T_undefined
  5495 00003709 0F84655F0000            	je L_error_fvar_undefined
  5496 0000370F 803804                  	cmp byte [rax], T_closure
  5497 00003712 0F85E05F0000            	jne L_error_non_closure
  5498 00003718 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5499 0000371B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5500 0000371E 50                      	push rax
  5501 0000371F 488B4520                	mov rax, PARAM(0)	; param f
  5502 00003723 50                      	push rax
  5503 00003724 6A02                    	push 2	; arg count
  5504 00003726 488B4510                	mov rax, ENV
  5505 0000372A 488B00                  	mov rax, qword [rax + 8 * 0]
  5506 0000372D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  5507 00003730 488B00                  	mov rax, qword [rax]
  5508 00003733 803804                  	cmp byte [rax], T_closure
  5509 00003736 0F85BC5F0000            	jne L_error_non_closure
  5510 0000373C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5511 0000373F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5512 00003742 50                      	push rax
  5513                                  	; preparing a non-tail-call
  5514                                  	; preparing a non-tail-call
  5515 00003743 488B4528                	mov rax, PARAM(1)	; param s
  5516 00003747 50                      	push rax
  5517 00003748 6A01                    	push 1	; arg count
  5518 0000374A 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  5519 00003752 803805                  	cmp byte [rax], T_undefined
  5520 00003755 0F84195F0000            	je L_error_fvar_undefined
  5521 0000375B 803804                  	cmp byte [rax], T_closure
  5522 0000375E 0F85945F0000            	jne L_error_non_closure
  5523 00003764 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5524 00003767 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5525 0000376A 50                      	push rax
  5526 0000376B 6A01                    	push 1	; arg count
  5527 0000376D 488B4520                	mov rax, PARAM(0)	; param f
  5528 00003771 803804                  	cmp byte [rax], T_closure
  5529 00003774 0F857E5F0000            	jne L_error_non_closure
  5530 0000377A FF7001                  	push SOB_CLOSURE_ENV(rax)
  5531 0000377D FF5009                  	call SOB_CLOSURE_CODE(rax)
  5532 00003780 50                      	push rax
  5533 00003781 6A02                    	push 2	; arg count
  5534 00003783 488B0425[C80E0000]      	mov rax, qword [free_var_71]	; free var cons
  5535 0000378B 803805                  	cmp byte [rax], T_undefined
  5536 0000378E 0F84E05E0000            	je L_error_fvar_undefined
  5537 00003794 803804                  	cmp byte [rax], T_closure
  5538 00003797 0F855B5F0000            	jne L_error_non_closure
  5539 0000379D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5540 000037A0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5541                                  .L_if_end_000e:
  5542 000037A3 C9                      	leave
  5543 000037A4 C22000                  	ret AND_KILL_FRAME(2)
  5544                                  .L_lambda_simple_end_0029:	; new closure is in rax
  5545 000037A7 50                      	push rax
  5546 000037A8 488B4520                	mov rax, PARAM(0)	; param map1
  5547 000037AC 8F00                    	pop qword [rax]
  5548 000037AE 48B8-                   	mov rax, sob_void
  5548 000037B0 [0000000000000000] 
  5549                                  
  5550 000037B8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5551 000037BD E8DF5F0000              	call malloc
  5552 000037C2 50                      	push rax
  5553 000037C3 BF10000000              	mov rdi, 8 * 2	; new rib
  5554 000037C8 E8D45F0000              	call malloc
  5555 000037CD 50                      	push rax
  5556 000037CE BF10000000              	mov rdi, 8 * 2	; extended env
  5557 000037D3 E8C95F0000              	call malloc
  5558 000037D8 488B7D10                	mov rdi, ENV
  5559 000037DC BE00000000              	mov rsi, 0
  5560 000037E1 BA01000000              	mov rdx, 1
  5561                                  .L_lambda_simple_env_loop_002a:	; ext_env[i + 1] <-- env[i]
  5562 000037E6 4883FE01                	cmp rsi, 1
  5563 000037EA 7410                    	je .L_lambda_simple_env_end_002a
  5564 000037EC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5565 000037F0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5566 000037F4 48FFC6                  	inc rsi
  5567 000037F7 48FFC2                  	inc rdx
  5568 000037FA EBEA                    	jmp .L_lambda_simple_env_loop_002a
  5569                                  .L_lambda_simple_env_end_002a:
  5570 000037FC 5B                      	pop rbx
  5571 000037FD BE00000000              	mov rsi, 0
  5572                                  .L_lambda_simple_params_loop_002a:	; copy params
  5573 00003802 4883FE02                	cmp rsi, 2
  5574 00003806 740E                    	je .L_lambda_simple_params_end_002a
  5575 00003808 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5576 0000380D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5577 00003811 48FFC6                  	inc rsi
  5578 00003814 EBEC                    	jmp .L_lambda_simple_params_loop_002a
  5579                                  .L_lambda_simple_params_end_002a:
  5580 00003816 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5581 00003819 4889C3                  	mov rbx, rax
  5582 0000381C 58                      	pop rax
  5583 0000381D C60004                  	mov byte [rax], T_closure
  5584 00003820 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5585 00003824 48C74009[31380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002a
  5586 0000382C E957010000              	jmp .L_lambda_simple_end_002a
  5587                                  .L_lambda_simple_code_002a:	; lambda-simple body
  5588 00003831 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5589 00003837 740B                    	je .L_lambda_simple_arity_check_ok_002f
  5590 00003839 FF742410                	push qword [rsp + 8 * 2]
  5591 0000383D 6A02                    	push 2
  5592 0000383F E9165F0000              	jmp L_error_incorrect_arity_simple
  5593                                  .L_lambda_simple_arity_check_ok_002f:
  5594 00003844 C8000000                	enter 0, 0
  5595                                  	; preparing a non-tail-call
  5596                                  	; preparing a non-tail-call
  5597 00003848 488B4528                	mov rax, PARAM(1)	; param s
  5598 0000384C 50                      	push rax
  5599 0000384D 6A01                    	push 1	; arg count
  5600 0000384F 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  5601 00003857 803805                  	cmp byte [rax], T_undefined
  5602 0000385A 0F84145E0000            	je L_error_fvar_undefined
  5603 00003860 803804                  	cmp byte [rax], T_closure
  5604 00003863 0F858F5E0000            	jne L_error_non_closure
  5605 00003869 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5606 0000386C FF5009                  	call SOB_CLOSURE_CODE(rax)
  5607 0000386F 50                      	push rax
  5608 00003870 6A01                    	push 1	; arg count
  5609 00003872 488B0425[C70F0000]      	mov rax, qword [free_var_86]	; free var null?
  5610 0000387A 803805                  	cmp byte [rax], T_undefined
  5611 0000387D 0F84F15D0000            	je L_error_fvar_undefined
  5612 00003883 803804                  	cmp byte [rax], T_closure
  5613 00003886 0F856C5E0000            	jne L_error_non_closure
  5614 0000388C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5615 0000388F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5616 00003892 483D[02000000]          	cmp rax, sob_boolean_false
  5617 00003898 740F                    	je .L_if_else_000a
  5618 0000389A 48B8-                   	mov rax, L_constants + 1
  5618 0000389C [0100000000000000] 
  5619 000038A4 E9DB000000              	jmp .L_if_end_000f
  5620                                  .L_if_else_000a:
  5621                                  	; preparing a non-tail-call
  5622                                  	; preparing a non-tail-call
  5623                                  	; preparing a non-tail-call
  5624 000038A9 488B4528                	mov rax, PARAM(1)	; param s
  5625 000038AD 50                      	push rax
  5626 000038AE 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  5627 000038B6 803805                  	cmp byte [rax], T_undefined
  5628 000038B9 0F84B55D0000            	je L_error_fvar_undefined
  5629 000038BF 50                      	push rax
  5630 000038C0 6A02                    	push 2	; arg count
  5631 000038C2 488B4510                	mov rax, ENV
  5632 000038C6 488B00                  	mov rax, qword [rax + 8 * 0]
  5633 000038C9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  5634 000038CC 488B00                  	mov rax, qword [rax]
  5635 000038CF 803804                  	cmp byte [rax], T_closure
  5636 000038D2 0F85205E0000            	jne L_error_non_closure
  5637 000038D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5638 000038DB FF5009                  	call SOB_CLOSURE_CODE(rax)
  5639 000038DE 50                      	push rax
  5640 000038DF 488B4520                	mov rax, PARAM(0)	; param f
  5641 000038E3 50                      	push rax
  5642 000038E4 6A02                    	push 2	; arg count
  5643 000038E6 488B4510                	mov rax, ENV
  5644 000038EA 488B00                  	mov rax, qword [rax + 8 * 0]
  5645 000038ED 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  5646 000038F1 488B00                  	mov rax, qword [rax]
  5647 000038F4 803804                  	cmp byte [rax], T_closure
  5648 000038F7 0F85FB5D0000            	jne L_error_non_closure
  5649 000038FD FF7001                  	push SOB_CLOSURE_ENV(rax)
  5650 00003900 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5651 00003903 50                      	push rax
  5652                                  	; preparing a non-tail-call
  5653                                  	; preparing a non-tail-call
  5654 00003904 488B4528                	mov rax, PARAM(1)	; param s
  5655 00003908 50                      	push rax
  5656 00003909 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  5657 00003911 803805                  	cmp byte [rax], T_undefined
  5658 00003914 0F845A5D0000            	je L_error_fvar_undefined
  5659 0000391A 50                      	push rax
  5660 0000391B 6A02                    	push 2	; arg count
  5661 0000391D 488B4510                	mov rax, ENV
  5662 00003921 488B00                  	mov rax, qword [rax + 8 * 0]
  5663 00003924 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  5664 00003927 488B00                  	mov rax, qword [rax]
  5665 0000392A 803804                  	cmp byte [rax], T_closure
  5666 0000392D 0F85C55D0000            	jne L_error_non_closure
  5667 00003933 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5668 00003936 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5669 00003939 50                      	push rax
  5670 0000393A 488B4520                	mov rax, PARAM(0)	; param f
  5671 0000393E 50                      	push rax
  5672 0000393F 6A02                    	push 2	; arg count
  5673 00003941 488B0425[310C0000]      	mov rax, qword [free_var_32]	; free var apply
  5674 00003949 803805                  	cmp byte [rax], T_undefined
  5675 0000394C 0F84225D0000            	je L_error_fvar_undefined
  5676 00003952 803804                  	cmp byte [rax], T_closure
  5677 00003955 0F859D5D0000            	jne L_error_non_closure
  5678 0000395B FF7001                  	push SOB_CLOSURE_ENV(rax)
  5679 0000395E FF5009                  	call SOB_CLOSURE_CODE(rax)
  5680 00003961 50                      	push rax
  5681 00003962 6A02                    	push 2	; arg count
  5682 00003964 488B0425[C80E0000]      	mov rax, qword [free_var_71]	; free var cons
  5683 0000396C 803805                  	cmp byte [rax], T_undefined
  5684 0000396F 0F84FF5C0000            	je L_error_fvar_undefined
  5685 00003975 803804                  	cmp byte [rax], T_closure
  5686 00003978 0F857A5D0000            	jne L_error_non_closure
  5687 0000397E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5688 00003981 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5689                                  .L_if_end_000f:
  5690 00003984 C9                      	leave
  5691 00003985 C22000                  	ret AND_KILL_FRAME(2)
  5692                                  .L_lambda_simple_end_002a:	; new closure is in rax
  5693 00003988 50                      	push rax
  5694 00003989 488B4528                	mov rax, PARAM(1)	; param map-list
  5695 0000398D 8F00                    	pop qword [rax]
  5696 0000398F 48B8-                   	mov rax, sob_void
  5696 00003991 [0000000000000000] 
  5697                                  
  5698 00003999 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5699 0000399E E8FE5D0000              	call malloc
  5700 000039A3 50                      	push rax
  5701 000039A4 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
  5702 000039A8 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
  5703 000039AC BF10000000              	mov rdi, 8 * 2	; new rib for optional parameters
  5704 000039B1 E8EB5D0000              	call malloc
  5705 000039B6 50                      	push rax
  5706 000039B7 BF10000000              	mov rdi, 8 * 2	; extended env
  5707 000039BC E8E05D0000              	call malloc
  5708 000039C1 488B7D10                	mov rdi, ENV
  5709 000039C5 BE00000000              	mov rsi, 0
  5710 000039CA BA01000000              	mov rdx, 1
  5711                                  .L_lambda_opt_code_0010:	; ext_env[i + 1] <-- env[i] copy all the array
  5712 000039CF 4883FE01                	cmp rsi, 1
  5713 000039D3 7410                    	je .L_lambda_opt_end_0015
  5714 000039D5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5715 000039D9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5716 000039DD 48FFC6                  	inc rsi
  5717 000039E0 48FFC2                  	inc rdx
  5718 000039E3 EBEA                    	jmp .L_lambda_opt_code_0010
  5719                                  .L_lambda_opt_end_0015:
  5720 000039E5 5B                      	pop rbx
  5721 000039E6 BE00000000              	mov rsi, 0
  5722                                  .L_lambda_opt_code_0011:	; copy params
  5723 000039EB 4883FE02                	cmp rsi, 2
  5724 000039EF 740E                    	je .L_lambda_opt_end_0016
  5725 000039F1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5726 000039F6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5727 000039FA 48FFC6                  	inc rsi
  5728 000039FD EBEC                    	jmp .L_lambda_opt_code_0011
  5729                                  .L_lambda_opt_end_0016:
  5730 000039FF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5731 00003A02 4889C3                  	mov rbx, rax
  5732 00003A05 58                      	pop rax
  5733 00003A06 C60004                  	mov byte [rax], T_closure
  5734 00003A09 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5735 00003A0D 48C74009[1A3A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0012
  5736 00003A15 E96E010000              	jmp .L_lambda_opt_end_0017
  5737                                  .L_lambda_opt_code_0012:	; lambda-opt body
  5738 00003A1A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5739 00003A20 7D0B                    	jge .L_lambda_simple_arity_check_ok_0030
  5740 00003A22 FF742410                	push qword [rsp + 8 * 2]
  5741 00003A26 6A01                    	push 1
  5742 00003A28 E92D5D0000              	jmp L_error_incorrect_arity_simple
  5743                                  .L_lambda_simple_arity_check_ok_0030:
  5744 00003A2D 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  5745 00003A32 4983E801                	sub r8, 1
  5746 00003A36 4C89C3                  	mov rbx,r8
  5747 00003A39 4983F800                	cmp r8, 0
  5748 00003A3D 7535                    	jne .L_lambda_opt_params_loop_0012
  5749 00003A3F 488B542410              	mov rdx, qword [rsp + 8 * 2]
  5750 00003A44 4883C203                	add rdx , 3
  5751 00003A48 4883EC08                	sub rsp , 8
  5752 00003A4C 4889E1                  	mov rcx, rsp
  5753                                  .L_lambda_opt_stack_adjusted_000b: ;pushing down the stack of the current function
  5754 00003A4F 488B5908                	mov rbx, qword [rcx + 8 * 1]
  5755 00003A53 488919                  	mov qword[rcx] , rbx
  5756 00003A56 4883C108                	add rcx , 8
  5757 00003A5A 48FFCA                  	dec rdx
  5758 00003A5D 4883FA00                	cmp rdx, 0
  5759 00003A61 75EC                    	jne .L_lambda_opt_stack_adjusted_000b
  5760 00003A63 48FF442410              	inc qword [rsp + 8 * 2]
  5761 00003A68 48C701[01000000]        	mov qword [rcx], sob_nil 
  5762 00003A6F E9A8000000              	jmp .L_lambda_opt_end_0018
  5763                                  	.L_lambda_opt_params_loop_0012:
  5764 00003A74 488B542410              	mov rdx, qword [rsp + 8*2]
  5765 00003A79 488D4CD410              	lea rcx, [rsp + 8*2 + 8*rdx]
  5766 00003A7E 4C89C2                  	mov rdx, r8
  5767 00003A81 49B9-                   	mov r9, sob_nil
  5767 00003A83 [0100000000000000] 
  5768 00003A8B 4989C9                  	mov r9, rcx
  5769                                  	.L_lambda_opt_params_loop_0010: ;loop for copying the opt into list
  5770 00003A8E BF11000000              	mov rdi, (1 + 8 + 8)
  5771 00003A93 E8095D0000              	call malloc
  5772 00003A98 C60021                  	mov byte[rax], T_pair
  5773 00003A9B 488B19                  	mov rbx, qword [rcx]
  5774 00003A9E 48895801                	mov SOB_PAIR_CAR(rax), rbx
  5775 00003AA2 4C894809                	mov SOB_PAIR_CDR(rax), r9
  5776 00003AA6 4989C1                  	mov r9, rax
  5777 00003AA9 48FFCA                  	dec rdx
  5778 00003AAC 4883E908                	sub rcx, 8
  5779 00003AB0 4883FA00                	cmp rdx, 0
  5780 00003AB4 75D8                    	jne .L_lambda_opt_params_loop_0010
  5781 00003AB6 488B542410              	mov rdx, qword [rsp + 8 * 2]
  5782 00003ABB 4889E0                  	mov rax, rsp
  5783 00003ABE 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
  5784 00003AC3 4989DC                  	mov r12 , rbx
  5785 00003AC6 4C89C1                  	mov rcx, r8
  5786 00003AC9 48FFC9                  	dec rcx
  5787 00003ACC 4883C203                	add rdx, 3
  5788 00003AD0 4829CA                  	sub rdx,rcx
  5789 00003AD3 48C1E103                	shl rcx, 3
  5790                                  	.L_lambda_opt_stack_adjusted_000c:
  5791 00003AD7 4883FA00                	cmp rdx, 0
  5792 00003ADB 7419                    	je .L_lambda_opt_params_end_0016
  5793 00003ADD 4889D8                  	mov rax, rbx
  5794 00003AE0 4829C8                  	sub rax, rcx
  5795 00003AE3 488B30                  	mov rsi, qword [rax]
  5796 00003AE6 488933                  	mov [rbx], rsi
  5797 00003AE9 4883EB08                	sub rbx, 8
  5798 00003AED 48FFCA                  	dec rdx
  5799 00003AF0 4883FA00                	cmp rdx, 0
  5800 00003AF4 75E1                    	jne .L_lambda_opt_stack_adjusted_000c
  5801                                  	.L_lambda_opt_params_end_0016:
  5802 00003AF6 4801CC                  	add rsp,rcx
  5803 00003AF9 BB01000000              	mov rbx, 1
  5804 00003AFE 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  5805 00003B03 4883C303                	add rbx,3
  5806 00003B07 4C29C3                  	sub rbx,r8
  5807 00003B0A 48C1E303                	shl rbx, 3
  5808 00003B0E 4801E3                  	add rbx, rsp
  5809 00003B11 4C890B                  	mov qword[rbx] , r9
  5810 00003B14 49FFC8                  	dec r8
  5811 00003B17 4C29442410              	sub qword [rsp + 8 * 2], r8
  5812                                  	.L_lambda_opt_end_0018:
  5813 00003B1C C8000000                	enter 0, 0
  5814                                  	; preparing a non-tail-call
  5815 00003B20 488B4528                	mov rax, PARAM(1)	; param s
  5816 00003B24 50                      	push rax
  5817 00003B25 6A01                    	push 1	; arg count
  5818 00003B27 488B0425[C70F0000]      	mov rax, qword [free_var_86]	; free var null?
  5819 00003B2F 803805                  	cmp byte [rax], T_undefined
  5820 00003B32 0F843C5B0000            	je L_error_fvar_undefined
  5821 00003B38 803804                  	cmp byte [rax], T_closure
  5822 00003B3B 0F85B75B0000            	jne L_error_non_closure
  5823 00003B41 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5824 00003B44 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5825 00003B47 483D[02000000]          	cmp rax, sob_boolean_false
  5826 00003B4D 740C                    	je .L_if_else_000b
  5827 00003B4F 48B8-                   	mov rax, L_constants + 1
  5827 00003B51 [0100000000000000] 
  5828 00003B59 EB29                    	jmp .L_if_end_0010
  5829                                  .L_if_else_000b:
  5830                                  	; preparing a non-tail-call
  5831 00003B5B 488B4528                	mov rax, PARAM(1)	; param s
  5832 00003B5F 50                      	push rax
  5833 00003B60 488B4520                	mov rax, PARAM(0)	; param f
  5834 00003B64 50                      	push rax
  5835 00003B65 6A02                    	push 2	; arg count
  5836 00003B67 488B4510                	mov rax, ENV
  5837 00003B6B 488B00                  	mov rax, qword [rax + 8 * 0]
  5838 00003B6E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  5839 00003B72 488B00                  	mov rax, qword [rax]
  5840 00003B75 803804                  	cmp byte [rax], T_closure
  5841 00003B78 0F857A5B0000            	jne L_error_non_closure
  5842 00003B7E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5843 00003B81 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5844                                  .L_if_end_0010:
  5845                                  	LEAVE
    49 00003B84 C9                  <1>  leave
  5846 00003B85 C22000                  	ret AND_KILL_FRAME(2)
  5847                                  .L_lambda_opt_end_0017:
  5848 00003B88 C9                      	leave
  5849 00003B89 C22000                  	ret AND_KILL_FRAME(2)
  5850                                  .L_lambda_simple_end_0028:	; new closure is in rax
  5851 00003B8C 803804                  	cmp byte [rax], T_closure
  5852 00003B8F 0F85635B0000            	jne L_error_non_closure
  5853 00003B95 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5854 00003B98 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5855 00003B9B 48890425[A50F0000]      	mov qword [free_var_84], rax
  5856 00003BA3 48B8-                   	mov rax, sob_void
  5856 00003BA5 [0000000000000000] 
  5857                                  
  5858 00003BAD 4889C7                  	mov rdi, rax
  5859 00003BB0 E8415E0000              	call print_sexpr_if_not_void
  5860 00003BB5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5861 00003BBA E8E25B0000              	call malloc
  5862 00003BBF 50                      	push rax
  5863 00003BC0 BF00000000              	mov rdi, 8 * 0	; new rib
  5864 00003BC5 E8D75B0000              	call malloc
  5865 00003BCA 50                      	push rax
  5866 00003BCB BF08000000              	mov rdi, 8 * 1	; extended env
  5867 00003BD0 E8CC5B0000              	call malloc
  5868 00003BD5 488B7D10                	mov rdi, ENV
  5869 00003BD9 BE00000000              	mov rsi, 0
  5870 00003BDE BA01000000              	mov rdx, 1
  5871                                  .L_lambda_simple_env_loop_002b:	; ext_env[i + 1] <-- env[i]
  5872 00003BE3 4883FE00                	cmp rsi, 0
  5873 00003BE7 7410                    	je .L_lambda_simple_env_end_002b
  5874 00003BE9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5875 00003BED 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5876 00003BF1 48FFC6                  	inc rsi
  5877 00003BF4 48FFC2                  	inc rdx
  5878 00003BF7 EBEA                    	jmp .L_lambda_simple_env_loop_002b
  5879                                  .L_lambda_simple_env_end_002b:
  5880 00003BF9 5B                      	pop rbx
  5881 00003BFA BE00000000              	mov rsi, 0
  5882                                  .L_lambda_simple_params_loop_002b:	; copy params
  5883 00003BFF 4883FE00                	cmp rsi, 0
  5884 00003C03 740E                    	je .L_lambda_simple_params_end_002b
  5885 00003C05 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5886 00003C0A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5887 00003C0E 48FFC6                  	inc rsi
  5888 00003C11 EBEC                    	jmp .L_lambda_simple_params_loop_002b
  5889                                  .L_lambda_simple_params_end_002b:
  5890 00003C13 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5891 00003C16 4889C3                  	mov rbx, rax
  5892 00003C19 58                      	pop rax
  5893 00003C1A C60004                  	mov byte [rax], T_closure
  5894 00003C1D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5895 00003C21 48C74009[2E3C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002b
  5896 00003C29 E90B010000              	jmp .L_lambda_simple_end_002b
  5897                                  .L_lambda_simple_code_002b:	; lambda-simple body
  5898 00003C2E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5899 00003C34 740B                    	je .L_lambda_simple_arity_check_ok_0031
  5900 00003C36 FF742410                	push qword [rsp + 8 * 2]
  5901 00003C3A 6A01                    	push 1
  5902 00003C3C E9195B0000              	jmp L_error_incorrect_arity_simple
  5903                                  .L_lambda_simple_arity_check_ok_0031:
  5904 00003C41 C8000000                	enter 0, 0
  5905                                  	; preparing a non-tail-call
  5906 00003C45 488B4520                	mov rax, PARAM(0)	; param s
  5907 00003C49 50                      	push rax
  5908 00003C4A 48B8-                   	mov rax, L_constants + 1
  5908 00003C4C [0100000000000000] 
  5909 00003C54 50                      	push rax
  5910 00003C55 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5911 00003C5A E8425B0000              	call malloc
  5912 00003C5F 50                      	push rax
  5913 00003C60 BF08000000              	mov rdi, 8 * 1	; new rib
  5914 00003C65 E8375B0000              	call malloc
  5915 00003C6A 50                      	push rax
  5916 00003C6B BF10000000              	mov rdi, 8 * 2	; extended env
  5917 00003C70 E82C5B0000              	call malloc
  5918 00003C75 488B7D10                	mov rdi, ENV
  5919 00003C79 BE00000000              	mov rsi, 0
  5920 00003C7E BA01000000              	mov rdx, 1
  5921                                  .L_lambda_simple_env_loop_002c:	; ext_env[i + 1] <-- env[i]
  5922 00003C83 4883FE01                	cmp rsi, 1
  5923 00003C87 7410                    	je .L_lambda_simple_env_end_002c
  5924 00003C89 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5925 00003C8D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5926 00003C91 48FFC6                  	inc rsi
  5927 00003C94 48FFC2                  	inc rdx
  5928 00003C97 EBEA                    	jmp .L_lambda_simple_env_loop_002c
  5929                                  .L_lambda_simple_env_end_002c:
  5930 00003C99 5B                      	pop rbx
  5931 00003C9A BE00000000              	mov rsi, 0
  5932                                  .L_lambda_simple_params_loop_002c:	; copy params
  5933 00003C9F 4883FE01                	cmp rsi, 1
  5934 00003CA3 740E                    	je .L_lambda_simple_params_end_002c
  5935 00003CA5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5936 00003CAA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5937 00003CAE 48FFC6                  	inc rsi
  5938 00003CB1 EBEC                    	jmp .L_lambda_simple_params_loop_002c
  5939                                  .L_lambda_simple_params_end_002c:
  5940 00003CB3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5941 00003CB6 4889C3                  	mov rbx, rax
  5942 00003CB9 58                      	pop rax
  5943 00003CBA C60004                  	mov byte [rax], T_closure
  5944 00003CBD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5945 00003CC1 48C74009[CB3C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002c
  5946 00003CC9 EB47                    	jmp .L_lambda_simple_end_002c
  5947                                  .L_lambda_simple_code_002c:	; lambda-simple body
  5948 00003CCB 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5949 00003CD1 740B                    	je .L_lambda_simple_arity_check_ok_0032
  5950 00003CD3 FF742410                	push qword [rsp + 8 * 2]
  5951 00003CD7 6A02                    	push 2
  5952 00003CD9 E97C5A0000              	jmp L_error_incorrect_arity_simple
  5953                                  .L_lambda_simple_arity_check_ok_0032:
  5954 00003CDE C8000000                	enter 0, 0
  5955                                  	; preparing a non-tail-call
  5956 00003CE2 488B4520                	mov rax, PARAM(0)	; param r
  5957 00003CE6 50                      	push rax
  5958 00003CE7 488B4528                	mov rax, PARAM(1)	; param a
  5959 00003CEB 50                      	push rax
  5960 00003CEC 6A02                    	push 2	; arg count
  5961 00003CEE 488B0425[C80E0000]      	mov rax, qword [free_var_71]	; free var cons
  5962 00003CF6 803805                  	cmp byte [rax], T_undefined
  5963 00003CF9 0F8475590000            	je L_error_fvar_undefined
  5964 00003CFF 803804                  	cmp byte [rax], T_closure
  5965 00003D02 0F85F0590000            	jne L_error_non_closure
  5966 00003D08 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5967 00003D0B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5968 00003D0E C9                      	leave
  5969 00003D0F C22000                  	ret AND_KILL_FRAME(2)
  5970                                  .L_lambda_simple_end_002c:	; new closure is in rax
  5971 00003D12 50                      	push rax
  5972 00003D13 6A03                    	push 3	; arg count
  5973 00003D15 488B0425[FB0E0000]      	mov rax, qword [free_var_74]	; free var fold-left
  5974 00003D1D 803805                  	cmp byte [rax], T_undefined
  5975 00003D20 0F844E590000            	je L_error_fvar_undefined
  5976 00003D26 803804                  	cmp byte [rax], T_closure
  5977 00003D29 0F85C9590000            	jne L_error_non_closure
  5978 00003D2F FF7001                  	push SOB_CLOSURE_ENV(rax)
  5979 00003D32 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5980 00003D35 C9                      	leave
  5981 00003D36 C21800                  	ret AND_KILL_FRAME(1)
  5982                                  .L_lambda_simple_end_002b:	; new closure is in rax
  5983 00003D39 48890425[2D100000]      	mov qword [free_var_92], rax
  5984 00003D41 48B8-                   	mov rax, sob_void
  5984 00003D43 [0000000000000000] 
  5985                                  
  5986 00003D4B 4889C7                  	mov rdi, rax
  5987 00003D4E E8A35C0000              	call print_sexpr_if_not_void
  5988                                  	; preparing a non-tail-call
  5989 00003D53 48B8-                   	mov rax, L_constants + 1993
  5989 00003D55 [C907000000000000] 
  5990 00003D5D 50                      	push rax
  5991 00003D5E 48B8-                   	mov rax, L_constants + 1993
  5991 00003D60 [C907000000000000] 
  5992 00003D68 50                      	push rax
  5993 00003D69 6A02                    	push 2	; arg count
  5994 00003D6B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5995 00003D70 E82C5A0000              	call malloc
  5996 00003D75 50                      	push rax
  5997 00003D76 BF00000000              	mov rdi, 8 * 0	; new rib
  5998 00003D7B E8215A0000              	call malloc
  5999 00003D80 50                      	push rax
  6000 00003D81 BF08000000              	mov rdi, 8 * 1	; extended env
  6001 00003D86 E8165A0000              	call malloc
  6002 00003D8B 488B7D10                	mov rdi, ENV
  6003 00003D8F BE00000000              	mov rsi, 0
  6004 00003D94 BA01000000              	mov rdx, 1
  6005                                  .L_lambda_simple_env_loop_002d:	; ext_env[i + 1] <-- env[i]
  6006 00003D99 4883FE00                	cmp rsi, 0
  6007 00003D9D 7410                    	je .L_lambda_simple_env_end_002d
  6008 00003D9F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6009 00003DA3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6010 00003DA7 48FFC6                  	inc rsi
  6011 00003DAA 48FFC2                  	inc rdx
  6012 00003DAD EBEA                    	jmp .L_lambda_simple_env_loop_002d
  6013                                  .L_lambda_simple_env_end_002d:
  6014 00003DAF 5B                      	pop rbx
  6015 00003DB0 BE00000000              	mov rsi, 0
  6016                                  .L_lambda_simple_params_loop_002d:	; copy params
  6017 00003DB5 4883FE00                	cmp rsi, 0
  6018 00003DB9 740E                    	je .L_lambda_simple_params_end_002d
  6019 00003DBB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6020 00003DC0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6021 00003DC4 48FFC6                  	inc rsi
  6022 00003DC7 EBEC                    	jmp .L_lambda_simple_params_loop_002d
  6023                                  .L_lambda_simple_params_end_002d:
  6024 00003DC9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6025 00003DCC 4889C3                  	mov rbx, rax
  6026 00003DCF 58                      	pop rax
  6027 00003DD0 C60004                  	mov byte [rax], T_closure
  6028 00003DD3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6029 00003DD7 48C74009[E43D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002d
  6030 00003DDF E96F050000              	jmp .L_lambda_simple_end_002d
  6031                                  .L_lambda_simple_code_002d:	; lambda-simple body
  6032 00003DE4 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6033 00003DEA 740B                    	je .L_lambda_simple_arity_check_ok_0033
  6034 00003DEC FF742410                	push qword [rsp + 8 * 2]
  6035 00003DF0 6A02                    	push 2
  6036 00003DF2 E963590000              	jmp L_error_incorrect_arity_simple
  6037                                  .L_lambda_simple_arity_check_ok_0033:
  6038 00003DF7 C8000000                	enter 0, 0
  6039 00003DFB 488B5D20                	 mov rbx, qword [rbp + 8 * (4 +0)]
  6040 00003DFF BF08000000              	mov rdi, 8
  6041 00003E04 E898590000              	call malloc
  6042 00003E09 488918                  	mov qword [rax], rbx
  6043 00003E0C 488903                  	mov qword [rbx], rax
  6044 00003E0F 48B8-                   	mov rax, sob_void
  6044 00003E11 [0000000000000000] 
  6045                                  
  6046 00003E19 488B5D28                	 mov rbx, qword [rbp + 8 * (4 +1)]
  6047 00003E1D BF08000000              	mov rdi, 8
  6048 00003E22 E87A590000              	call malloc
  6049 00003E27 488918                  	mov qword [rax], rbx
  6050 00003E2A 488903                  	mov qword [rbx], rax
  6051 00003E2D 48B8-                   	mov rax, sob_void
  6051 00003E2F [0000000000000000] 
  6052                                  
  6053 00003E37 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6054 00003E3C E860590000              	call malloc
  6055 00003E41 50                      	push rax
  6056 00003E42 BF10000000              	mov rdi, 8 * 2	; new rib
  6057 00003E47 E855590000              	call malloc
  6058 00003E4C 50                      	push rax
  6059 00003E4D BF10000000              	mov rdi, 8 * 2	; extended env
  6060 00003E52 E84A590000              	call malloc
  6061 00003E57 488B7D10                	mov rdi, ENV
  6062 00003E5B BE00000000              	mov rsi, 0
  6063 00003E60 BA01000000              	mov rdx, 1
  6064                                  .L_lambda_simple_env_loop_002e:	; ext_env[i + 1] <-- env[i]
  6065 00003E65 4883FE01                	cmp rsi, 1
  6066 00003E69 7410                    	je .L_lambda_simple_env_end_002e
  6067 00003E6B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6068 00003E6F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6069 00003E73 48FFC6                  	inc rsi
  6070 00003E76 48FFC2                  	inc rdx
  6071 00003E79 EBEA                    	jmp .L_lambda_simple_env_loop_002e
  6072                                  .L_lambda_simple_env_end_002e:
  6073 00003E7B 5B                      	pop rbx
  6074 00003E7C BE00000000              	mov rsi, 0
  6075                                  .L_lambda_simple_params_loop_002e:	; copy params
  6076 00003E81 4883FE02                	cmp rsi, 2
  6077 00003E85 740E                    	je .L_lambda_simple_params_end_002e
  6078 00003E87 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6079 00003E8C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6080 00003E90 48FFC6                  	inc rsi
  6081 00003E93 EBEC                    	jmp .L_lambda_simple_params_loop_002e
  6082                                  .L_lambda_simple_params_end_002e:
  6083 00003E95 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6084 00003E98 4889C3                  	mov rbx, rax
  6085 00003E9B 58                      	pop rax
  6086 00003E9C C60004                  	mov byte [rax], T_closure
  6087 00003E9F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6088 00003EA3 48C74009[B03E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002e
  6089 00003EAB E9E6000000              	jmp .L_lambda_simple_end_002e
  6090                                  .L_lambda_simple_code_002e:	; lambda-simple body
  6091 00003EB0 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6092 00003EB6 740B                    	je .L_lambda_simple_arity_check_ok_0034
  6093 00003EB8 FF742410                	push qword [rsp + 8 * 2]
  6094 00003EBC 6A02                    	push 2
  6095 00003EBE E997580000              	jmp L_error_incorrect_arity_simple
  6096                                  .L_lambda_simple_arity_check_ok_0034:
  6097 00003EC3 C8000000                	enter 0, 0
  6098                                  	; preparing a non-tail-call
  6099 00003EC7 488B4528                	mov rax, PARAM(1)	; param sr
  6100 00003ECB 50                      	push rax
  6101 00003ECC 6A01                    	push 1	; arg count
  6102 00003ECE 488B0425[C70F0000]      	mov rax, qword [free_var_86]	; free var null?
  6103 00003ED6 803805                  	cmp byte [rax], T_undefined
  6104 00003ED9 0F8495570000            	je L_error_fvar_undefined
  6105 00003EDF 803804                  	cmp byte [rax], T_closure
  6106 00003EE2 0F8510580000            	jne L_error_non_closure
  6107 00003EE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6108 00003EEB FF5009                  	call SOB_CLOSURE_CODE(rax)
  6109 00003EEE 483D[02000000]          	cmp rax, sob_boolean_false
  6110 00003EF4 7409                    	je .L_if_else_000c
  6111 00003EF6 488B4520                	mov rax, PARAM(0)	; param s1
  6112 00003EFA E993000000              	jmp .L_if_end_0011
  6113                                  .L_if_else_000c:
  6114                                  	; preparing a non-tail-call
  6115                                  	; preparing a non-tail-call
  6116                                  	; preparing a non-tail-call
  6117 00003EFF 488B4528                	mov rax, PARAM(1)	; param sr
  6118 00003F03 50                      	push rax
  6119 00003F04 6A01                    	push 1	; arg count
  6120 00003F06 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  6121 00003F0E 803805                  	cmp byte [rax], T_undefined
  6122 00003F11 0F845D570000            	je L_error_fvar_undefined
  6123 00003F17 803804                  	cmp byte [rax], T_closure
  6124 00003F1A 0F85D8570000            	jne L_error_non_closure
  6125 00003F20 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6126 00003F23 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6127 00003F26 50                      	push rax
  6128                                  	; preparing a non-tail-call
  6129 00003F27 488B4528                	mov rax, PARAM(1)	; param sr
  6130 00003F2B 50                      	push rax
  6131 00003F2C 6A01                    	push 1	; arg count
  6132 00003F2E 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  6133 00003F36 803805                  	cmp byte [rax], T_undefined
  6134 00003F39 0F8435570000            	je L_error_fvar_undefined
  6135 00003F3F 803804                  	cmp byte [rax], T_closure
  6136 00003F42 0F85B0570000            	jne L_error_non_closure
  6137 00003F48 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6138 00003F4B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6139 00003F4E 50                      	push rax
  6140 00003F4F 6A02                    	push 2	; arg count
  6141 00003F51 488B4510                	mov rax, ENV
  6142 00003F55 488B00                  	mov rax, qword [rax + 8 * 0]
  6143 00003F58 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  6144 00003F5B 488B00                  	mov rax, qword [rax]
  6145 00003F5E 803804                  	cmp byte [rax], T_closure
  6146 00003F61 0F8591570000            	jne L_error_non_closure
  6147 00003F67 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6148 00003F6A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6149 00003F6D 50                      	push rax
  6150 00003F6E 488B4520                	mov rax, PARAM(0)	; param s1
  6151 00003F72 50                      	push rax
  6152 00003F73 6A02                    	push 2	; arg count
  6153 00003F75 488B4510                	mov rax, ENV
  6154 00003F79 488B00                  	mov rax, qword [rax + 8 * 0]
  6155 00003F7C 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  6156 00003F80 488B00                  	mov rax, qword [rax]
  6157 00003F83 803804                  	cmp byte [rax], T_closure
  6158 00003F86 0F856C570000            	jne L_error_non_closure
  6159 00003F8C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6160 00003F8F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6161                                  .L_if_end_0011:
  6162 00003F92 C9                      	leave
  6163 00003F93 C22000                  	ret AND_KILL_FRAME(2)
  6164                                  .L_lambda_simple_end_002e:	; new closure is in rax
  6165 00003F96 50                      	push rax
  6166 00003F97 488B4520                	mov rax, PARAM(0)	; param run-1
  6167 00003F9B 8F00                    	pop qword [rax]
  6168 00003F9D 48B8-                   	mov rax, sob_void
  6168 00003F9F [0000000000000000] 
  6169                                  
  6170 00003FA7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6171 00003FAC E8F0570000              	call malloc
  6172 00003FB1 50                      	push rax
  6173 00003FB2 BF10000000              	mov rdi, 8 * 2	; new rib
  6174 00003FB7 E8E5570000              	call malloc
  6175 00003FBC 50                      	push rax
  6176 00003FBD BF10000000              	mov rdi, 8 * 2	; extended env
  6177 00003FC2 E8DA570000              	call malloc
  6178 00003FC7 488B7D10                	mov rdi, ENV
  6179 00003FCB BE00000000              	mov rsi, 0
  6180 00003FD0 BA01000000              	mov rdx, 1
  6181                                  .L_lambda_simple_env_loop_002f:	; ext_env[i + 1] <-- env[i]
  6182 00003FD5 4883FE01                	cmp rsi, 1
  6183 00003FD9 7410                    	je .L_lambda_simple_env_end_002f
  6184 00003FDB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6185 00003FDF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6186 00003FE3 48FFC6                  	inc rsi
  6187 00003FE6 48FFC2                  	inc rdx
  6188 00003FE9 EBEA                    	jmp .L_lambda_simple_env_loop_002f
  6189                                  .L_lambda_simple_env_end_002f:
  6190 00003FEB 5B                      	pop rbx
  6191 00003FEC BE00000000              	mov rsi, 0
  6192                                  .L_lambda_simple_params_loop_002f:	; copy params
  6193 00003FF1 4883FE02                	cmp rsi, 2
  6194 00003FF5 740E                    	je .L_lambda_simple_params_end_002f
  6195 00003FF7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6196 00003FFC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6197 00004000 48FFC6                  	inc rsi
  6198 00004003 EBEC                    	jmp .L_lambda_simple_params_loop_002f
  6199                                  .L_lambda_simple_params_end_002f:
  6200 00004005 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6201 00004008 4889C3                  	mov rbx, rax
  6202 0000400B 58                      	pop rax
  6203 0000400C C60004                  	mov byte [rax], T_closure
  6204 0000400F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6205 00004013 48C74009[20400000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002f
  6206 0000401B E9EA000000              	jmp .L_lambda_simple_end_002f
  6207                                  .L_lambda_simple_code_002f:	; lambda-simple body
  6208 00004020 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6209 00004026 740B                    	je .L_lambda_simple_arity_check_ok_0035
  6210 00004028 FF742410                	push qword [rsp + 8 * 2]
  6211 0000402C 6A02                    	push 2
  6212 0000402E E927570000              	jmp L_error_incorrect_arity_simple
  6213                                  .L_lambda_simple_arity_check_ok_0035:
  6214 00004033 C8000000                	enter 0, 0
  6215                                  	; preparing a non-tail-call
  6216 00004037 488B4520                	mov rax, PARAM(0)	; param s1
  6217 0000403B 50                      	push rax
  6218 0000403C 6A01                    	push 1	; arg count
  6219 0000403E 488B0425[C70F0000]      	mov rax, qword [free_var_86]	; free var null?
  6220 00004046 803805                  	cmp byte [rax], T_undefined
  6221 00004049 0F8425560000            	je L_error_fvar_undefined
  6222 0000404F 803804                  	cmp byte [rax], T_closure
  6223 00004052 0F85A0560000            	jne L_error_non_closure
  6224 00004058 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6225 0000405B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6226 0000405E 483D[02000000]          	cmp rax, sob_boolean_false
  6227 00004064 7409                    	je .L_if_else_000d
  6228 00004066 488B4528                	mov rax, PARAM(1)	; param s2
  6229 0000406A E997000000              	jmp .L_if_end_0012
  6230                                  .L_if_else_000d:
  6231                                  	; preparing a non-tail-call
  6232                                  	; preparing a non-tail-call
  6233 0000406F 488B4528                	mov rax, PARAM(1)	; param s2
  6234 00004073 50                      	push rax
  6235                                  	; preparing a non-tail-call
  6236 00004074 488B4520                	mov rax, PARAM(0)	; param s1
  6237 00004078 50                      	push rax
  6238 00004079 6A01                    	push 1	; arg count
  6239 0000407B 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  6240 00004083 803805                  	cmp byte [rax], T_undefined
  6241 00004086 0F84E8550000            	je L_error_fvar_undefined
  6242 0000408C 803804                  	cmp byte [rax], T_closure
  6243 0000408F 0F8563560000            	jne L_error_non_closure
  6244 00004095 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6245 00004098 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6246 0000409B 50                      	push rax
  6247 0000409C 6A02                    	push 2	; arg count
  6248 0000409E 488B4510                	mov rax, ENV
  6249 000040A2 488B00                  	mov rax, qword [rax + 8 * 0]
  6250 000040A5 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  6251 000040A9 488B00                  	mov rax, qword [rax]
  6252 000040AC 803804                  	cmp byte [rax], T_closure
  6253 000040AF 0F8543560000            	jne L_error_non_closure
  6254 000040B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6255 000040B8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6256 000040BB 50                      	push rax
  6257                                  	; preparing a non-tail-call
  6258 000040BC 488B4520                	mov rax, PARAM(0)	; param s1
  6259 000040C0 50                      	push rax
  6260 000040C1 6A01                    	push 1	; arg count
  6261 000040C3 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  6262 000040CB 803805                  	cmp byte [rax], T_undefined
  6263 000040CE 0F84A0550000            	je L_error_fvar_undefined
  6264 000040D4 803804                  	cmp byte [rax], T_closure
  6265 000040D7 0F851B560000            	jne L_error_non_closure
  6266 000040DD FF7001                  	push SOB_CLOSURE_ENV(rax)
  6267 000040E0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6268 000040E3 50                      	push rax
  6269 000040E4 6A02                    	push 2	; arg count
  6270 000040E6 488B0425[C80E0000]      	mov rax, qword [free_var_71]	; free var cons
  6271 000040EE 803805                  	cmp byte [rax], T_undefined
  6272 000040F1 0F847D550000            	je L_error_fvar_undefined
  6273 000040F7 803804                  	cmp byte [rax], T_closure
  6274 000040FA 0F85F8550000            	jne L_error_non_closure
  6275 00004100 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6276 00004103 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6277                                  .L_if_end_0012:
  6278 00004106 C9                      	leave
  6279 00004107 C22000                  	ret AND_KILL_FRAME(2)
  6280                                  .L_lambda_simple_end_002f:	; new closure is in rax
  6281 0000410A 50                      	push rax
  6282 0000410B 488B4528                	mov rax, PARAM(1)	; param run-2
  6283 0000410F 8F00                    	pop qword [rax]
  6284 00004111 48B8-                   	mov rax, sob_void
  6284 00004113 [0000000000000000] 
  6285                                  
  6286 0000411B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6287 00004120 E87C560000              	call malloc
  6288 00004125 50                      	push rax
  6289 00004126 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
  6290 0000412A 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
  6291 0000412E BF10000000              	mov rdi, 8 * 2	; new rib for optional parameters
  6292 00004133 E869560000              	call malloc
  6293 00004138 50                      	push rax
  6294 00004139 BF10000000              	mov rdi, 8 * 2	; extended env
  6295 0000413E E85E560000              	call malloc
  6296 00004143 488B7D10                	mov rdi, ENV
  6297 00004147 BE00000000              	mov rsi, 0
  6298 0000414C BA01000000              	mov rdx, 1
  6299                                  .L_lambda_opt_code_0013:	; ext_env[i + 1] <-- env[i] copy all the array
  6300 00004151 4883FE01                	cmp rsi, 1
  6301 00004155 7410                    	je .L_lambda_opt_end_0019
  6302 00004157 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6303 0000415B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6304 0000415F 48FFC6                  	inc rsi
  6305 00004162 48FFC2                  	inc rdx
  6306 00004165 EBEA                    	jmp .L_lambda_opt_code_0013
  6307                                  .L_lambda_opt_end_0019:
  6308 00004167 5B                      	pop rbx
  6309 00004168 BE00000000              	mov rsi, 0
  6310                                  .L_lambda_opt_code_0014:	; copy params
  6311 0000416D 4883FE02                	cmp rsi, 2
  6312 00004171 740E                    	je .L_lambda_opt_end_001a
  6313 00004173 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6314 00004178 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6315 0000417C 48FFC6                  	inc rsi
  6316 0000417F EBEC                    	jmp .L_lambda_opt_code_0014
  6317                                  .L_lambda_opt_end_001a:
  6318 00004181 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6319 00004184 4889C3                  	mov rbx, rax
  6320 00004187 58                      	pop rax
  6321 00004188 C60004                  	mov byte [rax], T_closure
  6322 0000418B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6323 0000418F 48C74009[9C410000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0015
  6324 00004197 E9B3010000              	jmp .L_lambda_opt_end_001b
  6325                                  .L_lambda_opt_code_0015:	; lambda-opt body
  6326 0000419C 48837C241000            	cmp qword [rsp + 8 * 2], 0
  6327 000041A2 7D0B                    	jge .L_lambda_simple_arity_check_ok_0036
  6328 000041A4 FF742410                	push qword [rsp + 8 * 2]
  6329 000041A8 6A00                    	push 0
  6330 000041AA E9AB550000              	jmp L_error_incorrect_arity_simple
  6331                                  .L_lambda_simple_arity_check_ok_0036:
  6332 000041AF 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  6333 000041B4 4983E800                	sub r8, 0
  6334 000041B8 4C89C3                  	mov rbx,r8
  6335 000041BB 4983F800                	cmp r8, 0
  6336 000041BF 7535                    	jne .L_lambda_opt_params_loop_0015
  6337 000041C1 488B542410              	mov rdx, qword [rsp + 8 * 2]
  6338 000041C6 4883C203                	add rdx , 3
  6339 000041CA 4883EC08                	sub rsp , 8
  6340 000041CE 4889E1                  	mov rcx, rsp
  6341                                  .L_lambda_opt_stack_adjusted_000d: ;pushing down the stack of the current function
  6342 000041D1 488B5908                	mov rbx, qword [rcx + 8 * 1]
  6343 000041D5 488919                  	mov qword[rcx] , rbx
  6344 000041D8 4883C108                	add rcx , 8
  6345 000041DC 48FFCA                  	dec rdx
  6346 000041DF 4883FA00                	cmp rdx, 0
  6347 000041E3 75EC                    	jne .L_lambda_opt_stack_adjusted_000d
  6348 000041E5 48FF442410              	inc qword [rsp + 8 * 2]
  6349 000041EA 48C701[01000000]        	mov qword [rcx], sob_nil 
  6350 000041F1 E9A8000000              	jmp .L_lambda_opt_end_001c
  6351                                  	.L_lambda_opt_params_loop_0015:
  6352 000041F6 488B542410              	mov rdx, qword [rsp + 8*2]
  6353 000041FB 488D4CD410              	lea rcx, [rsp + 8*2 + 8*rdx]
  6354 00004200 4C89C2                  	mov rdx, r8
  6355 00004203 49B9-                   	mov r9, sob_nil
  6355 00004205 [0100000000000000] 
  6356 0000420D 4989C9                  	mov r9, rcx
  6357                                  	.L_lambda_opt_params_loop_0013: ;loop for copying the opt into list
  6358 00004210 BF11000000              	mov rdi, (1 + 8 + 8)
  6359 00004215 E887550000              	call malloc
  6360 0000421A C60021                  	mov byte[rax], T_pair
  6361 0000421D 488B19                  	mov rbx, qword [rcx]
  6362 00004220 48895801                	mov SOB_PAIR_CAR(rax), rbx
  6363 00004224 4C894809                	mov SOB_PAIR_CDR(rax), r9
  6364 00004228 4989C1                  	mov r9, rax
  6365 0000422B 48FFCA                  	dec rdx
  6366 0000422E 4883E908                	sub rcx, 8
  6367 00004232 4883FA00                	cmp rdx, 0
  6368 00004236 75D8                    	jne .L_lambda_opt_params_loop_0013
  6369 00004238 488B542410              	mov rdx, qword [rsp + 8 * 2]
  6370 0000423D 4889E0                  	mov rax, rsp
  6371 00004240 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
  6372 00004245 4989DC                  	mov r12 , rbx
  6373 00004248 4C89C1                  	mov rcx, r8
  6374 0000424B 48FFC9                  	dec rcx
  6375 0000424E 4883C203                	add rdx, 3
  6376 00004252 4829CA                  	sub rdx,rcx
  6377 00004255 48C1E103                	shl rcx, 3
  6378                                  	.L_lambda_opt_stack_adjusted_000e:
  6379 00004259 4883FA00                	cmp rdx, 0
  6380 0000425D 7419                    	je .L_lambda_opt_params_end_001a
  6381 0000425F 4889D8                  	mov rax, rbx
  6382 00004262 4829C8                  	sub rax, rcx
  6383 00004265 488B30                  	mov rsi, qword [rax]
  6384 00004268 488933                  	mov [rbx], rsi
  6385 0000426B 4883EB08                	sub rbx, 8
  6386 0000426F 48FFCA                  	dec rdx
  6387 00004272 4883FA00                	cmp rdx, 0
  6388 00004276 75E1                    	jne .L_lambda_opt_stack_adjusted_000e
  6389                                  	.L_lambda_opt_params_end_001a:
  6390 00004278 4801CC                  	add rsp,rcx
  6391 0000427B BB00000000              	mov rbx, 0
  6392 00004280 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  6393 00004285 4883C303                	add rbx,3
  6394 00004289 4C29C3                  	sub rbx,r8
  6395 0000428C 48C1E303                	shl rbx, 3
  6396 00004290 4801E3                  	add rbx, rsp
  6397 00004293 4C890B                  	mov qword[rbx] , r9
  6398 00004296 49FFC8                  	dec r8
  6399 00004299 4C29442410              	sub qword [rsp + 8 * 2], r8
  6400                                  	.L_lambda_opt_end_001c:
  6401 0000429E C8000000                	enter 0, 0
  6402                                  	; preparing a non-tail-call
  6403 000042A2 488B4520                	mov rax, PARAM(0)	; param s
  6404 000042A6 50                      	push rax
  6405 000042A7 6A01                    	push 1	; arg count
  6406 000042A9 488B0425[C70F0000]      	mov rax, qword [free_var_86]	; free var null?
  6407 000042B1 803805                  	cmp byte [rax], T_undefined
  6408 000042B4 0F84BA530000            	je L_error_fvar_undefined
  6409 000042BA 803804                  	cmp byte [rax], T_closure
  6410 000042BD 0F8535540000            	jne L_error_non_closure
  6411 000042C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6412 000042C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6413 000042C9 483D[02000000]          	cmp rax, sob_boolean_false
  6414 000042CF 740C                    	je .L_if_else_000e
  6415 000042D1 48B8-                   	mov rax, L_constants + 1
  6415 000042D3 [0100000000000000] 
  6416 000042DB EB6E                    	jmp .L_if_end_0013
  6417                                  .L_if_else_000e:
  6418                                  	; preparing a non-tail-call
  6419                                  	; preparing a non-tail-call
  6420 000042DD 488B4520                	mov rax, PARAM(0)	; param s
  6421 000042E1 50                      	push rax
  6422 000042E2 6A01                    	push 1	; arg count
  6423 000042E4 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  6424 000042EC 803805                  	cmp byte [rax], T_undefined
  6425 000042EF 0F847F530000            	je L_error_fvar_undefined
  6426 000042F5 803804                  	cmp byte [rax], T_closure
  6427 000042F8 0F85FA530000            	jne L_error_non_closure
  6428 000042FE FF7001                  	push SOB_CLOSURE_ENV(rax)
  6429 00004301 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6430 00004304 50                      	push rax
  6431                                  	; preparing a non-tail-call
  6432 00004305 488B4520                	mov rax, PARAM(0)	; param s
  6433 00004309 50                      	push rax
  6434 0000430A 6A01                    	push 1	; arg count
  6435 0000430C 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  6436 00004314 803805                  	cmp byte [rax], T_undefined
  6437 00004317 0F8457530000            	je L_error_fvar_undefined
  6438 0000431D 803804                  	cmp byte [rax], T_closure
  6439 00004320 0F85D2530000            	jne L_error_non_closure
  6440 00004326 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6441 00004329 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6442 0000432C 50                      	push rax
  6443 0000432D 6A02                    	push 2	; arg count
  6444 0000432F 488B4510                	mov rax, ENV
  6445 00004333 488B00                  	mov rax, qword [rax + 8 * 0]
  6446 00004336 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  6447 00004339 488B00                  	mov rax, qword [rax]
  6448 0000433C 803804                  	cmp byte [rax], T_closure
  6449 0000433F 0F85B3530000            	jne L_error_non_closure
  6450 00004345 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6451 00004348 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6452                                  .L_if_end_0013:
  6453                                  	LEAVE
    49 0000434B C9                  <1>  leave
  6454 0000434C C21800                  	ret AND_KILL_FRAME(1)
  6455                                  .L_lambda_opt_end_001b:
  6456 0000434F C9                      	leave
  6457 00004350 C22000                  	ret AND_KILL_FRAME(2)
  6458                                  .L_lambda_simple_end_002d:	; new closure is in rax
  6459 00004353 803804                  	cmp byte [rax], T_closure
  6460 00004356 0F859C530000            	jne L_error_non_closure
  6461 0000435C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6462 0000435F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6463 00004362 48890425[200C0000]      	mov qword [free_var_31], rax
  6464 0000436A 48B8-                   	mov rax, sob_void
  6464 0000436C [0000000000000000] 
  6465                                  
  6466 00004374 4889C7                  	mov rdi, rax
  6467 00004377 E87A560000              	call print_sexpr_if_not_void
  6468                                  	; preparing a non-tail-call
  6469 0000437C 48B8-                   	mov rax, L_constants + 1993
  6469 0000437E [C907000000000000] 
  6470 00004386 50                      	push rax
  6471 00004387 6A01                    	push 1	; arg count
  6472 00004389 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6473 0000438E E80E540000              	call malloc
  6474 00004393 50                      	push rax
  6475 00004394 BF00000000              	mov rdi, 8 * 0	; new rib
  6476 00004399 E803540000              	call malloc
  6477 0000439E 50                      	push rax
  6478 0000439F BF08000000              	mov rdi, 8 * 1	; extended env
  6479 000043A4 E8F8530000              	call malloc
  6480 000043A9 488B7D10                	mov rdi, ENV
  6481 000043AD BE00000000              	mov rsi, 0
  6482 000043B2 BA01000000              	mov rdx, 1
  6483                                  .L_lambda_simple_env_loop_0030:	; ext_env[i + 1] <-- env[i]
  6484 000043B7 4883FE00                	cmp rsi, 0
  6485 000043BB 7410                    	je .L_lambda_simple_env_end_0030
  6486 000043BD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6487 000043C1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6488 000043C5 48FFC6                  	inc rsi
  6489 000043C8 48FFC2                  	inc rdx
  6490 000043CB EBEA                    	jmp .L_lambda_simple_env_loop_0030
  6491                                  .L_lambda_simple_env_end_0030:
  6492 000043CD 5B                      	pop rbx
  6493 000043CE BE00000000              	mov rsi, 0
  6494                                  .L_lambda_simple_params_loop_0030:	; copy params
  6495 000043D3 4883FE00                	cmp rsi, 0
  6496 000043D7 740E                    	je .L_lambda_simple_params_end_0030
  6497 000043D9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6498 000043DE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6499 000043E2 48FFC6                  	inc rsi
  6500 000043E5 EBEC                    	jmp .L_lambda_simple_params_loop_0030
  6501                                  .L_lambda_simple_params_end_0030:
  6502 000043E7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6503 000043EA 4889C3                  	mov rbx, rax
  6504 000043ED 58                      	pop rax
  6505 000043EE C60004                  	mov byte [rax], T_closure
  6506 000043F1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6507 000043F5 48C74009[02440000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0030
  6508 000043FD E9A4030000              	jmp .L_lambda_simple_end_0030
  6509                                  .L_lambda_simple_code_0030:	; lambda-simple body
  6510 00004402 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6511 00004408 740B                    	je .L_lambda_simple_arity_check_ok_0037
  6512 0000440A FF742410                	push qword [rsp + 8 * 2]
  6513 0000440E 6A01                    	push 1
  6514 00004410 E945530000              	jmp L_error_incorrect_arity_simple
  6515                                  .L_lambda_simple_arity_check_ok_0037:
  6516 00004415 C8000000                	enter 0, 0
  6517 00004419 488B5D20                	 mov rbx, qword [rbp + 8 * (4 +0)]
  6518 0000441D BF08000000              	mov rdi, 8
  6519 00004422 E87A530000              	call malloc
  6520 00004427 488918                  	mov qword [rax], rbx
  6521 0000442A 488903                  	mov qword [rbx], rax
  6522 0000442D 48B8-                   	mov rax, sob_void
  6522 0000442F [0000000000000000] 
  6523                                  
  6524 00004437 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6525 0000443C E860530000              	call malloc
  6526 00004441 50                      	push rax
  6527 00004442 BF08000000              	mov rdi, 8 * 1	; new rib
  6528 00004447 E855530000              	call malloc
  6529 0000444C 50                      	push rax
  6530 0000444D BF10000000              	mov rdi, 8 * 2	; extended env
  6531 00004452 E84A530000              	call malloc
  6532 00004457 488B7D10                	mov rdi, ENV
  6533 0000445B BE00000000              	mov rsi, 0
  6534 00004460 BA01000000              	mov rdx, 1
  6535                                  .L_lambda_simple_env_loop_0031:	; ext_env[i + 1] <-- env[i]
  6536 00004465 4883FE01                	cmp rsi, 1
  6537 00004469 7410                    	je .L_lambda_simple_env_end_0031
  6538 0000446B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6539 0000446F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6540 00004473 48FFC6                  	inc rsi
  6541 00004476 48FFC2                  	inc rdx
  6542 00004479 EBEA                    	jmp .L_lambda_simple_env_loop_0031
  6543                                  .L_lambda_simple_env_end_0031:
  6544 0000447B 5B                      	pop rbx
  6545 0000447C BE00000000              	mov rsi, 0
  6546                                  .L_lambda_simple_params_loop_0031:	; copy params
  6547 00004481 4883FE01                	cmp rsi, 1
  6548 00004485 740E                    	je .L_lambda_simple_params_end_0031
  6549 00004487 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6550 0000448C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6551 00004490 48FFC6                  	inc rsi
  6552 00004493 EBEC                    	jmp .L_lambda_simple_params_loop_0031
  6553                                  .L_lambda_simple_params_end_0031:
  6554 00004495 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6555 00004498 4889C3                  	mov rbx, rax
  6556 0000449B 58                      	pop rax
  6557 0000449C C60004                  	mov byte [rax], T_closure
  6558 0000449F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6559 000044A3 48C74009[B0440000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0031
  6560 000044AB E929010000              	jmp .L_lambda_simple_end_0031
  6561                                  .L_lambda_simple_code_0031:	; lambda-simple body
  6562 000044B0 48837C241003            	cmp qword [rsp + 8 * 2], 3
  6563 000044B6 740B                    	je .L_lambda_simple_arity_check_ok_0038
  6564 000044B8 FF742410                	push qword [rsp + 8 * 2]
  6565 000044BC 6A03                    	push 3
  6566 000044BE E997520000              	jmp L_error_incorrect_arity_simple
  6567                                  .L_lambda_simple_arity_check_ok_0038:
  6568 000044C3 C8000000                	enter 0, 0
  6569                                  	; preparing a non-tail-call
  6570 000044C7 488B4530                	mov rax, PARAM(2)	; param ss
  6571 000044CB 50                      	push rax
  6572 000044CC 488B0425[C70F0000]      	mov rax, qword [free_var_86]	; free var null?
  6573 000044D4 803805                  	cmp byte [rax], T_undefined
  6574 000044D7 0F8497510000            	je L_error_fvar_undefined
  6575 000044DD 50                      	push rax
  6576 000044DE 6A02                    	push 2	; arg count
  6577 000044E0 488B0425[D80F0000]      	mov rax, qword [free_var_87]	; free var ormap
  6578 000044E8 803805                  	cmp byte [rax], T_undefined
  6579 000044EB 0F8483510000            	je L_error_fvar_undefined
  6580 000044F1 803804                  	cmp byte [rax], T_closure
  6581 000044F4 0F85FE510000            	jne L_error_non_closure
  6582 000044FA FF7001                  	push SOB_CLOSURE_ENV(rax)
  6583 000044FD FF5009                  	call SOB_CLOSURE_CODE(rax)
  6584 00004500 483D[02000000]          	cmp rax, sob_boolean_false
  6585 00004506 7409                    	je .L_if_else_000f
  6586 00004508 488B4528                	mov rax, PARAM(1)	; param unit
  6587 0000450C E9C4000000              	jmp .L_if_end_0014
  6588                                  .L_if_else_000f:
  6589                                  	; preparing a non-tail-call
  6590                                  	; preparing a non-tail-call
  6591 00004511 488B4530                	mov rax, PARAM(2)	; param ss
  6592 00004515 50                      	push rax
  6593 00004516 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  6594 0000451E 803805                  	cmp byte [rax], T_undefined
  6595 00004521 0F844D510000            	je L_error_fvar_undefined
  6596 00004527 50                      	push rax
  6597 00004528 6A02                    	push 2	; arg count
  6598 0000452A 488B0425[A50F0000]      	mov rax, qword [free_var_84]	; free var map
  6599 00004532 803805                  	cmp byte [rax], T_undefined
  6600 00004535 0F8439510000            	je L_error_fvar_undefined
  6601 0000453B 803804                  	cmp byte [rax], T_closure
  6602 0000453E 0F85B4510000            	jne L_error_non_closure
  6603 00004544 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6604 00004547 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6605 0000454A 50                      	push rax
  6606                                  	; preparing a non-tail-call
  6607                                  	; preparing a non-tail-call
  6608 0000454B 488B4530                	mov rax, PARAM(2)	; param ss
  6609 0000454F 50                      	push rax
  6610 00004550 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  6611 00004558 803805                  	cmp byte [rax], T_undefined
  6612 0000455B 0F8413510000            	je L_error_fvar_undefined
  6613 00004561 50                      	push rax
  6614 00004562 6A02                    	push 2	; arg count
  6615 00004564 488B0425[A50F0000]      	mov rax, qword [free_var_84]	; free var map
  6616 0000456C 803805                  	cmp byte [rax], T_undefined
  6617 0000456F 0F84FF500000            	je L_error_fvar_undefined
  6618 00004575 803804                  	cmp byte [rax], T_closure
  6619 00004578 0F857A510000            	jne L_error_non_closure
  6620 0000457E FF7001                  	push SOB_CLOSURE_ENV(rax)
  6621 00004581 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6622 00004584 50                      	push rax
  6623 00004585 488B4528                	mov rax, PARAM(1)	; param unit
  6624 00004589 50                      	push rax
  6625 0000458A 488B4520                	mov rax, PARAM(0)	; param f
  6626 0000458E 50                      	push rax
  6627 0000458F 6A03                    	push 3	; arg count
  6628 00004591 488B0425[310C0000]      	mov rax, qword [free_var_32]	; free var apply
  6629 00004599 803805                  	cmp byte [rax], T_undefined
  6630 0000459C 0F84D2500000            	je L_error_fvar_undefined
  6631 000045A2 803804                  	cmp byte [rax], T_closure
  6632 000045A5 0F854D510000            	jne L_error_non_closure
  6633 000045AB FF7001                  	push SOB_CLOSURE_ENV(rax)
  6634 000045AE FF5009                  	call SOB_CLOSURE_CODE(rax)
  6635 000045B1 50                      	push rax
  6636 000045B2 488B4520                	mov rax, PARAM(0)	; param f
  6637 000045B6 50                      	push rax
  6638 000045B7 6A03                    	push 3	; arg count
  6639 000045B9 488B4510                	mov rax, ENV
  6640 000045BD 488B00                  	mov rax, qword [rax + 8 * 0]
  6641 000045C0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  6642 000045C3 488B00                  	mov rax, qword [rax]
  6643 000045C6 803804                  	cmp byte [rax], T_closure
  6644 000045C9 0F8529510000            	jne L_error_non_closure
  6645 000045CF FF7001                  	push SOB_CLOSURE_ENV(rax)
  6646 000045D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6647                                  .L_if_end_0014:
  6648 000045D5 C9                      	leave
  6649 000045D6 C22800                  	ret AND_KILL_FRAME(3)
  6650                                  .L_lambda_simple_end_0031:	; new closure is in rax
  6651 000045D9 50                      	push rax
  6652 000045DA 488B4520                	mov rax, PARAM(0)	; param run
  6653 000045DE 8F00                    	pop qword [rax]
  6654 000045E0 48B8-                   	mov rax, sob_void
  6654 000045E2 [0000000000000000] 
  6655                                  
  6656 000045EA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6657 000045EF E8AD510000              	call malloc
  6658 000045F4 50                      	push rax
  6659 000045F5 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
  6660 000045F9 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
  6661 000045FD BF08000000              	mov rdi, 8 * 1	; new rib for optional parameters
  6662 00004602 E89A510000              	call malloc
  6663 00004607 50                      	push rax
  6664 00004608 BF10000000              	mov rdi, 8 * 2	; extended env
  6665 0000460D E88F510000              	call malloc
  6666 00004612 488B7D10                	mov rdi, ENV
  6667 00004616 BE00000000              	mov rsi, 0
  6668 0000461B BA01000000              	mov rdx, 1
  6669                                  .L_lambda_opt_code_0016:	; ext_env[i + 1] <-- env[i] copy all the array
  6670 00004620 4883FE01                	cmp rsi, 1
  6671 00004624 7410                    	je .L_lambda_opt_end_001d
  6672 00004626 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6673 0000462A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6674 0000462E 48FFC6                  	inc rsi
  6675 00004631 48FFC2                  	inc rdx
  6676 00004634 EBEA                    	jmp .L_lambda_opt_code_0016
  6677                                  .L_lambda_opt_end_001d:
  6678 00004636 5B                      	pop rbx
  6679 00004637 BE00000000              	mov rsi, 0
  6680                                  .L_lambda_opt_code_0017:	; copy params
  6681 0000463C 4883FE01                	cmp rsi, 1
  6682 00004640 740E                    	je .L_lambda_opt_end_001e
  6683 00004642 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6684 00004647 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6685 0000464B 48FFC6                  	inc rsi
  6686 0000464E EBEC                    	jmp .L_lambda_opt_code_0017
  6687                                  .L_lambda_opt_end_001e:
  6688 00004650 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6689 00004653 4889C3                  	mov rbx, rax
  6690 00004656 58                      	pop rax
  6691 00004657 C60004                  	mov byte [rax], T_closure
  6692 0000465A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6693 0000465E 48C74009[6B460000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0018
  6694 00004666 E937010000              	jmp .L_lambda_opt_end_001f
  6695                                  .L_lambda_opt_code_0018:	; lambda-opt body
  6696 0000466B 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6697 00004671 7D0B                    	jge .L_lambda_simple_arity_check_ok_0039
  6698 00004673 FF742410                	push qword [rsp + 8 * 2]
  6699 00004677 6A02                    	push 2
  6700 00004679 E9DC500000              	jmp L_error_incorrect_arity_simple
  6701                                  .L_lambda_simple_arity_check_ok_0039:
  6702 0000467E 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  6703 00004683 4983E802                	sub r8, 2
  6704 00004687 4C89C3                  	mov rbx,r8
  6705 0000468A 4983F800                	cmp r8, 0
  6706 0000468E 7535                    	jne .L_lambda_opt_params_loop_0018
  6707 00004690 488B542410              	mov rdx, qword [rsp + 8 * 2]
  6708 00004695 4883C203                	add rdx , 3
  6709 00004699 4883EC08                	sub rsp , 8
  6710 0000469D 4889E1                  	mov rcx, rsp
  6711                                  .L_lambda_opt_stack_adjusted_000f: ;pushing down the stack of the current function
  6712 000046A0 488B5908                	mov rbx, qword [rcx + 8 * 1]
  6713 000046A4 488919                  	mov qword[rcx] , rbx
  6714 000046A7 4883C108                	add rcx , 8
  6715 000046AB 48FFCA                  	dec rdx
  6716 000046AE 4883FA00                	cmp rdx, 0
  6717 000046B2 75EC                    	jne .L_lambda_opt_stack_adjusted_000f
  6718 000046B4 48FF442410              	inc qword [rsp + 8 * 2]
  6719 000046B9 48C701[01000000]        	mov qword [rcx], sob_nil 
  6720 000046C0 E9A8000000              	jmp .L_lambda_opt_end_0020
  6721                                  	.L_lambda_opt_params_loop_0018:
  6722 000046C5 488B542410              	mov rdx, qword [rsp + 8*2]
  6723 000046CA 488D4CD410              	lea rcx, [rsp + 8*2 + 8*rdx]
  6724 000046CF 4C89C2                  	mov rdx, r8
  6725 000046D2 49B9-                   	mov r9, sob_nil
  6725 000046D4 [0100000000000000] 
  6726 000046DC 4989C9                  	mov r9, rcx
  6727                                  	.L_lambda_opt_params_loop_0016: ;loop for copying the opt into list
  6728 000046DF BF11000000              	mov rdi, (1 + 8 + 8)
  6729 000046E4 E8B8500000              	call malloc
  6730 000046E9 C60021                  	mov byte[rax], T_pair
  6731 000046EC 488B19                  	mov rbx, qword [rcx]
  6732 000046EF 48895801                	mov SOB_PAIR_CAR(rax), rbx
  6733 000046F3 4C894809                	mov SOB_PAIR_CDR(rax), r9
  6734 000046F7 4989C1                  	mov r9, rax
  6735 000046FA 48FFCA                  	dec rdx
  6736 000046FD 4883E908                	sub rcx, 8
  6737 00004701 4883FA00                	cmp rdx, 0
  6738 00004705 75D8                    	jne .L_lambda_opt_params_loop_0016
  6739 00004707 488B542410              	mov rdx, qword [rsp + 8 * 2]
  6740 0000470C 4889E0                  	mov rax, rsp
  6741 0000470F 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
  6742 00004714 4989DC                  	mov r12 , rbx
  6743 00004717 4C89C1                  	mov rcx, r8
  6744 0000471A 48FFC9                  	dec rcx
  6745 0000471D 4883C203                	add rdx, 3
  6746 00004721 4829CA                  	sub rdx,rcx
  6747 00004724 48C1E103                	shl rcx, 3
  6748                                  	.L_lambda_opt_stack_adjusted_0010:
  6749 00004728 4883FA00                	cmp rdx, 0
  6750 0000472C 7419                    	je .L_lambda_opt_params_end_001e
  6751 0000472E 4889D8                  	mov rax, rbx
  6752 00004731 4829C8                  	sub rax, rcx
  6753 00004734 488B30                  	mov rsi, qword [rax]
  6754 00004737 488933                  	mov [rbx], rsi
  6755 0000473A 4883EB08                	sub rbx, 8
  6756 0000473E 48FFCA                  	dec rdx
  6757 00004741 4883FA00                	cmp rdx, 0
  6758 00004745 75E1                    	jne .L_lambda_opt_stack_adjusted_0010
  6759                                  	.L_lambda_opt_params_end_001e:
  6760 00004747 4801CC                  	add rsp,rcx
  6761 0000474A BB02000000              	mov rbx, 2
  6762 0000474F 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  6763 00004754 4883C303                	add rbx,3
  6764 00004758 4C29C3                  	sub rbx,r8
  6765 0000475B 48C1E303                	shl rbx, 3
  6766 0000475F 4801E3                  	add rbx, rsp
  6767 00004762 4C890B                  	mov qword[rbx] , r9
  6768 00004765 49FFC8                  	dec r8
  6769 00004768 4C29442410              	sub qword [rsp + 8 * 2], r8
  6770                                  	.L_lambda_opt_end_0020:
  6771 0000476D C8000000                	enter 0, 0
  6772                                  	; preparing a non-tail-call
  6773 00004771 488B4530                	mov rax, PARAM(2)	; param ss
  6774 00004775 50                      	push rax
  6775 00004776 488B4528                	mov rax, PARAM(1)	; param unit
  6776 0000477A 50                      	push rax
  6777 0000477B 488B4520                	mov rax, PARAM(0)	; param f
  6778 0000477F 50                      	push rax
  6779 00004780 6A03                    	push 3	; arg count
  6780 00004782 488B4510                	mov rax, ENV
  6781 00004786 488B00                  	mov rax, qword [rax + 8 * 0]
  6782 00004789 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  6783 0000478C 488B00                  	mov rax, qword [rax]
  6784 0000478F 803804                  	cmp byte [rax], T_closure
  6785 00004792 0F85604F0000            	jne L_error_non_closure
  6786 00004798 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6787 0000479B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6788                                  	LEAVE
    49 0000479E C9                  <1>  leave
  6789 0000479F C22800                  	ret AND_KILL_FRAME(3)
  6790                                  .L_lambda_opt_end_001f:
  6791 000047A2 C9                      	leave
  6792 000047A3 C21800                  	ret AND_KILL_FRAME(1)
  6793                                  .L_lambda_simple_end_0030:	; new closure is in rax
  6794 000047A6 803804                  	cmp byte [rax], T_closure
  6795 000047A9 0F85494F0000            	jne L_error_non_closure
  6796 000047AF FF7001                  	push SOB_CLOSURE_ENV(rax)
  6797 000047B2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6798 000047B5 48890425[FB0E0000]      	mov qword [free_var_74], rax
  6799 000047BD 48B8-                   	mov rax, sob_void
  6799 000047BF [0000000000000000] 
  6800                                  
  6801 000047C7 4889C7                  	mov rdi, rax
  6802 000047CA E827520000              	call print_sexpr_if_not_void
  6803                                  	; preparing a non-tail-call
  6804 000047CF 48B8-                   	mov rax, L_constants + 1993
  6804 000047D1 [C907000000000000] 
  6805 000047D9 50                      	push rax
  6806 000047DA 6A01                    	push 1	; arg count
  6807 000047DC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6808 000047E1 E8BB4F0000              	call malloc
  6809 000047E6 50                      	push rax
  6810 000047E7 BF00000000              	mov rdi, 8 * 0	; new rib
  6811 000047EC E8B04F0000              	call malloc
  6812 000047F1 50                      	push rax
  6813 000047F2 BF08000000              	mov rdi, 8 * 1	; extended env
  6814 000047F7 E8A54F0000              	call malloc
  6815 000047FC 488B7D10                	mov rdi, ENV
  6816 00004800 BE00000000              	mov rsi, 0
  6817 00004805 BA01000000              	mov rdx, 1
  6818                                  .L_lambda_simple_env_loop_0032:	; ext_env[i + 1] <-- env[i]
  6819 0000480A 4883FE00                	cmp rsi, 0
  6820 0000480E 7410                    	je .L_lambda_simple_env_end_0032
  6821 00004810 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6822 00004814 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6823 00004818 48FFC6                  	inc rsi
  6824 0000481B 48FFC2                  	inc rdx
  6825 0000481E EBEA                    	jmp .L_lambda_simple_env_loop_0032
  6826                                  .L_lambda_simple_env_end_0032:
  6827 00004820 5B                      	pop rbx
  6828 00004821 BE00000000              	mov rsi, 0
  6829                                  .L_lambda_simple_params_loop_0032:	; copy params
  6830 00004826 4883FE00                	cmp rsi, 0
  6831 0000482A 740E                    	je .L_lambda_simple_params_end_0032
  6832 0000482C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6833 00004831 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6834 00004835 48FFC6                  	inc rsi
  6835 00004838 EBEC                    	jmp .L_lambda_simple_params_loop_0032
  6836                                  .L_lambda_simple_params_end_0032:
  6837 0000483A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6838 0000483D 4889C3                  	mov rbx, rax
  6839 00004840 58                      	pop rax
  6840 00004841 C60004                  	mov byte [rax], T_closure
  6841 00004844 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6842 00004848 48C74009[55480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0032
  6843 00004850 E9F5030000              	jmp .L_lambda_simple_end_0032
  6844                                  .L_lambda_simple_code_0032:	; lambda-simple body
  6845 00004855 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6846 0000485B 740B                    	je .L_lambda_simple_arity_check_ok_003a
  6847 0000485D FF742410                	push qword [rsp + 8 * 2]
  6848 00004861 6A01                    	push 1
  6849 00004863 E9F24E0000              	jmp L_error_incorrect_arity_simple
  6850                                  .L_lambda_simple_arity_check_ok_003a:
  6851 00004868 C8000000                	enter 0, 0
  6852 0000486C 488B5D20                	 mov rbx, qword [rbp + 8 * (4 +0)]
  6853 00004870 BF08000000              	mov rdi, 8
  6854 00004875 E8274F0000              	call malloc
  6855 0000487A 488918                  	mov qword [rax], rbx
  6856 0000487D 488903                  	mov qword [rbx], rax
  6857 00004880 48B8-                   	mov rax, sob_void
  6857 00004882 [0000000000000000] 
  6858                                  
  6859 0000488A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6860 0000488F E80D4F0000              	call malloc
  6861 00004894 50                      	push rax
  6862 00004895 BF08000000              	mov rdi, 8 * 1	; new rib
  6863 0000489A E8024F0000              	call malloc
  6864 0000489F 50                      	push rax
  6865 000048A0 BF10000000              	mov rdi, 8 * 2	; extended env
  6866 000048A5 E8F74E0000              	call malloc
  6867 000048AA 488B7D10                	mov rdi, ENV
  6868 000048AE BE00000000              	mov rsi, 0
  6869 000048B3 BA01000000              	mov rdx, 1
  6870                                  .L_lambda_simple_env_loop_0033:	; ext_env[i + 1] <-- env[i]
  6871 000048B8 4883FE01                	cmp rsi, 1
  6872 000048BC 7410                    	je .L_lambda_simple_env_end_0033
  6873 000048BE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6874 000048C2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6875 000048C6 48FFC6                  	inc rsi
  6876 000048C9 48FFC2                  	inc rdx
  6877 000048CC EBEA                    	jmp .L_lambda_simple_env_loop_0033
  6878                                  .L_lambda_simple_env_end_0033:
  6879 000048CE 5B                      	pop rbx
  6880 000048CF BE00000000              	mov rsi, 0
  6881                                  .L_lambda_simple_params_loop_0033:	; copy params
  6882 000048D4 4883FE01                	cmp rsi, 1
  6883 000048D8 740E                    	je .L_lambda_simple_params_end_0033
  6884 000048DA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6885 000048DF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6886 000048E3 48FFC6                  	inc rsi
  6887 000048E6 EBEC                    	jmp .L_lambda_simple_params_loop_0033
  6888                                  .L_lambda_simple_params_end_0033:
  6889 000048E8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6890 000048EB 4889C3                  	mov rbx, rax
  6891 000048EE 58                      	pop rax
  6892 000048EF C60004                  	mov byte [rax], T_closure
  6893 000048F2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6894 000048F6 48C74009[03490000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0033
  6895 000048FE E97A010000              	jmp .L_lambda_simple_end_0033
  6896                                  .L_lambda_simple_code_0033:	; lambda-simple body
  6897 00004903 48837C241003            	cmp qword [rsp + 8 * 2], 3
  6898 00004909 740B                    	je .L_lambda_simple_arity_check_ok_003b
  6899 0000490B FF742410                	push qword [rsp + 8 * 2]
  6900 0000490F 6A03                    	push 3
  6901 00004911 E9444E0000              	jmp L_error_incorrect_arity_simple
  6902                                  .L_lambda_simple_arity_check_ok_003b:
  6903 00004916 C8000000                	enter 0, 0
  6904                                  	; preparing a non-tail-call
  6905 0000491A 488B4530                	mov rax, PARAM(2)	; param ss
  6906 0000491E 50                      	push rax
  6907 0000491F 488B0425[C70F0000]      	mov rax, qword [free_var_86]	; free var null?
  6908 00004927 803805                  	cmp byte [rax], T_undefined
  6909 0000492A 0F84444D0000            	je L_error_fvar_undefined
  6910 00004930 50                      	push rax
  6911 00004931 6A02                    	push 2	; arg count
  6912 00004933 488B0425[D80F0000]      	mov rax, qword [free_var_87]	; free var ormap
  6913 0000493B 803805                  	cmp byte [rax], T_undefined
  6914 0000493E 0F84304D0000            	je L_error_fvar_undefined
  6915 00004944 803804                  	cmp byte [rax], T_closure
  6916 00004947 0F85AB4D0000            	jne L_error_non_closure
  6917 0000494D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6918 00004950 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6919 00004953 483D[02000000]          	cmp rax, sob_boolean_false
  6920 00004959 7409                    	je .L_if_else_0010
  6921 0000495B 488B4528                	mov rax, PARAM(1)	; param unit
  6922 0000495F E915010000              	jmp .L_if_end_0015
  6923                                  .L_if_else_0010:
  6924                                  	; preparing a non-tail-call
  6925                                  	; preparing a non-tail-call
  6926                                  	; preparing a non-tail-call
  6927 00004964 48B8-                   	mov rax, L_constants + 1
  6927 00004966 [0100000000000000] 
  6928 0000496E 50                      	push rax
  6929                                  	; preparing a non-tail-call
  6930                                  	; preparing a non-tail-call
  6931 0000496F 488B4530                	mov rax, PARAM(2)	; param ss
  6932 00004973 50                      	push rax
  6933 00004974 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
  6934 0000497C 803805                  	cmp byte [rax], T_undefined
  6935 0000497F 0F84EF4C0000            	je L_error_fvar_undefined
  6936 00004985 50                      	push rax
  6937 00004986 6A02                    	push 2	; arg count
  6938 00004988 488B0425[A50F0000]      	mov rax, qword [free_var_84]	; free var map
  6939 00004990 803805                  	cmp byte [rax], T_undefined
  6940 00004993 0F84DB4C0000            	je L_error_fvar_undefined
  6941 00004999 803804                  	cmp byte [rax], T_closure
  6942 0000499C 0F85564D0000            	jne L_error_non_closure
  6943 000049A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6944 000049A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6945 000049A8 50                      	push rax
  6946 000049A9 488B4528                	mov rax, PARAM(1)	; param unit
  6947 000049AD 50                      	push rax
  6948 000049AE 488B4520                	mov rax, PARAM(0)	; param f
  6949 000049B2 50                      	push rax
  6950 000049B3 6A03                    	push 3	; arg count
  6951 000049B5 488B4510                	mov rax, ENV
  6952 000049B9 488B00                  	mov rax, qword [rax + 8 * 0]
  6953 000049BC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  6954 000049BF 488B00                  	mov rax, qword [rax]
  6955 000049C2 803804                  	cmp byte [rax], T_closure
  6956 000049C5 0F852D4D0000            	jne L_error_non_closure
  6957 000049CB FF7001                  	push SOB_CLOSURE_ENV(rax)
  6958 000049CE FF5009                  	call SOB_CLOSURE_CODE(rax)
  6959 000049D1 50                      	push rax
  6960 000049D2 6A02                    	push 2	; arg count
  6961 000049D4 488B0425[C80E0000]      	mov rax, qword [free_var_71]	; free var cons
  6962 000049DC 803805                  	cmp byte [rax], T_undefined
  6963 000049DF 0F848F4C0000            	je L_error_fvar_undefined
  6964 000049E5 803804                  	cmp byte [rax], T_closure
  6965 000049E8 0F850A4D0000            	jne L_error_non_closure
  6966 000049EE FF7001                  	push SOB_CLOSURE_ENV(rax)
  6967 000049F1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6968 000049F4 50                      	push rax
  6969                                  	; preparing a non-tail-call
  6970 000049F5 488B4530                	mov rax, PARAM(2)	; param ss
  6971 000049F9 50                      	push rax
  6972 000049FA 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
  6973 00004A02 803805                  	cmp byte [rax], T_undefined
  6974 00004A05 0F84694C0000            	je L_error_fvar_undefined
  6975 00004A0B 50                      	push rax
  6976 00004A0C 6A02                    	push 2	; arg count
  6977 00004A0E 488B0425[A50F0000]      	mov rax, qword [free_var_84]	; free var map
  6978 00004A16 803805                  	cmp byte [rax], T_undefined
  6979 00004A19 0F84554C0000            	je L_error_fvar_undefined
  6980 00004A1F 803804                  	cmp byte [rax], T_closure
  6981 00004A22 0F85D04C0000            	jne L_error_non_closure
  6982 00004A28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6983 00004A2B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6984 00004A2E 50                      	push rax
  6985 00004A2F 6A02                    	push 2	; arg count
  6986 00004A31 488B0425[200C0000]      	mov rax, qword [free_var_31]	; free var append
  6987 00004A39 803805                  	cmp byte [rax], T_undefined
  6988 00004A3C 0F84324C0000            	je L_error_fvar_undefined
  6989 00004A42 803804                  	cmp byte [rax], T_closure
  6990 00004A45 0F85AD4C0000            	jne L_error_non_closure
  6991 00004A4B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6992 00004A4E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6993 00004A51 50                      	push rax
  6994 00004A52 488B4520                	mov rax, PARAM(0)	; param f
  6995 00004A56 50                      	push rax
  6996 00004A57 6A02                    	push 2	; arg count
  6997 00004A59 488B0425[310C0000]      	mov rax, qword [free_var_32]	; free var apply
  6998 00004A61 803805                  	cmp byte [rax], T_undefined
  6999 00004A64 0F840A4C0000            	je L_error_fvar_undefined
  7000 00004A6A 803804                  	cmp byte [rax], T_closure
  7001 00004A6D 0F85854C0000            	jne L_error_non_closure
  7002 00004A73 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7003 00004A76 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7004                                  .L_if_end_0015:
  7005 00004A79 C9                      	leave
  7006 00004A7A C22800                  	ret AND_KILL_FRAME(3)
  7007                                  .L_lambda_simple_end_0033:	; new closure is in rax
  7008 00004A7D 50                      	push rax
  7009 00004A7E 488B4520                	mov rax, PARAM(0)	; param run
  7010 00004A82 8F00                    	pop qword [rax]
  7011 00004A84 48B8-                   	mov rax, sob_void
  7011 00004A86 [0000000000000000] 
  7012                                  
  7013 00004A8E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7014 00004A93 E8094D0000              	call malloc
  7015 00004A98 50                      	push rax
  7016 00004A99 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
  7017 00004A9D 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
  7018 00004AA1 BF08000000              	mov rdi, 8 * 1	; new rib for optional parameters
  7019 00004AA6 E8F64C0000              	call malloc
  7020 00004AAB 50                      	push rax
  7021 00004AAC BF10000000              	mov rdi, 8 * 2	; extended env
  7022 00004AB1 E8EB4C0000              	call malloc
  7023 00004AB6 488B7D10                	mov rdi, ENV
  7024 00004ABA BE00000000              	mov rsi, 0
  7025 00004ABF BA01000000              	mov rdx, 1
  7026                                  .L_lambda_opt_code_0019:	; ext_env[i + 1] <-- env[i] copy all the array
  7027 00004AC4 4883FE01                	cmp rsi, 1
  7028 00004AC8 7410                    	je .L_lambda_opt_end_0021
  7029 00004ACA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7030 00004ACE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7031 00004AD2 48FFC6                  	inc rsi
  7032 00004AD5 48FFC2                  	inc rdx
  7033 00004AD8 EBEA                    	jmp .L_lambda_opt_code_0019
  7034                                  .L_lambda_opt_end_0021:
  7035 00004ADA 5B                      	pop rbx
  7036 00004ADB BE00000000              	mov rsi, 0
  7037                                  .L_lambda_opt_code_001a:	; copy params
  7038 00004AE0 4883FE01                	cmp rsi, 1
  7039 00004AE4 740E                    	je .L_lambda_opt_end_0022
  7040 00004AE6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7041 00004AEB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7042 00004AEF 48FFC6                  	inc rsi
  7043 00004AF2 EBEC                    	jmp .L_lambda_opt_code_001a
  7044                                  .L_lambda_opt_end_0022:
  7045 00004AF4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7046 00004AF7 4889C3                  	mov rbx, rax
  7047 00004AFA 58                      	pop rax
  7048 00004AFB C60004                  	mov byte [rax], T_closure
  7049 00004AFE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7050 00004B02 48C74009[0F4B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001b
  7051 00004B0A E937010000              	jmp .L_lambda_opt_end_0023
  7052                                  .L_lambda_opt_code_001b:	; lambda-opt body
  7053 00004B0F 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7054 00004B15 7D0B                    	jge .L_lambda_simple_arity_check_ok_003c
  7055 00004B17 FF742410                	push qword [rsp + 8 * 2]
  7056 00004B1B 6A02                    	push 2
  7057 00004B1D E9384C0000              	jmp L_error_incorrect_arity_simple
  7058                                  .L_lambda_simple_arity_check_ok_003c:
  7059 00004B22 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  7060 00004B27 4983E802                	sub r8, 2
  7061 00004B2B 4C89C3                  	mov rbx,r8
  7062 00004B2E 4983F800                	cmp r8, 0
  7063 00004B32 7535                    	jne .L_lambda_opt_params_loop_001b
  7064 00004B34 488B542410              	mov rdx, qword [rsp + 8 * 2]
  7065 00004B39 4883C203                	add rdx , 3
  7066 00004B3D 4883EC08                	sub rsp , 8
  7067 00004B41 4889E1                  	mov rcx, rsp
  7068                                  .L_lambda_opt_stack_adjusted_0011: ;pushing down the stack of the current function
  7069 00004B44 488B5908                	mov rbx, qword [rcx + 8 * 1]
  7070 00004B48 488919                  	mov qword[rcx] , rbx
  7071 00004B4B 4883C108                	add rcx , 8
  7072 00004B4F 48FFCA                  	dec rdx
  7073 00004B52 4883FA00                	cmp rdx, 0
  7074 00004B56 75EC                    	jne .L_lambda_opt_stack_adjusted_0011
  7075 00004B58 48FF442410              	inc qword [rsp + 8 * 2]
  7076 00004B5D 48C701[01000000]        	mov qword [rcx], sob_nil 
  7077 00004B64 E9A8000000              	jmp .L_lambda_opt_end_0024
  7078                                  	.L_lambda_opt_params_loop_001b:
  7079 00004B69 488B542410              	mov rdx, qword [rsp + 8*2]
  7080 00004B6E 488D4CD410              	lea rcx, [rsp + 8*2 + 8*rdx]
  7081 00004B73 4C89C2                  	mov rdx, r8
  7082 00004B76 49B9-                   	mov r9, sob_nil
  7082 00004B78 [0100000000000000] 
  7083 00004B80 4989C9                  	mov r9, rcx
  7084                                  	.L_lambda_opt_params_loop_0019: ;loop for copying the opt into list
  7085 00004B83 BF11000000              	mov rdi, (1 + 8 + 8)
  7086 00004B88 E8144C0000              	call malloc
  7087 00004B8D C60021                  	mov byte[rax], T_pair
  7088 00004B90 488B19                  	mov rbx, qword [rcx]
  7089 00004B93 48895801                	mov SOB_PAIR_CAR(rax), rbx
  7090 00004B97 4C894809                	mov SOB_PAIR_CDR(rax), r9
  7091 00004B9B 4989C1                  	mov r9, rax
  7092 00004B9E 48FFCA                  	dec rdx
  7093 00004BA1 4883E908                	sub rcx, 8
  7094 00004BA5 4883FA00                	cmp rdx, 0
  7095 00004BA9 75D8                    	jne .L_lambda_opt_params_loop_0019
  7096 00004BAB 488B542410              	mov rdx, qword [rsp + 8 * 2]
  7097 00004BB0 4889E0                  	mov rax, rsp
  7098 00004BB3 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
  7099 00004BB8 4989DC                  	mov r12 , rbx
  7100 00004BBB 4C89C1                  	mov rcx, r8
  7101 00004BBE 48FFC9                  	dec rcx
  7102 00004BC1 4883C203                	add rdx, 3
  7103 00004BC5 4829CA                  	sub rdx,rcx
  7104 00004BC8 48C1E103                	shl rcx, 3
  7105                                  	.L_lambda_opt_stack_adjusted_0012:
  7106 00004BCC 4883FA00                	cmp rdx, 0
  7107 00004BD0 7419                    	je .L_lambda_opt_params_end_0022
  7108 00004BD2 4889D8                  	mov rax, rbx
  7109 00004BD5 4829C8                  	sub rax, rcx
  7110 00004BD8 488B30                  	mov rsi, qword [rax]
  7111 00004BDB 488933                  	mov [rbx], rsi
  7112 00004BDE 4883EB08                	sub rbx, 8
  7113 00004BE2 48FFCA                  	dec rdx
  7114 00004BE5 4883FA00                	cmp rdx, 0
  7115 00004BE9 75E1                    	jne .L_lambda_opt_stack_adjusted_0012
  7116                                  	.L_lambda_opt_params_end_0022:
  7117 00004BEB 4801CC                  	add rsp,rcx
  7118 00004BEE BB02000000              	mov rbx, 2
  7119 00004BF3 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  7120 00004BF8 4883C303                	add rbx,3
  7121 00004BFC 4C29C3                  	sub rbx,r8
  7122 00004BFF 48C1E303                	shl rbx, 3
  7123 00004C03 4801E3                  	add rbx, rsp
  7124 00004C06 4C890B                  	mov qword[rbx] , r9
  7125 00004C09 49FFC8                  	dec r8
  7126 00004C0C 4C29442410              	sub qword [rsp + 8 * 2], r8
  7127                                  	.L_lambda_opt_end_0024:
  7128 00004C11 C8000000                	enter 0, 0
  7129                                  	; preparing a non-tail-call
  7130 00004C15 488B4530                	mov rax, PARAM(2)	; param ss
  7131 00004C19 50                      	push rax
  7132 00004C1A 488B4528                	mov rax, PARAM(1)	; param unit
  7133 00004C1E 50                      	push rax
  7134 00004C1F 488B4520                	mov rax, PARAM(0)	; param f
  7135 00004C23 50                      	push rax
  7136 00004C24 6A03                    	push 3	; arg count
  7137 00004C26 488B4510                	mov rax, ENV
  7138 00004C2A 488B00                  	mov rax, qword [rax + 8 * 0]
  7139 00004C2D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  7140 00004C30 488B00                  	mov rax, qword [rax]
  7141 00004C33 803804                  	cmp byte [rax], T_closure
  7142 00004C36 0F85BC4A0000            	jne L_error_non_closure
  7143 00004C3C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7144 00004C3F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7145                                  	LEAVE
    49 00004C42 C9                  <1>  leave
  7146 00004C43 C22800                  	ret AND_KILL_FRAME(3)
  7147                                  .L_lambda_opt_end_0023:
  7148 00004C46 C9                      	leave
  7149 00004C47 C21800                  	ret AND_KILL_FRAME(1)
  7150                                  .L_lambda_simple_end_0032:	; new closure is in rax
  7151 00004C4A 803804                  	cmp byte [rax], T_closure
  7152 00004C4D 0F85A54A0000            	jne L_error_non_closure
  7153 00004C53 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7154 00004C56 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7155 00004C59 48890425[0C0F0000]      	mov qword [free_var_75], rax
  7156 00004C61 48B8-                   	mov rax, sob_void
  7156 00004C63 [0000000000000000] 
  7157                                  
  7158 00004C6B 4889C7                  	mov rdi, rax
  7159 00004C6E E8834D0000              	call print_sexpr_if_not_void
  7160                                  	; preparing a non-tail-call
  7161 00004C73 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7162 00004C78 E8244B0000              	call malloc
  7163 00004C7D 50                      	push rax
  7164 00004C7E BF00000000              	mov rdi, 8 * 0	; new rib
  7165 00004C83 E8194B0000              	call malloc
  7166 00004C88 50                      	push rax
  7167 00004C89 BF08000000              	mov rdi, 8 * 1	; extended env
  7168 00004C8E E80E4B0000              	call malloc
  7169 00004C93 488B7D10                	mov rdi, ENV
  7170 00004C97 BE00000000              	mov rsi, 0
  7171 00004C9C BA01000000              	mov rdx, 1
  7172                                  .L_lambda_simple_env_loop_0034:	; ext_env[i + 1] <-- env[i]
  7173 00004CA1 4883FE00                	cmp rsi, 0
  7174 00004CA5 7410                    	je .L_lambda_simple_env_end_0034
  7175 00004CA7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7176 00004CAB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7177 00004CAF 48FFC6                  	inc rsi
  7178 00004CB2 48FFC2                  	inc rdx
  7179 00004CB5 EBEA                    	jmp .L_lambda_simple_env_loop_0034
  7180                                  .L_lambda_simple_env_end_0034:
  7181 00004CB7 5B                      	pop rbx
  7182 00004CB8 BE00000000              	mov rsi, 0
  7183                                  .L_lambda_simple_params_loop_0034:	; copy params
  7184 00004CBD 4883FE00                	cmp rsi, 0
  7185 00004CC1 740E                    	je .L_lambda_simple_params_end_0034
  7186 00004CC3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7187 00004CC8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7188 00004CCC 48FFC6                  	inc rsi
  7189 00004CCF EBEC                    	jmp .L_lambda_simple_params_loop_0034
  7190                                  .L_lambda_simple_params_end_0034:
  7191 00004CD1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7192 00004CD4 4889C3                  	mov rbx, rax
  7193 00004CD7 58                      	pop rax
  7194 00004CD8 C60004                  	mov byte [rax], T_closure
  7195 00004CDB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7196 00004CDF 48C74009[E94C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0034
  7197 00004CE7 EB53                    	jmp .L_lambda_simple_end_0034
  7198                                  .L_lambda_simple_code_0034:	; lambda-simple body
  7199 00004CE9 48837C241000            	cmp qword [rsp + 8 * 2], 0
  7200 00004CEF 740B                    	je .L_lambda_simple_arity_check_ok_003d
  7201 00004CF1 FF742410                	push qword [rsp + 8 * 2]
  7202 00004CF5 6A00                    	push 0
  7203 00004CF7 E95E4A0000              	jmp L_error_incorrect_arity_simple
  7204                                  .L_lambda_simple_arity_check_ok_003d:
  7205 00004CFC C8000000                	enter 0, 0
  7206                                  	; preparing a non-tail-call
  7207 00004D00 48B8-                   	mov rax, L_constants + 2187
  7207 00004D02 [8B08000000000000] 
  7208 00004D0A 50                      	push rax
  7209 00004D0B 48B8-                   	mov rax, L_constants + 2178
  7209 00004D0D [8208000000000000] 
  7210 00004D15 50                      	push rax
  7211 00004D16 6A02                    	push 2	; arg count
  7212 00004D18 488B0425[D90E0000]      	mov rax, qword [free_var_72]	; free var error
  7213 00004D20 803805                  	cmp byte [rax], T_undefined
  7214 00004D23 0F844B490000            	je L_error_fvar_undefined
  7215 00004D29 803804                  	cmp byte [rax], T_closure
  7216 00004D2C 0F85C6490000            	jne L_error_non_closure
  7217 00004D32 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7218 00004D35 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7219 00004D38 C9                      	leave
  7220 00004D39 C21000                  	ret AND_KILL_FRAME(0)
  7221                                  .L_lambda_simple_end_0034:	; new closure is in rax
  7222 00004D3C 50                      	push rax
  7223 00004D3D 6A01                    	push 1	; arg count
  7224 00004D3F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7225 00004D44 E8584A0000              	call malloc
  7226 00004D49 50                      	push rax
  7227 00004D4A BF00000000              	mov rdi, 8 * 0	; new rib
  7228 00004D4F E84D4A0000              	call malloc
  7229 00004D54 50                      	push rax
  7230 00004D55 BF08000000              	mov rdi, 8 * 1	; extended env
  7231 00004D5A E8424A0000              	call malloc
  7232 00004D5F 488B7D10                	mov rdi, ENV
  7233 00004D63 BE00000000              	mov rsi, 0
  7234 00004D68 BA01000000              	mov rdx, 1
  7235                                  .L_lambda_simple_env_loop_0035:	; ext_env[i + 1] <-- env[i]
  7236 00004D6D 4883FE00                	cmp rsi, 0
  7237 00004D71 7410                    	je .L_lambda_simple_env_end_0035
  7238 00004D73 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7239 00004D77 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7240 00004D7B 48FFC6                  	inc rsi
  7241 00004D7E 48FFC2                  	inc rdx
  7242 00004D81 EBEA                    	jmp .L_lambda_simple_env_loop_0035
  7243                                  .L_lambda_simple_env_end_0035:
  7244 00004D83 5B                      	pop rbx
  7245 00004D84 BE00000000              	mov rsi, 0
  7246                                  .L_lambda_simple_params_loop_0035:	; copy params
  7247 00004D89 4883FE00                	cmp rsi, 0
  7248 00004D8D 740E                    	je .L_lambda_simple_params_end_0035
  7249 00004D8F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7250 00004D94 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7251 00004D98 48FFC6                  	inc rsi
  7252 00004D9B EBEC                    	jmp .L_lambda_simple_params_loop_0035
  7253                                  .L_lambda_simple_params_end_0035:
  7254 00004D9D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7255 00004DA0 4889C3                  	mov rbx, rax
  7256 00004DA3 58                      	pop rax
  7257 00004DA4 C60004                  	mov byte [rax], T_closure
  7258 00004DA7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7259 00004DAB 48C74009[B84D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0035
  7260 00004DB3 E954080000              	jmp .L_lambda_simple_end_0035
  7261                                  .L_lambda_simple_code_0035:	; lambda-simple body
  7262 00004DB8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7263 00004DBE 740B                    	je .L_lambda_simple_arity_check_ok_003e
  7264 00004DC0 FF742410                	push qword [rsp + 8 * 2]
  7265 00004DC4 6A01                    	push 1
  7266 00004DC6 E98F490000              	jmp L_error_incorrect_arity_simple
  7267                                  .L_lambda_simple_arity_check_ok_003e:
  7268 00004DCB C8000000                	enter 0, 0
  7269                                  	; preparing a non-tail-call
  7270 00004DCF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7271 00004DD4 E8C8490000              	call malloc
  7272 00004DD9 50                      	push rax
  7273 00004DDA BF08000000              	mov rdi, 8 * 1	; new rib
  7274 00004DDF E8BD490000              	call malloc
  7275 00004DE4 50                      	push rax
  7276 00004DE5 BF10000000              	mov rdi, 8 * 2	; extended env
  7277 00004DEA E8B2490000              	call malloc
  7278 00004DEF 488B7D10                	mov rdi, ENV
  7279 00004DF3 BE00000000              	mov rsi, 0
  7280 00004DF8 BA01000000              	mov rdx, 1
  7281                                  .L_lambda_simple_env_loop_0036:	; ext_env[i + 1] <-- env[i]
  7282 00004DFD 4883FE01                	cmp rsi, 1
  7283 00004E01 7410                    	je .L_lambda_simple_env_end_0036
  7284 00004E03 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7285 00004E07 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7286 00004E0B 48FFC6                  	inc rsi
  7287 00004E0E 48FFC2                  	inc rdx
  7288 00004E11 EBEA                    	jmp .L_lambda_simple_env_loop_0036
  7289                                  .L_lambda_simple_env_end_0036:
  7290 00004E13 5B                      	pop rbx
  7291 00004E14 BE00000000              	mov rsi, 0
  7292                                  .L_lambda_simple_params_loop_0036:	; copy params
  7293 00004E19 4883FE01                	cmp rsi, 1
  7294 00004E1D 740E                    	je .L_lambda_simple_params_end_0036
  7295 00004E1F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7296 00004E24 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7297 00004E28 48FFC6                  	inc rsi
  7298 00004E2B EBEC                    	jmp .L_lambda_simple_params_loop_0036
  7299                                  .L_lambda_simple_params_end_0036:
  7300 00004E2D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7301 00004E30 4889C3                  	mov rbx, rax
  7302 00004E33 58                      	pop rax
  7303 00004E34 C60004                  	mov byte [rax], T_closure
  7304 00004E37 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7305 00004E3B 48C74009[484E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0036
  7306 00004E43 E952050000              	jmp .L_lambda_simple_end_0036
  7307                                  .L_lambda_simple_code_0036:	; lambda-simple body
  7308 00004E48 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7309 00004E4E 740B                    	je .L_lambda_simple_arity_check_ok_003f
  7310 00004E50 FF742410                	push qword [rsp + 8 * 2]
  7311 00004E54 6A02                    	push 2
  7312 00004E56 E9FF480000              	jmp L_error_incorrect_arity_simple
  7313                                  .L_lambda_simple_arity_check_ok_003f:
  7314 00004E5B C8000000                	enter 0, 0
  7315                                  	; preparing a non-tail-call
  7316 00004E5F 488B4520                	mov rax, PARAM(0)	; param a
  7317 00004E63 50                      	push rax
  7318 00004E64 6A01                    	push 1	; arg count
  7319 00004E66 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  7320 00004E6E 803805                  	cmp byte [rax], T_undefined
  7321 00004E71 0F84FD470000            	je L_error_fvar_undefined
  7322 00004E77 803804                  	cmp byte [rax], T_closure
  7323 00004E7A 0F8578480000            	jne L_error_non_closure
  7324 00004E80 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7325 00004E83 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7326 00004E86 483D[02000000]          	cmp rax, sob_boolean_false
  7327 00004E8C 0F8483010000            	je .L_if_else_001c
  7328                                  	; preparing a non-tail-call
  7329 00004E92 488B4528                	mov rax, PARAM(1)	; param b
  7330 00004E96 50                      	push rax
  7331 00004E97 6A01                    	push 1	; arg count
  7332 00004E99 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  7333 00004EA1 803805                  	cmp byte [rax], T_undefined
  7334 00004EA4 0F84CA470000            	je L_error_fvar_undefined
  7335 00004EAA 803804                  	cmp byte [rax], T_closure
  7336 00004EAD 0F8545480000            	jne L_error_non_closure
  7337 00004EB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7338 00004EB6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7339 00004EB9 483D[02000000]          	cmp rax, sob_boolean_false
  7340 00004EBF 7431                    	je .L_if_else_0013
  7341                                  	; preparing a non-tail-call
  7342 00004EC1 488B4528                	mov rax, PARAM(1)	; param b
  7343 00004EC5 50                      	push rax
  7344 00004EC6 488B4520                	mov rax, PARAM(0)	; param a
  7345 00004ECA 50                      	push rax
  7346 00004ECB 6A02                    	push 2	; arg count
  7347 00004ECD 488B0425[CC0A0000]      	mov rax, qword [free_var_11]	; free var __bin-add-zz
  7348 00004ED5 803805                  	cmp byte [rax], T_undefined
  7349 00004ED8 0F8496470000            	je L_error_fvar_undefined
  7350 00004EDE 803804                  	cmp byte [rax], T_closure
  7351 00004EE1 0F8511480000            	jne L_error_non_closure
  7352 00004EE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7353 00004EEA FF5009                  	call SOB_CLOSURE_CODE(rax)
  7354 00004EED E91E010000              	jmp .L_if_end_0018
  7355                                  .L_if_else_0013:
  7356                                  	; preparing a non-tail-call
  7357 00004EF2 488B4528                	mov rax, PARAM(1)	; param b
  7358 00004EF6 50                      	push rax
  7359 00004EF7 6A01                    	push 1	; arg count
  7360 00004EF9 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
  7361 00004F01 803805                  	cmp byte [rax], T_undefined
  7362 00004F04 0F846A470000            	je L_error_fvar_undefined
  7363 00004F0A 803804                  	cmp byte [rax], T_closure
  7364 00004F0D 0F85E5470000            	jne L_error_non_closure
  7365 00004F13 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7366 00004F16 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7367 00004F19 483D[02000000]          	cmp rax, sob_boolean_false
  7368 00004F1F 7454                    	je .L_if_else_0012
  7369                                  	; preparing a non-tail-call
  7370 00004F21 488B4528                	mov rax, PARAM(1)	; param b
  7371 00004F25 50                      	push rax
  7372                                  	; preparing a non-tail-call
  7373 00004F26 488B4520                	mov rax, PARAM(0)	; param a
  7374 00004F2A 50                      	push rax
  7375 00004F2B 6A01                    	push 1	; arg count
  7376 00004F2D 488B0425[FE0B0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
  7377 00004F35 803805                  	cmp byte [rax], T_undefined
  7378 00004F38 0F8436470000            	je L_error_fvar_undefined
  7379 00004F3E 803804                  	cmp byte [rax], T_closure
  7380 00004F41 0F85B1470000            	jne L_error_non_closure
  7381 00004F47 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7382 00004F4A FF5009                  	call SOB_CLOSURE_CODE(rax)
  7383 00004F4D 50                      	push rax
  7384 00004F4E 6A02                    	push 2	; arg count
  7385 00004F50 488B0425[AA0A0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
  7386 00004F58 803805                  	cmp byte [rax], T_undefined
  7387 00004F5B 0F8413470000            	je L_error_fvar_undefined
  7388 00004F61 803804                  	cmp byte [rax], T_closure
  7389 00004F64 0F858E470000            	jne L_error_non_closure
  7390 00004F6A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7391 00004F6D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7392 00004F70 E99B000000              	jmp .L_if_end_0017
  7393                                  .L_if_else_0012:
  7394                                  	; preparing a non-tail-call
  7395 00004F75 488B4528                	mov rax, PARAM(1)	; param b
  7396 00004F79 50                      	push rax
  7397 00004F7A 6A01                    	push 1	; arg count
  7398 00004F7C 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
  7399 00004F84 803805                  	cmp byte [rax], T_undefined
  7400 00004F87 0F84E7460000            	je L_error_fvar_undefined
  7401 00004F8D 803804                  	cmp byte [rax], T_closure
  7402 00004F90 0F8562470000            	jne L_error_non_closure
  7403 00004F96 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7404 00004F99 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7405 00004F9C 483D[02000000]          	cmp rax, sob_boolean_false
  7406 00004FA2 7451                    	je .L_if_else_0011
  7407                                  	; preparing a non-tail-call
  7408 00004FA4 488B4528                	mov rax, PARAM(1)	; param b
  7409 00004FA8 50                      	push rax
  7410                                  	; preparing a non-tail-call
  7411 00004FA9 488B4520                	mov rax, PARAM(0)	; param a
  7412 00004FAD 50                      	push rax
  7413 00004FAE 6A01                    	push 1	; arg count
  7414 00004FB0 488B0425[500F0000]      	mov rax, qword [free_var_79]	; free var integer->real
  7415 00004FB8 803805                  	cmp byte [rax], T_undefined
  7416 00004FBB 0F84B3460000            	je L_error_fvar_undefined
  7417 00004FC1 803804                  	cmp byte [rax], T_closure
  7418 00004FC4 0F852E470000            	jne L_error_non_closure
  7419 00004FCA FF7001                  	push SOB_CLOSURE_ENV(rax)
  7420 00004FCD FF5009                  	call SOB_CLOSURE_CODE(rax)
  7421 00004FD0 50                      	push rax
  7422 00004FD1 6A02                    	push 2	; arg count
  7423 00004FD3 488B0425[BB0A0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
  7424 00004FDB 803805                  	cmp byte [rax], T_undefined
  7425 00004FDE 0F8490460000            	je L_error_fvar_undefined
  7426 00004FE4 803804                  	cmp byte [rax], T_closure
  7427 00004FE7 0F850B470000            	jne L_error_non_closure
  7428 00004FED FF7001                  	push SOB_CLOSURE_ENV(rax)
  7429 00004FF0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7430 00004FF3 EB1B                    	jmp .L_if_end_0016
  7431                                  .L_if_else_0011:
  7432                                  	; preparing a non-tail-call
  7433 00004FF5 6A00                    	push 0	; arg count
  7434 00004FF7 488B4510                	mov rax, ENV
  7435 00004FFB 488B00                  	mov rax, qword [rax + 8 * 0]
  7436 00004FFE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  7437 00005001 803804                  	cmp byte [rax], T_closure
  7438 00005004 0F85EE460000            	jne L_error_non_closure
  7439 0000500A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7440 0000500D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7441                                  .L_if_end_0016:
  7442                                  .L_if_end_0017:
  7443                                  .L_if_end_0018:
  7444 00005010 E981030000              	jmp .L_if_end_0021
  7445                                  .L_if_else_001c:
  7446                                  	; preparing a non-tail-call
  7447 00005015 488B4520                	mov rax, PARAM(0)	; param a
  7448 00005019 50                      	push rax
  7449 0000501A 6A01                    	push 1	; arg count
  7450 0000501C 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
  7451 00005024 803805                  	cmp byte [rax], T_undefined
  7452 00005027 0F8447460000            	je L_error_fvar_undefined
  7453 0000502D 803804                  	cmp byte [rax], T_closure
  7454 00005030 0F85C2460000            	jne L_error_non_closure
  7455 00005036 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7456 00005039 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7457 0000503C 483D[02000000]          	cmp rax, sob_boolean_false
  7458 00005042 0F8483010000            	je .L_if_else_001b
  7459                                  	; preparing a non-tail-call
  7460 00005048 488B4528                	mov rax, PARAM(1)	; param b
  7461 0000504C 50                      	push rax
  7462 0000504D 6A01                    	push 1	; arg count
  7463 0000504F 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  7464 00005057 803805                  	cmp byte [rax], T_undefined
  7465 0000505A 0F8414460000            	je L_error_fvar_undefined
  7466 00005060 803804                  	cmp byte [rax], T_closure
  7467 00005063 0F858F460000            	jne L_error_non_closure
  7468 00005069 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7469 0000506C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7470 0000506F 483D[02000000]          	cmp rax, sob_boolean_false
  7471 00005075 7454                    	je .L_if_else_0016
  7472                                  	; preparing a non-tail-call
  7473                                  	; preparing a non-tail-call
  7474 00005077 488B4528                	mov rax, PARAM(1)	; param b
  7475 0000507B 50                      	push rax
  7476 0000507C 6A01                    	push 1	; arg count
  7477 0000507E 488B0425[ED0B0000]      	mov rax, qword [free_var_28]	; free var __bin_integer_to_fraction
  7478 00005086 803805                  	cmp byte [rax], T_undefined
  7479 00005089 0F84E5450000            	je L_error_fvar_undefined
  7480 0000508F 803804                  	cmp byte [rax], T_closure
  7481 00005092 0F8560460000            	jne L_error_non_closure
  7482 00005098 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7483 0000509B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7484 0000509E 50                      	push rax
  7485 0000509F 488B4520                	mov rax, PARAM(0)	; param a
  7486 000050A3 50                      	push rax
  7487 000050A4 6A02                    	push 2	; arg count
  7488 000050A6 488B0425[AA0A0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
  7489 000050AE 803805                  	cmp byte [rax], T_undefined
  7490 000050B1 0F84BD450000            	je L_error_fvar_undefined
  7491 000050B7 803804                  	cmp byte [rax], T_closure
  7492 000050BA 0F8538460000            	jne L_error_non_closure
  7493 000050C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7494 000050C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7495 000050C6 E9FB000000              	jmp .L_if_end_001b
  7496                                  .L_if_else_0016:
  7497                                  	; preparing a non-tail-call
  7498 000050CB 488B4528                	mov rax, PARAM(1)	; param b
  7499 000050CF 50                      	push rax
  7500 000050D0 6A01                    	push 1	; arg count
  7501 000050D2 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
  7502 000050DA 803805                  	cmp byte [rax], T_undefined
  7503 000050DD 0F8491450000            	je L_error_fvar_undefined
  7504 000050E3 803804                  	cmp byte [rax], T_closure
  7505 000050E6 0F850C460000            	jne L_error_non_closure
  7506 000050EC FF7001                  	push SOB_CLOSURE_ENV(rax)
  7507 000050EF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7508 000050F2 483D[02000000]          	cmp rax, sob_boolean_false
  7509 000050F8 7431                    	je .L_if_else_0015
  7510                                  	; preparing a non-tail-call
  7511 000050FA 488B4528                	mov rax, PARAM(1)	; param b
  7512 000050FE 50                      	push rax
  7513 000050FF 488B4520                	mov rax, PARAM(0)	; param a
  7514 00005103 50                      	push rax
  7515 00005104 6A02                    	push 2	; arg count
  7516 00005106 488B0425[AA0A0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
  7517 0000510E 803805                  	cmp byte [rax], T_undefined
  7518 00005111 0F845D450000            	je L_error_fvar_undefined
  7519 00005117 803804                  	cmp byte [rax], T_closure
  7520 0000511A 0F85D8450000            	jne L_error_non_closure
  7521 00005120 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7522 00005123 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7523 00005126 E99B000000              	jmp .L_if_end_001a
  7524                                  .L_if_else_0015:
  7525                                  	; preparing a non-tail-call
  7526 0000512B 488B4528                	mov rax, PARAM(1)	; param b
  7527 0000512F 50                      	push rax
  7528 00005130 6A01                    	push 1	; arg count
  7529 00005132 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
  7530 0000513A 803805                  	cmp byte [rax], T_undefined
  7531 0000513D 0F8431450000            	je L_error_fvar_undefined
  7532 00005143 803804                  	cmp byte [rax], T_closure
  7533 00005146 0F85AC450000            	jne L_error_non_closure
  7534 0000514C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7535 0000514F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7536 00005152 483D[02000000]          	cmp rax, sob_boolean_false
  7537 00005158 7451                    	je .L_if_else_0014
  7538                                  	; preparing a non-tail-call
  7539 0000515A 488B4528                	mov rax, PARAM(1)	; param b
  7540 0000515E 50                      	push rax
  7541                                  	; preparing a non-tail-call
  7542 0000515F 488B4520                	mov rax, PARAM(0)	; param a
  7543 00005163 50                      	push rax
  7544 00005164 6A01                    	push 1	; arg count
  7545 00005166 488B0425[1D0F0000]      	mov rax, qword [free_var_76]	; free var fraction->real
  7546 0000516E 803805                  	cmp byte [rax], T_undefined
  7547 00005171 0F84FD440000            	je L_error_fvar_undefined
  7548 00005177 803804                  	cmp byte [rax], T_closure
  7549 0000517A 0F8578450000            	jne L_error_non_closure
  7550 00005180 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7551 00005183 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7552 00005186 50                      	push rax
  7553 00005187 6A02                    	push 2	; arg count
  7554 00005189 488B0425[BB0A0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
  7555 00005191 803805                  	cmp byte [rax], T_undefined
  7556 00005194 0F84DA440000            	je L_error_fvar_undefined
  7557 0000519A 803804                  	cmp byte [rax], T_closure
  7558 0000519D 0F8555450000            	jne L_error_non_closure
  7559 000051A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7560 000051A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7561 000051A9 EB1B                    	jmp .L_if_end_0019
  7562                                  .L_if_else_0014:
  7563                                  	; preparing a non-tail-call
  7564 000051AB 6A00                    	push 0	; arg count
  7565 000051AD 488B4510                	mov rax, ENV
  7566 000051B1 488B00                  	mov rax, qword [rax + 8 * 0]
  7567 000051B4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  7568 000051B7 803804                  	cmp byte [rax], T_closure
  7569 000051BA 0F8538450000            	jne L_error_non_closure
  7570 000051C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7571 000051C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7572                                  .L_if_end_0019:
  7573                                  .L_if_end_001a:
  7574                                  .L_if_end_001b:
  7575 000051C6 E9CB010000              	jmp .L_if_end_0020
  7576                                  .L_if_else_001b:
  7577                                  	; preparing a non-tail-call
  7578 000051CB 488B4520                	mov rax, PARAM(0)	; param a
  7579 000051CF 50                      	push rax
  7580 000051D0 6A01                    	push 1	; arg count
  7581 000051D2 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
  7582 000051DA 803805                  	cmp byte [rax], T_undefined
  7583 000051DD 0F8491440000            	je L_error_fvar_undefined
  7584 000051E3 803804                  	cmp byte [rax], T_closure
  7585 000051E6 0F850C450000            	jne L_error_non_closure
  7586 000051EC FF7001                  	push SOB_CLOSURE_ENV(rax)
  7587 000051EF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7588 000051F2 483D[02000000]          	cmp rax, sob_boolean_false
  7589 000051F8 0F847D010000            	je .L_if_else_001a
  7590                                  	; preparing a non-tail-call
  7591 000051FE 488B4528                	mov rax, PARAM(1)	; param b
  7592 00005202 50                      	push rax
  7593 00005203 6A01                    	push 1	; arg count
  7594 00005205 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  7595 0000520D 803805                  	cmp byte [rax], T_undefined
  7596 00005210 0F845E440000            	je L_error_fvar_undefined
  7597 00005216 803804                  	cmp byte [rax], T_closure
  7598 00005219 0F85D9440000            	jne L_error_non_closure
  7599 0000521F FF7001                  	push SOB_CLOSURE_ENV(rax)
  7600 00005222 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7601 00005225 483D[02000000]          	cmp rax, sob_boolean_false
  7602 0000522B 7454                    	je .L_if_else_0019
  7603                                  	; preparing a non-tail-call
  7604                                  	; preparing a non-tail-call
  7605 0000522D 488B4528                	mov rax, PARAM(1)	; param b
  7606 00005231 50                      	push rax
  7607 00005232 6A01                    	push 1	; arg count
  7608 00005234 488B0425[500F0000]      	mov rax, qword [free_var_79]	; free var integer->real
  7609 0000523C 803805                  	cmp byte [rax], T_undefined
  7610 0000523F 0F842F440000            	je L_error_fvar_undefined
  7611 00005245 803804                  	cmp byte [rax], T_closure
  7612 00005248 0F85AA440000            	jne L_error_non_closure
  7613 0000524E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7614 00005251 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7615 00005254 50                      	push rax
  7616 00005255 488B4520                	mov rax, PARAM(0)	; param a
  7617 00005259 50                      	push rax
  7618 0000525A 6A02                    	push 2	; arg count
  7619 0000525C 488B0425[BB0A0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
  7620 00005264 803805                  	cmp byte [rax], T_undefined
  7621 00005267 0F8407440000            	je L_error_fvar_undefined
  7622 0000526D 803804                  	cmp byte [rax], T_closure
  7623 00005270 0F8582440000            	jne L_error_non_closure
  7624 00005276 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7625 00005279 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7626 0000527C E9F8000000              	jmp .L_if_end_001e
  7627                                  .L_if_else_0019:
  7628                                  	; preparing a non-tail-call
  7629 00005281 488B4528                	mov rax, PARAM(1)	; param b
  7630 00005285 50                      	push rax
  7631 00005286 6A01                    	push 1	; arg count
  7632 00005288 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
  7633 00005290 803805                  	cmp byte [rax], T_undefined
  7634 00005293 0F84DB430000            	je L_error_fvar_undefined
  7635 00005299 803804                  	cmp byte [rax], T_closure
  7636 0000529C 0F8556440000            	jne L_error_non_closure
  7637 000052A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7638 000052A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7639 000052A8 483D[02000000]          	cmp rax, sob_boolean_false
  7640 000052AE 7451                    	je .L_if_else_0018
  7641                                  	; preparing a non-tail-call
  7642                                  	; preparing a non-tail-call
  7643 000052B0 488B4528                	mov rax, PARAM(1)	; param b
  7644 000052B4 50                      	push rax
  7645 000052B5 6A01                    	push 1	; arg count
  7646 000052B7 488B0425[1D0F0000]      	mov rax, qword [free_var_76]	; free var fraction->real
  7647 000052BF 803805                  	cmp byte [rax], T_undefined
  7648 000052C2 0F84AC430000            	je L_error_fvar_undefined
  7649 000052C8 803804                  	cmp byte [rax], T_closure
  7650 000052CB 0F8527440000            	jne L_error_non_closure
  7651 000052D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7652 000052D4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7653 000052D7 50                      	push rax
  7654 000052D8 488B4520                	mov rax, PARAM(0)	; param a
  7655 000052DC 50                      	push rax
  7656 000052DD 6A02                    	push 2	; arg count
  7657 000052DF 488B0425[BB0A0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
  7658 000052E7 803805                  	cmp byte [rax], T_undefined
  7659 000052EA 0F8484430000            	je L_error_fvar_undefined
  7660 000052F0 803804                  	cmp byte [rax], T_closure
  7661 000052F3 0F85FF430000            	jne L_error_non_closure
  7662 000052F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7663 000052FC FF5009                  	call SOB_CLOSURE_CODE(rax)
  7664 000052FF EB78                    	jmp .L_if_end_001d
  7665                                  .L_if_else_0018:
  7666                                  	; preparing a non-tail-call
  7667 00005301 488B4528                	mov rax, PARAM(1)	; param b
  7668 00005305 50                      	push rax
  7669 00005306 6A01                    	push 1	; arg count
  7670 00005308 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
  7671 00005310 803805                  	cmp byte [rax], T_undefined
  7672 00005313 0F845B430000            	je L_error_fvar_undefined
  7673 00005319 803804                  	cmp byte [rax], T_closure
  7674 0000531C 0F85D6430000            	jne L_error_non_closure
  7675 00005322 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7676 00005325 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7677 00005328 483D[02000000]          	cmp rax, sob_boolean_false
  7678 0000532E 742E                    	je .L_if_else_0017
  7679                                  	; preparing a non-tail-call
  7680 00005330 488B4528                	mov rax, PARAM(1)	; param b
  7681 00005334 50                      	push rax
  7682 00005335 488B4520                	mov rax, PARAM(0)	; param a
  7683 00005339 50                      	push rax
  7684 0000533A 6A02                    	push 2	; arg count
  7685 0000533C 488B0425[BB0A0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
  7686 00005344 803805                  	cmp byte [rax], T_undefined
  7687 00005347 0F8427430000            	je L_error_fvar_undefined
  7688 0000534D 803804                  	cmp byte [rax], T_closure
  7689 00005350 0F85A2430000            	jne L_error_non_closure
  7690 00005356 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7691 00005359 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7692 0000535C EB1B                    	jmp .L_if_end_001c
  7693                                  .L_if_else_0017:
  7694                                  	; preparing a non-tail-call
  7695 0000535E 6A00                    	push 0	; arg count
  7696 00005360 488B4510                	mov rax, ENV
  7697 00005364 488B00                  	mov rax, qword [rax + 8 * 0]
  7698 00005367 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  7699 0000536A 803804                  	cmp byte [rax], T_closure
  7700 0000536D 0F8585430000            	jne L_error_non_closure
  7701 00005373 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7702 00005376 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7703                                  .L_if_end_001c:
  7704                                  .L_if_end_001d:
  7705                                  .L_if_end_001e:
  7706 00005379 EB1B                    	jmp .L_if_end_001f
  7707                                  .L_if_else_001a:
  7708                                  	; preparing a non-tail-call
  7709 0000537B 6A00                    	push 0	; arg count
  7710 0000537D 488B4510                	mov rax, ENV
  7711 00005381 488B00                  	mov rax, qword [rax + 8 * 0]
  7712 00005384 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  7713 00005387 803804                  	cmp byte [rax], T_closure
  7714 0000538A 0F8568430000            	jne L_error_non_closure
  7715 00005390 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7716 00005393 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7717                                  .L_if_end_001f:
  7718                                  .L_if_end_0020:
  7719                                  .L_if_end_0021:
  7720 00005396 C9                      	leave
  7721 00005397 C22000                  	ret AND_KILL_FRAME(2)
  7722                                  .L_lambda_simple_end_0036:	; new closure is in rax
  7723 0000539A 50                      	push rax
  7724 0000539B 6A01                    	push 1	; arg count
  7725 0000539D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7726 000053A2 E8FA430000              	call malloc
  7727 000053A7 50                      	push rax
  7728 000053A8 BF08000000              	mov rdi, 8 * 1	; new rib
  7729 000053AD E8EF430000              	call malloc
  7730 000053B2 50                      	push rax
  7731 000053B3 BF10000000              	mov rdi, 8 * 2	; extended env
  7732 000053B8 E8E4430000              	call malloc
  7733 000053BD 488B7D10                	mov rdi, ENV
  7734 000053C1 BE00000000              	mov rsi, 0
  7735 000053C6 BA01000000              	mov rdx, 1
  7736                                  .L_lambda_simple_env_loop_0037:	; ext_env[i + 1] <-- env[i]
  7737 000053CB 4883FE01                	cmp rsi, 1
  7738 000053CF 7410                    	je .L_lambda_simple_env_end_0037
  7739 000053D1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7740 000053D5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7741 000053D9 48FFC6                  	inc rsi
  7742 000053DC 48FFC2                  	inc rdx
  7743 000053DF EBEA                    	jmp .L_lambda_simple_env_loop_0037
  7744                                  .L_lambda_simple_env_end_0037:
  7745 000053E1 5B                      	pop rbx
  7746 000053E2 BE00000000              	mov rsi, 0
  7747                                  .L_lambda_simple_params_loop_0037:	; copy params
  7748 000053E7 4883FE01                	cmp rsi, 1
  7749 000053EB 740E                    	je .L_lambda_simple_params_end_0037
  7750 000053ED 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7751 000053F2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7752 000053F6 48FFC6                  	inc rsi
  7753 000053F9 EBEC                    	jmp .L_lambda_simple_params_loop_0037
  7754                                  .L_lambda_simple_params_end_0037:
  7755 000053FB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7756 000053FE 4889C3                  	mov rbx, rax
  7757 00005401 58                      	pop rax
  7758 00005402 C60004                  	mov byte [rax], T_closure
  7759 00005405 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7760 00005409 48C74009[16540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0037
  7761 00005411 E9E3010000              	jmp .L_lambda_simple_end_0037
  7762                                  .L_lambda_simple_code_0037:	; lambda-simple body
  7763 00005416 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7764 0000541C 740B                    	je .L_lambda_simple_arity_check_ok_0040
  7765 0000541E FF742410                	push qword [rsp + 8 * 2]
  7766 00005422 6A01                    	push 1
  7767 00005424 E931430000              	jmp L_error_incorrect_arity_simple
  7768                                  .L_lambda_simple_arity_check_ok_0040:
  7769 00005429 C8000000                	enter 0, 0
  7770 0000542D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7771 00005432 E86A430000              	call malloc
  7772 00005437 50                      	push rax
  7773 00005438 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
  7774 0000543C 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
  7775 00005440 BF08000000              	mov rdi, 8 * 1	; new rib for optional parameters
  7776 00005445 E857430000              	call malloc
  7777 0000544A 50                      	push rax
  7778 0000544B BF18000000              	mov rdi, 8 * 3	; extended env
  7779 00005450 E84C430000              	call malloc
  7780 00005455 488B7D10                	mov rdi, ENV
  7781 00005459 BE00000000              	mov rsi, 0
  7782 0000545E BA01000000              	mov rdx, 1
  7783                                  .L_lambda_opt_code_001c:	; ext_env[i + 1] <-- env[i] copy all the array
  7784 00005463 4883FE02                	cmp rsi, 2
  7785 00005467 7410                    	je .L_lambda_opt_end_0025
  7786 00005469 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7787 0000546D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7788 00005471 48FFC6                  	inc rsi
  7789 00005474 48FFC2                  	inc rdx
  7790 00005477 EBEA                    	jmp .L_lambda_opt_code_001c
  7791                                  .L_lambda_opt_end_0025:
  7792 00005479 5B                      	pop rbx
  7793 0000547A BE00000000              	mov rsi, 0
  7794                                  .L_lambda_opt_code_001d:	; copy params
  7795 0000547F 4883FE01                	cmp rsi, 1
  7796 00005483 740E                    	je .L_lambda_opt_end_0026
  7797 00005485 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7798 0000548A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7799 0000548E 48FFC6                  	inc rsi
  7800 00005491 EBEC                    	jmp .L_lambda_opt_code_001d
  7801                                  .L_lambda_opt_end_0026:
  7802 00005493 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7803 00005496 4889C3                  	mov rbx, rax
  7804 00005499 58                      	pop rax
  7805 0000549A C60004                  	mov byte [rax], T_closure
  7806 0000549D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7807 000054A1 48C74009[AE540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001e
  7808 000054A9 E947010000              	jmp .L_lambda_opt_end_0027
  7809                                  .L_lambda_opt_code_001e:	; lambda-opt body
  7810 000054AE 48837C241000            	cmp qword [rsp + 8 * 2], 0
  7811 000054B4 7D0B                    	jge .L_lambda_simple_arity_check_ok_0041
  7812 000054B6 FF742410                	push qword [rsp + 8 * 2]
  7813 000054BA 6A00                    	push 0
  7814 000054BC E999420000              	jmp L_error_incorrect_arity_simple
  7815                                  .L_lambda_simple_arity_check_ok_0041:
  7816 000054C1 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  7817 000054C6 4983E800                	sub r8, 0
  7818 000054CA 4C89C3                  	mov rbx,r8
  7819 000054CD 4983F800                	cmp r8, 0
  7820 000054D1 7535                    	jne .L_lambda_opt_params_loop_001e
  7821 000054D3 488B542410              	mov rdx, qword [rsp + 8 * 2]
  7822 000054D8 4883C203                	add rdx , 3
  7823 000054DC 4883EC08                	sub rsp , 8
  7824 000054E0 4889E1                  	mov rcx, rsp
  7825                                  .L_lambda_opt_stack_adjusted_0013: ;pushing down the stack of the current function
  7826 000054E3 488B5908                	mov rbx, qword [rcx + 8 * 1]
  7827 000054E7 488919                  	mov qword[rcx] , rbx
  7828 000054EA 4883C108                	add rcx , 8
  7829 000054EE 48FFCA                  	dec rdx
  7830 000054F1 4883FA00                	cmp rdx, 0
  7831 000054F5 75EC                    	jne .L_lambda_opt_stack_adjusted_0013
  7832 000054F7 48FF442410              	inc qword [rsp + 8 * 2]
  7833 000054FC 48C701[01000000]        	mov qword [rcx], sob_nil 
  7834 00005503 E9A8000000              	jmp .L_lambda_opt_end_0028
  7835                                  	.L_lambda_opt_params_loop_001e:
  7836 00005508 488B542410              	mov rdx, qword [rsp + 8*2]
  7837 0000550D 488D4CD410              	lea rcx, [rsp + 8*2 + 8*rdx]
  7838 00005512 4C89C2                  	mov rdx, r8
  7839 00005515 49B9-                   	mov r9, sob_nil
  7839 00005517 [0100000000000000] 
  7840 0000551F 4989C9                  	mov r9, rcx
  7841                                  	.L_lambda_opt_params_loop_001c: ;loop for copying the opt into list
  7842 00005522 BF11000000              	mov rdi, (1 + 8 + 8)
  7843 00005527 E875420000              	call malloc
  7844 0000552C C60021                  	mov byte[rax], T_pair
  7845 0000552F 488B19                  	mov rbx, qword [rcx]
  7846 00005532 48895801                	mov SOB_PAIR_CAR(rax), rbx
  7847 00005536 4C894809                	mov SOB_PAIR_CDR(rax), r9
  7848 0000553A 4989C1                  	mov r9, rax
  7849 0000553D 48FFCA                  	dec rdx
  7850 00005540 4883E908                	sub rcx, 8
  7851 00005544 4883FA00                	cmp rdx, 0
  7852 00005548 75D8                    	jne .L_lambda_opt_params_loop_001c
  7853 0000554A 488B542410              	mov rdx, qword [rsp + 8 * 2]
  7854 0000554F 4889E0                  	mov rax, rsp
  7855 00005552 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
  7856 00005557 4989DC                  	mov r12 , rbx
  7857 0000555A 4C89C1                  	mov rcx, r8
  7858 0000555D 48FFC9                  	dec rcx
  7859 00005560 4883C203                	add rdx, 3
  7860 00005564 4829CA                  	sub rdx,rcx
  7861 00005567 48C1E103                	shl rcx, 3
  7862                                  	.L_lambda_opt_stack_adjusted_0014:
  7863 0000556B 4883FA00                	cmp rdx, 0
  7864 0000556F 7419                    	je .L_lambda_opt_params_end_0026
  7865 00005571 4889D8                  	mov rax, rbx
  7866 00005574 4829C8                  	sub rax, rcx
  7867 00005577 488B30                  	mov rsi, qword [rax]
  7868 0000557A 488933                  	mov [rbx], rsi
  7869 0000557D 4883EB08                	sub rbx, 8
  7870 00005581 48FFCA                  	dec rdx
  7871 00005584 4883FA00                	cmp rdx, 0
  7872 00005588 75E1                    	jne .L_lambda_opt_stack_adjusted_0014
  7873                                  	.L_lambda_opt_params_end_0026:
  7874 0000558A 4801CC                  	add rsp,rcx
  7875 0000558D BB00000000              	mov rbx, 0
  7876 00005592 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  7877 00005597 4883C303                	add rbx,3
  7878 0000559B 4C29C3                  	sub rbx,r8
  7879 0000559E 48C1E303                	shl rbx, 3
  7880 000055A2 4801E3                  	add rbx, rsp
  7881 000055A5 4C890B                  	mov qword[rbx] , r9
  7882 000055A8 49FFC8                  	dec r8
  7883 000055AB 4C29442410              	sub qword [rsp + 8 * 2], r8
  7884                                  	.L_lambda_opt_end_0028:
  7885 000055B0 C8000000                	enter 0, 0
  7886                                  	; preparing a non-tail-call
  7887 000055B4 488B4520                	mov rax, PARAM(0)	; param s
  7888 000055B8 50                      	push rax
  7889 000055B9 48B8-                   	mov rax, L_constants + 2135
  7889 000055BB [5708000000000000] 
  7890 000055C3 50                      	push rax
  7891 000055C4 488B4510                	mov rax, ENV
  7892 000055C8 488B00                  	mov rax, qword [rax + 8 * 0]
  7893 000055CB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
  7894 000055CE 50                      	push rax
  7895 000055CF 6A03                    	push 3	; arg count
  7896 000055D1 488B0425[FB0E0000]      	mov rax, qword [free_var_74]	; free var fold-left
  7897 000055D9 803805                  	cmp byte [rax], T_undefined
  7898 000055DC 0F8492400000            	je L_error_fvar_undefined
  7899 000055E2 803804                  	cmp byte [rax], T_closure
  7900 000055E5 0F850D410000            	jne L_error_non_closure
  7901 000055EB FF7001                  	push SOB_CLOSURE_ENV(rax)
  7902 000055EE FF5009                  	call SOB_CLOSURE_CODE(rax)
  7903                                  	LEAVE
    49 000055F1 C9                  <1>  leave
  7904 000055F2 C21800                  	ret AND_KILL_FRAME(1)
  7905                                  .L_lambda_opt_end_0027:
  7906 000055F5 C9                      	leave
  7907 000055F6 C21800                  	ret AND_KILL_FRAME(1)
  7908                                  .L_lambda_simple_end_0037:	; new closure is in rax
  7909 000055F9 803804                  	cmp byte [rax], T_closure
  7910 000055FC 0F85F6400000            	jne L_error_non_closure
  7911 00005602 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7912 00005605 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7913 00005608 C9                      	leave
  7914 00005609 C21800                  	ret AND_KILL_FRAME(1)
  7915                                  .L_lambda_simple_end_0035:	; new closure is in rax
  7916 0000560C 803804                  	cmp byte [rax], T_closure
  7917 0000560F 0F85E3400000            	jne L_error_non_closure
  7918 00005615 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7919 00005618 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7920 0000561B 48890425[220A0000]      	mov qword [free_var_1], rax
  7921 00005623 48B8-                   	mov rax, sob_void
  7921 00005625 [0000000000000000] 
  7922                                  
  7923 0000562D 4889C7                  	mov rdi, rax
  7924 00005630 E8C1430000              	call print_sexpr_if_not_void
  7925                                  	; preparing a non-tail-call
  7926 00005635 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7927 0000563A E862410000              	call malloc
  7928 0000563F 50                      	push rax
  7929 00005640 BF00000000              	mov rdi, 8 * 0	; new rib
  7930 00005645 E857410000              	call malloc
  7931 0000564A 50                      	push rax
  7932 0000564B BF08000000              	mov rdi, 8 * 1	; extended env
  7933 00005650 E84C410000              	call malloc
  7934 00005655 488B7D10                	mov rdi, ENV
  7935 00005659 BE00000000              	mov rsi, 0
  7936 0000565E BA01000000              	mov rdx, 1
  7937                                  .L_lambda_simple_env_loop_0038:	; ext_env[i + 1] <-- env[i]
  7938 00005663 4883FE00                	cmp rsi, 0
  7939 00005667 7410                    	je .L_lambda_simple_env_end_0038
  7940 00005669 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7941 0000566D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7942 00005671 48FFC6                  	inc rsi
  7943 00005674 48FFC2                  	inc rdx
  7944 00005677 EBEA                    	jmp .L_lambda_simple_env_loop_0038
  7945                                  .L_lambda_simple_env_end_0038:
  7946 00005679 5B                      	pop rbx
  7947 0000567A BE00000000              	mov rsi, 0
  7948                                  .L_lambda_simple_params_loop_0038:	; copy params
  7949 0000567F 4883FE00                	cmp rsi, 0
  7950 00005683 740E                    	je .L_lambda_simple_params_end_0038
  7951 00005685 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7952 0000568A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7953 0000568E 48FFC6                  	inc rsi
  7954 00005691 EBEC                    	jmp .L_lambda_simple_params_loop_0038
  7955                                  .L_lambda_simple_params_end_0038:
  7956 00005693 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7957 00005696 4889C3                  	mov rbx, rax
  7958 00005699 58                      	pop rax
  7959 0000569A C60004                  	mov byte [rax], T_closure
  7960 0000569D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7961 000056A1 48C74009[AB560000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0038
  7962 000056A9 EB53                    	jmp .L_lambda_simple_end_0038
  7963                                  .L_lambda_simple_code_0038:	; lambda-simple body
  7964 000056AB 48837C241000            	cmp qword [rsp + 8 * 2], 0
  7965 000056B1 740B                    	je .L_lambda_simple_arity_check_ok_0042
  7966 000056B3 FF742410                	push qword [rsp + 8 * 2]
  7967 000056B7 6A00                    	push 0
  7968 000056B9 E99C400000              	jmp L_error_incorrect_arity_simple
  7969                                  .L_lambda_simple_arity_check_ok_0042:
  7970 000056BE C8000000                	enter 0, 0
  7971                                  	; preparing a non-tail-call
  7972 000056C2 48B8-                   	mov rax, L_constants + 2187
  7972 000056C4 [8B08000000000000] 
  7973 000056CC 50                      	push rax
  7974 000056CD 48B8-                   	mov rax, L_constants + 2251
  7974 000056CF [CB08000000000000] 
  7975 000056D7 50                      	push rax
  7976 000056D8 6A02                    	push 2	; arg count
  7977 000056DA 488B0425[D90E0000]      	mov rax, qword [free_var_72]	; free var error
  7978 000056E2 803805                  	cmp byte [rax], T_undefined
  7979 000056E5 0F84893F0000            	je L_error_fvar_undefined
  7980 000056EB 803804                  	cmp byte [rax], T_closure
  7981 000056EE 0F8504400000            	jne L_error_non_closure
  7982 000056F4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7983 000056F7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7984 000056FA C9                      	leave
  7985 000056FB C21000                  	ret AND_KILL_FRAME(0)
  7986                                  .L_lambda_simple_end_0038:	; new closure is in rax
  7987 000056FE 50                      	push rax
  7988 000056FF 6A01                    	push 1	; arg count
  7989 00005701 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7990 00005706 E896400000              	call malloc
  7991 0000570B 50                      	push rax
  7992 0000570C BF00000000              	mov rdi, 8 * 0	; new rib
  7993 00005711 E88B400000              	call malloc
  7994 00005716 50                      	push rax
  7995 00005717 BF08000000              	mov rdi, 8 * 1	; extended env
  7996 0000571C E880400000              	call malloc
  7997 00005721 488B7D10                	mov rdi, ENV
  7998 00005725 BE00000000              	mov rsi, 0
  7999 0000572A BA01000000              	mov rdx, 1
  8000                                  .L_lambda_simple_env_loop_0039:	; ext_env[i + 1] <-- env[i]
  8001 0000572F 4883FE00                	cmp rsi, 0
  8002 00005733 7410                    	je .L_lambda_simple_env_end_0039
  8003 00005735 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8004 00005739 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8005 0000573D 48FFC6                  	inc rsi
  8006 00005740 48FFC2                  	inc rdx
  8007 00005743 EBEA                    	jmp .L_lambda_simple_env_loop_0039
  8008                                  .L_lambda_simple_env_end_0039:
  8009 00005745 5B                      	pop rbx
  8010 00005746 BE00000000              	mov rsi, 0
  8011                                  .L_lambda_simple_params_loop_0039:	; copy params
  8012 0000574B 4883FE00                	cmp rsi, 0
  8013 0000574F 740E                    	je .L_lambda_simple_params_end_0039
  8014 00005751 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8015 00005756 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8016 0000575A 48FFC6                  	inc rsi
  8017 0000575D EBEC                    	jmp .L_lambda_simple_params_loop_0039
  8018                                  .L_lambda_simple_params_end_0039:
  8019 0000575F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8020 00005762 4889C3                  	mov rbx, rax
  8021 00005765 58                      	pop rax
  8022 00005766 C60004                  	mov byte [rax], T_closure
  8023 00005769 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8024 0000576D 48C74009[7A570000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0039
  8025 00005775 E989090000              	jmp .L_lambda_simple_end_0039
  8026                                  .L_lambda_simple_code_0039:	; lambda-simple body
  8027 0000577A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8028 00005780 740B                    	je .L_lambda_simple_arity_check_ok_0043
  8029 00005782 FF742410                	push qword [rsp + 8 * 2]
  8030 00005786 6A01                    	push 1
  8031 00005788 E9CD3F0000              	jmp L_error_incorrect_arity_simple
  8032                                  .L_lambda_simple_arity_check_ok_0043:
  8033 0000578D C8000000                	enter 0, 0
  8034                                  	; preparing a non-tail-call
  8035 00005791 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8036 00005796 E806400000              	call malloc
  8037 0000579B 50                      	push rax
  8038 0000579C BF08000000              	mov rdi, 8 * 1	; new rib
  8039 000057A1 E8FB3F0000              	call malloc
  8040 000057A6 50                      	push rax
  8041 000057A7 BF10000000              	mov rdi, 8 * 2	; extended env
  8042 000057AC E8F03F0000              	call malloc
  8043 000057B1 488B7D10                	mov rdi, ENV
  8044 000057B5 BE00000000              	mov rsi, 0
  8045 000057BA BA01000000              	mov rdx, 1
  8046                                  .L_lambda_simple_env_loop_003a:	; ext_env[i + 1] <-- env[i]
  8047 000057BF 4883FE01                	cmp rsi, 1
  8048 000057C3 7410                    	je .L_lambda_simple_env_end_003a
  8049 000057C5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8050 000057C9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8051 000057CD 48FFC6                  	inc rsi
  8052 000057D0 48FFC2                  	inc rdx
  8053 000057D3 EBEA                    	jmp .L_lambda_simple_env_loop_003a
  8054                                  .L_lambda_simple_env_end_003a:
  8055 000057D5 5B                      	pop rbx
  8056 000057D6 BE00000000              	mov rsi, 0
  8057                                  .L_lambda_simple_params_loop_003a:	; copy params
  8058 000057DB 4883FE01                	cmp rsi, 1
  8059 000057DF 740E                    	je .L_lambda_simple_params_end_003a
  8060 000057E1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8061 000057E6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8062 000057EA 48FFC6                  	inc rsi
  8063 000057ED EBEC                    	jmp .L_lambda_simple_params_loop_003a
  8064                                  .L_lambda_simple_params_end_003a:
  8065 000057EF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8066 000057F2 4889C3                  	mov rbx, rax
  8067 000057F5 58                      	pop rax
  8068 000057F6 C60004                  	mov byte [rax], T_closure
  8069 000057F9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8070 000057FD 48C74009[0A580000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003a
  8071 00005805 E952050000              	jmp .L_lambda_simple_end_003a
  8072                                  .L_lambda_simple_code_003a:	; lambda-simple body
  8073 0000580A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8074 00005810 740B                    	je .L_lambda_simple_arity_check_ok_0044
  8075 00005812 FF742410                	push qword [rsp + 8 * 2]
  8076 00005816 6A02                    	push 2
  8077 00005818 E93D3F0000              	jmp L_error_incorrect_arity_simple
  8078                                  .L_lambda_simple_arity_check_ok_0044:
  8079 0000581D C8000000                	enter 0, 0
  8080                                  	; preparing a non-tail-call
  8081 00005821 488B4520                	mov rax, PARAM(0)	; param a
  8082 00005825 50                      	push rax
  8083 00005826 6A01                    	push 1	; arg count
  8084 00005828 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  8085 00005830 803805                  	cmp byte [rax], T_undefined
  8086 00005833 0F843B3E0000            	je L_error_fvar_undefined
  8087 00005839 803804                  	cmp byte [rax], T_closure
  8088 0000583C 0F85B63E0000            	jne L_error_non_closure
  8089 00005842 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8090 00005845 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8091 00005848 483D[02000000]          	cmp rax, sob_boolean_false
  8092 0000584E 0F8483010000            	je .L_if_else_0028
  8093                                  	; preparing a non-tail-call
  8094 00005854 488B4528                	mov rax, PARAM(1)	; param b
  8095 00005858 50                      	push rax
  8096 00005859 6A01                    	push 1	; arg count
  8097 0000585B 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  8098 00005863 803805                  	cmp byte [rax], T_undefined
  8099 00005866 0F84083E0000            	je L_error_fvar_undefined
  8100 0000586C 803804                  	cmp byte [rax], T_closure
  8101 0000586F 0F85833E0000            	jne L_error_non_closure
  8102 00005875 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8103 00005878 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8104 0000587B 483D[02000000]          	cmp rax, sob_boolean_false
  8105 00005881 7431                    	je .L_if_else_001f
  8106                                  	; preparing a non-tail-call
  8107 00005883 488B4528                	mov rax, PARAM(1)	; param b
  8108 00005887 50                      	push rax
  8109 00005888 488B4520                	mov rax, PARAM(0)	; param a
  8110 0000588C 50                      	push rax
  8111 0000588D 6A02                    	push 2	; arg count
  8112 0000588F 488B0425[DC0B0000]      	mov rax, qword [free_var_27]	; free var __bin-sub-zz
  8113 00005897 803805                  	cmp byte [rax], T_undefined
  8114 0000589A 0F84D43D0000            	je L_error_fvar_undefined
  8115 000058A0 803804                  	cmp byte [rax], T_closure
  8116 000058A3 0F854F3E0000            	jne L_error_non_closure
  8117 000058A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8118 000058AC FF5009                  	call SOB_CLOSURE_CODE(rax)
  8119 000058AF E91E010000              	jmp .L_if_end_0024
  8120                                  .L_if_else_001f:
  8121                                  	; preparing a non-tail-call
  8122 000058B4 488B4528                	mov rax, PARAM(1)	; param b
  8123 000058B8 50                      	push rax
  8124 000058B9 6A01                    	push 1	; arg count
  8125 000058BB 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
  8126 000058C3 803805                  	cmp byte [rax], T_undefined
  8127 000058C6 0F84A83D0000            	je L_error_fvar_undefined
  8128 000058CC 803804                  	cmp byte [rax], T_closure
  8129 000058CF 0F85233E0000            	jne L_error_non_closure
  8130 000058D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8131 000058D8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8132 000058DB 483D[02000000]          	cmp rax, sob_boolean_false
  8133 000058E1 7454                    	je .L_if_else_001e
  8134                                  	; preparing a non-tail-call
  8135 000058E3 488B4528                	mov rax, PARAM(1)	; param b
  8136 000058E7 50                      	push rax
  8137                                  	; preparing a non-tail-call
  8138 000058E8 488B4520                	mov rax, PARAM(0)	; param a
  8139 000058EC 50                      	push rax
  8140 000058ED 6A01                    	push 1	; arg count
  8141 000058EF 488B0425[FE0B0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
  8142 000058F7 803805                  	cmp byte [rax], T_undefined
  8143 000058FA 0F84743D0000            	je L_error_fvar_undefined
  8144 00005900 803804                  	cmp byte [rax], T_closure
  8145 00005903 0F85EF3D0000            	jne L_error_non_closure
  8146 00005909 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8147 0000590C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8148 0000590F 50                      	push rax
  8149 00005910 6A02                    	push 2	; arg count
  8150 00005912 488B0425[BA0B0000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
  8151 0000591A 803805                  	cmp byte [rax], T_undefined
  8152 0000591D 0F84513D0000            	je L_error_fvar_undefined
  8153 00005923 803804                  	cmp byte [rax], T_closure
  8154 00005926 0F85CC3D0000            	jne L_error_non_closure
  8155 0000592C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8156 0000592F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8157 00005932 E99B000000              	jmp .L_if_end_0023
  8158                                  .L_if_else_001e:
  8159                                  	; preparing a non-tail-call
  8160 00005937 488B4528                	mov rax, PARAM(1)	; param b
  8161 0000593B 50                      	push rax
  8162 0000593C 6A01                    	push 1	; arg count
  8163 0000593E 488B0425[0B100000]      	mov rax, qword [free_var_90]	; free var real
  8164 00005946 803805                  	cmp byte [rax], T_undefined
  8165 00005949 0F84253D0000            	je L_error_fvar_undefined
  8166 0000594F 803804                  	cmp byte [rax], T_closure
  8167 00005952 0F85A03D0000            	jne L_error_non_closure
  8168 00005958 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8169 0000595B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8170 0000595E 483D[02000000]          	cmp rax, sob_boolean_false
  8171 00005964 7451                    	je .L_if_else_001d
  8172                                  	; preparing a non-tail-call
  8173 00005966 488B4528                	mov rax, PARAM(1)	; param b
  8174 0000596A 50                      	push rax
  8175                                  	; preparing a non-tail-call
  8176 0000596B 488B4520                	mov rax, PARAM(0)	; param a
  8177 0000596F 50                      	push rax
  8178 00005970 6A01                    	push 1	; arg count
  8179 00005972 488B0425[500F0000]      	mov rax, qword [free_var_79]	; free var integer->real
  8180 0000597A 803805                  	cmp byte [rax], T_undefined
  8181 0000597D 0F84F13C0000            	je L_error_fvar_undefined
  8182 00005983 803804                  	cmp byte [rax], T_closure
  8183 00005986 0F856C3D0000            	jne L_error_non_closure
  8184 0000598C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8185 0000598F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8186 00005992 50                      	push rax
  8187 00005993 6A02                    	push 2	; arg count
  8188 00005995 488B0425[CB0B0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
  8189 0000599D 803805                  	cmp byte [rax], T_undefined
  8190 000059A0 0F84CE3C0000            	je L_error_fvar_undefined
  8191 000059A6 803804                  	cmp byte [rax], T_closure
  8192 000059A9 0F85493D0000            	jne L_error_non_closure
  8193 000059AF FF7001                  	push SOB_CLOSURE_ENV(rax)
  8194 000059B2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8195 000059B5 EB1B                    	jmp .L_if_end_0022
  8196                                  .L_if_else_001d:
  8197                                  	; preparing a non-tail-call
  8198 000059B7 6A00                    	push 0	; arg count
  8199 000059B9 488B4510                	mov rax, ENV
  8200 000059BD 488B00                  	mov rax, qword [rax + 8 * 0]
  8201 000059C0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  8202 000059C3 803804                  	cmp byte [rax], T_closure
  8203 000059C6 0F852C3D0000            	jne L_error_non_closure
  8204 000059CC FF7001                  	push SOB_CLOSURE_ENV(rax)
  8205 000059CF FF5009                  	call SOB_CLOSURE_CODE(rax)
  8206                                  .L_if_end_0022:
  8207                                  .L_if_end_0023:
  8208                                  .L_if_end_0024:
  8209 000059D2 E981030000              	jmp .L_if_end_002d
  8210                                  .L_if_else_0028:
  8211                                  	; preparing a non-tail-call
  8212 000059D7 488B4520                	mov rax, PARAM(0)	; param a
  8213 000059DB 50                      	push rax
  8214 000059DC 6A01                    	push 1	; arg count
  8215 000059DE 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
  8216 000059E6 803805                  	cmp byte [rax], T_undefined
  8217 000059E9 0F84853C0000            	je L_error_fvar_undefined
  8218 000059EF 803804                  	cmp byte [rax], T_closure
  8219 000059F2 0F85003D0000            	jne L_error_non_closure
  8220 000059F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8221 000059FB FF5009                  	call SOB_CLOSURE_CODE(rax)
  8222 000059FE 483D[02000000]          	cmp rax, sob_boolean_false
  8223 00005A04 0F8483010000            	je .L_if_else_0027
  8224                                  	; preparing a non-tail-call
  8225 00005A0A 488B4528                	mov rax, PARAM(1)	; param b
  8226 00005A0E 50                      	push rax
  8227 00005A0F 6A01                    	push 1	; arg count
  8228 00005A11 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  8229 00005A19 803805                  	cmp byte [rax], T_undefined
  8230 00005A1C 0F84523C0000            	je L_error_fvar_undefined
  8231 00005A22 803804                  	cmp byte [rax], T_closure
  8232 00005A25 0F85CD3C0000            	jne L_error_non_closure
  8233 00005A2B FF7001                  	push SOB_CLOSURE_ENV(rax)
  8234 00005A2E FF5009                  	call SOB_CLOSURE_CODE(rax)
  8235 00005A31 483D[02000000]          	cmp rax, sob_boolean_false
  8236 00005A37 7454                    	je .L_if_else_0022
  8237                                  	; preparing a non-tail-call
  8238                                  	; preparing a non-tail-call
  8239 00005A39 488B4528                	mov rax, PARAM(1)	; param b
  8240 00005A3D 50                      	push rax
  8241 00005A3E 6A01                    	push 1	; arg count
  8242 00005A40 488B0425[FE0B0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
  8243 00005A48 803805                  	cmp byte [rax], T_undefined
  8244 00005A4B 0F84233C0000            	je L_error_fvar_undefined
  8245 00005A51 803804                  	cmp byte [rax], T_closure
  8246 00005A54 0F859E3C0000            	jne L_error_non_closure
  8247 00005A5A FF7001                  	push SOB_CLOSURE_ENV(rax)
  8248 00005A5D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8249 00005A60 50                      	push rax
  8250 00005A61 488B4520                	mov rax, PARAM(0)	; param a
  8251 00005A65 50                      	push rax
  8252 00005A66 6A02                    	push 2	; arg count
  8253 00005A68 488B0425[BA0B0000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
  8254 00005A70 803805                  	cmp byte [rax], T_undefined
  8255 00005A73 0F84FB3B0000            	je L_error_fvar_undefined
  8256 00005A79 803804                  	cmp byte [rax], T_closure
  8257 00005A7C 0F85763C0000            	jne L_error_non_closure
  8258 00005A82 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8259 00005A85 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8260 00005A88 E9FB000000              	jmp .L_if_end_0027
  8261                                  .L_if_else_0022:
  8262                                  	; preparing a non-tail-call
  8263 00005A8D 488B4528                	mov rax, PARAM(1)	; param b
  8264 00005A91 50                      	push rax
  8265 00005A92 6A01                    	push 1	; arg count
  8266 00005A94 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
  8267 00005A9C 803805                  	cmp byte [rax], T_undefined
  8268 00005A9F 0F84CF3B0000            	je L_error_fvar_undefined
  8269 00005AA5 803804                  	cmp byte [rax], T_closure
  8270 00005AA8 0F854A3C0000            	jne L_error_non_closure
  8271 00005AAE FF7001                  	push SOB_CLOSURE_ENV(rax)
  8272 00005AB1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8273 00005AB4 483D[02000000]          	cmp rax, sob_boolean_false
  8274 00005ABA 7431                    	je .L_if_else_0021
  8275                                  	; preparing a non-tail-call
  8276 00005ABC 488B4528                	mov rax, PARAM(1)	; param b
  8277 00005AC0 50                      	push rax
  8278 00005AC1 488B4520                	mov rax, PARAM(0)	; param a
  8279 00005AC5 50                      	push rax
  8280 00005AC6 6A02                    	push 2	; arg count
  8281 00005AC8 488B0425[BA0B0000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
  8282 00005AD0 803805                  	cmp byte [rax], T_undefined
  8283 00005AD3 0F849B3B0000            	je L_error_fvar_undefined
  8284 00005AD9 803804                  	cmp byte [rax], T_closure
  8285 00005ADC 0F85163C0000            	jne L_error_non_closure
  8286 00005AE2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8287 00005AE5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8288 00005AE8 E99B000000              	jmp .L_if_end_0026
  8289                                  .L_if_else_0021:
  8290                                  	; preparing a non-tail-call
  8291 00005AED 488B4528                	mov rax, PARAM(1)	; param b
  8292 00005AF1 50                      	push rax
  8293 00005AF2 6A01                    	push 1	; arg count
  8294 00005AF4 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
  8295 00005AFC 803805                  	cmp byte [rax], T_undefined
  8296 00005AFF 0F846F3B0000            	je L_error_fvar_undefined
  8297 00005B05 803804                  	cmp byte [rax], T_closure
  8298 00005B08 0F85EA3B0000            	jne L_error_non_closure
  8299 00005B0E FF7001                  	push SOB_CLOSURE_ENV(rax)
  8300 00005B11 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8301 00005B14 483D[02000000]          	cmp rax, sob_boolean_false
  8302 00005B1A 7451                    	je .L_if_else_0020
  8303                                  	; preparing a non-tail-call
  8304 00005B1C 488B4528                	mov rax, PARAM(1)	; param b
  8305 00005B20 50                      	push rax
  8306                                  	; preparing a non-tail-call
  8307 00005B21 488B4520                	mov rax, PARAM(0)	; param a
  8308 00005B25 50                      	push rax
  8309 00005B26 6A01                    	push 1	; arg count
  8310 00005B28 488B0425[1D0F0000]      	mov rax, qword [free_var_76]	; free var fraction->real
  8311 00005B30 803805                  	cmp byte [rax], T_undefined
  8312 00005B33 0F843B3B0000            	je L_error_fvar_undefined
  8313 00005B39 803804                  	cmp byte [rax], T_closure
  8314 00005B3C 0F85B63B0000            	jne L_error_non_closure
  8315 00005B42 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8316 00005B45 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8317 00005B48 50                      	push rax
  8318 00005B49 6A02                    	push 2	; arg count
  8319 00005B4B 488B0425[CB0B0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
  8320 00005B53 803805                  	cmp byte [rax], T_undefined
  8321 00005B56 0F84183B0000            	je L_error_fvar_undefined
  8322 00005B5C 803804                  	cmp byte [rax], T_closure
  8323 00005B5F 0F85933B0000            	jne L_error_non_closure
  8324 00005B65 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8325 00005B68 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8326 00005B6B EB1B                    	jmp .L_if_end_0025
  8327                                  .L_if_else_0020:
  8328                                  	; preparing a non-tail-call
  8329 00005B6D 6A00                    	push 0	; arg count
  8330 00005B6F 488B4510                	mov rax, ENV
  8331 00005B73 488B00                  	mov rax, qword [rax + 8 * 0]
  8332 00005B76 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  8333 00005B79 803804                  	cmp byte [rax], T_closure
  8334 00005B7C 0F85763B0000            	jne L_error_non_closure
  8335 00005B82 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8336 00005B85 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8337                                  .L_if_end_0025:
  8338                                  .L_if_end_0026:
  8339                                  .L_if_end_0027:
  8340 00005B88 E9CB010000              	jmp .L_if_end_002c
  8341                                  .L_if_else_0027:
  8342                                  	; preparing a non-tail-call
  8343 00005B8D 488B4520                	mov rax, PARAM(0)	; param a
  8344 00005B91 50                      	push rax
  8345 00005B92 6A01                    	push 1	; arg count
  8346 00005B94 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
  8347 00005B9C 803805                  	cmp byte [rax], T_undefined
  8348 00005B9F 0F84CF3A0000            	je L_error_fvar_undefined
  8349 00005BA5 803804                  	cmp byte [rax], T_closure
  8350 00005BA8 0F854A3B0000            	jne L_error_non_closure
  8351 00005BAE FF7001                  	push SOB_CLOSURE_ENV(rax)
  8352 00005BB1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8353 00005BB4 483D[02000000]          	cmp rax, sob_boolean_false
  8354 00005BBA 0F847D010000            	je .L_if_else_0026
  8355                                  	; preparing a non-tail-call
  8356 00005BC0 488B4528                	mov rax, PARAM(1)	; param b
  8357 00005BC4 50                      	push rax
  8358 00005BC5 6A01                    	push 1	; arg count
  8359 00005BC7 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  8360 00005BCF 803805                  	cmp byte [rax], T_undefined
  8361 00005BD2 0F849C3A0000            	je L_error_fvar_undefined
  8362 00005BD8 803804                  	cmp byte [rax], T_closure
  8363 00005BDB 0F85173B0000            	jne L_error_non_closure
  8364 00005BE1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8365 00005BE4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8366 00005BE7 483D[02000000]          	cmp rax, sob_boolean_false
  8367 00005BED 7454                    	je .L_if_else_0025
  8368                                  	; preparing a non-tail-call
  8369                                  	; preparing a non-tail-call
  8370 00005BEF 488B4528                	mov rax, PARAM(1)	; param b
  8371 00005BF3 50                      	push rax
  8372 00005BF4 6A01                    	push 1	; arg count
  8373 00005BF6 488B0425[500F0000]      	mov rax, qword [free_var_79]	; free var integer->real
  8374 00005BFE 803805                  	cmp byte [rax], T_undefined
  8375 00005C01 0F846D3A0000            	je L_error_fvar_undefined
  8376 00005C07 803804                  	cmp byte [rax], T_closure
  8377 00005C0A 0F85E83A0000            	jne L_error_non_closure
  8378 00005C10 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8379 00005C13 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8380 00005C16 50                      	push rax
  8381 00005C17 488B4520                	mov rax, PARAM(0)	; param a
  8382 00005C1B 50                      	push rax
  8383 00005C1C 6A02                    	push 2	; arg count
  8384 00005C1E 488B0425[CB0B0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
  8385 00005C26 803805                  	cmp byte [rax], T_undefined
  8386 00005C29 0F84453A0000            	je L_error_fvar_undefined
  8387 00005C2F 803804                  	cmp byte [rax], T_closure
  8388 00005C32 0F85C03A0000            	jne L_error_non_closure
  8389 00005C38 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8390 00005C3B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8391 00005C3E E9F8000000              	jmp .L_if_end_002a
  8392                                  .L_if_else_0025:
  8393                                  	; preparing a non-tail-call
  8394 00005C43 488B4528                	mov rax, PARAM(1)	; param b
  8395 00005C47 50                      	push rax
  8396 00005C48 6A01                    	push 1	; arg count
  8397 00005C4A 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
  8398 00005C52 803805                  	cmp byte [rax], T_undefined
  8399 00005C55 0F84193A0000            	je L_error_fvar_undefined
  8400 00005C5B 803804                  	cmp byte [rax], T_closure
  8401 00005C5E 0F85943A0000            	jne L_error_non_closure
  8402 00005C64 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8403 00005C67 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8404 00005C6A 483D[02000000]          	cmp rax, sob_boolean_false
  8405 00005C70 7451                    	je .L_if_else_0024
  8406                                  	; preparing a non-tail-call
  8407                                  	; preparing a non-tail-call
  8408 00005C72 488B4528                	mov rax, PARAM(1)	; param b
  8409 00005C76 50                      	push rax
  8410 00005C77 6A01                    	push 1	; arg count
  8411 00005C79 488B0425[1D0F0000]      	mov rax, qword [free_var_76]	; free var fraction->real
  8412 00005C81 803805                  	cmp byte [rax], T_undefined
  8413 00005C84 0F84EA390000            	je L_error_fvar_undefined
  8414 00005C8A 803804                  	cmp byte [rax], T_closure
  8415 00005C8D 0F85653A0000            	jne L_error_non_closure
  8416 00005C93 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8417 00005C96 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8418 00005C99 50                      	push rax
  8419 00005C9A 488B4520                	mov rax, PARAM(0)	; param a
  8420 00005C9E 50                      	push rax
  8421 00005C9F 6A02                    	push 2	; arg count
  8422 00005CA1 488B0425[CB0B0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
  8423 00005CA9 803805                  	cmp byte [rax], T_undefined
  8424 00005CAC 0F84C2390000            	je L_error_fvar_undefined
  8425 00005CB2 803804                  	cmp byte [rax], T_closure
  8426 00005CB5 0F853D3A0000            	jne L_error_non_closure
  8427 00005CBB FF7001                  	push SOB_CLOSURE_ENV(rax)
  8428 00005CBE FF5009                  	call SOB_CLOSURE_CODE(rax)
  8429 00005CC1 EB78                    	jmp .L_if_end_0029
  8430                                  .L_if_else_0024:
  8431                                  	; preparing a non-tail-call
  8432 00005CC3 488B4528                	mov rax, PARAM(1)	; param b
  8433 00005CC7 50                      	push rax
  8434 00005CC8 6A01                    	push 1	; arg count
  8435 00005CCA 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
  8436 00005CD2 803805                  	cmp byte [rax], T_undefined
  8437 00005CD5 0F8499390000            	je L_error_fvar_undefined
  8438 00005CDB 803804                  	cmp byte [rax], T_closure
  8439 00005CDE 0F85143A0000            	jne L_error_non_closure
  8440 00005CE4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8441 00005CE7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8442 00005CEA 483D[02000000]          	cmp rax, sob_boolean_false
  8443 00005CF0 742E                    	je .L_if_else_0023
  8444                                  	; preparing a non-tail-call
  8445 00005CF2 488B4528                	mov rax, PARAM(1)	; param b
  8446 00005CF6 50                      	push rax
  8447 00005CF7 488B4520                	mov rax, PARAM(0)	; param a
  8448 00005CFB 50                      	push rax
  8449 00005CFC 6A02                    	push 2	; arg count
  8450 00005CFE 488B0425[CB0B0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
  8451 00005D06 803805                  	cmp byte [rax], T_undefined
  8452 00005D09 0F8465390000            	je L_error_fvar_undefined
  8453 00005D0F 803804                  	cmp byte [rax], T_closure
  8454 00005D12 0F85E0390000            	jne L_error_non_closure
  8455 00005D18 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8456 00005D1B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8457 00005D1E EB1B                    	jmp .L_if_end_0028
  8458                                  .L_if_else_0023:
  8459                                  	; preparing a non-tail-call
  8460 00005D20 6A00                    	push 0	; arg count
  8461 00005D22 488B4510                	mov rax, ENV
  8462 00005D26 488B00                  	mov rax, qword [rax + 8 * 0]
  8463 00005D29 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  8464 00005D2C 803804                  	cmp byte [rax], T_closure
  8465 00005D2F 0F85C3390000            	jne L_error_non_closure
  8466 00005D35 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8467 00005D38 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8468                                  .L_if_end_0028:
  8469                                  .L_if_end_0029:
  8470                                  .L_if_end_002a:
  8471 00005D3B EB1B                    	jmp .L_if_end_002b
  8472                                  .L_if_else_0026:
  8473                                  	; preparing a non-tail-call
  8474 00005D3D 6A00                    	push 0	; arg count
  8475 00005D3F 488B4510                	mov rax, ENV
  8476 00005D43 488B00                  	mov rax, qword [rax + 8 * 0]
  8477 00005D46 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  8478 00005D49 803804                  	cmp byte [rax], T_closure
  8479 00005D4C 0F85A6390000            	jne L_error_non_closure
  8480 00005D52 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8481 00005D55 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8482                                  .L_if_end_002b:
  8483                                  .L_if_end_002c:
  8484                                  .L_if_end_002d:
  8485 00005D58 C9                      	leave
  8486 00005D59 C22000                  	ret AND_KILL_FRAME(2)
  8487                                  .L_lambda_simple_end_003a:	; new closure is in rax
  8488 00005D5C 50                      	push rax
  8489 00005D5D 6A01                    	push 1	; arg count
  8490 00005D5F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8491 00005D64 E8383A0000              	call malloc
  8492 00005D69 50                      	push rax
  8493 00005D6A BF08000000              	mov rdi, 8 * 1	; new rib
  8494 00005D6F E82D3A0000              	call malloc
  8495 00005D74 50                      	push rax
  8496 00005D75 BF10000000              	mov rdi, 8 * 2	; extended env
  8497 00005D7A E8223A0000              	call malloc
  8498 00005D7F 488B7D10                	mov rdi, ENV
  8499 00005D83 BE00000000              	mov rsi, 0
  8500 00005D88 BA01000000              	mov rdx, 1
  8501                                  .L_lambda_simple_env_loop_003b:	; ext_env[i + 1] <-- env[i]
  8502 00005D8D 4883FE01                	cmp rsi, 1
  8503 00005D91 7410                    	je .L_lambda_simple_env_end_003b
  8504 00005D93 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8505 00005D97 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8506 00005D9B 48FFC6                  	inc rsi
  8507 00005D9E 48FFC2                  	inc rdx
  8508 00005DA1 EBEA                    	jmp .L_lambda_simple_env_loop_003b
  8509                                  .L_lambda_simple_env_end_003b:
  8510 00005DA3 5B                      	pop rbx
  8511 00005DA4 BE00000000              	mov rsi, 0
  8512                                  .L_lambda_simple_params_loop_003b:	; copy params
  8513 00005DA9 4883FE01                	cmp rsi, 1
  8514 00005DAD 740E                    	je .L_lambda_simple_params_end_003b
  8515 00005DAF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8516 00005DB4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8517 00005DB8 48FFC6                  	inc rsi
  8518 00005DBB EBEC                    	jmp .L_lambda_simple_params_loop_003b
  8519                                  .L_lambda_simple_params_end_003b:
  8520 00005DBD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8521 00005DC0 4889C3                  	mov rbx, rax
  8522 00005DC3 58                      	pop rax
  8523 00005DC4 C60004                  	mov byte [rax], T_closure
  8524 00005DC7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8525 00005DCB 48C74009[D85D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003b
  8526 00005DD3 E918030000              	jmp .L_lambda_simple_end_003b
  8527                                  .L_lambda_simple_code_003b:	; lambda-simple body
  8528 00005DD8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8529 00005DDE 740B                    	je .L_lambda_simple_arity_check_ok_0045
  8530 00005DE0 FF742410                	push qword [rsp + 8 * 2]
  8531 00005DE4 6A01                    	push 1
  8532 00005DE6 E96F390000              	jmp L_error_incorrect_arity_simple
  8533                                  .L_lambda_simple_arity_check_ok_0045:
  8534 00005DEB C8000000                	enter 0, 0
  8535 00005DEF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8536 00005DF4 E8A8390000              	call malloc
  8537 00005DF9 50                      	push rax
  8538 00005DFA 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
  8539 00005DFE 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
  8540 00005E02 BF08000000              	mov rdi, 8 * 1	; new rib for optional parameters
  8541 00005E07 E895390000              	call malloc
  8542 00005E0C 50                      	push rax
  8543 00005E0D BF18000000              	mov rdi, 8 * 3	; extended env
  8544 00005E12 E88A390000              	call malloc
  8545 00005E17 488B7D10                	mov rdi, ENV
  8546 00005E1B BE00000000              	mov rsi, 0
  8547 00005E20 BA01000000              	mov rdx, 1
  8548                                  .L_lambda_opt_code_001f:	; ext_env[i + 1] <-- env[i] copy all the array
  8549 00005E25 4883FE02                	cmp rsi, 2
  8550 00005E29 7410                    	je .L_lambda_opt_end_0029
  8551 00005E2B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8552 00005E2F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8553 00005E33 48FFC6                  	inc rsi
  8554 00005E36 48FFC2                  	inc rdx
  8555 00005E39 EBEA                    	jmp .L_lambda_opt_code_001f
  8556                                  .L_lambda_opt_end_0029:
  8557 00005E3B 5B                      	pop rbx
  8558 00005E3C BE00000000              	mov rsi, 0
  8559                                  .L_lambda_opt_code_0020:	; copy params
  8560 00005E41 4883FE01                	cmp rsi, 1
  8561 00005E45 740E                    	je .L_lambda_opt_end_002a
  8562 00005E47 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8563 00005E4C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8564 00005E50 48FFC6                  	inc rsi
  8565 00005E53 EBEC                    	jmp .L_lambda_opt_code_0020
  8566                                  .L_lambda_opt_end_002a:
  8567 00005E55 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8568 00005E58 4889C3                  	mov rbx, rax
  8569 00005E5B 58                      	pop rax
  8570 00005E5C C60004                  	mov byte [rax], T_closure
  8571 00005E5F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8572 00005E63 48C74009[705E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0021
  8573 00005E6B E97C020000              	jmp .L_lambda_opt_end_002b
  8574                                  .L_lambda_opt_code_0021:	; lambda-opt body
  8575 00005E70 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8576 00005E76 7D0B                    	jge .L_lambda_simple_arity_check_ok_0046
  8577 00005E78 FF742410                	push qword [rsp + 8 * 2]
  8578 00005E7C 6A01                    	push 1
  8579 00005E7E E9D7380000              	jmp L_error_incorrect_arity_simple
  8580                                  .L_lambda_simple_arity_check_ok_0046:
  8581 00005E83 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  8582 00005E88 4983E801                	sub r8, 1
  8583 00005E8C 4C89C3                  	mov rbx,r8
  8584 00005E8F 4983F800                	cmp r8, 0
  8585 00005E93 7535                    	jne .L_lambda_opt_params_loop_0021
  8586 00005E95 488B542410              	mov rdx, qword [rsp + 8 * 2]
  8587 00005E9A 4883C203                	add rdx , 3
  8588 00005E9E 4883EC08                	sub rsp , 8
  8589 00005EA2 4889E1                  	mov rcx, rsp
  8590                                  .L_lambda_opt_stack_adjusted_0015: ;pushing down the stack of the current function
  8591 00005EA5 488B5908                	mov rbx, qword [rcx + 8 * 1]
  8592 00005EA9 488919                  	mov qword[rcx] , rbx
  8593 00005EAC 4883C108                	add rcx , 8
  8594 00005EB0 48FFCA                  	dec rdx
  8595 00005EB3 4883FA00                	cmp rdx, 0
  8596 00005EB7 75EC                    	jne .L_lambda_opt_stack_adjusted_0015
  8597 00005EB9 48FF442410              	inc qword [rsp + 8 * 2]
  8598 00005EBE 48C701[01000000]        	mov qword [rcx], sob_nil 
  8599 00005EC5 E9A8000000              	jmp .L_lambda_opt_end_002c
  8600                                  	.L_lambda_opt_params_loop_0021:
  8601 00005ECA 488B542410              	mov rdx, qword [rsp + 8*2]
  8602 00005ECF 488D4CD410              	lea rcx, [rsp + 8*2 + 8*rdx]
  8603 00005ED4 4C89C2                  	mov rdx, r8
  8604 00005ED7 49B9-                   	mov r9, sob_nil
  8604 00005ED9 [0100000000000000] 
  8605 00005EE1 4989C9                  	mov r9, rcx
  8606                                  	.L_lambda_opt_params_loop_001f: ;loop for copying the opt into list
  8607 00005EE4 BF11000000              	mov rdi, (1 + 8 + 8)
  8608 00005EE9 E8B3380000              	call malloc
  8609 00005EEE C60021                  	mov byte[rax], T_pair
  8610 00005EF1 488B19                  	mov rbx, qword [rcx]
  8611 00005EF4 48895801                	mov SOB_PAIR_CAR(rax), rbx
  8612 00005EF8 4C894809                	mov SOB_PAIR_CDR(rax), r9
  8613 00005EFC 4989C1                  	mov r9, rax
  8614 00005EFF 48FFCA                  	dec rdx
  8615 00005F02 4883E908                	sub rcx, 8
  8616 00005F06 4883FA00                	cmp rdx, 0
  8617 00005F0A 75D8                    	jne .L_lambda_opt_params_loop_001f
  8618 00005F0C 488B542410              	mov rdx, qword [rsp + 8 * 2]
  8619 00005F11 4889E0                  	mov rax, rsp
  8620 00005F14 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
  8621 00005F19 4989DC                  	mov r12 , rbx
  8622 00005F1C 4C89C1                  	mov rcx, r8
  8623 00005F1F 48FFC9                  	dec rcx
  8624 00005F22 4883C203                	add rdx, 3
  8625 00005F26 4829CA                  	sub rdx,rcx
  8626 00005F29 48C1E103                	shl rcx, 3
  8627                                  	.L_lambda_opt_stack_adjusted_0016:
  8628 00005F2D 4883FA00                	cmp rdx, 0
  8629 00005F31 7419                    	je .L_lambda_opt_params_end_002a
  8630 00005F33 4889D8                  	mov rax, rbx
  8631 00005F36 4829C8                  	sub rax, rcx
  8632 00005F39 488B30                  	mov rsi, qword [rax]
  8633 00005F3C 488933                  	mov [rbx], rsi
  8634 00005F3F 4883EB08                	sub rbx, 8
  8635 00005F43 48FFCA                  	dec rdx
  8636 00005F46 4883FA00                	cmp rdx, 0
  8637 00005F4A 75E1                    	jne .L_lambda_opt_stack_adjusted_0016
  8638                                  	.L_lambda_opt_params_end_002a:
  8639 00005F4C 4801CC                  	add rsp,rcx
  8640 00005F4F BB01000000              	mov rbx, 1
  8641 00005F54 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  8642 00005F59 4883C303                	add rbx,3
  8643 00005F5D 4C29C3                  	sub rbx,r8
  8644 00005F60 48C1E303                	shl rbx, 3
  8645 00005F64 4801E3                  	add rbx, rsp
  8646 00005F67 4C890B                  	mov qword[rbx] , r9
  8647 00005F6A 49FFC8                  	dec r8
  8648 00005F6D 4C29442410              	sub qword [rsp + 8 * 2], r8
  8649                                  	.L_lambda_opt_end_002c:
  8650 00005F72 C8000000                	enter 0, 0
  8651                                  	; preparing a non-tail-call
  8652 00005F76 488B4528                	mov rax, PARAM(1)	; param s
  8653 00005F7A 50                      	push rax
  8654 00005F7B 6A01                    	push 1	; arg count
  8655 00005F7D 488B0425[C70F0000]      	mov rax, qword [free_var_86]	; free var null?
  8656 00005F85 803805                  	cmp byte [rax], T_undefined
  8657 00005F88 0F84E6360000            	je L_error_fvar_undefined
  8658 00005F8E 803804                  	cmp byte [rax], T_closure
  8659 00005F91 0F8561370000            	jne L_error_non_closure
  8660 00005F97 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8661 00005F9A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8662 00005F9D 483D[02000000]          	cmp rax, sob_boolean_false
  8663 00005FA3 7430                    	je .L_if_else_0029
  8664                                  	; preparing a non-tail-call
  8665 00005FA5 488B4520                	mov rax, PARAM(0)	; param a
  8666 00005FA9 50                      	push rax
  8667 00005FAA 48B8-                   	mov rax, L_constants + 2135
  8667 00005FAC [5708000000000000] 
  8668 00005FB4 50                      	push rax
  8669 00005FB5 6A02                    	push 2	; arg count
  8670 00005FB7 488B4510                	mov rax, ENV
  8671 00005FBB 488B00                  	mov rax, qword [rax + 8 * 0]
  8672 00005FBE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
  8673 00005FC1 803804                  	cmp byte [rax], T_closure
  8674 00005FC4 0F852E370000            	jne L_error_non_closure
  8675 00005FCA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8676 00005FCD FF5009                  	call SOB_CLOSURE_CODE(rax)
  8677 00005FD0 E913010000              	jmp .L_if_end_002e
  8678                                  .L_if_else_0029:
  8679                                  	; preparing a non-tail-call
  8680                                  	; preparing a non-tail-call
  8681 00005FD5 488B4528                	mov rax, PARAM(1)	; param s
  8682 00005FD9 50                      	push rax
  8683 00005FDA 48B8-                   	mov rax, L_constants + 2135
  8683 00005FDC [5708000000000000] 
  8684 00005FE4 50                      	push rax
  8685 00005FE5 488B0425[220A0000]      	mov rax, qword [free_var_1]	; free var +
  8686 00005FED 803805                  	cmp byte [rax], T_undefined
  8687 00005FF0 0F847E360000            	je L_error_fvar_undefined
  8688 00005FF6 50                      	push rax
  8689 00005FF7 6A03                    	push 3	; arg count
  8690 00005FF9 488B0425[FB0E0000]      	mov rax, qword [free_var_74]	; free var fold-left
  8691 00006001 803805                  	cmp byte [rax], T_undefined
  8692 00006004 0F846A360000            	je L_error_fvar_undefined
  8693 0000600A 803804                  	cmp byte [rax], T_closure
  8694 0000600D 0F85E5360000            	jne L_error_non_closure
  8695 00006013 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8696 00006016 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8697 00006019 50                      	push rax
  8698 0000601A 6A01                    	push 1	; arg count
  8699 0000601C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8700 00006021 E87B370000              	call malloc
  8701 00006026 50                      	push rax
  8702 00006027 BF10000000              	mov rdi, 8 * 2	; new rib
  8703 0000602C E870370000              	call malloc
  8704 00006031 50                      	push rax
  8705 00006032 BF20000000              	mov rdi, 8 * 4	; extended env
  8706 00006037 E865370000              	call malloc
  8707 0000603C 488B7D10                	mov rdi, ENV
  8708 00006040 BE00000000              	mov rsi, 0
  8709 00006045 BA01000000              	mov rdx, 1
  8710                                  .L_lambda_simple_env_loop_003c:	; ext_env[i + 1] <-- env[i]
  8711 0000604A 4883FE03                	cmp rsi, 3
  8712 0000604E 7410                    	je .L_lambda_simple_env_end_003c
  8713 00006050 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8714 00006054 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8715 00006058 48FFC6                  	inc rsi
  8716 0000605B 48FFC2                  	inc rdx
  8717 0000605E EBEA                    	jmp .L_lambda_simple_env_loop_003c
  8718                                  .L_lambda_simple_env_end_003c:
  8719 00006060 5B                      	pop rbx
  8720 00006061 BE00000000              	mov rsi, 0
  8721                                  .L_lambda_simple_params_loop_003c:	; copy params
  8722 00006066 4883FE02                	cmp rsi, 2
  8723 0000606A 740E                    	je .L_lambda_simple_params_end_003c
  8724 0000606C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8725 00006071 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8726 00006075 48FFC6                  	inc rsi
  8727 00006078 EBEC                    	jmp .L_lambda_simple_params_loop_003c
  8728                                  .L_lambda_simple_params_end_003c:
  8729 0000607A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8730 0000607D 4889C3                  	mov rbx, rax
  8731 00006080 58                      	pop rax
  8732 00006081 C60004                  	mov byte [rax], T_closure
  8733 00006084 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8734 00006088 48C74009[92600000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003c
  8735 00006090 EB47                    	jmp .L_lambda_simple_end_003c
  8736                                  .L_lambda_simple_code_003c:	; lambda-simple body
  8737 00006092 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8738 00006098 740B                    	je .L_lambda_simple_arity_check_ok_0047
  8739 0000609A FF742410                	push qword [rsp + 8 * 2]
  8740 0000609E 6A01                    	push 1
  8741 000060A0 E9B5360000              	jmp L_error_incorrect_arity_simple
  8742                                  .L_lambda_simple_arity_check_ok_0047:
  8743 000060A5 C8000000                	enter 0, 0
  8744                                  	; preparing a non-tail-call
  8745 000060A9 488B4520                	mov rax, PARAM(0)	; param b
  8746 000060AD 50                      	push rax
  8747 000060AE 488B4510                	mov rax, ENV
  8748 000060B2 488B00                  	mov rax, qword [rax + 8 * 0]
  8749 000060B5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
  8750 000060B8 50                      	push rax
  8751 000060B9 6A02                    	push 2	; arg count
  8752 000060BB 488B4510                	mov rax, ENV
  8753 000060BF 488B4008                	mov rax, qword [rax + 8 * 1]
  8754 000060C3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
  8755 000060C6 803804                  	cmp byte [rax], T_closure
  8756 000060C9 0F8529360000            	jne L_error_non_closure
  8757 000060CF FF7001                  	push SOB_CLOSURE_ENV(rax)
  8758 000060D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8759 000060D5 C9                      	leave
  8760 000060D6 C21800                  	ret AND_KILL_FRAME(1)
  8761                                  .L_lambda_simple_end_003c:	; new closure is in rax
  8762 000060D9 803804                  	cmp byte [rax], T_closure
  8763 000060DC 0F8516360000            	jne L_error_non_closure
  8764 000060E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8765 000060E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8766                                  .L_if_end_002e:
  8767                                  	LEAVE
    49 000060E8 C9                  <1>  leave
  8768 000060E9 C22000                  	ret AND_KILL_FRAME(2)
  8769                                  .L_lambda_opt_end_002b:
  8770 000060EC C9                      	leave
  8771 000060ED C21800                  	ret AND_KILL_FRAME(1)
  8772                                  .L_lambda_simple_end_003b:	; new closure is in rax
  8773 000060F0 803804                  	cmp byte [rax], T_closure
  8774 000060F3 0F85FF350000            	jne L_error_non_closure
  8775 000060F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8776 000060FC FF5009                  	call SOB_CLOSURE_CODE(rax)
  8777 000060FF C9                      	leave
  8778 00006100 C21800                  	ret AND_KILL_FRAME(1)
  8779                                  .L_lambda_simple_end_0039:	; new closure is in rax
  8780 00006103 803804                  	cmp byte [rax], T_closure
  8781 00006106 0F85EC350000            	jne L_error_non_closure
  8782 0000610C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8783 0000610F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8784 00006112 48890425[330A0000]      	mov qword [free_var_2], rax
  8785 0000611A 48B8-                   	mov rax, sob_void
  8785 0000611C [0000000000000000] 
  8786                                  
  8787 00006124 4889C7                  	mov rdi, rax
  8788 00006127 E8CA380000              	call print_sexpr_if_not_void
  8789                                  	; preparing a non-tail-call
  8790 0000612C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8791 00006131 E86B360000              	call malloc
  8792 00006136 50                      	push rax
  8793 00006137 BF00000000              	mov rdi, 8 * 0	; new rib
  8794 0000613C E860360000              	call malloc
  8795 00006141 50                      	push rax
  8796 00006142 BF08000000              	mov rdi, 8 * 1	; extended env
  8797 00006147 E855360000              	call malloc
  8798 0000614C 488B7D10                	mov rdi, ENV
  8799 00006150 BE00000000              	mov rsi, 0
  8800 00006155 BA01000000              	mov rdx, 1
  8801                                  .L_lambda_simple_env_loop_003d:	; ext_env[i + 1] <-- env[i]
  8802 0000615A 4883FE00                	cmp rsi, 0
  8803 0000615E 7410                    	je .L_lambda_simple_env_end_003d
  8804 00006160 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8805 00006164 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8806 00006168 48FFC6                  	inc rsi
  8807 0000616B 48FFC2                  	inc rdx
  8808 0000616E EBEA                    	jmp .L_lambda_simple_env_loop_003d
  8809                                  .L_lambda_simple_env_end_003d:
  8810 00006170 5B                      	pop rbx
  8811 00006171 BE00000000              	mov rsi, 0
  8812                                  .L_lambda_simple_params_loop_003d:	; copy params
  8813 00006176 4883FE00                	cmp rsi, 0
  8814 0000617A 740E                    	je .L_lambda_simple_params_end_003d
  8815 0000617C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8816 00006181 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8817 00006185 48FFC6                  	inc rsi
  8818 00006188 EBEC                    	jmp .L_lambda_simple_params_loop_003d
  8819                                  .L_lambda_simple_params_end_003d:
  8820 0000618A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8821 0000618D 4889C3                  	mov rbx, rax
  8822 00006190 58                      	pop rax
  8823 00006191 C60004                  	mov byte [rax], T_closure
  8824 00006194 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8825 00006198 48C74009[A2610000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003d
  8826 000061A0 EB53                    	jmp .L_lambda_simple_end_003d
  8827                                  .L_lambda_simple_code_003d:	; lambda-simple body
  8828 000061A2 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8829 000061A8 740B                    	je .L_lambda_simple_arity_check_ok_0048
  8830 000061AA FF742410                	push qword [rsp + 8 * 2]
  8831 000061AE 6A00                    	push 0
  8832 000061B0 E9A5350000              	jmp L_error_incorrect_arity_simple
  8833                                  .L_lambda_simple_arity_check_ok_0048:
  8834 000061B5 C8000000                	enter 0, 0
  8835                                  	; preparing a non-tail-call
  8836 000061B9 48B8-                   	mov rax, L_constants + 2187
  8836 000061BB [8B08000000000000] 
  8837 000061C3 50                      	push rax
  8838 000061C4 48B8-                   	mov rax, L_constants + 2279
  8838 000061C6 [E708000000000000] 
  8839 000061CE 50                      	push rax
  8840 000061CF 6A02                    	push 2	; arg count
  8841 000061D1 488B0425[D90E0000]      	mov rax, qword [free_var_72]	; free var error
  8842 000061D9 803805                  	cmp byte [rax], T_undefined
  8843 000061DC 0F8492340000            	je L_error_fvar_undefined
  8844 000061E2 803804                  	cmp byte [rax], T_closure
  8845 000061E5 0F850D350000            	jne L_error_non_closure
  8846 000061EB FF7001                  	push SOB_CLOSURE_ENV(rax)
  8847 000061EE FF5009                  	call SOB_CLOSURE_CODE(rax)
  8848 000061F1 C9                      	leave
  8849 000061F2 C21000                  	ret AND_KILL_FRAME(0)
  8850                                  .L_lambda_simple_end_003d:	; new closure is in rax
  8851 000061F5 50                      	push rax
  8852 000061F6 6A01                    	push 1	; arg count
  8853 000061F8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8854 000061FD E89F350000              	call malloc
  8855 00006202 50                      	push rax
  8856 00006203 BF00000000              	mov rdi, 8 * 0	; new rib
  8857 00006208 E894350000              	call malloc
  8858 0000620D 50                      	push rax
  8859 0000620E BF08000000              	mov rdi, 8 * 1	; extended env
  8860 00006213 E889350000              	call malloc
  8861 00006218 488B7D10                	mov rdi, ENV
  8862 0000621C BE00000000              	mov rsi, 0
  8863 00006221 BA01000000              	mov rdx, 1
  8864                                  .L_lambda_simple_env_loop_003e:	; ext_env[i + 1] <-- env[i]
  8865 00006226 4883FE00                	cmp rsi, 0
  8866 0000622A 7410                    	je .L_lambda_simple_env_end_003e
  8867 0000622C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8868 00006230 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8869 00006234 48FFC6                  	inc rsi
  8870 00006237 48FFC2                  	inc rdx
  8871 0000623A EBEA                    	jmp .L_lambda_simple_env_loop_003e
  8872                                  .L_lambda_simple_env_end_003e:
  8873 0000623C 5B                      	pop rbx
  8874 0000623D BE00000000              	mov rsi, 0
  8875                                  .L_lambda_simple_params_loop_003e:	; copy params
  8876 00006242 4883FE00                	cmp rsi, 0
  8877 00006246 740E                    	je .L_lambda_simple_params_end_003e
  8878 00006248 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8879 0000624D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8880 00006251 48FFC6                  	inc rsi
  8881 00006254 EBEC                    	jmp .L_lambda_simple_params_loop_003e
  8882                                  .L_lambda_simple_params_end_003e:
  8883 00006256 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8884 00006259 4889C3                  	mov rbx, rax
  8885 0000625C 58                      	pop rax
  8886 0000625D C60004                  	mov byte [rax], T_closure
  8887 00006260 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8888 00006264 48C74009[71620000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003e
  8889 0000626C E954080000              	jmp .L_lambda_simple_end_003e
  8890                                  .L_lambda_simple_code_003e:	; lambda-simple body
  8891 00006271 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8892 00006277 740B                    	je .L_lambda_simple_arity_check_ok_0049
  8893 00006279 FF742410                	push qword [rsp + 8 * 2]
  8894 0000627D 6A01                    	push 1
  8895 0000627F E9D6340000              	jmp L_error_incorrect_arity_simple
  8896                                  .L_lambda_simple_arity_check_ok_0049:
  8897 00006284 C8000000                	enter 0, 0
  8898                                  	; preparing a non-tail-call
  8899 00006288 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8900 0000628D E80F350000              	call malloc
  8901 00006292 50                      	push rax
  8902 00006293 BF08000000              	mov rdi, 8 * 1	; new rib
  8903 00006298 E804350000              	call malloc
  8904 0000629D 50                      	push rax
  8905 0000629E BF10000000              	mov rdi, 8 * 2	; extended env
  8906 000062A3 E8F9340000              	call malloc
  8907 000062A8 488B7D10                	mov rdi, ENV
  8908 000062AC BE00000000              	mov rsi, 0
  8909 000062B1 BA01000000              	mov rdx, 1
  8910                                  .L_lambda_simple_env_loop_003f:	; ext_env[i + 1] <-- env[i]
  8911 000062B6 4883FE01                	cmp rsi, 1
  8912 000062BA 7410                    	je .L_lambda_simple_env_end_003f
  8913 000062BC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8914 000062C0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8915 000062C4 48FFC6                  	inc rsi
  8916 000062C7 48FFC2                  	inc rdx
  8917 000062CA EBEA                    	jmp .L_lambda_simple_env_loop_003f
  8918                                  .L_lambda_simple_env_end_003f:
  8919 000062CC 5B                      	pop rbx
  8920 000062CD BE00000000              	mov rsi, 0
  8921                                  .L_lambda_simple_params_loop_003f:	; copy params
  8922 000062D2 4883FE01                	cmp rsi, 1
  8923 000062D6 740E                    	je .L_lambda_simple_params_end_003f
  8924 000062D8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8925 000062DD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8926 000062E1 48FFC6                  	inc rsi
  8927 000062E4 EBEC                    	jmp .L_lambda_simple_params_loop_003f
  8928                                  .L_lambda_simple_params_end_003f:
  8929 000062E6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8930 000062E9 4889C3                  	mov rbx, rax
  8931 000062EC 58                      	pop rax
  8932 000062ED C60004                  	mov byte [rax], T_closure
  8933 000062F0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8934 000062F4 48C74009[01630000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003f
  8935 000062FC E952050000              	jmp .L_lambda_simple_end_003f
  8936                                  .L_lambda_simple_code_003f:	; lambda-simple body
  8937 00006301 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8938 00006307 740B                    	je .L_lambda_simple_arity_check_ok_004a
  8939 00006309 FF742410                	push qword [rsp + 8 * 2]
  8940 0000630D 6A02                    	push 2
  8941 0000630F E946340000              	jmp L_error_incorrect_arity_simple
  8942                                  .L_lambda_simple_arity_check_ok_004a:
  8943 00006314 C8000000                	enter 0, 0
  8944                                  	; preparing a non-tail-call
  8945 00006318 488B4520                	mov rax, PARAM(0)	; param a
  8946 0000631C 50                      	push rax
  8947 0000631D 6A01                    	push 1	; arg count
  8948 0000631F 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  8949 00006327 803805                  	cmp byte [rax], T_undefined
  8950 0000632A 0F8444330000            	je L_error_fvar_undefined
  8951 00006330 803804                  	cmp byte [rax], T_closure
  8952 00006333 0F85BF330000            	jne L_error_non_closure
  8953 00006339 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8954 0000633C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8955 0000633F 483D[02000000]          	cmp rax, sob_boolean_false
  8956 00006345 0F8483010000            	je .L_if_else_0035
  8957                                  	; preparing a non-tail-call
  8958 0000634B 488B4528                	mov rax, PARAM(1)	; param b
  8959 0000634F 50                      	push rax
  8960 00006350 6A01                    	push 1	; arg count
  8961 00006352 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  8962 0000635A 803805                  	cmp byte [rax], T_undefined
  8963 0000635D 0F8411330000            	je L_error_fvar_undefined
  8964 00006363 803804                  	cmp byte [rax], T_closure
  8965 00006366 0F858C330000            	jne L_error_non_closure
  8966 0000636C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8967 0000636F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8968 00006372 483D[02000000]          	cmp rax, sob_boolean_false
  8969 00006378 7431                    	je .L_if_else_002c
  8970                                  	; preparing a non-tail-call
  8971 0000637A 488B4528                	mov rax, PARAM(1)	; param b
  8972 0000637E 50                      	push rax
  8973 0000637F 488B4520                	mov rax, PARAM(0)	; param a
  8974 00006383 50                      	push rax
  8975 00006384 6A02                    	push 2	; arg count
  8976 00006386 488B0425[A90B0000]      	mov rax, qword [free_var_24]	; free var __bin-mul-zz
  8977 0000638E 803805                  	cmp byte [rax], T_undefined
  8978 00006391 0F84DD320000            	je L_error_fvar_undefined
  8979 00006397 803804                  	cmp byte [rax], T_closure
  8980 0000639A 0F8558330000            	jne L_error_non_closure
  8981 000063A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8982 000063A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8983 000063A6 E91E010000              	jmp .L_if_end_0031
  8984                                  .L_if_else_002c:
  8985                                  	; preparing a non-tail-call
  8986 000063AB 488B4528                	mov rax, PARAM(1)	; param b
  8987 000063AF 50                      	push rax
  8988 000063B0 6A01                    	push 1	; arg count
  8989 000063B2 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
  8990 000063BA 803805                  	cmp byte [rax], T_undefined
  8991 000063BD 0F84B1320000            	je L_error_fvar_undefined
  8992 000063C3 803804                  	cmp byte [rax], T_closure
  8993 000063C6 0F852C330000            	jne L_error_non_closure
  8994 000063CC FF7001                  	push SOB_CLOSURE_ENV(rax)
  8995 000063CF FF5009                  	call SOB_CLOSURE_CODE(rax)
  8996 000063D2 483D[02000000]          	cmp rax, sob_boolean_false
  8997 000063D8 7454                    	je .L_if_else_002b
  8998                                  	; preparing a non-tail-call
  8999 000063DA 488B4528                	mov rax, PARAM(1)	; param b
  9000 000063DE 50                      	push rax
  9001                                  	; preparing a non-tail-call
  9002 000063DF 488B4520                	mov rax, PARAM(0)	; param a
  9003 000063E3 50                      	push rax
  9004 000063E4 6A01                    	push 1	; arg count
  9005 000063E6 488B0425[FE0B0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
  9006 000063EE 803805                  	cmp byte [rax], T_undefined
  9007 000063F1 0F847D320000            	je L_error_fvar_undefined
  9008 000063F7 803804                  	cmp byte [rax], T_closure
  9009 000063FA 0F85F8320000            	jne L_error_non_closure
  9010 00006400 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9011 00006403 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9012 00006406 50                      	push rax
  9013 00006407 6A02                    	push 2	; arg count
  9014 00006409 488B0425[870B0000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
  9015 00006411 803805                  	cmp byte [rax], T_undefined
  9016 00006414 0F845A320000            	je L_error_fvar_undefined
  9017 0000641A 803804                  	cmp byte [rax], T_closure
  9018 0000641D 0F85D5320000            	jne L_error_non_closure
  9019 00006423 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9020 00006426 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9021 00006429 E99B000000              	jmp .L_if_end_0030
  9022                                  .L_if_else_002b:
  9023                                  	; preparing a non-tail-call
  9024 0000642E 488B4528                	mov rax, PARAM(1)	; param b
  9025 00006432 50                      	push rax
  9026 00006433 6A01                    	push 1	; arg count
  9027 00006435 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
  9028 0000643D 803805                  	cmp byte [rax], T_undefined
  9029 00006440 0F842E320000            	je L_error_fvar_undefined
  9030 00006446 803804                  	cmp byte [rax], T_closure
  9031 00006449 0F85A9320000            	jne L_error_non_closure
  9032 0000644F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9033 00006452 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9034 00006455 483D[02000000]          	cmp rax, sob_boolean_false
  9035 0000645B 7451                    	je .L_if_else_002a
  9036                                  	; preparing a non-tail-call
  9037 0000645D 488B4528                	mov rax, PARAM(1)	; param b
  9038 00006461 50                      	push rax
  9039                                  	; preparing a non-tail-call
  9040 00006462 488B4520                	mov rax, PARAM(0)	; param a
  9041 00006466 50                      	push rax
  9042 00006467 6A01                    	push 1	; arg count
  9043 00006469 488B0425[500F0000]      	mov rax, qword [free_var_79]	; free var integer->real
  9044 00006471 803805                  	cmp byte [rax], T_undefined
  9045 00006474 0F84FA310000            	je L_error_fvar_undefined
  9046 0000647A 803804                  	cmp byte [rax], T_closure
  9047 0000647D 0F8575320000            	jne L_error_non_closure
  9048 00006483 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9049 00006486 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9050 00006489 50                      	push rax
  9051 0000648A 6A02                    	push 2	; arg count
  9052 0000648C 488B0425[980B0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
  9053 00006494 803805                  	cmp byte [rax], T_undefined
  9054 00006497 0F84D7310000            	je L_error_fvar_undefined
  9055 0000649D 803804                  	cmp byte [rax], T_closure
  9056 000064A0 0F8552320000            	jne L_error_non_closure
  9057 000064A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9058 000064A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9059 000064AC EB1B                    	jmp .L_if_end_002f
  9060                                  .L_if_else_002a:
  9061                                  	; preparing a non-tail-call
  9062 000064AE 6A00                    	push 0	; arg count
  9063 000064B0 488B4510                	mov rax, ENV
  9064 000064B4 488B00                  	mov rax, qword [rax + 8 * 0]
  9065 000064B7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9066 000064BA 803804                  	cmp byte [rax], T_closure
  9067 000064BD 0F8535320000            	jne L_error_non_closure
  9068 000064C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9069 000064C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9070                                  .L_if_end_002f:
  9071                                  .L_if_end_0030:
  9072                                  .L_if_end_0031:
  9073 000064C9 E981030000              	jmp .L_if_end_003a
  9074                                  .L_if_else_0035:
  9075                                  	; preparing a non-tail-call
  9076 000064CE 488B4520                	mov rax, PARAM(0)	; param a
  9077 000064D2 50                      	push rax
  9078 000064D3 6A01                    	push 1	; arg count
  9079 000064D5 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
  9080 000064DD 803805                  	cmp byte [rax], T_undefined
  9081 000064E0 0F848E310000            	je L_error_fvar_undefined
  9082 000064E6 803804                  	cmp byte [rax], T_closure
  9083 000064E9 0F8509320000            	jne L_error_non_closure
  9084 000064EF FF7001                  	push SOB_CLOSURE_ENV(rax)
  9085 000064F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9086 000064F5 483D[02000000]          	cmp rax, sob_boolean_false
  9087 000064FB 0F8483010000            	je .L_if_else_0034
  9088                                  	; preparing a non-tail-call
  9089 00006501 488B4528                	mov rax, PARAM(1)	; param b
  9090 00006505 50                      	push rax
  9091 00006506 6A01                    	push 1	; arg count
  9092 00006508 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  9093 00006510 803805                  	cmp byte [rax], T_undefined
  9094 00006513 0F845B310000            	je L_error_fvar_undefined
  9095 00006519 803804                  	cmp byte [rax], T_closure
  9096 0000651C 0F85D6310000            	jne L_error_non_closure
  9097 00006522 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9098 00006525 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9099 00006528 483D[02000000]          	cmp rax, sob_boolean_false
  9100 0000652E 7454                    	je .L_if_else_002f
  9101                                  	; preparing a non-tail-call
  9102                                  	; preparing a non-tail-call
  9103 00006530 488B4528                	mov rax, PARAM(1)	; param b
  9104 00006534 50                      	push rax
  9105 00006535 6A01                    	push 1	; arg count
  9106 00006537 488B0425[FE0B0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
  9107 0000653F 803805                  	cmp byte [rax], T_undefined
  9108 00006542 0F842C310000            	je L_error_fvar_undefined
  9109 00006548 803804                  	cmp byte [rax], T_closure
  9110 0000654B 0F85A7310000            	jne L_error_non_closure
  9111 00006551 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9112 00006554 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9113 00006557 50                      	push rax
  9114 00006558 488B4520                	mov rax, PARAM(0)	; param a
  9115 0000655C 50                      	push rax
  9116 0000655D 6A02                    	push 2	; arg count
  9117 0000655F 488B0425[870B0000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
  9118 00006567 803805                  	cmp byte [rax], T_undefined
  9119 0000656A 0F8404310000            	je L_error_fvar_undefined
  9120 00006570 803804                  	cmp byte [rax], T_closure
  9121 00006573 0F857F310000            	jne L_error_non_closure
  9122 00006579 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9123 0000657C FF5009                  	call SOB_CLOSURE_CODE(rax)
  9124 0000657F E9FB000000              	jmp .L_if_end_0034
  9125                                  .L_if_else_002f:
  9126                                  	; preparing a non-tail-call
  9127 00006584 488B4528                	mov rax, PARAM(1)	; param b
  9128 00006588 50                      	push rax
  9129 00006589 6A01                    	push 1	; arg count
  9130 0000658B 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
  9131 00006593 803805                  	cmp byte [rax], T_undefined
  9132 00006596 0F84D8300000            	je L_error_fvar_undefined
  9133 0000659C 803804                  	cmp byte [rax], T_closure
  9134 0000659F 0F8553310000            	jne L_error_non_closure
  9135 000065A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9136 000065A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9137 000065AB 483D[02000000]          	cmp rax, sob_boolean_false
  9138 000065B1 7431                    	je .L_if_else_002e
  9139                                  	; preparing a non-tail-call
  9140 000065B3 488B4528                	mov rax, PARAM(1)	; param b
  9141 000065B7 50                      	push rax
  9142 000065B8 488B4520                	mov rax, PARAM(0)	; param a
  9143 000065BC 50                      	push rax
  9144 000065BD 6A02                    	push 2	; arg count
  9145 000065BF 488B0425[870B0000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
  9146 000065C7 803805                  	cmp byte [rax], T_undefined
  9147 000065CA 0F84A4300000            	je L_error_fvar_undefined
  9148 000065D0 803804                  	cmp byte [rax], T_closure
  9149 000065D3 0F851F310000            	jne L_error_non_closure
  9150 000065D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9151 000065DC FF5009                  	call SOB_CLOSURE_CODE(rax)
  9152 000065DF E99B000000              	jmp .L_if_end_0033
  9153                                  .L_if_else_002e:
  9154                                  	; preparing a non-tail-call
  9155 000065E4 488B4528                	mov rax, PARAM(1)	; param b
  9156 000065E8 50                      	push rax
  9157 000065E9 6A01                    	push 1	; arg count
  9158 000065EB 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
  9159 000065F3 803805                  	cmp byte [rax], T_undefined
  9160 000065F6 0F8478300000            	je L_error_fvar_undefined
  9161 000065FC 803804                  	cmp byte [rax], T_closure
  9162 000065FF 0F85F3300000            	jne L_error_non_closure
  9163 00006605 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9164 00006608 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9165 0000660B 483D[02000000]          	cmp rax, sob_boolean_false
  9166 00006611 7451                    	je .L_if_else_002d
  9167                                  	; preparing a non-tail-call
  9168 00006613 488B4528                	mov rax, PARAM(1)	; param b
  9169 00006617 50                      	push rax
  9170                                  	; preparing a non-tail-call
  9171 00006618 488B4520                	mov rax, PARAM(0)	; param a
  9172 0000661C 50                      	push rax
  9173 0000661D 6A01                    	push 1	; arg count
  9174 0000661F 488B0425[1D0F0000]      	mov rax, qword [free_var_76]	; free var fraction->real
  9175 00006627 803805                  	cmp byte [rax], T_undefined
  9176 0000662A 0F8444300000            	je L_error_fvar_undefined
  9177 00006630 803804                  	cmp byte [rax], T_closure
  9178 00006633 0F85BF300000            	jne L_error_non_closure
  9179 00006639 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9180 0000663C FF5009                  	call SOB_CLOSURE_CODE(rax)
  9181 0000663F 50                      	push rax
  9182 00006640 6A02                    	push 2	; arg count
  9183 00006642 488B0425[980B0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
  9184 0000664A 803805                  	cmp byte [rax], T_undefined
  9185 0000664D 0F8421300000            	je L_error_fvar_undefined
  9186 00006653 803804                  	cmp byte [rax], T_closure
  9187 00006656 0F859C300000            	jne L_error_non_closure
  9188 0000665C FF7001                  	push SOB_CLOSURE_ENV(rax)
  9189 0000665F FF5009                  	call SOB_CLOSURE_CODE(rax)
  9190 00006662 EB1B                    	jmp .L_if_end_0032
  9191                                  .L_if_else_002d:
  9192                                  	; preparing a non-tail-call
  9193 00006664 6A00                    	push 0	; arg count
  9194 00006666 488B4510                	mov rax, ENV
  9195 0000666A 488B00                  	mov rax, qword [rax + 8 * 0]
  9196 0000666D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9197 00006670 803804                  	cmp byte [rax], T_closure
  9198 00006673 0F857F300000            	jne L_error_non_closure
  9199 00006679 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9200 0000667C FF5009                  	call SOB_CLOSURE_CODE(rax)
  9201                                  .L_if_end_0032:
  9202                                  .L_if_end_0033:
  9203                                  .L_if_end_0034:
  9204 0000667F E9CB010000              	jmp .L_if_end_0039
  9205                                  .L_if_else_0034:
  9206                                  	; preparing a non-tail-call
  9207 00006684 488B4520                	mov rax, PARAM(0)	; param a
  9208 00006688 50                      	push rax
  9209 00006689 6A01                    	push 1	; arg count
  9210 0000668B 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
  9211 00006693 803805                  	cmp byte [rax], T_undefined
  9212 00006696 0F84D82F0000            	je L_error_fvar_undefined
  9213 0000669C 803804                  	cmp byte [rax], T_closure
  9214 0000669F 0F8553300000            	jne L_error_non_closure
  9215 000066A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9216 000066A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9217 000066AB 483D[02000000]          	cmp rax, sob_boolean_false
  9218 000066B1 0F847D010000            	je .L_if_else_0033
  9219                                  	; preparing a non-tail-call
  9220 000066B7 488B4528                	mov rax, PARAM(1)	; param b
  9221 000066BB 50                      	push rax
  9222 000066BC 6A01                    	push 1	; arg count
  9223 000066BE 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  9224 000066C6 803805                  	cmp byte [rax], T_undefined
  9225 000066C9 0F84A52F0000            	je L_error_fvar_undefined
  9226 000066CF 803804                  	cmp byte [rax], T_closure
  9227 000066D2 0F8520300000            	jne L_error_non_closure
  9228 000066D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9229 000066DB FF5009                  	call SOB_CLOSURE_CODE(rax)
  9230 000066DE 483D[02000000]          	cmp rax, sob_boolean_false
  9231 000066E4 7454                    	je .L_if_else_0032
  9232                                  	; preparing a non-tail-call
  9233                                  	; preparing a non-tail-call
  9234 000066E6 488B4528                	mov rax, PARAM(1)	; param b
  9235 000066EA 50                      	push rax
  9236 000066EB 6A01                    	push 1	; arg count
  9237 000066ED 488B0425[500F0000]      	mov rax, qword [free_var_79]	; free var integer->real
  9238 000066F5 803805                  	cmp byte [rax], T_undefined
  9239 000066F8 0F84762F0000            	je L_error_fvar_undefined
  9240 000066FE 803804                  	cmp byte [rax], T_closure
  9241 00006701 0F85F12F0000            	jne L_error_non_closure
  9242 00006707 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9243 0000670A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9244 0000670D 50                      	push rax
  9245 0000670E 488B4520                	mov rax, PARAM(0)	; param a
  9246 00006712 50                      	push rax
  9247 00006713 6A02                    	push 2	; arg count
  9248 00006715 488B0425[980B0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
  9249 0000671D 803805                  	cmp byte [rax], T_undefined
  9250 00006720 0F844E2F0000            	je L_error_fvar_undefined
  9251 00006726 803804                  	cmp byte [rax], T_closure
  9252 00006729 0F85C92F0000            	jne L_error_non_closure
  9253 0000672F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9254 00006732 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9255 00006735 E9F8000000              	jmp .L_if_end_0037
  9256                                  .L_if_else_0032:
  9257                                  	; preparing a non-tail-call
  9258 0000673A 488B4528                	mov rax, PARAM(1)	; param b
  9259 0000673E 50                      	push rax
  9260 0000673F 6A01                    	push 1	; arg count
  9261 00006741 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
  9262 00006749 803805                  	cmp byte [rax], T_undefined
  9263 0000674C 0F84222F0000            	je L_error_fvar_undefined
  9264 00006752 803804                  	cmp byte [rax], T_closure
  9265 00006755 0F859D2F0000            	jne L_error_non_closure
  9266 0000675B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9267 0000675E FF5009                  	call SOB_CLOSURE_CODE(rax)
  9268 00006761 483D[02000000]          	cmp rax, sob_boolean_false
  9269 00006767 7451                    	je .L_if_else_0031
  9270                                  	; preparing a non-tail-call
  9271                                  	; preparing a non-tail-call
  9272 00006769 488B4528                	mov rax, PARAM(1)	; param b
  9273 0000676D 50                      	push rax
  9274 0000676E 6A01                    	push 1	; arg count
  9275 00006770 488B0425[1D0F0000]      	mov rax, qword [free_var_76]	; free var fraction->real
  9276 00006778 803805                  	cmp byte [rax], T_undefined
  9277 0000677B 0F84F32E0000            	je L_error_fvar_undefined
  9278 00006781 803804                  	cmp byte [rax], T_closure
  9279 00006784 0F856E2F0000            	jne L_error_non_closure
  9280 0000678A FF7001                  	push SOB_CLOSURE_ENV(rax)
  9281 0000678D FF5009                  	call SOB_CLOSURE_CODE(rax)
  9282 00006790 50                      	push rax
  9283 00006791 488B4520                	mov rax, PARAM(0)	; param a
  9284 00006795 50                      	push rax
  9285 00006796 6A02                    	push 2	; arg count
  9286 00006798 488B0425[980B0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
  9287 000067A0 803805                  	cmp byte [rax], T_undefined
  9288 000067A3 0F84CB2E0000            	je L_error_fvar_undefined
  9289 000067A9 803804                  	cmp byte [rax], T_closure
  9290 000067AC 0F85462F0000            	jne L_error_non_closure
  9291 000067B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9292 000067B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9293 000067B8 EB78                    	jmp .L_if_end_0036
  9294                                  .L_if_else_0031:
  9295                                  	; preparing a non-tail-call
  9296 000067BA 488B4528                	mov rax, PARAM(1)	; param b
  9297 000067BE 50                      	push rax
  9298 000067BF 6A01                    	push 1	; arg count
  9299 000067C1 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
  9300 000067C9 803805                  	cmp byte [rax], T_undefined
  9301 000067CC 0F84A22E0000            	je L_error_fvar_undefined
  9302 000067D2 803804                  	cmp byte [rax], T_closure
  9303 000067D5 0F851D2F0000            	jne L_error_non_closure
  9304 000067DB FF7001                  	push SOB_CLOSURE_ENV(rax)
  9305 000067DE FF5009                  	call SOB_CLOSURE_CODE(rax)
  9306 000067E1 483D[02000000]          	cmp rax, sob_boolean_false
  9307 000067E7 742E                    	je .L_if_else_0030
  9308                                  	; preparing a non-tail-call
  9309 000067E9 488B4528                	mov rax, PARAM(1)	; param b
  9310 000067ED 50                      	push rax
  9311 000067EE 488B4520                	mov rax, PARAM(0)	; param a
  9312 000067F2 50                      	push rax
  9313 000067F3 6A02                    	push 2	; arg count
  9314 000067F5 488B0425[980B0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
  9315 000067FD 803805                  	cmp byte [rax], T_undefined
  9316 00006800 0F846E2E0000            	je L_error_fvar_undefined
  9317 00006806 803804                  	cmp byte [rax], T_closure
  9318 00006809 0F85E92E0000            	jne L_error_non_closure
  9319 0000680F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9320 00006812 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9321 00006815 EB1B                    	jmp .L_if_end_0035
  9322                                  .L_if_else_0030:
  9323                                  	; preparing a non-tail-call
  9324 00006817 6A00                    	push 0	; arg count
  9325 00006819 488B4510                	mov rax, ENV
  9326 0000681D 488B00                  	mov rax, qword [rax + 8 * 0]
  9327 00006820 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9328 00006823 803804                  	cmp byte [rax], T_closure
  9329 00006826 0F85CC2E0000            	jne L_error_non_closure
  9330 0000682C FF7001                  	push SOB_CLOSURE_ENV(rax)
  9331 0000682F FF5009                  	call SOB_CLOSURE_CODE(rax)
  9332                                  .L_if_end_0035:
  9333                                  .L_if_end_0036:
  9334                                  .L_if_end_0037:
  9335 00006832 EB1B                    	jmp .L_if_end_0038
  9336                                  .L_if_else_0033:
  9337                                  	; preparing a non-tail-call
  9338 00006834 6A00                    	push 0	; arg count
  9339 00006836 488B4510                	mov rax, ENV
  9340 0000683A 488B00                  	mov rax, qword [rax + 8 * 0]
  9341 0000683D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9342 00006840 803804                  	cmp byte [rax], T_closure
  9343 00006843 0F85AF2E0000            	jne L_error_non_closure
  9344 00006849 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9345 0000684C FF5009                  	call SOB_CLOSURE_CODE(rax)
  9346                                  .L_if_end_0038:
  9347                                  .L_if_end_0039:
  9348                                  .L_if_end_003a:
  9349 0000684F C9                      	leave
  9350 00006850 C22000                  	ret AND_KILL_FRAME(2)
  9351                                  .L_lambda_simple_end_003f:	; new closure is in rax
  9352 00006853 50                      	push rax
  9353 00006854 6A01                    	push 1	; arg count
  9354 00006856 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9355 0000685B E8412F0000              	call malloc
  9356 00006860 50                      	push rax
  9357 00006861 BF08000000              	mov rdi, 8 * 1	; new rib
  9358 00006866 E8362F0000              	call malloc
  9359 0000686B 50                      	push rax
  9360 0000686C BF10000000              	mov rdi, 8 * 2	; extended env
  9361 00006871 E82B2F0000              	call malloc
  9362 00006876 488B7D10                	mov rdi, ENV
  9363 0000687A BE00000000              	mov rsi, 0
  9364 0000687F BA01000000              	mov rdx, 1
  9365                                  .L_lambda_simple_env_loop_0040:	; ext_env[i + 1] <-- env[i]
  9366 00006884 4883FE01                	cmp rsi, 1
  9367 00006888 7410                    	je .L_lambda_simple_env_end_0040
  9368 0000688A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9369 0000688E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9370 00006892 48FFC6                  	inc rsi
  9371 00006895 48FFC2                  	inc rdx
  9372 00006898 EBEA                    	jmp .L_lambda_simple_env_loop_0040
  9373                                  .L_lambda_simple_env_end_0040:
  9374 0000689A 5B                      	pop rbx
  9375 0000689B BE00000000              	mov rsi, 0
  9376                                  .L_lambda_simple_params_loop_0040:	; copy params
  9377 000068A0 4883FE01                	cmp rsi, 1
  9378 000068A4 740E                    	je .L_lambda_simple_params_end_0040
  9379 000068A6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9380 000068AB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9381 000068AF 48FFC6                  	inc rsi
  9382 000068B2 EBEC                    	jmp .L_lambda_simple_params_loop_0040
  9383                                  .L_lambda_simple_params_end_0040:
  9384 000068B4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9385 000068B7 4889C3                  	mov rbx, rax
  9386 000068BA 58                      	pop rax
  9387 000068BB C60004                  	mov byte [rax], T_closure
  9388 000068BE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9389 000068C2 48C74009[CF680000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0040
  9390 000068CA E9E3010000              	jmp .L_lambda_simple_end_0040
  9391                                  .L_lambda_simple_code_0040:	; lambda-simple body
  9392 000068CF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9393 000068D5 740B                    	je .L_lambda_simple_arity_check_ok_004b
  9394 000068D7 FF742410                	push qword [rsp + 8 * 2]
  9395 000068DB 6A01                    	push 1
  9396 000068DD E9782E0000              	jmp L_error_incorrect_arity_simple
  9397                                  .L_lambda_simple_arity_check_ok_004b:
  9398 000068E2 C8000000                	enter 0, 0
  9399 000068E6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9400 000068EB E8B12E0000              	call malloc
  9401 000068F0 50                      	push rax
  9402 000068F1 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
  9403 000068F5 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
  9404 000068F9 BF08000000              	mov rdi, 8 * 1	; new rib for optional parameters
  9405 000068FE E89E2E0000              	call malloc
  9406 00006903 50                      	push rax
  9407 00006904 BF18000000              	mov rdi, 8 * 3	; extended env
  9408 00006909 E8932E0000              	call malloc
  9409 0000690E 488B7D10                	mov rdi, ENV
  9410 00006912 BE00000000              	mov rsi, 0
  9411 00006917 BA01000000              	mov rdx, 1
  9412                                  .L_lambda_opt_code_0022:	; ext_env[i + 1] <-- env[i] copy all the array
  9413 0000691C 4883FE02                	cmp rsi, 2
  9414 00006920 7410                    	je .L_lambda_opt_end_002d
  9415 00006922 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9416 00006926 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9417 0000692A 48FFC6                  	inc rsi
  9418 0000692D 48FFC2                  	inc rdx
  9419 00006930 EBEA                    	jmp .L_lambda_opt_code_0022
  9420                                  .L_lambda_opt_end_002d:
  9421 00006932 5B                      	pop rbx
  9422 00006933 BE00000000              	mov rsi, 0
  9423                                  .L_lambda_opt_code_0023:	; copy params
  9424 00006938 4883FE01                	cmp rsi, 1
  9425 0000693C 740E                    	je .L_lambda_opt_end_002e
  9426 0000693E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9427 00006943 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9428 00006947 48FFC6                  	inc rsi
  9429 0000694A EBEC                    	jmp .L_lambda_opt_code_0023
  9430                                  .L_lambda_opt_end_002e:
  9431 0000694C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9432 0000694F 4889C3                  	mov rbx, rax
  9433 00006952 58                      	pop rax
  9434 00006953 C60004                  	mov byte [rax], T_closure
  9435 00006956 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9436 0000695A 48C74009[67690000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0024
  9437 00006962 E947010000              	jmp .L_lambda_opt_end_002f
  9438                                  .L_lambda_opt_code_0024:	; lambda-opt body
  9439 00006967 48837C241000            	cmp qword [rsp + 8 * 2], 0
  9440 0000696D 7D0B                    	jge .L_lambda_simple_arity_check_ok_004c
  9441 0000696F FF742410                	push qword [rsp + 8 * 2]
  9442 00006973 6A00                    	push 0
  9443 00006975 E9E02D0000              	jmp L_error_incorrect_arity_simple
  9444                                  .L_lambda_simple_arity_check_ok_004c:
  9445 0000697A 4C8B442410              	mov r8, qword [rsp + 8 * 2]
  9446 0000697F 4983E800                	sub r8, 0
  9447 00006983 4C89C3                  	mov rbx,r8
  9448 00006986 4983F800                	cmp r8, 0
  9449 0000698A 7535                    	jne .L_lambda_opt_params_loop_0024
  9450 0000698C 488B542410              	mov rdx, qword [rsp + 8 * 2]
  9451 00006991 4883C203                	add rdx , 3
  9452 00006995 4883EC08                	sub rsp , 8
  9453 00006999 4889E1                  	mov rcx, rsp
  9454                                  .L_lambda_opt_stack_adjusted_0017: ;pushing down the stack of the current function
  9455 0000699C 488B5908                	mov rbx, qword [rcx + 8 * 1]
  9456 000069A0 488919                  	mov qword[rcx] , rbx
  9457 000069A3 4883C108                	add rcx , 8
  9458 000069A7 48FFCA                  	dec rdx
  9459 000069AA 4883FA00                	cmp rdx, 0
  9460 000069AE 75EC                    	jne .L_lambda_opt_stack_adjusted_0017
  9461 000069B0 48FF442410              	inc qword [rsp + 8 * 2]
  9462 000069B5 48C701[01000000]        	mov qword [rcx], sob_nil 
  9463 000069BC E9A8000000              	jmp .L_lambda_opt_end_0030
  9464                                  	.L_lambda_opt_params_loop_0024:
  9465 000069C1 488B542410              	mov rdx, qword [rsp + 8*2]
  9466 000069C6 488D4CD410              	lea rcx, [rsp + 8*2 + 8*rdx]
  9467 000069CB 4C89C2                  	mov rdx, r8
  9468 000069CE 49B9-                   	mov r9, sob_nil
  9468 000069D0 [0100000000000000] 
  9469 000069D8 4989C9                  	mov r9, rcx
  9470                                  	.L_lambda_opt_params_loop_0022: ;loop for copying the opt into list
  9471 000069DB BF11000000              	mov rdi, (1 + 8 + 8)
  9472 000069E0 E8BC2D0000              	call malloc
  9473 000069E5 C60021                  	mov byte[rax], T_pair
  9474 000069E8 488B19                  	mov rbx, qword [rcx]
  9475 000069EB 48895801                	mov SOB_PAIR_CAR(rax), rbx
  9476 000069EF 4C894809                	mov SOB_PAIR_CDR(rax), r9
  9477 000069F3 4989C1                  	mov r9, rax
  9478 000069F6 48FFCA                  	dec rdx
  9479 000069F9 4883E908                	sub rcx, 8
  9480 000069FD 4883FA00                	cmp rdx, 0
  9481 00006A01 75D8                    	jne .L_lambda_opt_params_loop_0022
  9482 00006A03 488B542410              	mov rdx, qword [rsp + 8 * 2]
  9483 00006A08 4889E0                  	mov rax, rsp
  9484 00006A0B 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
  9485 00006A10 4989DC                  	mov r12 , rbx
  9486 00006A13 4C89C1                  	mov rcx, r8
  9487 00006A16 48FFC9                  	dec rcx
  9488 00006A19 4883C203                	add rdx, 3
  9489 00006A1D 4829CA                  	sub rdx,rcx
  9490 00006A20 48C1E103                	shl rcx, 3
  9491                                  	.L_lambda_opt_stack_adjusted_0018:
  9492 00006A24 4883FA00                	cmp rdx, 0
  9493 00006A28 7419                    	je .L_lambda_opt_params_end_002e
  9494 00006A2A 4889D8                  	mov rax, rbx
  9495 00006A2D 4829C8                  	sub rax, rcx
  9496 00006A30 488B30                  	mov rsi, qword [rax]
  9497 00006A33 488933                  	mov [rbx], rsi
  9498 00006A36 4883EB08                	sub rbx, 8
  9499 00006A3A 48FFCA                  	dec rdx
  9500 00006A3D 4883FA00                	cmp rdx, 0
  9501 00006A41 75E1                    	jne .L_lambda_opt_stack_adjusted_0018
  9502                                  	.L_lambda_opt_params_end_002e:
  9503 00006A43 4801CC                  	add rsp,rcx
  9504 00006A46 BB00000000              	mov rbx, 0
  9505 00006A4B 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
  9506 00006A50 4883C303                	add rbx,3
  9507 00006A54 4C29C3                  	sub rbx,r8
  9508 00006A57 48C1E303                	shl rbx, 3
  9509 00006A5B 4801E3                  	add rbx, rsp
  9510 00006A5E 4C890B                  	mov qword[rbx] , r9
  9511 00006A61 49FFC8                  	dec r8
  9512 00006A64 4C29442410              	sub qword [rsp + 8 * 2], r8
  9513                                  	.L_lambda_opt_end_0030:
  9514 00006A69 C8000000                	enter 0, 0
  9515                                  	; preparing a non-tail-call
  9516 00006A6D 488B4520                	mov rax, PARAM(0)	; param s
  9517 00006A71 50                      	push rax
  9518 00006A72 48B8-                   	mov rax, L_constants + 2270
  9518 00006A74 [DE08000000000000] 
  9519 00006A7C 50                      	push rax
  9520 00006A7D 488B4510                	mov rax, ENV
  9521 00006A81 488B00                  	mov rax, qword [rax + 8 * 0]
  9522 00006A84 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin*
  9523 00006A87 50                      	push rax
  9524 00006A88 6A03                    	push 3	; arg count
  9525 00006A8A 488B0425[FB0E0000]      	mov rax, qword [free_var_74]	; free var fold-left
  9526 00006A92 803805                  	cmp byte [rax], T_undefined
  9527 00006A95 0F84D92B0000            	je L_error_fvar_undefined
  9528 00006A9B 803804                  	cmp byte [rax], T_closure
  9529 00006A9E 0F85542C0000            	jne L_error_non_closure
  9530 00006AA4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9531 00006AA7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9532                                  	LEAVE
    49 00006AAA C9                  <1>  leave
  9533 00006AAB C21800                  	ret AND_KILL_FRAME(1)
  9534                                  .L_lambda_opt_end_002f:
  9535 00006AAE C9                      	leave
  9536 00006AAF C21800                  	ret AND_KILL_FRAME(1)
  9537                                  .L_lambda_simple_end_0040:	; new closure is in rax
  9538 00006AB2 803804                  	cmp byte [rax], T_closure
  9539 00006AB5 0F853D2C0000            	jne L_error_non_closure
  9540 00006ABB FF7001                  	push SOB_CLOSURE_ENV(rax)
  9541 00006ABE FF5009                  	call SOB_CLOSURE_CODE(rax)
  9542 00006AC1 C9                      	leave
  9543 00006AC2 C21800                  	ret AND_KILL_FRAME(1)
  9544                                  .L_lambda_simple_end_003e:	; new closure is in rax
  9545 00006AC5 803804                  	cmp byte [rax], T_closure
  9546 00006AC8 0F852A2C0000            	jne L_error_non_closure
  9547 00006ACE FF7001                  	push SOB_CLOSURE_ENV(rax)
  9548 00006AD1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9549 00006AD4 48890425[110A0000]      	mov qword [free_var_0], rax
  9550 00006ADC 48B8-                   	mov rax, sob_void
  9550 00006ADE [0000000000000000] 
  9551                                  
  9552 00006AE6 4889C7                  	mov rdi, rax
  9553 00006AE9 E8082F0000              	call print_sexpr_if_not_void
  9554                                  	; preparing a non-tail-call
  9555 00006AEE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9556 00006AF3 E8A92C0000              	call malloc
  9557 00006AF8 50                      	push rax
  9558 00006AF9 BF00000000              	mov rdi, 8 * 0	; new rib
  9559 00006AFE E89E2C0000              	call malloc
  9560 00006B03 50                      	push rax
  9561 00006B04 BF08000000              	mov rdi, 8 * 1	; extended env
  9562 00006B09 E8932C0000              	call malloc
  9563 00006B0E 488B7D10                	mov rdi, ENV
  9564 00006B12 BE00000000              	mov rsi, 0
  9565 00006B17 BA01000000              	mov rdx, 1
  9566                                  .L_lambda_simple_env_loop_0041:	; ext_env[i + 1] <-- env[i]
  9567 00006B1C 4883FE00                	cmp rsi, 0
  9568 00006B20 7410                    	je .L_lambda_simple_env_end_0041
  9569 00006B22 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9570 00006B26 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9571 00006B2A 48FFC6                  	inc rsi
  9572 00006B2D 48FFC2                  	inc rdx
  9573 00006B30 EBEA                    	jmp .L_lambda_simple_env_loop_0041
  9574                                  .L_lambda_simple_env_end_0041:
  9575 00006B32 5B                      	pop rbx
  9576 00006B33 BE00000000              	mov rsi, 0
  9577                                  .L_lambda_simple_params_loop_0041:	; copy params
  9578 00006B38 4883FE00                	cmp rsi, 0
  9579 00006B3C 740E                    	je .L_lambda_simple_params_end_0041
  9580 00006B3E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9581 00006B43 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9582 00006B47 48FFC6                  	inc rsi
  9583 00006B4A EBEC                    	jmp .L_lambda_simple_params_loop_0041
  9584                                  .L_lambda_simple_params_end_0041:
  9585 00006B4C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9586 00006B4F 4889C3                  	mov rbx, rax
  9587 00006B52 58                      	pop rax
  9588 00006B53 C60004                  	mov byte [rax], T_closure
  9589 00006B56 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9590 00006B5A 48C74009[646B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0041
  9591 00006B62 EB53                    	jmp .L_lambda_simple_end_0041
  9592                                  .L_lambda_simple_code_0041:	; lambda-simple body
  9593 00006B64 48837C241000            	cmp qword [rsp + 8 * 2], 0
  9594 00006B6A 740B                    	je .L_lambda_simple_arity_check_ok_004d
  9595 00006B6C FF742410                	push qword [rsp + 8 * 2]
  9596 00006B70 6A00                    	push 0
  9597 00006B72 E9E32B0000              	jmp L_error_incorrect_arity_simple
  9598                                  .L_lambda_simple_arity_check_ok_004d:
  9599 00006B77 C8000000                	enter 0, 0
  9600                                  	; preparing a non-tail-call
  9601 00006B7B 48B8-                   	mov rax, L_constants + 2187
  9601 00006B7D [8B08000000000000] 
  9602 00006B85 50                      	push rax
  9603 00006B86 48B8-                   	mov rax, L_constants + 2298
  9603 00006B88 [FA08000000000000] 
  9604 00006B90 50                      	push rax
  9605 00006B91 6A02                    	push 2	; arg count
  9606 00006B93 488B0425[D90E0000]      	mov rax, qword [free_var_72]	; free var error
  9607 00006B9B 803805                  	cmp byte [rax], T_undefined
  9608 00006B9E 0F84D02A0000            	je L_error_fvar_undefined
  9609 00006BA4 803804                  	cmp byte [rax], T_closure
  9610 00006BA7 0F854B2B0000            	jne L_error_non_closure
  9611 00006BAD FF7001                  	push SOB_CLOSURE_ENV(rax)
  9612 00006BB0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9613 00006BB3 C9                      	leave
  9614 00006BB4 C21000                  	ret AND_KILL_FRAME(0)
  9615                                  .L_lambda_simple_end_0041:	; new closure is in rax
  9616 00006BB7 50                      	push rax
  9617 00006BB8 6A01                    	push 1	; arg count
  9618 00006BBA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9619 00006BBF E8DD2B0000              	call malloc
  9620 00006BC4 50                      	push rax
  9621 00006BC5 BF00000000              	mov rdi, 8 * 0	; new rib
  9622 00006BCA E8D22B0000              	call malloc
  9623 00006BCF 50                      	push rax
  9624 00006BD0 BF08000000              	mov rdi, 8 * 1	; extended env
  9625 00006BD5 E8C72B0000              	call malloc
  9626 00006BDA 488B7D10                	mov rdi, ENV
  9627 00006BDE BE00000000              	mov rsi, 0
  9628 00006BE3 BA01000000              	mov rdx, 1
  9629                                  .L_lambda_simple_env_loop_0042:	; ext_env[i + 1] <-- env[i]
  9630 00006BE8 4883FE00                	cmp rsi, 0
  9631 00006BEC 7410                    	je .L_lambda_simple_env_end_0042
  9632 00006BEE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9633 00006BF2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9634 00006BF6 48FFC6                  	inc rsi
  9635 00006BF9 48FFC2                  	inc rdx
  9636 00006BFC EBEA                    	jmp .L_lambda_simple_env_loop_0042
  9637                                  .L_lambda_simple_env_end_0042:
  9638 00006BFE 5B                      	pop rbx
  9639 00006BFF BE00000000              	mov rsi, 0
  9640                                  .L_lambda_simple_params_loop_0042:	; copy params
  9641 00006C04 4883FE00                	cmp rsi, 0
  9642 00006C08 740E                    	je .L_lambda_simple_params_end_0042
  9643 00006C0A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9644 00006C0F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9645 00006C13 48FFC6                  	inc rsi
  9646 00006C16 EBEC                    	jmp .L_lambda_simple_params_loop_0042
  9647                                  .L_lambda_simple_params_end_0042:
  9648 00006C18 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9649 00006C1B 4889C3                  	mov rbx, rax
  9650 00006C1E 58                      	pop rax
  9651 00006C1F C60004                  	mov byte [rax], T_closure
  9652 00006C22 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9653 00006C26 48C74009[336C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0042
  9654 00006C2E E989090000              	jmp .L_lambda_simple_end_0042
  9655                                  .L_lambda_simple_code_0042:	; lambda-simple body
  9656 00006C33 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9657 00006C39 740B                    	je .L_lambda_simple_arity_check_ok_004e
  9658 00006C3B FF742410                	push qword [rsp + 8 * 2]
  9659 00006C3F 6A01                    	push 1
  9660 00006C41 E9142B0000              	jmp L_error_incorrect_arity_simple
  9661                                  .L_lambda_simple_arity_check_ok_004e:
  9662 00006C46 C8000000                	enter 0, 0
  9663                                  	; preparing a non-tail-call
  9664 00006C4A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9665 00006C4F E84D2B0000              	call malloc
  9666 00006C54 50                      	push rax
  9667 00006C55 BF08000000              	mov rdi, 8 * 1	; new rib
  9668 00006C5A E8422B0000              	call malloc
  9669 00006C5F 50                      	push rax
  9670 00006C60 BF10000000              	mov rdi, 8 * 2	; extended env
  9671 00006C65 E8372B0000              	call malloc
  9672 00006C6A 488B7D10                	mov rdi, ENV
  9673 00006C6E BE00000000              	mov rsi, 0
  9674 00006C73 BA01000000              	mov rdx, 1
  9675                                  .L_lambda_simple_env_loop_0043:	; ext_env[i + 1] <-- env[i]
  9676 00006C78 4883FE01                	cmp rsi, 1
  9677 00006C7C 7410                    	je .L_lambda_simple_env_end_0043
  9678 00006C7E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9679 00006C82 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9680 00006C86 48FFC6                  	inc rsi
  9681 00006C89 48FFC2                  	inc rdx
  9682 00006C8C EBEA                    	jmp .L_lambda_simple_env_loop_0043
  9683                                  .L_lambda_simple_env_end_0043:
  9684 00006C8E 5B                      	pop rbx
  9685 00006C8F BE00000000              	mov rsi, 0
  9686                                  .L_lambda_simple_params_loop_0043:	; copy params
  9687 00006C94 4883FE01                	cmp rsi, 1
  9688 00006C98 740E                    	je .L_lambda_simple_params_end_0043
  9689 00006C9A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9690 00006C9F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9691 00006CA3 48FFC6                  	inc rsi
  9692 00006CA6 EBEC                    	jmp .L_lambda_simple_params_loop_0043
  9693                                  .L_lambda_simple_params_end_0043:
  9694 00006CA8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9695 00006CAB 4889C3                  	mov rbx, rax
  9696 00006CAE 58                      	pop rax
  9697 00006CAF C60004                  	mov byte [rax], T_closure
  9698 00006CB2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9699 00006CB6 48C74009[C36C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0043
  9700 00006CBE E952050000              	jmp .L_lambda_simple_end_0043
  9701                                  .L_lambda_simple_code_0043:	; lambda-simple body
  9702 00006CC3 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9703 00006CC9 740B                    	je .L_lambda_simple_arity_check_ok_004f
  9704 00006CCB FF742410                	push qword [rsp + 8 * 2]
  9705 00006CCF 6A02                    	push 2
  9706 00006CD1 E9842A0000              	jmp L_error_incorrect_arity_simple
  9707                                  .L_lambda_simple_arity_check_ok_004f:
  9708 00006CD6 C8000000                	enter 0, 0
  9709                                  	; preparing a non-tail-call
  9710 00006CDA 488B4520                	mov rax, PARAM(0)	; param a
  9711 00006CDE 50                      	push rax
  9712 00006CDF 6A01                    	push 1	; arg count
  9713 00006CE1 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  9714 00006CE9 803805                  	cmp byte [rax], T_undefined
  9715 00006CEC 0F8482290000            	je L_error_fvar_undefined
  9716 00006CF2 803804                  	cmp byte [rax], T_closure
  9717 00006CF5 0F85FD290000            	jne L_error_non_closure
  9718 00006CFB FF7001                  	push SOB_CLOSURE_ENV(rax)
  9719 00006CFE FF5009                  	call SOB_CLOSURE_CODE(rax)
  9720 00006D01 483D[02000000]          	cmp rax, sob_boolean_false
  9721 00006D07 0F8483010000            	je .L_if_else_0041
  9722                                  	; preparing a non-tail-call
  9723 00006D0D 488B4528                	mov rax, PARAM(1)	; param b
  9724 00006D11 50                      	push rax
  9725 00006D12 6A01                    	push 1	; arg count
  9726 00006D14 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  9727 00006D1C 803805                  	cmp byte [rax], T_undefined
  9728 00006D1F 0F844F290000            	je L_error_fvar_undefined
  9729 00006D25 803804                  	cmp byte [rax], T_closure
  9730 00006D28 0F85CA290000            	jne L_error_non_closure
  9731 00006D2E FF7001                  	push SOB_CLOSURE_ENV(rax)
  9732 00006D31 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9733 00006D34 483D[02000000]          	cmp rax, sob_boolean_false
  9734 00006D3A 7431                    	je .L_if_else_0038
  9735                                  	; preparing a non-tail-call
  9736 00006D3C 488B4528                	mov rax, PARAM(1)	; param b
  9737 00006D40 50                      	push rax
  9738 00006D41 488B4520                	mov rax, PARAM(0)	; param a
  9739 00006D45 50                      	push rax
  9740 00006D46 6A02                    	push 2	; arg count
  9741 00006D48 488B0425[100B0000]      	mov rax, qword [free_var_15]	; free var __bin-div-zz
  9742 00006D50 803805                  	cmp byte [rax], T_undefined
  9743 00006D53 0F841B290000            	je L_error_fvar_undefined
  9744 00006D59 803804                  	cmp byte [rax], T_closure
  9745 00006D5C 0F8596290000            	jne L_error_non_closure
  9746 00006D62 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9747 00006D65 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9748 00006D68 E91E010000              	jmp .L_if_end_003d
  9749                                  .L_if_else_0038:
  9750                                  	; preparing a non-tail-call
  9751 00006D6D 488B4528                	mov rax, PARAM(1)	; param b
  9752 00006D71 50                      	push rax
  9753 00006D72 6A01                    	push 1	; arg count
  9754 00006D74 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
  9755 00006D7C 803805                  	cmp byte [rax], T_undefined
  9756 00006D7F 0F84EF280000            	je L_error_fvar_undefined
  9757 00006D85 803804                  	cmp byte [rax], T_closure
  9758 00006D88 0F856A290000            	jne L_error_non_closure
  9759 00006D8E FF7001                  	push SOB_CLOSURE_ENV(rax)
  9760 00006D91 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9761 00006D94 483D[02000000]          	cmp rax, sob_boolean_false
  9762 00006D9A 7454                    	je .L_if_else_0037
  9763                                  	; preparing a non-tail-call
  9764 00006D9C 488B4528                	mov rax, PARAM(1)	; param b
  9765 00006DA0 50                      	push rax
  9766                                  	; preparing a non-tail-call
  9767 00006DA1 488B4520                	mov rax, PARAM(0)	; param a
  9768 00006DA5 50                      	push rax
  9769 00006DA6 6A01                    	push 1	; arg count
  9770 00006DA8 488B0425[FE0B0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
  9771 00006DB0 803805                  	cmp byte [rax], T_undefined
  9772 00006DB3 0F84BB280000            	je L_error_fvar_undefined
  9773 00006DB9 803804                  	cmp byte [rax], T_closure
  9774 00006DBC 0F8536290000            	jne L_error_non_closure
  9775 00006DC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9776 00006DC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9777 00006DC8 50                      	push rax
  9778 00006DC9 6A02                    	push 2	; arg count
  9779 00006DCB 488B0425[EE0A0000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
  9780 00006DD3 803805                  	cmp byte [rax], T_undefined
  9781 00006DD6 0F8498280000            	je L_error_fvar_undefined
  9782 00006DDC 803804                  	cmp byte [rax], T_closure
  9783 00006DDF 0F8513290000            	jne L_error_non_closure
  9784 00006DE5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9785 00006DE8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9786 00006DEB E99B000000              	jmp .L_if_end_003c
  9787                                  .L_if_else_0037:
  9788                                  	; preparing a non-tail-call
  9789 00006DF0 488B4528                	mov rax, PARAM(1)	; param b
  9790 00006DF4 50                      	push rax
  9791 00006DF5 6A01                    	push 1	; arg count
  9792 00006DF7 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
  9793 00006DFF 803805                  	cmp byte [rax], T_undefined
  9794 00006E02 0F846C280000            	je L_error_fvar_undefined
  9795 00006E08 803804                  	cmp byte [rax], T_closure
  9796 00006E0B 0F85E7280000            	jne L_error_non_closure
  9797 00006E11 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9798 00006E14 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9799 00006E17 483D[02000000]          	cmp rax, sob_boolean_false
  9800 00006E1D 7451                    	je .L_if_else_0036
  9801                                  	; preparing a non-tail-call
  9802 00006E1F 488B4528                	mov rax, PARAM(1)	; param b
  9803 00006E23 50                      	push rax
  9804                                  	; preparing a non-tail-call
  9805 00006E24 488B4520                	mov rax, PARAM(0)	; param a
  9806 00006E28 50                      	push rax
  9807 00006E29 6A01                    	push 1	; arg count
  9808 00006E2B 488B0425[500F0000]      	mov rax, qword [free_var_79]	; free var integer->real
  9809 00006E33 803805                  	cmp byte [rax], T_undefined
  9810 00006E36 0F8438280000            	je L_error_fvar_undefined
  9811 00006E3C 803804                  	cmp byte [rax], T_closure
  9812 00006E3F 0F85B3280000            	jne L_error_non_closure
  9813 00006E45 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9814 00006E48 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9815 00006E4B 50                      	push rax
  9816 00006E4C 6A02                    	push 2	; arg count
  9817 00006E4E 488B0425[FF0A0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
  9818 00006E56 803805                  	cmp byte [rax], T_undefined
  9819 00006E59 0F8415280000            	je L_error_fvar_undefined
  9820 00006E5F 803804                  	cmp byte [rax], T_closure
  9821 00006E62 0F8590280000            	jne L_error_non_closure
  9822 00006E68 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9823 00006E6B FF5009                  	call SOB_CLOSURE_CODE(rax)
  9824 00006E6E EB1B                    	jmp .L_if_end_003b
  9825                                  .L_if_else_0036:
  9826                                  	; preparing a non-tail-call
  9827 00006E70 6A00                    	push 0	; arg count
  9828 00006E72 488B4510                	mov rax, ENV
  9829 00006E76 488B00                  	mov rax, qword [rax + 8 * 0]
  9830 00006E79 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9831 00006E7C 803804                  	cmp byte [rax], T_closure
  9832 00006E7F 0F8573280000            	jne L_error_non_closure
  9833 00006E85 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9834 00006E88 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9835                                  .L_if_end_003b:
  9836                                  .L_if_end_003c:
  9837                                  .L_if_end_003d:
  9838 00006E8B E981030000              	jmp .L_if_end_0046
  9839                                  .L_if_else_0041:
  9840                                  	; preparing a non-tail-call
  9841 00006E90 488B4520                	mov rax, PARAM(0)	; param a
  9842 00006E94 50                      	push rax
  9843 00006E95 6A01                    	push 1	; arg count
  9844 00006E97 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
  9845 00006E9F 803805                  	cmp byte [rax], T_undefined
  9846 00006EA2 0F84CC270000            	je L_error_fvar_undefined
  9847 00006EA8 803804                  	cmp byte [rax], T_closure
  9848 00006EAB 0F8547280000            	jne L_error_non_closure
  9849 00006EB1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9850 00006EB4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9851 00006EB7 483D[02000000]          	cmp rax, sob_boolean_false
  9852 00006EBD 0F8483010000            	je .L_if_else_0040
  9853                                  	; preparing a non-tail-call
  9854 00006EC3 488B4528                	mov rax, PARAM(1)	; param b
  9855 00006EC7 50                      	push rax
  9856 00006EC8 6A01                    	push 1	; arg count
  9857 00006ECA 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  9858 00006ED2 803805                  	cmp byte [rax], T_undefined
  9859 00006ED5 0F8499270000            	je L_error_fvar_undefined
  9860 00006EDB 803804                  	cmp byte [rax], T_closure
  9861 00006EDE 0F8514280000            	jne L_error_non_closure
  9862 00006EE4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9863 00006EE7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9864 00006EEA 483D[02000000]          	cmp rax, sob_boolean_false
  9865 00006EF0 7454                    	je .L_if_else_003b
  9866                                  	; preparing a non-tail-call
  9867                                  	; preparing a non-tail-call
  9868 00006EF2 488B4528                	mov rax, PARAM(1)	; param b
  9869 00006EF6 50                      	push rax
  9870 00006EF7 6A01                    	push 1	; arg count
  9871 00006EF9 488B0425[FE0B0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
  9872 00006F01 803805                  	cmp byte [rax], T_undefined
  9873 00006F04 0F846A270000            	je L_error_fvar_undefined
  9874 00006F0A 803804                  	cmp byte [rax], T_closure
  9875 00006F0D 0F85E5270000            	jne L_error_non_closure
  9876 00006F13 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9877 00006F16 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9878 00006F19 50                      	push rax
  9879 00006F1A 488B4520                	mov rax, PARAM(0)	; param a
  9880 00006F1E 50                      	push rax
  9881 00006F1F 6A02                    	push 2	; arg count
  9882 00006F21 488B0425[EE0A0000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
  9883 00006F29 803805                  	cmp byte [rax], T_undefined
  9884 00006F2C 0F8442270000            	je L_error_fvar_undefined
  9885 00006F32 803804                  	cmp byte [rax], T_closure
  9886 00006F35 0F85BD270000            	jne L_error_non_closure
  9887 00006F3B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9888 00006F3E FF5009                  	call SOB_CLOSURE_CODE(rax)
  9889 00006F41 E9FB000000              	jmp .L_if_end_0040
  9890                                  .L_if_else_003b:
  9891                                  	; preparing a non-tail-call
  9892 00006F46 488B4528                	mov rax, PARAM(1)	; param b
  9893 00006F4A 50                      	push rax
  9894 00006F4B 6A01                    	push 1	; arg count
  9895 00006F4D 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
  9896 00006F55 803805                  	cmp byte [rax], T_undefined
  9897 00006F58 0F8416270000            	je L_error_fvar_undefined
  9898 00006F5E 803804                  	cmp byte [rax], T_closure
  9899 00006F61 0F8591270000            	jne L_error_non_closure
  9900 00006F67 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9901 00006F6A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9902 00006F6D 483D[02000000]          	cmp rax, sob_boolean_false
  9903 00006F73 7431                    	je .L_if_else_003a
  9904                                  	; preparing a non-tail-call
  9905 00006F75 488B4528                	mov rax, PARAM(1)	; param b
  9906 00006F79 50                      	push rax
  9907 00006F7A 488B4520                	mov rax, PARAM(0)	; param a
  9908 00006F7E 50                      	push rax
  9909 00006F7F 6A02                    	push 2	; arg count
  9910 00006F81 488B0425[EE0A0000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
  9911 00006F89 803805                  	cmp byte [rax], T_undefined
  9912 00006F8C 0F84E2260000            	je L_error_fvar_undefined
  9913 00006F92 803804                  	cmp byte [rax], T_closure
  9914 00006F95 0F855D270000            	jne L_error_non_closure
  9915 00006F9B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9916 00006F9E FF5009                  	call SOB_CLOSURE_CODE(rax)
  9917 00006FA1 E99B000000              	jmp .L_if_end_003f
  9918                                  .L_if_else_003a:
  9919                                  	; preparing a non-tail-call
  9920 00006FA6 488B4528                	mov rax, PARAM(1)	; param b
  9921 00006FAA 50                      	push rax
  9922 00006FAB 6A01                    	push 1	; arg count
  9923 00006FAD 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
  9924 00006FB5 803805                  	cmp byte [rax], T_undefined
  9925 00006FB8 0F84B6260000            	je L_error_fvar_undefined
  9926 00006FBE 803804                  	cmp byte [rax], T_closure
  9927 00006FC1 0F8531270000            	jne L_error_non_closure
  9928 00006FC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9929 00006FCA FF5009                  	call SOB_CLOSURE_CODE(rax)
  9930 00006FCD 483D[02000000]          	cmp rax, sob_boolean_false
  9931 00006FD3 7451                    	je .L_if_else_0039
  9932                                  	; preparing a non-tail-call
  9933 00006FD5 488B4528                	mov rax, PARAM(1)	; param b
  9934 00006FD9 50                      	push rax
  9935                                  	; preparing a non-tail-call
  9936 00006FDA 488B4520                	mov rax, PARAM(0)	; param a
  9937 00006FDE 50                      	push rax
  9938 00006FDF 6A01                    	push 1	; arg count
  9939 00006FE1 488B0425[1D0F0000]      	mov rax, qword [free_var_76]	; free var fraction->real
  9940 00006FE9 803805                  	cmp byte [rax], T_undefined
  9941 00006FEC 0F8482260000            	je L_error_fvar_undefined
  9942 00006FF2 803804                  	cmp byte [rax], T_closure
  9943 00006FF5 0F85FD260000            	jne L_error_non_closure
  9944 00006FFB FF7001                  	push SOB_CLOSURE_ENV(rax)
  9945 00006FFE FF5009                  	call SOB_CLOSURE_CODE(rax)
  9946 00007001 50                      	push rax
  9947 00007002 6A02                    	push 2	; arg count
  9948 00007004 488B0425[FF0A0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
  9949 0000700C 803805                  	cmp byte [rax], T_undefined
  9950 0000700F 0F845F260000            	je L_error_fvar_undefined
  9951 00007015 803804                  	cmp byte [rax], T_closure
  9952 00007018 0F85DA260000            	jne L_error_non_closure
  9953 0000701E FF7001                  	push SOB_CLOSURE_ENV(rax)
  9954 00007021 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9955 00007024 EB1B                    	jmp .L_if_end_003e
  9956                                  .L_if_else_0039:
  9957                                  	; preparing a non-tail-call
  9958 00007026 6A00                    	push 0	; arg count
  9959 00007028 488B4510                	mov rax, ENV
  9960 0000702C 488B00                  	mov rax, qword [rax + 8 * 0]
  9961 0000702F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  9962 00007032 803804                  	cmp byte [rax], T_closure
  9963 00007035 0F85BD260000            	jne L_error_non_closure
  9964 0000703B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9965 0000703E FF5009                  	call SOB_CLOSURE_CODE(rax)
  9966                                  .L_if_end_003e:
  9967                                  .L_if_end_003f:
  9968                                  .L_if_end_0040:
  9969 00007041 E9CB010000              	jmp .L_if_end_0045
  9970                                  .L_if_else_0040:
  9971                                  	; preparing a non-tail-call
  9972 00007046 488B4520                	mov rax, PARAM(0)	; param a
  9973 0000704A 50                      	push rax
  9974 0000704B 6A01                    	push 1	; arg count
  9975 0000704D 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
  9976 00007055 803805                  	cmp byte [rax], T_undefined
  9977 00007058 0F8416260000            	je L_error_fvar_undefined
  9978 0000705E 803804                  	cmp byte [rax], T_closure
  9979 00007061 0F8591260000            	jne L_error_non_closure
  9980 00007067 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9981 0000706A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9982 0000706D 483D[02000000]          	cmp rax, sob_boolean_false
  9983 00007073 0F847D010000            	je .L_if_else_003f
  9984                                  	; preparing a non-tail-call
  9985 00007079 488B4528                	mov rax, PARAM(1)	; param b
  9986 0000707D 50                      	push rax
  9987 0000707E 6A01                    	push 1	; arg count
  9988 00007080 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
  9989 00007088 803805                  	cmp byte [rax], T_undefined
  9990 0000708B 0F84E3250000            	je L_error_fvar_undefined
  9991 00007091 803804                  	cmp byte [rax], T_closure
  9992 00007094 0F855E260000            	jne L_error_non_closure
  9993 0000709A FF7001                  	push SOB_CLOSURE_ENV(rax)
  9994 0000709D FF5009                  	call SOB_CLOSURE_CODE(rax)
  9995 000070A0 483D[02000000]          	cmp rax, sob_boolean_false
  9996 000070A6 7454                    	je .L_if_else_003e
  9997                                  	; preparing a non-tail-call
  9998                                  	; preparing a non-tail-call
  9999 000070A8 488B4528                	mov rax, PARAM(1)	; param b
 10000 000070AC 50                      	push rax
 10001 000070AD 6A01                    	push 1	; arg count
 10002 000070AF 488B0425[500F0000]      	mov rax, qword [free_var_79]	; free var integer->real
 10003 000070B7 803805                  	cmp byte [rax], T_undefined
 10004 000070BA 0F84B4250000            	je L_error_fvar_undefined
 10005 000070C0 803804                  	cmp byte [rax], T_closure
 10006 000070C3 0F852F260000            	jne L_error_non_closure
 10007 000070C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10008 000070CC FF5009                  	call SOB_CLOSURE_CODE(rax)
 10009 000070CF 50                      	push rax
 10010 000070D0 488B4520                	mov rax, PARAM(0)	; param a
 10011 000070D4 50                      	push rax
 10012 000070D5 6A02                    	push 2	; arg count
 10013 000070D7 488B0425[FF0A0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 10014 000070DF 803805                  	cmp byte [rax], T_undefined
 10015 000070E2 0F848C250000            	je L_error_fvar_undefined
 10016 000070E8 803804                  	cmp byte [rax], T_closure
 10017 000070EB 0F8507260000            	jne L_error_non_closure
 10018 000070F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10019 000070F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10020 000070F7 E9F8000000              	jmp .L_if_end_0043
 10021                                  .L_if_else_003e:
 10022                                  	; preparing a non-tail-call
 10023 000070FC 488B4528                	mov rax, PARAM(1)	; param b
 10024 00007100 50                      	push rax
 10025 00007101 6A01                    	push 1	; arg count
 10026 00007103 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
 10027 0000710B 803805                  	cmp byte [rax], T_undefined
 10028 0000710E 0F8460250000            	je L_error_fvar_undefined
 10029 00007114 803804                  	cmp byte [rax], T_closure
 10030 00007117 0F85DB250000            	jne L_error_non_closure
 10031 0000711D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10032 00007120 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10033 00007123 483D[02000000]          	cmp rax, sob_boolean_false
 10034 00007129 7451                    	je .L_if_else_003d
 10035                                  	; preparing a non-tail-call
 10036                                  	; preparing a non-tail-call
 10037 0000712B 488B4528                	mov rax, PARAM(1)	; param b
 10038 0000712F 50                      	push rax
 10039 00007130 6A01                    	push 1	; arg count
 10040 00007132 488B0425[1D0F0000]      	mov rax, qword [free_var_76]	; free var fraction->real
 10041 0000713A 803805                  	cmp byte [rax], T_undefined
 10042 0000713D 0F8431250000            	je L_error_fvar_undefined
 10043 00007143 803804                  	cmp byte [rax], T_closure
 10044 00007146 0F85AC250000            	jne L_error_non_closure
 10045 0000714C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10046 0000714F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10047 00007152 50                      	push rax
 10048 00007153 488B4520                	mov rax, PARAM(0)	; param a
 10049 00007157 50                      	push rax
 10050 00007158 6A02                    	push 2	; arg count
 10051 0000715A 488B0425[FF0A0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 10052 00007162 803805                  	cmp byte [rax], T_undefined
 10053 00007165 0F8409250000            	je L_error_fvar_undefined
 10054 0000716B 803804                  	cmp byte [rax], T_closure
 10055 0000716E 0F8584250000            	jne L_error_non_closure
 10056 00007174 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10057 00007177 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10058 0000717A EB78                    	jmp .L_if_end_0042
 10059                                  .L_if_else_003d:
 10060                                  	; preparing a non-tail-call
 10061 0000717C 488B4528                	mov rax, PARAM(1)	; param b
 10062 00007180 50                      	push rax
 10063 00007181 6A01                    	push 1	; arg count
 10064 00007183 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
 10065 0000718B 803805                  	cmp byte [rax], T_undefined
 10066 0000718E 0F84E0240000            	je L_error_fvar_undefined
 10067 00007194 803804                  	cmp byte [rax], T_closure
 10068 00007197 0F855B250000            	jne L_error_non_closure
 10069 0000719D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10070 000071A0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10071 000071A3 483D[02000000]          	cmp rax, sob_boolean_false
 10072 000071A9 742E                    	je .L_if_else_003c
 10073                                  	; preparing a non-tail-call
 10074 000071AB 488B4528                	mov rax, PARAM(1)	; param b
 10075 000071AF 50                      	push rax
 10076 000071B0 488B4520                	mov rax, PARAM(0)	; param a
 10077 000071B4 50                      	push rax
 10078 000071B5 6A02                    	push 2	; arg count
 10079 000071B7 488B0425[FF0A0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 10080 000071BF 803805                  	cmp byte [rax], T_undefined
 10081 000071C2 0F84AC240000            	je L_error_fvar_undefined
 10082 000071C8 803804                  	cmp byte [rax], T_closure
 10083 000071CB 0F8527250000            	jne L_error_non_closure
 10084 000071D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10085 000071D4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10086 000071D7 EB1B                    	jmp .L_if_end_0041
 10087                                  .L_if_else_003c:
 10088                                  	; preparing a non-tail-call
 10089 000071D9 6A00                    	push 0	; arg count
 10090 000071DB 488B4510                	mov rax, ENV
 10091 000071DF 488B00                  	mov rax, qword [rax + 8 * 0]
 10092 000071E2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10093 000071E5 803804                  	cmp byte [rax], T_closure
 10094 000071E8 0F850A250000            	jne L_error_non_closure
 10095 000071EE FF7001                  	push SOB_CLOSURE_ENV(rax)
 10096 000071F1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10097                                  .L_if_end_0041:
 10098                                  .L_if_end_0042:
 10099                                  .L_if_end_0043:
 10100 000071F4 EB1B                    	jmp .L_if_end_0044
 10101                                  .L_if_else_003f:
 10102                                  	; preparing a non-tail-call
 10103 000071F6 6A00                    	push 0	; arg count
 10104 000071F8 488B4510                	mov rax, ENV
 10105 000071FC 488B00                  	mov rax, qword [rax + 8 * 0]
 10106 000071FF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10107 00007202 803804                  	cmp byte [rax], T_closure
 10108 00007205 0F85ED240000            	jne L_error_non_closure
 10109 0000720B FF7001                  	push SOB_CLOSURE_ENV(rax)
 10110 0000720E FF5009                  	call SOB_CLOSURE_CODE(rax)
 10111                                  .L_if_end_0044:
 10112                                  .L_if_end_0045:
 10113                                  .L_if_end_0046:
 10114 00007211 C9                      	leave
 10115 00007212 C22000                  	ret AND_KILL_FRAME(2)
 10116                                  .L_lambda_simple_end_0043:	; new closure is in rax
 10117 00007215 50                      	push rax
 10118 00007216 6A01                    	push 1	; arg count
 10119 00007218 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10120 0000721D E87F250000              	call malloc
 10121 00007222 50                      	push rax
 10122 00007223 BF08000000              	mov rdi, 8 * 1	; new rib
 10123 00007228 E874250000              	call malloc
 10124 0000722D 50                      	push rax
 10125 0000722E BF10000000              	mov rdi, 8 * 2	; extended env
 10126 00007233 E869250000              	call malloc
 10127 00007238 488B7D10                	mov rdi, ENV
 10128 0000723C BE00000000              	mov rsi, 0
 10129 00007241 BA01000000              	mov rdx, 1
 10130                                  .L_lambda_simple_env_loop_0044:	; ext_env[i + 1] <-- env[i]
 10131 00007246 4883FE01                	cmp rsi, 1
 10132 0000724A 7410                    	je .L_lambda_simple_env_end_0044
 10133 0000724C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10134 00007250 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10135 00007254 48FFC6                  	inc rsi
 10136 00007257 48FFC2                  	inc rdx
 10137 0000725A EBEA                    	jmp .L_lambda_simple_env_loop_0044
 10138                                  .L_lambda_simple_env_end_0044:
 10139 0000725C 5B                      	pop rbx
 10140 0000725D BE00000000              	mov rsi, 0
 10141                                  .L_lambda_simple_params_loop_0044:	; copy params
 10142 00007262 4883FE01                	cmp rsi, 1
 10143 00007266 740E                    	je .L_lambda_simple_params_end_0044
 10144 00007268 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10145 0000726D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10146 00007271 48FFC6                  	inc rsi
 10147 00007274 EBEC                    	jmp .L_lambda_simple_params_loop_0044
 10148                                  .L_lambda_simple_params_end_0044:
 10149 00007276 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10150 00007279 4889C3                  	mov rbx, rax
 10151 0000727C 58                      	pop rax
 10152 0000727D C60004                  	mov byte [rax], T_closure
 10153 00007280 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10154 00007284 48C74009[91720000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0044
 10155 0000728C E918030000              	jmp .L_lambda_simple_end_0044
 10156                                  .L_lambda_simple_code_0044:	; lambda-simple body
 10157 00007291 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10158 00007297 740B                    	je .L_lambda_simple_arity_check_ok_0050
 10159 00007299 FF742410                	push qword [rsp + 8 * 2]
 10160 0000729D 6A01                    	push 1
 10161 0000729F E9B6240000              	jmp L_error_incorrect_arity_simple
 10162                                  .L_lambda_simple_arity_check_ok_0050:
 10163 000072A4 C8000000                	enter 0, 0
 10164 000072A8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10165 000072AD E8EF240000              	call malloc
 10166 000072B2 50                      	push rax
 10167 000072B3 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
 10168 000072B7 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
 10169 000072BB BF08000000              	mov rdi, 8 * 1	; new rib for optional parameters
 10170 000072C0 E8DC240000              	call malloc
 10171 000072C5 50                      	push rax
 10172 000072C6 BF18000000              	mov rdi, 8 * 3	; extended env
 10173 000072CB E8D1240000              	call malloc
 10174 000072D0 488B7D10                	mov rdi, ENV
 10175 000072D4 BE00000000              	mov rsi, 0
 10176 000072D9 BA01000000              	mov rdx, 1
 10177                                  .L_lambda_opt_code_0025:	; ext_env[i + 1] <-- env[i] copy all the array
 10178 000072DE 4883FE02                	cmp rsi, 2
 10179 000072E2 7410                    	je .L_lambda_opt_end_0031
 10180 000072E4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10181 000072E8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10182 000072EC 48FFC6                  	inc rsi
 10183 000072EF 48FFC2                  	inc rdx
 10184 000072F2 EBEA                    	jmp .L_lambda_opt_code_0025
 10185                                  .L_lambda_opt_end_0031:
 10186 000072F4 5B                      	pop rbx
 10187 000072F5 BE00000000              	mov rsi, 0
 10188                                  .L_lambda_opt_code_0026:	; copy params
 10189 000072FA 4883FE01                	cmp rsi, 1
 10190 000072FE 740E                    	je .L_lambda_opt_end_0032
 10191 00007300 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10192 00007305 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10193 00007309 48FFC6                  	inc rsi
 10194 0000730C EBEC                    	jmp .L_lambda_opt_code_0026
 10195                                  .L_lambda_opt_end_0032:
 10196 0000730E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10197 00007311 4889C3                  	mov rbx, rax
 10198 00007314 58                      	pop rax
 10199 00007315 C60004                  	mov byte [rax], T_closure
 10200 00007318 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10201 0000731C 48C74009[29730000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0027
 10202 00007324 E97C020000              	jmp .L_lambda_opt_end_0033
 10203                                  .L_lambda_opt_code_0027:	; lambda-opt body
 10204 00007329 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10205 0000732F 7D0B                    	jge .L_lambda_simple_arity_check_ok_0051
 10206 00007331 FF742410                	push qword [rsp + 8 * 2]
 10207 00007335 6A01                    	push 1
 10208 00007337 E91E240000              	jmp L_error_incorrect_arity_simple
 10209                                  .L_lambda_simple_arity_check_ok_0051:
 10210 0000733C 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 10211 00007341 4983E801                	sub r8, 1
 10212 00007345 4C89C3                  	mov rbx,r8
 10213 00007348 4983F800                	cmp r8, 0
 10214 0000734C 7535                    	jne .L_lambda_opt_params_loop_0027
 10215 0000734E 488B542410              	mov rdx, qword [rsp + 8 * 2]
 10216 00007353 4883C203                	add rdx , 3
 10217 00007357 4883EC08                	sub rsp , 8
 10218 0000735B 4889E1                  	mov rcx, rsp
 10219                                  .L_lambda_opt_stack_adjusted_0019: ;pushing down the stack of the current function
 10220 0000735E 488B5908                	mov rbx, qword [rcx + 8 * 1]
 10221 00007362 488919                  	mov qword[rcx] , rbx
 10222 00007365 4883C108                	add rcx , 8
 10223 00007369 48FFCA                  	dec rdx
 10224 0000736C 4883FA00                	cmp rdx, 0
 10225 00007370 75EC                    	jne .L_lambda_opt_stack_adjusted_0019
 10226 00007372 48FF442410              	inc qword [rsp + 8 * 2]
 10227 00007377 48C701[01000000]        	mov qword [rcx], sob_nil 
 10228 0000737E E9A8000000              	jmp .L_lambda_opt_end_0034
 10229                                  	.L_lambda_opt_params_loop_0027:
 10230 00007383 488B542410              	mov rdx, qword [rsp + 8*2]
 10231 00007388 488D4CD410              	lea rcx, [rsp + 8*2 + 8*rdx]
 10232 0000738D 4C89C2                  	mov rdx, r8
 10233 00007390 49B9-                   	mov r9, sob_nil
 10233 00007392 [0100000000000000] 
 10234 0000739A 4989C9                  	mov r9, rcx
 10235                                  	.L_lambda_opt_params_loop_0025: ;loop for copying the opt into list
 10236 0000739D BF11000000              	mov rdi, (1 + 8 + 8)
 10237 000073A2 E8FA230000              	call malloc
 10238 000073A7 C60021                  	mov byte[rax], T_pair
 10239 000073AA 488B19                  	mov rbx, qword [rcx]
 10240 000073AD 48895801                	mov SOB_PAIR_CAR(rax), rbx
 10241 000073B1 4C894809                	mov SOB_PAIR_CDR(rax), r9
 10242 000073B5 4989C1                  	mov r9, rax
 10243 000073B8 48FFCA                  	dec rdx
 10244 000073BB 4883E908                	sub rcx, 8
 10245 000073BF 4883FA00                	cmp rdx, 0
 10246 000073C3 75D8                    	jne .L_lambda_opt_params_loop_0025
 10247 000073C5 488B542410              	mov rdx, qword [rsp + 8 * 2]
 10248 000073CA 4889E0                  	mov rax, rsp
 10249 000073CD 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
 10250 000073D2 4989DC                  	mov r12 , rbx
 10251 000073D5 4C89C1                  	mov rcx, r8
 10252 000073D8 48FFC9                  	dec rcx
 10253 000073DB 4883C203                	add rdx, 3
 10254 000073DF 4829CA                  	sub rdx,rcx
 10255 000073E2 48C1E103                	shl rcx, 3
 10256                                  	.L_lambda_opt_stack_adjusted_001a:
 10257 000073E6 4883FA00                	cmp rdx, 0
 10258 000073EA 7419                    	je .L_lambda_opt_params_end_0032
 10259 000073EC 4889D8                  	mov rax, rbx
 10260 000073EF 4829C8                  	sub rax, rcx
 10261 000073F2 488B30                  	mov rsi, qword [rax]
 10262 000073F5 488933                  	mov [rbx], rsi
 10263 000073F8 4883EB08                	sub rbx, 8
 10264 000073FC 48FFCA                  	dec rdx
 10265 000073FF 4883FA00                	cmp rdx, 0
 10266 00007403 75E1                    	jne .L_lambda_opt_stack_adjusted_001a
 10267                                  	.L_lambda_opt_params_end_0032:
 10268 00007405 4801CC                  	add rsp,rcx
 10269 00007408 BB01000000              	mov rbx, 1
 10270 0000740D 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 10271 00007412 4883C303                	add rbx,3
 10272 00007416 4C29C3                  	sub rbx,r8
 10273 00007419 48C1E303                	shl rbx, 3
 10274 0000741D 4801E3                  	add rbx, rsp
 10275 00007420 4C890B                  	mov qword[rbx] , r9
 10276 00007423 49FFC8                  	dec r8
 10277 00007426 4C29442410              	sub qword [rsp + 8 * 2], r8
 10278                                  	.L_lambda_opt_end_0034:
 10279 0000742B C8000000                	enter 0, 0
 10280                                  	; preparing a non-tail-call
 10281 0000742F 488B4528                	mov rax, PARAM(1)	; param s
 10282 00007433 50                      	push rax
 10283 00007434 6A01                    	push 1	; arg count
 10284 00007436 488B0425[C70F0000]      	mov rax, qword [free_var_86]	; free var null?
 10285 0000743E 803805                  	cmp byte [rax], T_undefined
 10286 00007441 0F842D220000            	je L_error_fvar_undefined
 10287 00007447 803804                  	cmp byte [rax], T_closure
 10288 0000744A 0F85A8220000            	jne L_error_non_closure
 10289 00007450 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10290 00007453 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10291 00007456 483D[02000000]          	cmp rax, sob_boolean_false
 10292 0000745C 7430                    	je .L_if_else_0042
 10293                                  	; preparing a non-tail-call
 10294 0000745E 488B4520                	mov rax, PARAM(0)	; param a
 10295 00007462 50                      	push rax
 10296 00007463 48B8-                   	mov rax, L_constants + 2270
 10296 00007465 [DE08000000000000] 
 10297 0000746D 50                      	push rax
 10298 0000746E 6A02                    	push 2	; arg count
 10299 00007470 488B4510                	mov rax, ENV
 10300 00007474 488B00                  	mov rax, qword [rax + 8 * 0]
 10301 00007477 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 10302 0000747A 803804                  	cmp byte [rax], T_closure
 10303 0000747D 0F8575220000            	jne L_error_non_closure
 10304 00007483 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10305 00007486 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10306 00007489 E913010000              	jmp .L_if_end_0047
 10307                                  .L_if_else_0042:
 10308                                  	; preparing a non-tail-call
 10309                                  	; preparing a non-tail-call
 10310 0000748E 488B4528                	mov rax, PARAM(1)	; param s
 10311 00007492 50                      	push rax
 10312 00007493 48B8-                   	mov rax, L_constants + 2270
 10312 00007495 [DE08000000000000] 
 10313 0000749D 50                      	push rax
 10314 0000749E 488B0425[110A0000]      	mov rax, qword [free_var_0]	; free var *
 10315 000074A6 803805                  	cmp byte [rax], T_undefined
 10316 000074A9 0F84C5210000            	je L_error_fvar_undefined
 10317 000074AF 50                      	push rax
 10318 000074B0 6A03                    	push 3	; arg count
 10319 000074B2 488B0425[FB0E0000]      	mov rax, qword [free_var_74]	; free var fold-left
 10320 000074BA 803805                  	cmp byte [rax], T_undefined
 10321 000074BD 0F84B1210000            	je L_error_fvar_undefined
 10322 000074C3 803804                  	cmp byte [rax], T_closure
 10323 000074C6 0F852C220000            	jne L_error_non_closure
 10324 000074CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 10325 000074CF FF5009                  	call SOB_CLOSURE_CODE(rax)
 10326 000074D2 50                      	push rax
 10327 000074D3 6A01                    	push 1	; arg count
 10328 000074D5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10329 000074DA E8C2220000              	call malloc
 10330 000074DF 50                      	push rax
 10331 000074E0 BF10000000              	mov rdi, 8 * 2	; new rib
 10332 000074E5 E8B7220000              	call malloc
 10333 000074EA 50                      	push rax
 10334 000074EB BF20000000              	mov rdi, 8 * 4	; extended env
 10335 000074F0 E8AC220000              	call malloc
 10336 000074F5 488B7D10                	mov rdi, ENV
 10337 000074F9 BE00000000              	mov rsi, 0
 10338 000074FE BA01000000              	mov rdx, 1
 10339                                  .L_lambda_simple_env_loop_0045:	; ext_env[i + 1] <-- env[i]
 10340 00007503 4883FE03                	cmp rsi, 3
 10341 00007507 7410                    	je .L_lambda_simple_env_end_0045
 10342 00007509 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10343 0000750D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10344 00007511 48FFC6                  	inc rsi
 10345 00007514 48FFC2                  	inc rdx
 10346 00007517 EBEA                    	jmp .L_lambda_simple_env_loop_0045
 10347                                  .L_lambda_simple_env_end_0045:
 10348 00007519 5B                      	pop rbx
 10349 0000751A BE00000000              	mov rsi, 0
 10350                                  .L_lambda_simple_params_loop_0045:	; copy params
 10351 0000751F 4883FE02                	cmp rsi, 2
 10352 00007523 740E                    	je .L_lambda_simple_params_end_0045
 10353 00007525 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10354 0000752A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10355 0000752E 48FFC6                  	inc rsi
 10356 00007531 EBEC                    	jmp .L_lambda_simple_params_loop_0045
 10357                                  .L_lambda_simple_params_end_0045:
 10358 00007533 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10359 00007536 4889C3                  	mov rbx, rax
 10360 00007539 58                      	pop rax
 10361 0000753A C60004                  	mov byte [rax], T_closure
 10362 0000753D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10363 00007541 48C74009[4B750000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0045
 10364 00007549 EB47                    	jmp .L_lambda_simple_end_0045
 10365                                  .L_lambda_simple_code_0045:	; lambda-simple body
 10366 0000754B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10367 00007551 740B                    	je .L_lambda_simple_arity_check_ok_0052
 10368 00007553 FF742410                	push qword [rsp + 8 * 2]
 10369 00007557 6A01                    	push 1
 10370 00007559 E9FC210000              	jmp L_error_incorrect_arity_simple
 10371                                  .L_lambda_simple_arity_check_ok_0052:
 10372 0000755E C8000000                	enter 0, 0
 10373                                  	; preparing a non-tail-call
 10374 00007562 488B4520                	mov rax, PARAM(0)	; param b
 10375 00007566 50                      	push rax
 10376 00007567 488B4510                	mov rax, ENV
 10377 0000756B 488B00                  	mov rax, qword [rax + 8 * 0]
 10378 0000756E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 10379 00007571 50                      	push rax
 10380 00007572 6A02                    	push 2	; arg count
 10381 00007574 488B4510                	mov rax, ENV
 10382 00007578 488B4008                	mov rax, qword [rax + 8 * 1]
 10383 0000757C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 10384 0000757F 803804                  	cmp byte [rax], T_closure
 10385 00007582 0F8570210000            	jne L_error_non_closure
 10386 00007588 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10387 0000758B FF5009                  	call SOB_CLOSURE_CODE(rax)
 10388 0000758E C9                      	leave
 10389 0000758F C21800                  	ret AND_KILL_FRAME(1)
 10390                                  .L_lambda_simple_end_0045:	; new closure is in rax
 10391 00007592 803804                  	cmp byte [rax], T_closure
 10392 00007595 0F855D210000            	jne L_error_non_closure
 10393 0000759B FF7001                  	push SOB_CLOSURE_ENV(rax)
 10394 0000759E FF5009                  	call SOB_CLOSURE_CODE(rax)
 10395                                  .L_if_end_0047:
 10396                                  	LEAVE
    49 000075A1 C9                  <1>  leave
 10397 000075A2 C22000                  	ret AND_KILL_FRAME(2)
 10398                                  .L_lambda_opt_end_0033:
 10399 000075A5 C9                      	leave
 10400 000075A6 C21800                  	ret AND_KILL_FRAME(1)
 10401                                  .L_lambda_simple_end_0044:	; new closure is in rax
 10402 000075A9 803804                  	cmp byte [rax], T_closure
 10403 000075AC 0F8546210000            	jne L_error_non_closure
 10404 000075B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10405 000075B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10406 000075B8 C9                      	leave
 10407 000075B9 C21800                  	ret AND_KILL_FRAME(1)
 10408                                  .L_lambda_simple_end_0042:	; new closure is in rax
 10409 000075BC 803804                  	cmp byte [rax], T_closure
 10410 000075BF 0F8533210000            	jne L_error_non_closure
 10411 000075C5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10412 000075C8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10413 000075CB 48890425[440A0000]      	mov qword [free_var_3], rax
 10414 000075D3 48B8-                   	mov rax, sob_void
 10414 000075D5 [0000000000000000] 
 10415                                  
 10416 000075DD 4889C7                  	mov rdi, rax
 10417 000075E0 E811240000              	call print_sexpr_if_not_void
 10418 000075E5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10419 000075EA E8B2210000              	call malloc
 10420 000075EF 50                      	push rax
 10421 000075F0 BF00000000              	mov rdi, 8 * 0	; new rib
 10422 000075F5 E8A7210000              	call malloc
 10423 000075FA 50                      	push rax
 10424 000075FB BF08000000              	mov rdi, 8 * 1	; extended env
 10425 00007600 E89C210000              	call malloc
 10426 00007605 488B7D10                	mov rdi, ENV
 10427 00007609 BE00000000              	mov rsi, 0
 10428 0000760E BA01000000              	mov rdx, 1
 10429                                  .L_lambda_simple_env_loop_0046:	; ext_env[i + 1] <-- env[i]
 10430 00007613 4883FE00                	cmp rsi, 0
 10431 00007617 7410                    	je .L_lambda_simple_env_end_0046
 10432 00007619 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10433 0000761D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10434 00007621 48FFC6                  	inc rsi
 10435 00007624 48FFC2                  	inc rdx
 10436 00007627 EBEA                    	jmp .L_lambda_simple_env_loop_0046
 10437                                  .L_lambda_simple_env_end_0046:
 10438 00007629 5B                      	pop rbx
 10439 0000762A BE00000000              	mov rsi, 0
 10440                                  .L_lambda_simple_params_loop_0046:	; copy params
 10441 0000762F 4883FE00                	cmp rsi, 0
 10442 00007633 740E                    	je .L_lambda_simple_params_end_0046
 10443 00007635 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10444 0000763A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10445 0000763E 48FFC6                  	inc rsi
 10446 00007641 EBEC                    	jmp .L_lambda_simple_params_loop_0046
 10447                                  .L_lambda_simple_params_end_0046:
 10448 00007643 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10449 00007646 4889C3                  	mov rbx, rax
 10450 00007649 58                      	pop rax
 10451 0000764A C60004                  	mov byte [rax], T_closure
 10452 0000764D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10453 00007651 48C74009[5E760000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0046
 10454 00007659 E9D6000000              	jmp .L_lambda_simple_end_0046
 10455                                  .L_lambda_simple_code_0046:	; lambda-simple body
 10456 0000765E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10457 00007664 740B                    	je .L_lambda_simple_arity_check_ok_0053
 10458 00007666 FF742410                	push qword [rsp + 8 * 2]
 10459 0000766A 6A01                    	push 1
 10460 0000766C E9E9200000              	jmp L_error_incorrect_arity_simple
 10461                                  .L_lambda_simple_arity_check_ok_0053:
 10462 00007671 C8000000                	enter 0, 0
 10463                                  	; preparing a non-tail-call
 10464 00007675 488B4520                	mov rax, PARAM(0)	; param n
 10465 00007679 50                      	push rax
 10466 0000767A 6A01                    	push 1	; arg count
 10467 0000767C 488B0425[3E100000]      	mov rax, qword [free_var_93]	; free var zero?
 10468 00007684 803805                  	cmp byte [rax], T_undefined
 10469 00007687 0F84E71F0000            	je L_error_fvar_undefined
 10470 0000768D 803804                  	cmp byte [rax], T_closure
 10471 00007690 0F8562200000            	jne L_error_non_closure
 10472 00007696 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10473 00007699 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10474 0000769C 483D[02000000]          	cmp rax, sob_boolean_false
 10475 000076A2 740F                    	je .L_if_else_0043
 10476 000076A4 48B8-                   	mov rax, L_constants + 2270
 10476 000076A6 [DE08000000000000] 
 10477 000076AE E97D000000              	jmp .L_if_end_0048
 10478                                  .L_if_else_0043:
 10479                                  	; preparing a non-tail-call
 10480                                  	; preparing a non-tail-call
 10481                                  	; preparing a non-tail-call
 10482 000076B3 48B8-                   	mov rax, L_constants + 2270
 10482 000076B5 [DE08000000000000] 
 10483 000076BD 50                      	push rax
 10484 000076BE 488B4520                	mov rax, PARAM(0)	; param n
 10485 000076C2 50                      	push rax
 10486 000076C3 6A02                    	push 2	; arg count
 10487 000076C5 488B0425[330A0000]      	mov rax, qword [free_var_2]	; free var -
 10488 000076CD 803805                  	cmp byte [rax], T_undefined
 10489 000076D0 0F849E1F0000            	je L_error_fvar_undefined
 10490 000076D6 803804                  	cmp byte [rax], T_closure
 10491 000076D9 0F8519200000            	jne L_error_non_closure
 10492 000076DF FF7001                  	push SOB_CLOSURE_ENV(rax)
 10493 000076E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10494 000076E5 50                      	push rax
 10495 000076E6 6A01                    	push 1	; arg count
 10496 000076E8 488B0425[EA0E0000]      	mov rax, qword [free_var_73]	; free var fact
 10497 000076F0 803805                  	cmp byte [rax], T_undefined
 10498 000076F3 0F847B1F0000            	je L_error_fvar_undefined
 10499 000076F9 803804                  	cmp byte [rax], T_closure
 10500 000076FC 0F85F61F0000            	jne L_error_non_closure
 10501 00007702 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10502 00007705 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10503 00007708 50                      	push rax
 10504 00007709 488B4520                	mov rax, PARAM(0)	; param n
 10505 0000770D 50                      	push rax
 10506 0000770E 6A02                    	push 2	; arg count
 10507 00007710 488B0425[110A0000]      	mov rax, qword [free_var_0]	; free var *
 10508 00007718 803805                  	cmp byte [rax], T_undefined
 10509 0000771B 0F84531F0000            	je L_error_fvar_undefined
 10510 00007721 803804                  	cmp byte [rax], T_closure
 10511 00007724 0F85CE1F0000            	jne L_error_non_closure
 10512 0000772A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10513 0000772D FF5009                  	call SOB_CLOSURE_CODE(rax)
 10514                                  .L_if_end_0048:
 10515 00007730 C9                      	leave
 10516 00007731 C21800                  	ret AND_KILL_FRAME(1)
 10517                                  .L_lambda_simple_end_0046:	; new closure is in rax
 10518 00007734 48890425[EA0E0000]      	mov qword [free_var_73], rax
 10519 0000773C 48B8-                   	mov rax, sob_void
 10519 0000773E [0000000000000000] 
 10520                                  
 10521 00007746 4889C7                  	mov rdi, rax
 10522 00007749 E8A8220000              	call print_sexpr_if_not_void
 10523 0000774E 48B8-                   	mov rax, L_constants + 0
 10523 00007750 [0000000000000000] 
 10524 00007758 48890425[550A0000]      	mov qword [free_var_4], rax
 10525 00007760 48B8-                   	mov rax, sob_void
 10525 00007762 [0000000000000000] 
 10526                                  
 10527 0000776A 4889C7                  	mov rdi, rax
 10528 0000776D E884220000              	call print_sexpr_if_not_void
 10529 00007772 48B8-                   	mov rax, L_constants + 0
 10529 00007774 [0000000000000000] 
 10530 0000777C 48890425[660A0000]      	mov qword [free_var_5], rax
 10531 00007784 48B8-                   	mov rax, sob_void
 10531 00007786 [0000000000000000] 
 10532                                  
 10533 0000778E 4889C7                  	mov rdi, rax
 10534 00007791 E860220000              	call print_sexpr_if_not_void
 10535 00007796 48B8-                   	mov rax, L_constants + 0
 10535 00007798 [0000000000000000] 
 10536 000077A0 48890425[880A0000]      	mov qword [free_var_7], rax
 10537 000077A8 48B8-                   	mov rax, sob_void
 10537 000077AA [0000000000000000] 
 10538                                  
 10539 000077B2 4889C7                  	mov rdi, rax
 10540 000077B5 E83C220000              	call print_sexpr_if_not_void
 10541 000077BA 48B8-                   	mov rax, L_constants + 0
 10541 000077BC [0000000000000000] 
 10542 000077C4 48890425[990A0000]      	mov qword [free_var_8], rax
 10543 000077CC 48B8-                   	mov rax, sob_void
 10543 000077CE [0000000000000000] 
 10544                                  
 10545 000077D6 4889C7                  	mov rdi, rax
 10546 000077D9 E818220000              	call print_sexpr_if_not_void
 10547 000077DE 48B8-                   	mov rax, L_constants + 0
 10547 000077E0 [0000000000000000] 
 10548 000077E8 48890425[770A0000]      	mov qword [free_var_6], rax
 10549 000077F0 48B8-                   	mov rax, sob_void
 10549 000077F2 [0000000000000000] 
 10550                                  
 10551 000077FA 4889C7                  	mov rdi, rax
 10552 000077FD E8F4210000              	call print_sexpr_if_not_void
 10553                                  	; preparing a non-tail-call
 10554 00007802 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10555 00007807 E8951F0000              	call malloc
 10556 0000780C 50                      	push rax
 10557 0000780D BF00000000              	mov rdi, 8 * 0	; new rib
 10558 00007812 E88A1F0000              	call malloc
 10559 00007817 50                      	push rax
 10560 00007818 BF08000000              	mov rdi, 8 * 1	; extended env
 10561 0000781D E87F1F0000              	call malloc
 10562 00007822 488B7D10                	mov rdi, ENV
 10563 00007826 BE00000000              	mov rsi, 0
 10564 0000782B BA01000000              	mov rdx, 1
 10565                                  .L_lambda_simple_env_loop_0047:	; ext_env[i + 1] <-- env[i]
 10566 00007830 4883FE00                	cmp rsi, 0
 10567 00007834 7410                    	je .L_lambda_simple_env_end_0047
 10568 00007836 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10569 0000783A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10570 0000783E 48FFC6                  	inc rsi
 10571 00007841 48FFC2                  	inc rdx
 10572 00007844 EBEA                    	jmp .L_lambda_simple_env_loop_0047
 10573                                  .L_lambda_simple_env_end_0047:
 10574 00007846 5B                      	pop rbx
 10575 00007847 BE00000000              	mov rsi, 0
 10576                                  .L_lambda_simple_params_loop_0047:	; copy params
 10577 0000784C 4883FE00                	cmp rsi, 0
 10578 00007850 740E                    	je .L_lambda_simple_params_end_0047
 10579 00007852 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10580 00007857 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10581 0000785B 48FFC6                  	inc rsi
 10582 0000785E EBEC                    	jmp .L_lambda_simple_params_loop_0047
 10583                                  .L_lambda_simple_params_end_0047:
 10584 00007860 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10585 00007863 4889C3                  	mov rbx, rax
 10586 00007866 58                      	pop rax
 10587 00007867 C60004                  	mov byte [rax], T_closure
 10588 0000786A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10589 0000786E 48C74009[78780000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0047
 10590 00007876 EB53                    	jmp .L_lambda_simple_end_0047
 10591                                  .L_lambda_simple_code_0047:	; lambda-simple body
 10592 00007878 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10593 0000787E 740B                    	je .L_lambda_simple_arity_check_ok_0054
 10594 00007880 FF742410                	push qword [rsp + 8 * 2]
 10595 00007884 6A00                    	push 0
 10596 00007886 E9CF1E0000              	jmp L_error_incorrect_arity_simple
 10597                                  .L_lambda_simple_arity_check_ok_0054:
 10598 0000788B C8000000                	enter 0, 0
 10599                                  	; preparing a non-tail-call
 10600 0000788F 48B8-                   	mov rax, L_constants + 2408
 10600 00007891 [6809000000000000] 
 10601 00007899 50                      	push rax
 10602 0000789A 48B8-                   	mov rax, L_constants + 2399
 10602 0000789C [5F09000000000000] 
 10603 000078A4 50                      	push rax
 10604 000078A5 6A02                    	push 2	; arg count
 10605 000078A7 488B0425[D90E0000]      	mov rax, qword [free_var_72]	; free var error
 10606 000078AF 803805                  	cmp byte [rax], T_undefined
 10607 000078B2 0F84BC1D0000            	je L_error_fvar_undefined
 10608 000078B8 803804                  	cmp byte [rax], T_closure
 10609 000078BB 0F85371E0000            	jne L_error_non_closure
 10610 000078C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10611 000078C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10612 000078C7 C9                      	leave
 10613 000078C8 C21000                  	ret AND_KILL_FRAME(0)
 10614                                  .L_lambda_simple_end_0047:	; new closure is in rax
 10615 000078CB 50                      	push rax
 10616 000078CC 6A01                    	push 1	; arg count
 10617 000078CE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10618 000078D3 E8C91E0000              	call malloc
 10619 000078D8 50                      	push rax
 10620 000078D9 BF00000000              	mov rdi, 8 * 0	; new rib
 10621 000078DE E8BE1E0000              	call malloc
 10622 000078E3 50                      	push rax
 10623 000078E4 BF08000000              	mov rdi, 8 * 1	; extended env
 10624 000078E9 E8B31E0000              	call malloc
 10625 000078EE 488B7D10                	mov rdi, ENV
 10626 000078F2 BE00000000              	mov rsi, 0
 10627 000078F7 BA01000000              	mov rdx, 1
 10628                                  .L_lambda_simple_env_loop_0048:	; ext_env[i + 1] <-- env[i]
 10629 000078FC 4883FE00                	cmp rsi, 0
 10630 00007900 7410                    	je .L_lambda_simple_env_end_0048
 10631 00007902 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10632 00007906 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10633 0000790A 48FFC6                  	inc rsi
 10634 0000790D 48FFC2                  	inc rdx
 10635 00007910 EBEA                    	jmp .L_lambda_simple_env_loop_0048
 10636                                  .L_lambda_simple_env_end_0048:
 10637 00007912 5B                      	pop rbx
 10638 00007913 BE00000000              	mov rsi, 0
 10639                                  .L_lambda_simple_params_loop_0048:	; copy params
 10640 00007918 4883FE00                	cmp rsi, 0
 10641 0000791C 740E                    	je .L_lambda_simple_params_end_0048
 10642 0000791E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10643 00007923 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10644 00007927 48FFC6                  	inc rsi
 10645 0000792A EBEC                    	jmp .L_lambda_simple_params_loop_0048
 10646                                  .L_lambda_simple_params_end_0048:
 10647 0000792C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10648 0000792F 4889C3                  	mov rbx, rax
 10649 00007932 58                      	pop rax
 10650 00007933 C60004                  	mov byte [rax], T_closure
 10651 00007936 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10652 0000793A 48C74009[47790000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0048
 10653 00007942 E995130000              	jmp .L_lambda_simple_end_0048
 10654                                  .L_lambda_simple_code_0048:	; lambda-simple body
 10655 00007947 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10656 0000794D 740B                    	je .L_lambda_simple_arity_check_ok_0055
 10657 0000794F FF742410                	push qword [rsp + 8 * 2]
 10658 00007953 6A01                    	push 1
 10659 00007955 E9001E0000              	jmp L_error_incorrect_arity_simple
 10660                                  .L_lambda_simple_arity_check_ok_0055:
 10661 0000795A C8000000                	enter 0, 0
 10662                                  	; preparing a non-tail-call
 10663 0000795E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10664 00007963 E8391E0000              	call malloc
 10665 00007968 50                      	push rax
 10666 00007969 BF08000000              	mov rdi, 8 * 1	; new rib
 10667 0000796E E82E1E0000              	call malloc
 10668 00007973 50                      	push rax
 10669 00007974 BF10000000              	mov rdi, 8 * 2	; extended env
 10670 00007979 E8231E0000              	call malloc
 10671 0000797E 488B7D10                	mov rdi, ENV
 10672 00007982 BE00000000              	mov rsi, 0
 10673 00007987 BA01000000              	mov rdx, 1
 10674                                  .L_lambda_simple_env_loop_0049:	; ext_env[i + 1] <-- env[i]
 10675 0000798C 4883FE01                	cmp rsi, 1
 10676 00007990 7410                    	je .L_lambda_simple_env_end_0049
 10677 00007992 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10678 00007996 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10679 0000799A 48FFC6                  	inc rsi
 10680 0000799D 48FFC2                  	inc rdx
 10681 000079A0 EBEA                    	jmp .L_lambda_simple_env_loop_0049
 10682                                  .L_lambda_simple_env_end_0049:
 10683 000079A2 5B                      	pop rbx
 10684 000079A3 BE00000000              	mov rsi, 0
 10685                                  .L_lambda_simple_params_loop_0049:	; copy params
 10686 000079A8 4883FE01                	cmp rsi, 1
 10687 000079AC 740E                    	je .L_lambda_simple_params_end_0049
 10688 000079AE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10689 000079B3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10690 000079B7 48FFC6                  	inc rsi
 10691 000079BA EBEC                    	jmp .L_lambda_simple_params_loop_0049
 10692                                  .L_lambda_simple_params_end_0049:
 10693 000079BC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10694 000079BF 4889C3                  	mov rbx, rax
 10695 000079C2 58                      	pop rax
 10696 000079C3 C60004                  	mov byte [rax], T_closure
 10697 000079C6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10698 000079CA 48C74009[D7790000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0049
 10699 000079D2 E9B3050000              	jmp .L_lambda_simple_end_0049
 10700                                  .L_lambda_simple_code_0049:	; lambda-simple body
 10701 000079D7 48837C241003            	cmp qword [rsp + 8 * 2], 3
 10702 000079DD 740B                    	je .L_lambda_simple_arity_check_ok_0056
 10703 000079DF FF742410                	push qword [rsp + 8 * 2]
 10704 000079E3 6A03                    	push 3
 10705 000079E5 E9701D0000              	jmp L_error_incorrect_arity_simple
 10706                                  .L_lambda_simple_arity_check_ok_0056:
 10707 000079EA C8000000                	enter 0, 0
 10708 000079EE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10709 000079F3 E8A91D0000              	call malloc
 10710 000079F8 50                      	push rax
 10711 000079F9 BF18000000              	mov rdi, 8 * 3	; new rib
 10712 000079FE E89E1D0000              	call malloc
 10713 00007A03 50                      	push rax
 10714 00007A04 BF18000000              	mov rdi, 8 * 3	; extended env
 10715 00007A09 E8931D0000              	call malloc
 10716 00007A0E 488B7D10                	mov rdi, ENV
 10717 00007A12 BE00000000              	mov rsi, 0
 10718 00007A17 BA01000000              	mov rdx, 1
 10719                                  .L_lambda_simple_env_loop_004a:	; ext_env[i + 1] <-- env[i]
 10720 00007A1C 4883FE02                	cmp rsi, 2
 10721 00007A20 7410                    	je .L_lambda_simple_env_end_004a
 10722 00007A22 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10723 00007A26 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10724 00007A2A 48FFC6                  	inc rsi
 10725 00007A2D 48FFC2                  	inc rdx
 10726 00007A30 EBEA                    	jmp .L_lambda_simple_env_loop_004a
 10727                                  .L_lambda_simple_env_end_004a:
 10728 00007A32 5B                      	pop rbx
 10729 00007A33 BE00000000              	mov rsi, 0
 10730                                  .L_lambda_simple_params_loop_004a:	; copy params
 10731 00007A38 4883FE03                	cmp rsi, 3
 10732 00007A3C 740E                    	je .L_lambda_simple_params_end_004a
 10733 00007A3E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10734 00007A43 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10735 00007A47 48FFC6                  	inc rsi
 10736 00007A4A EBEC                    	jmp .L_lambda_simple_params_loop_004a
 10737                                  .L_lambda_simple_params_end_004a:
 10738 00007A4C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10739 00007A4F 4889C3                  	mov rbx, rax
 10740 00007A52 58                      	pop rax
 10741 00007A53 C60004                  	mov byte [rax], T_closure
 10742 00007A56 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10743 00007A5A 48C74009[677A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004a
 10744 00007A62 E91F050000              	jmp .L_lambda_simple_end_004a
 10745                                  .L_lambda_simple_code_004a:	; lambda-simple body
 10746 00007A67 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10747 00007A6D 740B                    	je .L_lambda_simple_arity_check_ok_0057
 10748 00007A6F FF742410                	push qword [rsp + 8 * 2]
 10749 00007A73 6A02                    	push 2
 10750 00007A75 E9E01C0000              	jmp L_error_incorrect_arity_simple
 10751                                  .L_lambda_simple_arity_check_ok_0057:
 10752 00007A7A C8000000                	enter 0, 0
 10753                                  	; preparing a non-tail-call
 10754 00007A7E 488B4520                	mov rax, PARAM(0)	; param a
 10755 00007A82 50                      	push rax
 10756 00007A83 6A01                    	push 1	; arg count
 10757 00007A85 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
 10758 00007A8D 803805                  	cmp byte [rax], T_undefined
 10759 00007A90 0F84DE1B0000            	je L_error_fvar_undefined
 10760 00007A96 803804                  	cmp byte [rax], T_closure
 10761 00007A99 0F85591C0000            	jne L_error_non_closure
 10762 00007A9F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10763 00007AA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10764 00007AA5 483D[02000000]          	cmp rax, sob_boolean_false
 10765 00007AAB 0F8471010000            	je .L_if_else_004f
 10766                                  	; preparing a non-tail-call
 10767 00007AB1 488B4528                	mov rax, PARAM(1)	; param b
 10768 00007AB5 50                      	push rax
 10769 00007AB6 6A01                    	push 1	; arg count
 10770 00007AB8 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
 10771 00007AC0 803805                  	cmp byte [rax], T_undefined
 10772 00007AC3 0F84AB1B0000            	je L_error_fvar_undefined
 10773 00007AC9 803804                  	cmp byte [rax], T_closure
 10774 00007ACC 0F85261C0000            	jne L_error_non_closure
 10775 00007AD2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10776 00007AD5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10777 00007AD8 483D[02000000]          	cmp rax, sob_boolean_false
 10778 00007ADE 742A                    	je .L_if_else_0046
 10779                                  	; preparing a non-tail-call
 10780 00007AE0 488B4528                	mov rax, PARAM(1)	; param b
 10781 00007AE4 50                      	push rax
 10782 00007AE5 488B4520                	mov rax, PARAM(0)	; param a
 10783 00007AE9 50                      	push rax
 10784 00007AEA 6A02                    	push 2	; arg count
 10785 00007AEC 488B4510                	mov rax, ENV
 10786 00007AF0 488B00                  	mov rax, qword [rax + 8 * 0]
 10787 00007AF3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator-zz
 10788 00007AF6 803804                  	cmp byte [rax], T_closure
 10789 00007AF9 0F85F91B0000            	jne L_error_non_closure
 10790 00007AFF FF7001                  	push SOB_CLOSURE_ENV(rax)
 10791 00007B02 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10792 00007B05 E913010000              	jmp .L_if_end_004b
 10793                                  .L_if_else_0046:
 10794                                  	; preparing a non-tail-call
 10795 00007B0A 488B4528                	mov rax, PARAM(1)	; param b
 10796 00007B0E 50                      	push rax
 10797 00007B0F 6A01                    	push 1	; arg count
 10798 00007B11 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
 10799 00007B19 803805                  	cmp byte [rax], T_undefined
 10800 00007B1C 0F84521B0000            	je L_error_fvar_undefined
 10801 00007B22 803804                  	cmp byte [rax], T_closure
 10802 00007B25 0F85CD1B0000            	jne L_error_non_closure
 10803 00007B2B FF7001                  	push SOB_CLOSURE_ENV(rax)
 10804 00007B2E FF5009                  	call SOB_CLOSURE_CODE(rax)
 10805 00007B31 483D[02000000]          	cmp rax, sob_boolean_false
 10806 00007B37 744E                    	je .L_if_else_0045
 10807                                  	; preparing a non-tail-call
 10808 00007B39 488B4528                	mov rax, PARAM(1)	; param b
 10809 00007B3D 50                      	push rax
 10810                                  	; preparing a non-tail-call
 10811 00007B3E 488B4520                	mov rax, PARAM(0)	; param a
 10812 00007B42 50                      	push rax
 10813 00007B43 6A01                    	push 1	; arg count
 10814 00007B45 488B0425[FE0B0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 10815 00007B4D 803805                  	cmp byte [rax], T_undefined
 10816 00007B50 0F841E1B0000            	je L_error_fvar_undefined
 10817 00007B56 803804                  	cmp byte [rax], T_closure
 10818 00007B59 0F85991B0000            	jne L_error_non_closure
 10819 00007B5F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10820 00007B62 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10821 00007B65 50                      	push rax
 10822 00007B66 6A02                    	push 2	; arg count
 10823 00007B68 488B4510                	mov rax, ENV
 10824 00007B6C 488B00                  	mov rax, qword [rax + 8 * 0]
 10825 00007B6F 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 10826 00007B73 803804                  	cmp byte [rax], T_closure
 10827 00007B76 0F857C1B0000            	jne L_error_non_closure
 10828 00007B7C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10829 00007B7F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10830 00007B82 E996000000              	jmp .L_if_end_004a
 10831                                  .L_if_else_0045:
 10832                                  	; preparing a non-tail-call
 10833 00007B87 488B4528                	mov rax, PARAM(1)	; param b
 10834 00007B8B 50                      	push rax
 10835 00007B8C 6A01                    	push 1	; arg count
 10836 00007B8E 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
 10837 00007B96 803805                  	cmp byte [rax], T_undefined
 10838 00007B99 0F84D51A0000            	je L_error_fvar_undefined
 10839 00007B9F 803804                  	cmp byte [rax], T_closure
 10840 00007BA2 0F85501B0000            	jne L_error_non_closure
 10841 00007BA8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10842 00007BAB FF5009                  	call SOB_CLOSURE_CODE(rax)
 10843 00007BAE 483D[02000000]          	cmp rax, sob_boolean_false
 10844 00007BB4 744B                    	je .L_if_else_0044
 10845                                  	; preparing a non-tail-call
 10846 00007BB6 488B4528                	mov rax, PARAM(1)	; param b
 10847 00007BBA 50                      	push rax
 10848                                  	; preparing a non-tail-call
 10849 00007BBB 488B4520                	mov rax, PARAM(0)	; param a
 10850 00007BBF 50                      	push rax
 10851 00007BC0 6A01                    	push 1	; arg count
 10852 00007BC2 488B0425[500F0000]      	mov rax, qword [free_var_79]	; free var integer->real
 10853 00007BCA 803805                  	cmp byte [rax], T_undefined
 10854 00007BCD 0F84A11A0000            	je L_error_fvar_undefined
 10855 00007BD3 803804                  	cmp byte [rax], T_closure
 10856 00007BD6 0F851C1B0000            	jne L_error_non_closure
 10857 00007BDC FF7001                  	push SOB_CLOSURE_ENV(rax)
 10858 00007BDF FF5009                  	call SOB_CLOSURE_CODE(rax)
 10859 00007BE2 50                      	push rax
 10860 00007BE3 6A02                    	push 2	; arg count
 10861 00007BE5 488B4510                	mov rax, ENV
 10862 00007BE9 488B00                  	mov rax, qword [rax + 8 * 0]
 10863 00007BEC 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 10864 00007BF0 803804                  	cmp byte [rax], T_closure
 10865 00007BF3 0F85FF1A0000            	jne L_error_non_closure
 10866 00007BF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10867 00007BFC FF5009                  	call SOB_CLOSURE_CODE(rax)
 10868 00007BFF EB1C                    	jmp .L_if_end_0049
 10869                                  .L_if_else_0044:
 10870                                  	; preparing a non-tail-call
 10871 00007C01 6A00                    	push 0	; arg count
 10872 00007C03 488B4510                	mov rax, ENV
 10873 00007C07 488B4008                	mov rax, qword [rax + 8 * 1]
 10874 00007C0B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 10875 00007C0E 803804                  	cmp byte [rax], T_closure
 10876 00007C11 0F85E11A0000            	jne L_error_non_closure
 10877 00007C17 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10878 00007C1A FF5009                  	call SOB_CLOSURE_CODE(rax)
 10879                                  .L_if_end_0049:
 10880                                  .L_if_end_004a:
 10881                                  .L_if_end_004b:
 10882 00007C1D E960030000              	jmp .L_if_end_0054
 10883                                  .L_if_else_004f:
 10884                                  	; preparing a non-tail-call
 10885 00007C22 488B4520                	mov rax, PARAM(0)	; param a
 10886 00007C26 50                      	push rax
 10887 00007C27 6A01                    	push 1	; arg count
 10888 00007C29 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
 10889 00007C31 803805                  	cmp byte [rax], T_undefined
 10890 00007C34 0F843A1A0000            	je L_error_fvar_undefined
 10891 00007C3A 803804                  	cmp byte [rax], T_closure
 10892 00007C3D 0F85B51A0000            	jne L_error_non_closure
 10893 00007C43 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10894 00007C46 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10895 00007C49 483D[02000000]          	cmp rax, sob_boolean_false
 10896 00007C4F 0F8472010000            	je .L_if_else_004e
 10897                                  	; preparing a non-tail-call
 10898 00007C55 488B4528                	mov rax, PARAM(1)	; param b
 10899 00007C59 50                      	push rax
 10900 00007C5A 6A01                    	push 1	; arg count
 10901 00007C5C 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
 10902 00007C64 803805                  	cmp byte [rax], T_undefined
 10903 00007C67 0F84071A0000            	je L_error_fvar_undefined
 10904 00007C6D 803804                  	cmp byte [rax], T_closure
 10905 00007C70 0F85821A0000            	jne L_error_non_closure
 10906 00007C76 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10907 00007C79 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10908 00007C7C 483D[02000000]          	cmp rax, sob_boolean_false
 10909 00007C82 744E                    	je .L_if_else_0049
 10910                                  	; preparing a non-tail-call
 10911                                  	; preparing a non-tail-call
 10912 00007C84 488B4528                	mov rax, PARAM(1)	; param b
 10913 00007C88 50                      	push rax
 10914 00007C89 6A01                    	push 1	; arg count
 10915 00007C8B 488B0425[FE0B0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 10916 00007C93 803805                  	cmp byte [rax], T_undefined
 10917 00007C96 0F84D8190000            	je L_error_fvar_undefined
 10918 00007C9C 803804                  	cmp byte [rax], T_closure
 10919 00007C9F 0F85531A0000            	jne L_error_non_closure
 10920 00007CA5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10921 00007CA8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10922 00007CAB 50                      	push rax
 10923 00007CAC 488B4520                	mov rax, PARAM(0)	; param a
 10924 00007CB0 50                      	push rax
 10925 00007CB1 6A02                    	push 2	; arg count
 10926 00007CB3 488B4510                	mov rax, ENV
 10927 00007CB7 488B00                  	mov rax, qword [rax + 8 * 0]
 10928 00007CBA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 10929 00007CBE 803804                  	cmp byte [rax], T_closure
 10930 00007CC1 0F85311A0000            	jne L_error_non_closure
 10931 00007CC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10932 00007CCA FF5009                  	call SOB_CLOSURE_CODE(rax)
 10933 00007CCD E9F0000000              	jmp .L_if_end_004e
 10934                                  .L_if_else_0049:
 10935                                  	; preparing a non-tail-call
 10936 00007CD2 488B4528                	mov rax, PARAM(1)	; param b
 10937 00007CD6 50                      	push rax
 10938 00007CD7 6A01                    	push 1	; arg count
 10939 00007CD9 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
 10940 00007CE1 803805                  	cmp byte [rax], T_undefined
 10941 00007CE4 0F848A190000            	je L_error_fvar_undefined
 10942 00007CEA 803804                  	cmp byte [rax], T_closure
 10943 00007CED 0F85051A0000            	jne L_error_non_closure
 10944 00007CF3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10945 00007CF6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10946 00007CF9 483D[02000000]          	cmp rax, sob_boolean_false
 10947 00007CFF 742B                    	je .L_if_else_0048
 10948                                  	; preparing a non-tail-call
 10949 00007D01 488B4528                	mov rax, PARAM(1)	; param b
 10950 00007D05 50                      	push rax
 10951 00007D06 488B4520                	mov rax, PARAM(0)	; param a
 10952 00007D0A 50                      	push rax
 10953 00007D0B 6A02                    	push 2	; arg count
 10954 00007D0D 488B4510                	mov rax, ENV
 10955 00007D11 488B00                  	mov rax, qword [rax + 8 * 0]
 10956 00007D14 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 10957 00007D18 803804                  	cmp byte [rax], T_closure
 10958 00007D1B 0F85D7190000            	jne L_error_non_closure
 10959 00007D21 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10960 00007D24 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10961 00007D27 E996000000              	jmp .L_if_end_004d
 10962                                  .L_if_else_0048:
 10963                                  	; preparing a non-tail-call
 10964 00007D2C 488B4528                	mov rax, PARAM(1)	; param b
 10965 00007D30 50                      	push rax
 10966 00007D31 6A01                    	push 1	; arg count
 10967 00007D33 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
 10968 00007D3B 803805                  	cmp byte [rax], T_undefined
 10969 00007D3E 0F8430190000            	je L_error_fvar_undefined
 10970 00007D44 803804                  	cmp byte [rax], T_closure
 10971 00007D47 0F85AB190000            	jne L_error_non_closure
 10972 00007D4D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10973 00007D50 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10974 00007D53 483D[02000000]          	cmp rax, sob_boolean_false
 10975 00007D59 744B                    	je .L_if_else_0047
 10976                                  	; preparing a non-tail-call
 10977 00007D5B 488B4528                	mov rax, PARAM(1)	; param b
 10978 00007D5F 50                      	push rax
 10979                                  	; preparing a non-tail-call
 10980 00007D60 488B4520                	mov rax, PARAM(0)	; param a
 10981 00007D64 50                      	push rax
 10982 00007D65 6A01                    	push 1	; arg count
 10983 00007D67 488B0425[1D0F0000]      	mov rax, qword [free_var_76]	; free var fraction->real
 10984 00007D6F 803805                  	cmp byte [rax], T_undefined
 10985 00007D72 0F84FC180000            	je L_error_fvar_undefined
 10986 00007D78 803804                  	cmp byte [rax], T_closure
 10987 00007D7B 0F8577190000            	jne L_error_non_closure
 10988 00007D81 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10989 00007D84 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10990 00007D87 50                      	push rax
 10991 00007D88 6A02                    	push 2	; arg count
 10992 00007D8A 488B4510                	mov rax, ENV
 10993 00007D8E 488B00                  	mov rax, qword [rax + 8 * 0]
 10994 00007D91 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 10995 00007D95 803804                  	cmp byte [rax], T_closure
 10996 00007D98 0F855A190000            	jne L_error_non_closure
 10997 00007D9E FF7001                  	push SOB_CLOSURE_ENV(rax)
 10998 00007DA1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10999 00007DA4 EB1C                    	jmp .L_if_end_004c
 11000                                  .L_if_else_0047:
 11001                                  	; preparing a non-tail-call
 11002 00007DA6 6A00                    	push 0	; arg count
 11003 00007DA8 488B4510                	mov rax, ENV
 11004 00007DAC 488B4008                	mov rax, qword [rax + 8 * 1]
 11005 00007DB0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 11006 00007DB3 803804                  	cmp byte [rax], T_closure
 11007 00007DB6 0F853C190000            	jne L_error_non_closure
 11008 00007DBC FF7001                  	push SOB_CLOSURE_ENV(rax)
 11009 00007DBF FF5009                  	call SOB_CLOSURE_CODE(rax)
 11010                                  .L_if_end_004c:
 11011                                  .L_if_end_004d:
 11012                                  .L_if_end_004e:
 11013 00007DC2 E9BB010000              	jmp .L_if_end_0053
 11014                                  .L_if_else_004e:
 11015                                  	; preparing a non-tail-call
 11016 00007DC7 488B4520                	mov rax, PARAM(0)	; param a
 11017 00007DCB 50                      	push rax
 11018 00007DCC 6A01                    	push 1	; arg count
 11019 00007DCE 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
 11020 00007DD6 803805                  	cmp byte [rax], T_undefined
 11021 00007DD9 0F8495180000            	je L_error_fvar_undefined
 11022 00007DDF 803804                  	cmp byte [rax], T_closure
 11023 00007DE2 0F8510190000            	jne L_error_non_closure
 11024 00007DE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11025 00007DEB FF5009                  	call SOB_CLOSURE_CODE(rax)
 11026 00007DEE 483D[02000000]          	cmp rax, sob_boolean_false
 11027 00007DF4 0F846C010000            	je .L_if_else_004d
 11028                                  	; preparing a non-tail-call
 11029 00007DFA 488B4528                	mov rax, PARAM(1)	; param b
 11030 00007DFE 50                      	push rax
 11031 00007DFF 6A01                    	push 1	; arg count
 11032 00007E01 488B0425[610F0000]      	mov rax, qword [free_var_80]	; free var integer?
 11033 00007E09 803805                  	cmp byte [rax], T_undefined
 11034 00007E0C 0F8462180000            	je L_error_fvar_undefined
 11035 00007E12 803804                  	cmp byte [rax], T_closure
 11036 00007E15 0F85DD180000            	jne L_error_non_closure
 11037 00007E1B FF7001                  	push SOB_CLOSURE_ENV(rax)
 11038 00007E1E FF5009                  	call SOB_CLOSURE_CODE(rax)
 11039 00007E21 483D[02000000]          	cmp rax, sob_boolean_false
 11040 00007E27 744E                    	je .L_if_else_004c
 11041                                  	; preparing a non-tail-call
 11042                                  	; preparing a non-tail-call
 11043 00007E29 488B4528                	mov rax, PARAM(1)	; param b
 11044 00007E2D 50                      	push rax
 11045 00007E2E 6A01                    	push 1	; arg count
 11046 00007E30 488B0425[500F0000]      	mov rax, qword [free_var_79]	; free var integer->real
 11047 00007E38 803805                  	cmp byte [rax], T_undefined
 11048 00007E3B 0F8433180000            	je L_error_fvar_undefined
 11049 00007E41 803804                  	cmp byte [rax], T_closure
 11050 00007E44 0F85AE180000            	jne L_error_non_closure
 11051 00007E4A FF7001                  	push SOB_CLOSURE_ENV(rax)
 11052 00007E4D FF5009                  	call SOB_CLOSURE_CODE(rax)
 11053 00007E50 50                      	push rax
 11054 00007E51 488B4520                	mov rax, PARAM(0)	; param a
 11055 00007E55 50                      	push rax
 11056 00007E56 6A02                    	push 2	; arg count
 11057 00007E58 488B4510                	mov rax, ENV
 11058 00007E5C 488B00                  	mov rax, qword [rax + 8 * 0]
 11059 00007E5F 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 11060 00007E63 803804                  	cmp byte [rax], T_closure
 11061 00007E66 0F858C180000            	jne L_error_non_closure
 11062 00007E6C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11063 00007E6F FF5009                  	call SOB_CLOSURE_CODE(rax)
 11064 00007E72 E9ED000000              	jmp .L_if_end_0051
 11065                                  .L_if_else_004c:
 11066                                  	; preparing a non-tail-call
 11067 00007E77 488B4528                	mov rax, PARAM(1)	; param b
 11068 00007E7B 50                      	push rax
 11069 00007E7C 6A01                    	push 1	; arg count
 11070 00007E7E 488B0425[2E0F0000]      	mov rax, qword [free_var_77]	; free var fraction?
 11071 00007E86 803805                  	cmp byte [rax], T_undefined
 11072 00007E89 0F84E5170000            	je L_error_fvar_undefined
 11073 00007E8F 803804                  	cmp byte [rax], T_closure
 11074 00007E92 0F8560180000            	jne L_error_non_closure
 11075 00007E98 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11076 00007E9B FF5009                  	call SOB_CLOSURE_CODE(rax)
 11077 00007E9E 483D[02000000]          	cmp rax, sob_boolean_false
 11078 00007EA4 744B                    	je .L_if_else_004b
 11079                                  	; preparing a non-tail-call
 11080                                  	; preparing a non-tail-call
 11081 00007EA6 488B4528                	mov rax, PARAM(1)	; param b
 11082 00007EAA 50                      	push rax
 11083 00007EAB 6A01                    	push 1	; arg count
 11084 00007EAD 488B0425[1D0F0000]      	mov rax, qword [free_var_76]	; free var fraction->real
 11085 00007EB5 803805                  	cmp byte [rax], T_undefined
 11086 00007EB8 0F84B6170000            	je L_error_fvar_undefined
 11087 00007EBE 803804                  	cmp byte [rax], T_closure
 11088 00007EC1 0F8531180000            	jne L_error_non_closure
 11089 00007EC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11090 00007ECA FF5009                  	call SOB_CLOSURE_CODE(rax)
 11091 00007ECD 50                      	push rax
 11092 00007ECE 488B4520                	mov rax, PARAM(0)	; param a
 11093 00007ED2 50                      	push rax
 11094 00007ED3 6A02                    	push 2	; arg count
 11095 00007ED5 488B4510                	mov rax, ENV
 11096 00007ED9 488B00                  	mov rax, qword [rax + 8 * 0]
 11097 00007EDC 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 11098 00007EE0 803804                  	cmp byte [rax], T_closure
 11099 00007EE3 0F850F180000            	jne L_error_non_closure
 11100 00007EE9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11101 00007EEC FF5009                  	call SOB_CLOSURE_CODE(rax)
 11102 00007EEF EB73                    	jmp .L_if_end_0050
 11103                                  .L_if_else_004b:
 11104                                  	; preparing a non-tail-call
 11105 00007EF1 488B4528                	mov rax, PARAM(1)	; param b
 11106 00007EF5 50                      	push rax
 11107 00007EF6 6A01                    	push 1	; arg count
 11108 00007EF8 488B0425[1C100000]      	mov rax, qword [free_var_91]	; free var real?
 11109 00007F00 803805                  	cmp byte [rax], T_undefined
 11110 00007F03 0F846B170000            	je L_error_fvar_undefined
 11111 00007F09 803804                  	cmp byte [rax], T_closure
 11112 00007F0C 0F85E6170000            	jne L_error_non_closure
 11113 00007F12 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11114 00007F15 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11115 00007F18 483D[02000000]          	cmp rax, sob_boolean_false
 11116 00007F1E 7428                    	je .L_if_else_004a
 11117                                  	; preparing a non-tail-call
 11118 00007F20 488B4528                	mov rax, PARAM(1)	; param b
 11119 00007F24 50                      	push rax
 11120 00007F25 488B4520                	mov rax, PARAM(0)	; param a
 11121 00007F29 50                      	push rax
 11122 00007F2A 6A02                    	push 2	; arg count
 11123 00007F2C 488B4510                	mov rax, ENV
 11124 00007F30 488B00                  	mov rax, qword [rax + 8 * 0]
 11125 00007F33 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 11126 00007F37 803804                  	cmp byte [rax], T_closure
 11127 00007F3A 0F85B8170000            	jne L_error_non_closure
 11128 00007F40 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11129 00007F43 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11130 00007F46 EB1C                    	jmp .L_if_end_004f
 11131                                  .L_if_else_004a:
 11132                                  	; preparing a non-tail-call
 11133 00007F48 6A00                    	push 0	; arg count
 11134 00007F4A 488B4510                	mov rax, ENV
 11135 00007F4E 488B4008                	mov rax, qword [rax + 8 * 1]
 11136 00007F52 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 11137 00007F55 803804                  	cmp byte [rax], T_closure
 11138 00007F58 0F859A170000            	jne L_error_non_closure
 11139 00007F5E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11140 00007F61 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11141                                  .L_if_end_004f:
 11142                                  .L_if_end_0050:
 11143                                  .L_if_end_0051:
 11144 00007F64 EB1C                    	jmp .L_if_end_0052
 11145                                  .L_if_else_004d:
 11146                                  	; preparing a non-tail-call
 11147 00007F66 6A00                    	push 0	; arg count
 11148 00007F68 488B4510                	mov rax, ENV
 11149 00007F6C 488B4008                	mov rax, qword [rax + 8 * 1]
 11150 00007F70 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 11151 00007F73 803804                  	cmp byte [rax], T_closure
 11152 00007F76 0F857C170000            	jne L_error_non_closure
 11153 00007F7C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11154 00007F7F FF5009                  	call SOB_CLOSURE_CODE(rax)
 11155                                  .L_if_end_0052:
 11156                                  .L_if_end_0053:
 11157                                  .L_if_end_0054:
 11158 00007F82 C9                      	leave
 11159 00007F83 C22000                  	ret AND_KILL_FRAME(2)
 11160                                  .L_lambda_simple_end_004a:	; new closure is in rax
 11161 00007F86 C9                      	leave
 11162 00007F87 C22800                  	ret AND_KILL_FRAME(3)
 11163                                  .L_lambda_simple_end_0049:	; new closure is in rax
 11164 00007F8A 50                      	push rax
 11165 00007F8B 6A01                    	push 1	; arg count
 11166 00007F8D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11167 00007F92 E80A180000              	call malloc
 11168 00007F97 50                      	push rax
 11169 00007F98 BF08000000              	mov rdi, 8 * 1	; new rib
 11170 00007F9D E8FF170000              	call malloc
 11171 00007FA2 50                      	push rax
 11172 00007FA3 BF10000000              	mov rdi, 8 * 2	; extended env
 11173 00007FA8 E8F4170000              	call malloc
 11174 00007FAD 488B7D10                	mov rdi, ENV
 11175 00007FB1 BE00000000              	mov rsi, 0
 11176 00007FB6 BA01000000              	mov rdx, 1
 11177                                  .L_lambda_simple_env_loop_004b:	; ext_env[i + 1] <-- env[i]
 11178 00007FBB 4883FE01                	cmp rsi, 1
 11179 00007FBF 7410                    	je .L_lambda_simple_env_end_004b
 11180 00007FC1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11181 00007FC5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11182 00007FC9 48FFC6                  	inc rsi
 11183 00007FCC 48FFC2                  	inc rdx
 11184 00007FCF EBEA                    	jmp .L_lambda_simple_env_loop_004b
 11185                                  .L_lambda_simple_env_end_004b:
 11186 00007FD1 5B                      	pop rbx
 11187 00007FD2 BE00000000              	mov rsi, 0
 11188                                  .L_lambda_simple_params_loop_004b:	; copy params
 11189 00007FD7 4883FE01                	cmp rsi, 1
 11190 00007FDB 740E                    	je .L_lambda_simple_params_end_004b
 11191 00007FDD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11192 00007FE2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11193 00007FE6 48FFC6                  	inc rsi
 11194 00007FE9 EBEC                    	jmp .L_lambda_simple_params_loop_004b
 11195                                  .L_lambda_simple_params_end_004b:
 11196 00007FEB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11197 00007FEE 4889C3                  	mov rbx, rax
 11198 00007FF1 58                      	pop rax
 11199 00007FF2 C60004                  	mov byte [rax], T_closure
 11200 00007FF5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11201 00007FF9 48C74009[06800000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004b
 11202 00008001 E9C30C0000              	jmp .L_lambda_simple_end_004b
 11203                                  .L_lambda_simple_code_004b:	; lambda-simple body
 11204 00008006 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11205 0000800C 740B                    	je .L_lambda_simple_arity_check_ok_0058
 11206 0000800E FF742410                	push qword [rsp + 8 * 2]
 11207 00008012 6A01                    	push 1
 11208 00008014 E941170000              	jmp L_error_incorrect_arity_simple
 11209                                  .L_lambda_simple_arity_check_ok_0058:
 11210 00008019 C8000000                	enter 0, 0
 11211                                  	; preparing a non-tail-call
 11212                                  	; preparing a non-tail-call
 11213 0000801D 488B0425[650B0000]      	mov rax, qword [free_var_20]	; free var __bin-less-than-rr
 11214 00008025 803805                  	cmp byte [rax], T_undefined
 11215 00008028 0F8446160000            	je L_error_fvar_undefined
 11216 0000802E 50                      	push rax
 11217 0000802F 488B0425[540B0000]      	mov rax, qword [free_var_19]	; free var __bin-less-than-qq
 11218 00008037 803805                  	cmp byte [rax], T_undefined
 11219 0000803A 0F8434160000            	je L_error_fvar_undefined
 11220 00008040 50                      	push rax
 11221 00008041 488B0425[760B0000]      	mov rax, qword [free_var_21]	; free var __bin-less-than-zz
 11222 00008049 803805                  	cmp byte [rax], T_undefined
 11223 0000804C 0F8422160000            	je L_error_fvar_undefined
 11224 00008052 50                      	push rax
 11225 00008053 6A03                    	push 3	; arg count
 11226 00008055 488B4520                	mov rax, PARAM(0)	; param make-bin-comparator
 11227 00008059 803804                  	cmp byte [rax], T_closure
 11228 0000805C 0F8596160000            	jne L_error_non_closure
 11229 00008062 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11230 00008065 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11231 00008068 50                      	push rax
 11232 00008069 6A01                    	push 1	; arg count
 11233 0000806B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11234 00008070 E82C170000              	call malloc
 11235 00008075 50                      	push rax
 11236 00008076 BF08000000              	mov rdi, 8 * 1	; new rib
 11237 0000807B E821170000              	call malloc
 11238 00008080 50                      	push rax
 11239 00008081 BF18000000              	mov rdi, 8 * 3	; extended env
 11240 00008086 E816170000              	call malloc
 11241 0000808B 488B7D10                	mov rdi, ENV
 11242 0000808F BE00000000              	mov rsi, 0
 11243 00008094 BA01000000              	mov rdx, 1
 11244                                  .L_lambda_simple_env_loop_004c:	; ext_env[i + 1] <-- env[i]
 11245 00008099 4883FE02                	cmp rsi, 2
 11246 0000809D 7410                    	je .L_lambda_simple_env_end_004c
 11247 0000809F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11248 000080A3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11249 000080A7 48FFC6                  	inc rsi
 11250 000080AA 48FFC2                  	inc rdx
 11251 000080AD EBEA                    	jmp .L_lambda_simple_env_loop_004c
 11252                                  .L_lambda_simple_env_end_004c:
 11253 000080AF 5B                      	pop rbx
 11254 000080B0 BE00000000              	mov rsi, 0
 11255                                  .L_lambda_simple_params_loop_004c:	; copy params
 11256 000080B5 4883FE01                	cmp rsi, 1
 11257 000080B9 740E                    	je .L_lambda_simple_params_end_004c
 11258 000080BB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11259 000080C0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11260 000080C4 48FFC6                  	inc rsi
 11261 000080C7 EBEC                    	jmp .L_lambda_simple_params_loop_004c
 11262                                  .L_lambda_simple_params_end_004c:
 11263 000080C9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11264 000080CC 4889C3                  	mov rbx, rax
 11265 000080CF 58                      	pop rax
 11266 000080D0 C60004                  	mov byte [rax], T_closure
 11267 000080D3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11268 000080D7 48C74009[E4800000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004c
 11269 000080DF E9D20B0000              	jmp .L_lambda_simple_end_004c
 11270                                  .L_lambda_simple_code_004c:	; lambda-simple body
 11271 000080E4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11272 000080EA 740B                    	je .L_lambda_simple_arity_check_ok_0059
 11273 000080EC FF742410                	push qword [rsp + 8 * 2]
 11274 000080F0 6A01                    	push 1
 11275 000080F2 E963160000              	jmp L_error_incorrect_arity_simple
 11276                                  .L_lambda_simple_arity_check_ok_0059:
 11277 000080F7 C8000000                	enter 0, 0
 11278                                  	; preparing a non-tail-call
 11279                                  	; preparing a non-tail-call
 11280 000080FB 488B0425[320B0000]      	mov rax, qword [free_var_17]	; free var __bin-equal-rr
 11281 00008103 803805                  	cmp byte [rax], T_undefined
 11282 00008106 0F8468150000            	je L_error_fvar_undefined
 11283 0000810C 50                      	push rax
 11284 0000810D 488B0425[210B0000]      	mov rax, qword [free_var_16]	; free var __bin-equal-qq
 11285 00008115 803805                  	cmp byte [rax], T_undefined
 11286 00008118 0F8456150000            	je L_error_fvar_undefined
 11287 0000811E 50                      	push rax
 11288 0000811F 488B0425[430B0000]      	mov rax, qword [free_var_18]	; free var __bin-equal-zz
 11289 00008127 803805                  	cmp byte [rax], T_undefined
 11290 0000812A 0F8444150000            	je L_error_fvar_undefined
 11291 00008130 50                      	push rax
 11292 00008131 6A03                    	push 3	; arg count
 11293 00008133 488B4510                	mov rax, ENV
 11294 00008137 488B00                  	mov rax, qword [rax + 8 * 0]
 11295 0000813A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var make-bin-comparator
 11296 0000813D 803804                  	cmp byte [rax], T_closure
 11297 00008140 0F85B2150000            	jne L_error_non_closure
 11298 00008146 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11299 00008149 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11300 0000814C 50                      	push rax
 11301 0000814D 6A01                    	push 1	; arg count
 11302 0000814F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11303 00008154 E848160000              	call malloc
 11304 00008159 50                      	push rax
 11305 0000815A BF08000000              	mov rdi, 8 * 1	; new rib
 11306 0000815F E83D160000              	call malloc
 11307 00008164 50                      	push rax
 11308 00008165 BF20000000              	mov rdi, 8 * 4	; extended env
 11309 0000816A E832160000              	call malloc
 11310 0000816F 488B7D10                	mov rdi, ENV
 11311 00008173 BE00000000              	mov rsi, 0
 11312 00008178 BA01000000              	mov rdx, 1
 11313                                  .L_lambda_simple_env_loop_004d:	; ext_env[i + 1] <-- env[i]
 11314 0000817D 4883FE03                	cmp rsi, 3
 11315 00008181 7410                    	je .L_lambda_simple_env_end_004d
 11316 00008183 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11317 00008187 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11318 0000818B 48FFC6                  	inc rsi
 11319 0000818E 48FFC2                  	inc rdx
 11320 00008191 EBEA                    	jmp .L_lambda_simple_env_loop_004d
 11321                                  .L_lambda_simple_env_end_004d:
 11322 00008193 5B                      	pop rbx
 11323 00008194 BE00000000              	mov rsi, 0
 11324                                  .L_lambda_simple_params_loop_004d:	; copy params
 11325 00008199 4883FE01                	cmp rsi, 1
 11326 0000819D 740E                    	je .L_lambda_simple_params_end_004d
 11327 0000819F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11328 000081A4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11329 000081A8 48FFC6                  	inc rsi
 11330 000081AB EBEC                    	jmp .L_lambda_simple_params_loop_004d
 11331                                  .L_lambda_simple_params_end_004d:
 11332 000081AD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11333 000081B0 4889C3                  	mov rbx, rax
 11334 000081B3 58                      	pop rax
 11335 000081B4 C60004                  	mov byte [rax], T_closure
 11336 000081B7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11337 000081BB 48C74009[C8810000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004d
 11338 000081C3 E9DB0A0000              	jmp .L_lambda_simple_end_004d
 11339                                  .L_lambda_simple_code_004d:	; lambda-simple body
 11340 000081C8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11341 000081CE 740B                    	je .L_lambda_simple_arity_check_ok_005a
 11342 000081D0 FF742410                	push qword [rsp + 8 * 2]
 11343 000081D4 6A01                    	push 1
 11344 000081D6 E97F150000              	jmp L_error_incorrect_arity_simple
 11345                                  .L_lambda_simple_arity_check_ok_005a:
 11346 000081DB C8000000                	enter 0, 0
 11347                                  	; preparing a non-tail-call
 11348 000081DF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11349 000081E4 E8B8150000              	call malloc
 11350 000081E9 50                      	push rax
 11351 000081EA BF08000000              	mov rdi, 8 * 1	; new rib
 11352 000081EF E8AD150000              	call malloc
 11353 000081F4 50                      	push rax
 11354 000081F5 BF28000000              	mov rdi, 8 * 5	; extended env
 11355 000081FA E8A2150000              	call malloc
 11356 000081FF 488B7D10                	mov rdi, ENV
 11357 00008203 BE00000000              	mov rsi, 0
 11358 00008208 BA01000000              	mov rdx, 1
 11359                                  .L_lambda_simple_env_loop_004e:	; ext_env[i + 1] <-- env[i]
 11360 0000820D 4883FE04                	cmp rsi, 4
 11361 00008211 7410                    	je .L_lambda_simple_env_end_004e
 11362 00008213 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11363 00008217 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11364 0000821B 48FFC6                  	inc rsi
 11365 0000821E 48FFC2                  	inc rdx
 11366 00008221 EBEA                    	jmp .L_lambda_simple_env_loop_004e
 11367                                  .L_lambda_simple_env_end_004e:
 11368 00008223 5B                      	pop rbx
 11369 00008224 BE00000000              	mov rsi, 0
 11370                                  .L_lambda_simple_params_loop_004e:	; copy params
 11371 00008229 4883FE01                	cmp rsi, 1
 11372 0000822D 740E                    	je .L_lambda_simple_params_end_004e
 11373 0000822F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11374 00008234 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11375 00008238 48FFC6                  	inc rsi
 11376 0000823B EBEC                    	jmp .L_lambda_simple_params_loop_004e
 11377                                  .L_lambda_simple_params_end_004e:
 11378 0000823D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11379 00008240 4889C3                  	mov rbx, rax
 11380 00008243 58                      	pop rax
 11381 00008244 C60004                  	mov byte [rax], T_closure
 11382 00008247 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11383 0000824B 48C74009[55820000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004e
 11384 00008253 EB64                    	jmp .L_lambda_simple_end_004e
 11385                                  .L_lambda_simple_code_004e:	; lambda-simple body
 11386 00008255 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11387 0000825B 740B                    	je .L_lambda_simple_arity_check_ok_005b
 11388 0000825D FF742410                	push qword [rsp + 8 * 2]
 11389 00008261 6A02                    	push 2
 11390 00008263 E9F2140000              	jmp L_error_incorrect_arity_simple
 11391                                  .L_lambda_simple_arity_check_ok_005b:
 11392 00008268 C8000000                	enter 0, 0
 11393                                  	; preparing a non-tail-call
 11394                                  	; preparing a non-tail-call
 11395 0000826C 488B4528                	mov rax, PARAM(1)	; param b
 11396 00008270 50                      	push rax
 11397 00008271 488B4520                	mov rax, PARAM(0)	; param a
 11398 00008275 50                      	push rax
 11399 00008276 6A02                    	push 2	; arg count
 11400 00008278 488B4510                	mov rax, ENV
 11401 0000827C 488B4008                	mov rax, qword [rax + 8 * 1]
 11402 00008280 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 11403 00008283 803804                  	cmp byte [rax], T_closure
 11404 00008286 0F856C140000            	jne L_error_non_closure
 11405 0000828C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11406 0000828F FF5009                  	call SOB_CLOSURE_CODE(rax)
 11407 00008292 50                      	push rax
 11408 00008293 6A01                    	push 1	; arg count
 11409 00008295 488B0425[B60F0000]      	mov rax, qword [free_var_85]	; free var not
 11410 0000829D 803805                  	cmp byte [rax], T_undefined
 11411 000082A0 0F84CE130000            	je L_error_fvar_undefined
 11412 000082A6 803804                  	cmp byte [rax], T_closure
 11413 000082A9 0F8549140000            	jne L_error_non_closure
 11414 000082AF FF7001                  	push SOB_CLOSURE_ENV(rax)
 11415 000082B2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11416 000082B5 C9                      	leave
 11417 000082B6 C22000                  	ret AND_KILL_FRAME(2)
 11418                                  .L_lambda_simple_end_004e:	; new closure is in rax
 11419 000082B9 50                      	push rax
 11420 000082BA 6A01                    	push 1	; arg count
 11421 000082BC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11422 000082C1 E8DB140000              	call malloc
 11423 000082C6 50                      	push rax
 11424 000082C7 BF08000000              	mov rdi, 8 * 1	; new rib
 11425 000082CC E8D0140000              	call malloc
 11426 000082D1 50                      	push rax
 11427 000082D2 BF28000000              	mov rdi, 8 * 5	; extended env
 11428 000082D7 E8C5140000              	call malloc
 11429 000082DC 488B7D10                	mov rdi, ENV
 11430 000082E0 BE00000000              	mov rsi, 0
 11431 000082E5 BA01000000              	mov rdx, 1
 11432                                  .L_lambda_simple_env_loop_004f:	; ext_env[i + 1] <-- env[i]
 11433 000082EA 4883FE04                	cmp rsi, 4
 11434 000082EE 7410                    	je .L_lambda_simple_env_end_004f
 11435 000082F0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11436 000082F4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11437 000082F8 48FFC6                  	inc rsi
 11438 000082FB 48FFC2                  	inc rdx
 11439 000082FE EBEA                    	jmp .L_lambda_simple_env_loop_004f
 11440                                  .L_lambda_simple_env_end_004f:
 11441 00008300 5B                      	pop rbx
 11442 00008301 BE00000000              	mov rsi, 0
 11443                                  .L_lambda_simple_params_loop_004f:	; copy params
 11444 00008306 4883FE01                	cmp rsi, 1
 11445 0000830A 740E                    	je .L_lambda_simple_params_end_004f
 11446 0000830C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11447 00008311 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11448 00008315 48FFC6                  	inc rsi
 11449 00008318 EBEC                    	jmp .L_lambda_simple_params_loop_004f
 11450                                  .L_lambda_simple_params_end_004f:
 11451 0000831A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11452 0000831D 4889C3                  	mov rbx, rax
 11453 00008320 58                      	pop rax
 11454 00008321 C60004                  	mov byte [rax], T_closure
 11455 00008324 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11456 00008328 48C74009[35830000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004f
 11457 00008330 E95B090000              	jmp .L_lambda_simple_end_004f
 11458                                  .L_lambda_simple_code_004f:	; lambda-simple body
 11459 00008335 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11460 0000833B 740B                    	je .L_lambda_simple_arity_check_ok_005c
 11461 0000833D FF742410                	push qword [rsp + 8 * 2]
 11462 00008341 6A01                    	push 1
 11463 00008343 E912140000              	jmp L_error_incorrect_arity_simple
 11464                                  .L_lambda_simple_arity_check_ok_005c:
 11465 00008348 C8000000                	enter 0, 0
 11466                                  	; preparing a non-tail-call
 11467 0000834C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11468 00008351 E84B140000              	call malloc
 11469 00008356 50                      	push rax
 11470 00008357 BF08000000              	mov rdi, 8 * 1	; new rib
 11471 0000835C E840140000              	call malloc
 11472 00008361 50                      	push rax
 11473 00008362 BF30000000              	mov rdi, 8 * 6	; extended env
 11474 00008367 E835140000              	call malloc
 11475 0000836C 488B7D10                	mov rdi, ENV
 11476 00008370 BE00000000              	mov rsi, 0
 11477 00008375 BA01000000              	mov rdx, 1
 11478                                  .L_lambda_simple_env_loop_0050:	; ext_env[i + 1] <-- env[i]
 11479 0000837A 4883FE05                	cmp rsi, 5
 11480 0000837E 7410                    	je .L_lambda_simple_env_end_0050
 11481 00008380 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11482 00008384 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11483 00008388 48FFC6                  	inc rsi
 11484 0000838B 48FFC2                  	inc rdx
 11485 0000838E EBEA                    	jmp .L_lambda_simple_env_loop_0050
 11486                                  .L_lambda_simple_env_end_0050:
 11487 00008390 5B                      	pop rbx
 11488 00008391 BE00000000              	mov rsi, 0
 11489                                  .L_lambda_simple_params_loop_0050:	; copy params
 11490 00008396 4883FE01                	cmp rsi, 1
 11491 0000839A 740E                    	je .L_lambda_simple_params_end_0050
 11492 0000839C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11493 000083A1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11494 000083A5 48FFC6                  	inc rsi
 11495 000083A8 EBEC                    	jmp .L_lambda_simple_params_loop_0050
 11496                                  .L_lambda_simple_params_end_0050:
 11497 000083AA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11498 000083AD 4889C3                  	mov rbx, rax
 11499 000083B0 58                      	pop rax
 11500 000083B1 C60004                  	mov byte [rax], T_closure
 11501 000083B4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11502 000083B8 48C74009[C2830000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0050
 11503 000083C0 EB41                    	jmp .L_lambda_simple_end_0050
 11504                                  .L_lambda_simple_code_0050:	; lambda-simple body
 11505 000083C2 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11506 000083C8 740B                    	je .L_lambda_simple_arity_check_ok_005d
 11507 000083CA FF742410                	push qword [rsp + 8 * 2]
 11508 000083CE 6A02                    	push 2
 11509 000083D0 E985130000              	jmp L_error_incorrect_arity_simple
 11510                                  .L_lambda_simple_arity_check_ok_005d:
 11511 000083D5 C8000000                	enter 0, 0
 11512                                  	; preparing a non-tail-call
 11513 000083D9 488B4520                	mov rax, PARAM(0)	; param a
 11514 000083DD 50                      	push rax
 11515 000083DE 488B4528                	mov rax, PARAM(1)	; param b
 11516 000083E2 50                      	push rax
 11517 000083E3 6A02                    	push 2	; arg count
 11518 000083E5 488B4510                	mov rax, ENV
 11519 000083E9 488B4010                	mov rax, qword [rax + 8 * 2]
 11520 000083ED 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 11521 000083F0 803804                  	cmp byte [rax], T_closure
 11522 000083F3 0F85FF120000            	jne L_error_non_closure
 11523 000083F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11524 000083FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 11525 000083FF C9                      	leave
 11526 00008400 C22000                  	ret AND_KILL_FRAME(2)
 11527                                  .L_lambda_simple_end_0050:	; new closure is in rax
 11528 00008403 50                      	push rax
 11529 00008404 6A01                    	push 1	; arg count
 11530 00008406 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11531 0000840B E891130000              	call malloc
 11532 00008410 50                      	push rax
 11533 00008411 BF08000000              	mov rdi, 8 * 1	; new rib
 11534 00008416 E886130000              	call malloc
 11535 0000841B 50                      	push rax
 11536 0000841C BF30000000              	mov rdi, 8 * 6	; extended env
 11537 00008421 E87B130000              	call malloc
 11538 00008426 488B7D10                	mov rdi, ENV
 11539 0000842A BE00000000              	mov rsi, 0
 11540 0000842F BA01000000              	mov rdx, 1
 11541                                  .L_lambda_simple_env_loop_0051:	; ext_env[i + 1] <-- env[i]
 11542 00008434 4883FE05                	cmp rsi, 5
 11543 00008438 7410                    	je .L_lambda_simple_env_end_0051
 11544 0000843A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11545 0000843E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11546 00008442 48FFC6                  	inc rsi
 11547 00008445 48FFC2                  	inc rdx
 11548 00008448 EBEA                    	jmp .L_lambda_simple_env_loop_0051
 11549                                  .L_lambda_simple_env_end_0051:
 11550 0000844A 5B                      	pop rbx
 11551 0000844B BE00000000              	mov rsi, 0
 11552                                  .L_lambda_simple_params_loop_0051:	; copy params
 11553 00008450 4883FE01                	cmp rsi, 1
 11554 00008454 740E                    	je .L_lambda_simple_params_end_0051
 11555 00008456 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11556 0000845B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11557 0000845F 48FFC6                  	inc rsi
 11558 00008462 EBEC                    	jmp .L_lambda_simple_params_loop_0051
 11559                                  .L_lambda_simple_params_end_0051:
 11560 00008464 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11561 00008467 4889C3                  	mov rbx, rax
 11562 0000846A 58                      	pop rax
 11563 0000846B C60004                  	mov byte [rax], T_closure
 11564 0000846E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11565 00008472 48C74009[7F840000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0051
 11566 0000847A E9FE070000              	jmp .L_lambda_simple_end_0051
 11567                                  .L_lambda_simple_code_0051:	; lambda-simple body
 11568 0000847F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11569 00008485 740B                    	je .L_lambda_simple_arity_check_ok_005e
 11570 00008487 FF742410                	push qword [rsp + 8 * 2]
 11571 0000848B 6A01                    	push 1
 11572 0000848D E9C8120000              	jmp L_error_incorrect_arity_simple
 11573                                  .L_lambda_simple_arity_check_ok_005e:
 11574 00008492 C8000000                	enter 0, 0
 11575                                  	; preparing a non-tail-call
 11576 00008496 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11577 0000849B E801130000              	call malloc
 11578 000084A0 50                      	push rax
 11579 000084A1 BF08000000              	mov rdi, 8 * 1	; new rib
 11580 000084A6 E8F6120000              	call malloc
 11581 000084AB 50                      	push rax
 11582 000084AC BF38000000              	mov rdi, 8 * 7	; extended env
 11583 000084B1 E8EB120000              	call malloc
 11584 000084B6 488B7D10                	mov rdi, ENV
 11585 000084BA BE00000000              	mov rsi, 0
 11586 000084BF BA01000000              	mov rdx, 1
 11587                                  .L_lambda_simple_env_loop_0052:	; ext_env[i + 1] <-- env[i]
 11588 000084C4 4883FE06                	cmp rsi, 6
 11589 000084C8 7410                    	je .L_lambda_simple_env_end_0052
 11590 000084CA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11591 000084CE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11592 000084D2 48FFC6                  	inc rsi
 11593 000084D5 48FFC2                  	inc rdx
 11594 000084D8 EBEA                    	jmp .L_lambda_simple_env_loop_0052
 11595                                  .L_lambda_simple_env_end_0052:
 11596 000084DA 5B                      	pop rbx
 11597 000084DB BE00000000              	mov rsi, 0
 11598                                  .L_lambda_simple_params_loop_0052:	; copy params
 11599 000084E0 4883FE01                	cmp rsi, 1
 11600 000084E4 740E                    	je .L_lambda_simple_params_end_0052
 11601 000084E6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11602 000084EB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11603 000084EF 48FFC6                  	inc rsi
 11604 000084F2 EBEC                    	jmp .L_lambda_simple_params_loop_0052
 11605                                  .L_lambda_simple_params_end_0052:
 11606 000084F4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11607 000084F7 4889C3                  	mov rbx, rax
 11608 000084FA 58                      	pop rax
 11609 000084FB C60004                  	mov byte [rax], T_closure
 11610 000084FE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11611 00008502 48C74009[0C850000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0052
 11612 0000850A EB63                    	jmp .L_lambda_simple_end_0052
 11613                                  .L_lambda_simple_code_0052:	; lambda-simple body
 11614 0000850C 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11615 00008512 740B                    	je .L_lambda_simple_arity_check_ok_005f
 11616 00008514 FF742410                	push qword [rsp + 8 * 2]
 11617 00008518 6A02                    	push 2
 11618 0000851A E93B120000              	jmp L_error_incorrect_arity_simple
 11619                                  .L_lambda_simple_arity_check_ok_005f:
 11620 0000851F C8000000                	enter 0, 0
 11621                                  	; preparing a non-tail-call
 11622                                  	; preparing a non-tail-call
 11623 00008523 488B4528                	mov rax, PARAM(1)	; param b
 11624 00008527 50                      	push rax
 11625 00008528 488B4520                	mov rax, PARAM(0)	; param a
 11626 0000852C 50                      	push rax
 11627 0000852D 6A02                    	push 2	; arg count
 11628 0000852F 488B4510                	mov rax, ENV
 11629 00008533 488B00                  	mov rax, qword [rax + 8 * 0]
 11630 00008536 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 11631 00008539 803804                  	cmp byte [rax], T_closure
 11632 0000853C 0F85B6110000            	jne L_error_non_closure
 11633 00008542 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11634 00008545 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11635 00008548 50                      	push rax
 11636 00008549 6A01                    	push 1	; arg count
 11637 0000854B 488B0425[B60F0000]      	mov rax, qword [free_var_85]	; free var not
 11638 00008553 803805                  	cmp byte [rax], T_undefined
 11639 00008556 0F8418110000            	je L_error_fvar_undefined
 11640 0000855C 803804                  	cmp byte [rax], T_closure
 11641 0000855F 0F8593110000            	jne L_error_non_closure
 11642 00008565 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11643 00008568 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11644 0000856B C9                      	leave
 11645 0000856C C22000                  	ret AND_KILL_FRAME(2)
 11646                                  .L_lambda_simple_end_0052:	; new closure is in rax
 11647 0000856F 50                      	push rax
 11648 00008570 6A01                    	push 1	; arg count
 11649 00008572 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11650 00008577 E825120000              	call malloc
 11651 0000857C 50                      	push rax
 11652 0000857D BF08000000              	mov rdi, 8 * 1	; new rib
 11653 00008582 E81A120000              	call malloc
 11654 00008587 50                      	push rax
 11655 00008588 BF38000000              	mov rdi, 8 * 7	; extended env
 11656 0000858D E80F120000              	call malloc
 11657 00008592 488B7D10                	mov rdi, ENV
 11658 00008596 BE00000000              	mov rsi, 0
 11659 0000859B BA01000000              	mov rdx, 1
 11660                                  .L_lambda_simple_env_loop_0053:	; ext_env[i + 1] <-- env[i]
 11661 000085A0 4883FE06                	cmp rsi, 6
 11662 000085A4 7410                    	je .L_lambda_simple_env_end_0053
 11663 000085A6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11664 000085AA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11665 000085AE 48FFC6                  	inc rsi
 11666 000085B1 48FFC2                  	inc rdx
 11667 000085B4 EBEA                    	jmp .L_lambda_simple_env_loop_0053
 11668                                  .L_lambda_simple_env_end_0053:
 11669 000085B6 5B                      	pop rbx
 11670 000085B7 BE00000000              	mov rsi, 0
 11671                                  .L_lambda_simple_params_loop_0053:	; copy params
 11672 000085BC 4883FE01                	cmp rsi, 1
 11673 000085C0 740E                    	je .L_lambda_simple_params_end_0053
 11674 000085C2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11675 000085C7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11676 000085CB 48FFC6                  	inc rsi
 11677 000085CE EBEC                    	jmp .L_lambda_simple_params_loop_0053
 11678                                  .L_lambda_simple_params_end_0053:
 11679 000085D0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11680 000085D3 4889C3                  	mov rbx, rax
 11681 000085D6 58                      	pop rax
 11682 000085D7 C60004                  	mov byte [rax], T_closure
 11683 000085DA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11684 000085DE 48C74009[EB850000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0053
 11685 000085E6 E97F060000              	jmp .L_lambda_simple_end_0053
 11686                                  .L_lambda_simple_code_0053:	; lambda-simple body
 11687 000085EB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11688 000085F1 740B                    	je .L_lambda_simple_arity_check_ok_0060
 11689 000085F3 FF742410                	push qword [rsp + 8 * 2]
 11690 000085F7 6A01                    	push 1
 11691 000085F9 E95C110000              	jmp L_error_incorrect_arity_simple
 11692                                  .L_lambda_simple_arity_check_ok_0060:
 11693 000085FE C8000000                	enter 0, 0
 11694                                  	; preparing a non-tail-call
 11695 00008602 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11696 00008607 E895110000              	call malloc
 11697 0000860C 50                      	push rax
 11698 0000860D BF08000000              	mov rdi, 8 * 1	; new rib
 11699 00008612 E88A110000              	call malloc
 11700 00008617 50                      	push rax
 11701 00008618 BF40000000              	mov rdi, 8 * 8	; extended env
 11702 0000861D E87F110000              	call malloc
 11703 00008622 488B7D10                	mov rdi, ENV
 11704 00008626 BE00000000              	mov rsi, 0
 11705 0000862B BA01000000              	mov rdx, 1
 11706                                  .L_lambda_simple_env_loop_0054:	; ext_env[i + 1] <-- env[i]
 11707 00008630 4883FE07                	cmp rsi, 7
 11708 00008634 7410                    	je .L_lambda_simple_env_end_0054
 11709 00008636 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11710 0000863A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11711 0000863E 48FFC6                  	inc rsi
 11712 00008641 48FFC2                  	inc rdx
 11713 00008644 EBEA                    	jmp .L_lambda_simple_env_loop_0054
 11714                                  .L_lambda_simple_env_end_0054:
 11715 00008646 5B                      	pop rbx
 11716 00008647 BE00000000              	mov rsi, 0
 11717                                  .L_lambda_simple_params_loop_0054:	; copy params
 11718 0000864C 4883FE01                	cmp rsi, 1
 11719 00008650 740E                    	je .L_lambda_simple_params_end_0054
 11720 00008652 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11721 00008657 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11722 0000865B 48FFC6                  	inc rsi
 11723 0000865E EBEC                    	jmp .L_lambda_simple_params_loop_0054
 11724                                  .L_lambda_simple_params_end_0054:
 11725 00008660 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11726 00008663 4889C3                  	mov rbx, rax
 11727 00008666 58                      	pop rax
 11728 00008667 C60004                  	mov byte [rax], T_closure
 11729 0000866A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11730 0000866E 48C74009[7B860000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0054
 11731 00008676 E947040000              	jmp .L_lambda_simple_end_0054
 11732                                  .L_lambda_simple_code_0054:	; lambda-simple body
 11733 0000867B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11734 00008681 740B                    	je .L_lambda_simple_arity_check_ok_0061
 11735 00008683 FF742410                	push qword [rsp + 8 * 2]
 11736 00008687 6A01                    	push 1
 11737 00008689 E9CC100000              	jmp L_error_incorrect_arity_simple
 11738                                  .L_lambda_simple_arity_check_ok_0061:
 11739 0000868E C8000000                	enter 0, 0
 11740                                  	; preparing a non-tail-call
 11741 00008692 48B8-                   	mov rax, L_constants + 1993
 11741 00008694 [C907000000000000] 
 11742 0000869C 50                      	push rax
 11743 0000869D 6A01                    	push 1	; arg count
 11744 0000869F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11745 000086A4 E8F8100000              	call malloc
 11746 000086A9 50                      	push rax
 11747 000086AA BF08000000              	mov rdi, 8 * 1	; new rib
 11748 000086AF E8ED100000              	call malloc
 11749 000086B4 50                      	push rax
 11750 000086B5 BF48000000              	mov rdi, 8 * 9	; extended env
 11751 000086BA E8E2100000              	call malloc
 11752 000086BF 488B7D10                	mov rdi, ENV
 11753 000086C3 BE00000000              	mov rsi, 0
 11754 000086C8 BA01000000              	mov rdx, 1
 11755                                  .L_lambda_simple_env_loop_0055:	; ext_env[i + 1] <-- env[i]
 11756 000086CD 4883FE08                	cmp rsi, 8
 11757 000086D1 7410                    	je .L_lambda_simple_env_end_0055
 11758 000086D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11759 000086D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11760 000086DB 48FFC6                  	inc rsi
 11761 000086DE 48FFC2                  	inc rdx
 11762 000086E1 EBEA                    	jmp .L_lambda_simple_env_loop_0055
 11763                                  .L_lambda_simple_env_end_0055:
 11764 000086E3 5B                      	pop rbx
 11765 000086E4 BE00000000              	mov rsi, 0
 11766                                  .L_lambda_simple_params_loop_0055:	; copy params
 11767 000086E9 4883FE01                	cmp rsi, 1
 11768 000086ED 740E                    	je .L_lambda_simple_params_end_0055
 11769 000086EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11770 000086F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11771 000086F8 48FFC6                  	inc rsi
 11772 000086FB EBEC                    	jmp .L_lambda_simple_params_loop_0055
 11773                                  .L_lambda_simple_params_end_0055:
 11774 000086FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11775 00008700 4889C3                  	mov rbx, rax
 11776 00008703 58                      	pop rax
 11777 00008704 C60004                  	mov byte [rax], T_closure
 11778 00008707 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11779 0000870B 48C74009[18870000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0055
 11780 00008713 E997030000              	jmp .L_lambda_simple_end_0055
 11781                                  .L_lambda_simple_code_0055:	; lambda-simple body
 11782 00008718 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11783 0000871E 740B                    	je .L_lambda_simple_arity_check_ok_0062
 11784 00008720 FF742410                	push qword [rsp + 8 * 2]
 11785 00008724 6A01                    	push 1
 11786 00008726 E92F100000              	jmp L_error_incorrect_arity_simple
 11787                                  .L_lambda_simple_arity_check_ok_0062:
 11788 0000872B C8000000                	enter 0, 0
 11789 0000872F 488B5D20                	 mov rbx, qword [rbp + 8 * (4 +0)]
 11790 00008733 BF08000000              	mov rdi, 8
 11791 00008738 E864100000              	call malloc
 11792 0000873D 488918                  	mov qword [rax], rbx
 11793 00008740 488903                  	mov qword [rbx], rax
 11794 00008743 48B8-                   	mov rax, sob_void
 11794 00008745 [0000000000000000] 
 11795                                  
 11796 0000874D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11797 00008752 E84A100000              	call malloc
 11798 00008757 50                      	push rax
 11799 00008758 BF08000000              	mov rdi, 8 * 1	; new rib
 11800 0000875D E83F100000              	call malloc
 11801 00008762 50                      	push rax
 11802 00008763 BF50000000              	mov rdi, 8 * 10	; extended env
 11803 00008768 E834100000              	call malloc
 11804 0000876D 488B7D10                	mov rdi, ENV
 11805 00008771 BE00000000              	mov rsi, 0
 11806 00008776 BA01000000              	mov rdx, 1
 11807                                  .L_lambda_simple_env_loop_0056:	; ext_env[i + 1] <-- env[i]
 11808 0000877B 4883FE09                	cmp rsi, 9
 11809 0000877F 7410                    	je .L_lambda_simple_env_end_0056
 11810 00008781 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11811 00008785 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11812 00008789 48FFC6                  	inc rsi
 11813 0000878C 48FFC2                  	inc rdx
 11814 0000878F EBEA                    	jmp .L_lambda_simple_env_loop_0056
 11815                                  .L_lambda_simple_env_end_0056:
 11816 00008791 5B                      	pop rbx
 11817 00008792 BE00000000              	mov rsi, 0
 11818                                  .L_lambda_simple_params_loop_0056:	; copy params
 11819 00008797 4883FE01                	cmp rsi, 1
 11820 0000879B 740E                    	je .L_lambda_simple_params_end_0056
 11821 0000879D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11822 000087A2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11823 000087A6 48FFC6                  	inc rsi
 11824 000087A9 EBEC                    	jmp .L_lambda_simple_params_loop_0056
 11825                                  .L_lambda_simple_params_end_0056:
 11826 000087AB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11827 000087AE 4889C3                  	mov rbx, rax
 11828 000087B1 58                      	pop rax
 11829 000087B2 C60004                  	mov byte [rax], T_closure
 11830 000087B5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11831 000087B9 48C74009[C6870000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0056
 11832 000087C1 E921010000              	jmp .L_lambda_simple_end_0056
 11833                                  .L_lambda_simple_code_0056:	; lambda-simple body
 11834 000087C6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11835 000087CC 740B                    	je .L_lambda_simple_arity_check_ok_0063
 11836 000087CE FF742410                	push qword [rsp + 8 * 2]
 11837 000087D2 6A02                    	push 2
 11838 000087D4 E9810F0000              	jmp L_error_incorrect_arity_simple
 11839                                  .L_lambda_simple_arity_check_ok_0063:
 11840 000087D9 C8000000                	enter 0, 0
 11841                                  	; preparing a non-tail-call
 11842 000087DD 488B4528                	mov rax, PARAM(1)	; param s
 11843 000087E1 50                      	push rax
 11844 000087E2 6A01                    	push 1	; arg count
 11845 000087E4 488B0425[C70F0000]      	mov rax, qword [free_var_86]	; free var null?
 11846 000087EC 803805                  	cmp byte [rax], T_undefined
 11847 000087EF 0F847F0E0000            	je L_error_fvar_undefined
 11848 000087F5 803804                  	cmp byte [rax], T_closure
 11849 000087F8 0F85FA0E0000            	jne L_error_non_closure
 11850 000087FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 11851 00008801 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11852 00008804 483D[02000000]          	cmp rax, sob_boolean_false
 11853 0000880A 0F85D3000000            	jne .L_if_end_0055
 11854                                  	; preparing a non-tail-call
 11855                                  	; preparing a non-tail-call
 11856 00008810 488B4528                	mov rax, PARAM(1)	; param s
 11857 00008814 50                      	push rax
 11858 00008815 6A01                    	push 1	; arg count
 11859 00008817 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
 11860 0000881F 803805                  	cmp byte [rax], T_undefined
 11861 00008822 0F844C0E0000            	je L_error_fvar_undefined
 11862 00008828 803804                  	cmp byte [rax], T_closure
 11863 0000882B 0F85C70E0000            	jne L_error_non_closure
 11864 00008831 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11865 00008834 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11866 00008837 50                      	push rax
 11867 00008838 488B4520                	mov rax, PARAM(0)	; param a
 11868 0000883C 50                      	push rax
 11869 0000883D 6A02                    	push 2	; arg count
 11870 0000883F 488B4510                	mov rax, ENV
 11871 00008843 488B4008                	mov rax, qword [rax + 8 * 1]
 11872 00008847 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-ordering
 11873 0000884A 803804                  	cmp byte [rax], T_closure
 11874 0000884D 0F85A50E0000            	jne L_error_non_closure
 11875 00008853 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11876 00008856 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11877 00008859 483D[02000000]          	cmp rax, sob_boolean_false
 11878 0000885F 7470                    	je .L_if_else_0050
 11879                                  	; preparing a non-tail-call
 11880                                  	; preparing a non-tail-call
 11881 00008861 488B4528                	mov rax, PARAM(1)	; param s
 11882 00008865 50                      	push rax
 11883 00008866 6A01                    	push 1	; arg count
 11884 00008868 488B0425[2F0E0000]      	mov rax, qword [free_var_62]	; free var cdr
 11885 00008870 803805                  	cmp byte [rax], T_undefined
 11886 00008873 0F84FB0D0000            	je L_error_fvar_undefined
 11887 00008879 803804                  	cmp byte [rax], T_closure
 11888 0000887C 0F85760E0000            	jne L_error_non_closure
 11889 00008882 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11890 00008885 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11891 00008888 50                      	push rax
 11892                                  	; preparing a non-tail-call
 11893 00008889 488B4528                	mov rax, PARAM(1)	; param s
 11894 0000888D 50                      	push rax
 11895 0000888E 6A01                    	push 1	; arg count
 11896 00008890 488B0425[300D0000]      	mov rax, qword [free_var_47]	; free var car
 11897 00008898 803805                  	cmp byte [rax], T_undefined
 11898 0000889B 0F84D30D0000            	je L_error_fvar_undefined
 11899 000088A1 803804                  	cmp byte [rax], T_closure
 11900 000088A4 0F854E0E0000            	jne L_error_non_closure
 11901 000088AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 11902 000088AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 11903 000088B0 50                      	push rax
 11904 000088B1 6A02                    	push 2	; arg count
 11905 000088B3 488B4510                	mov rax, ENV
 11906 000088B7 488B00                  	mov rax, qword [rax + 8 * 0]
 11907 000088BA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 11908 000088BD 488B00                  	mov rax, qword [rax]
 11909 000088C0 803804                  	cmp byte [rax], T_closure
 11910 000088C3 0F852F0E0000            	jne L_error_non_closure
 11911 000088C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11912 000088CC FF5009                  	call SOB_CLOSURE_CODE(rax)
 11913 000088CF EB0A                    	jmp .L_if_end_0056
 11914                                  .L_if_else_0050:
 11915 000088D1 48B8-                   	mov rax, L_constants + 2
 11915 000088D3 [0200000000000000] 
 11916                                  .L_if_end_0056:
 11917 000088DB 483D[02000000]          	cmp rax, sob_boolean_false
 11918 000088E1 7500                    	jne .L_if_end_0055
 11919                                  .L_if_end_0055:
 11920 000088E3 C9                      	leave
 11921 000088E4 C22000                  	ret AND_KILL_FRAME(2)
 11922                                  .L_lambda_simple_end_0056:	; new closure is in rax
 11923 000088E7 50                      	push rax
 11924 000088E8 488B4520                	mov rax, PARAM(0)	; param run
 11925 000088EC 8F00                    	pop qword [rax]
 11926 000088EE 48B8-                   	mov rax, sob_void
 11926 000088F0 [0000000000000000] 
 11927                                  
 11928 000088F8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11929 000088FD E89F0E0000              	call malloc
 11930 00008902 50                      	push rax
 11931 00008903 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
 11932 00008907 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
 11933 0000890B BF08000000              	mov rdi, 8 * 1	; new rib for optional parameters
 11934 00008910 E88C0E0000              	call malloc
 11935 00008915 50                      	push rax
 11936 00008916 BF50000000              	mov rdi, 8 * 10	; extended env
 11937 0000891B E8810E0000              	call malloc
 11938 00008920 488B7D10                	mov rdi, ENV
 11939 00008924 BE00000000              	mov rsi, 0
 11940 00008929 BA01000000              	mov rdx, 1
 11941                                  .L_lambda_opt_code_0028:	; ext_env[i + 1] <-- env[i] copy all the array
 11942 0000892E 4883FE09                	cmp rsi, 9
 11943 00008932 7410                    	je .L_lambda_opt_end_0035
 11944 00008934 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11945 00008938 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11946 0000893C 48FFC6                  	inc rsi
 11947 0000893F 48FFC2                  	inc rdx
 11948 00008942 EBEA                    	jmp .L_lambda_opt_code_0028
 11949                                  .L_lambda_opt_end_0035:
 11950 00008944 5B                      	pop rbx
 11951 00008945 BE00000000              	mov rsi, 0
 11952                                  .L_lambda_opt_code_0029:	; copy params
 11953 0000894A 4883FE01                	cmp rsi, 1
 11954 0000894E 740E                    	je .L_lambda_opt_end_0036
 11955 00008950 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11956 00008955 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11957 00008959 48FFC6                  	inc rsi
 11958 0000895C EBEC                    	jmp .L_lambda_opt_code_0029
 11959                                  .L_lambda_opt_end_0036:
 11960 0000895E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11961 00008961 4889C3                  	mov rbx, rax
 11962 00008964 58                      	pop rax
 11963 00008965 C60004                  	mov byte [rax], T_closure
 11964 00008968 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11965 0000896C 48C74009[79890000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002a
 11966 00008974 E932010000              	jmp .L_lambda_opt_end_0037
 11967                                  .L_lambda_opt_code_002a:	; lambda-opt body
 11968 00008979 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11969 0000897F 7D0B                    	jge .L_lambda_simple_arity_check_ok_0064
 11970 00008981 FF742410                	push qword [rsp + 8 * 2]
 11971 00008985 6A01                    	push 1
 11972 00008987 E9CE0D0000              	jmp L_error_incorrect_arity_simple
 11973                                  .L_lambda_simple_arity_check_ok_0064:
 11974 0000898C 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 11975 00008991 4983E801                	sub r8, 1
 11976 00008995 4C89C3                  	mov rbx,r8
 11977 00008998 4983F800                	cmp r8, 0
 11978 0000899C 7535                    	jne .L_lambda_opt_params_loop_002a
 11979 0000899E 488B542410              	mov rdx, qword [rsp + 8 * 2]
 11980 000089A3 4883C203                	add rdx , 3
 11981 000089A7 4883EC08                	sub rsp , 8
 11982 000089AB 4889E1                  	mov rcx, rsp
 11983                                  .L_lambda_opt_stack_adjusted_001b: ;pushing down the stack of the current function
 11984 000089AE 488B5908                	mov rbx, qword [rcx + 8 * 1]
 11985 000089B2 488919                  	mov qword[rcx] , rbx
 11986 000089B5 4883C108                	add rcx , 8
 11987 000089B9 48FFCA                  	dec rdx
 11988 000089BC 4883FA00                	cmp rdx, 0
 11989 000089C0 75EC                    	jne .L_lambda_opt_stack_adjusted_001b
 11990 000089C2 48FF442410              	inc qword [rsp + 8 * 2]
 11991 000089C7 48C701[01000000]        	mov qword [rcx], sob_nil 
 11992 000089CE E9A8000000              	jmp .L_lambda_opt_end_0038
 11993                                  	.L_lambda_opt_params_loop_002a:
 11994 000089D3 488B542410              	mov rdx, qword [rsp + 8*2]
 11995 000089D8 488D4CD410              	lea rcx, [rsp + 8*2 + 8*rdx]
 11996 000089DD 4C89C2                  	mov rdx, r8
 11997 000089E0 49B9-                   	mov r9, sob_nil
 11997 000089E2 [0100000000000000] 
 11998 000089EA 4989C9                  	mov r9, rcx
 11999                                  	.L_lambda_opt_params_loop_0028: ;loop for copying the opt into list
 12000 000089ED BF11000000              	mov rdi, (1 + 8 + 8)
 12001 000089F2 E8AA0D0000              	call malloc
 12002 000089F7 C60021                  	mov byte[rax], T_pair
 12003 000089FA 488B19                  	mov rbx, qword [rcx]
 12004 000089FD 48895801                	mov SOB_PAIR_CAR(rax), rbx
 12005 00008A01 4C894809                	mov SOB_PAIR_CDR(rax), r9
 12006 00008A05 4989C1                  	mov r9, rax
 12007 00008A08 48FFCA                  	dec rdx
 12008 00008A0B 4883E908                	sub rcx, 8
 12009 00008A0F 4883FA00                	cmp rdx, 0
 12010 00008A13 75D8                    	jne .L_lambda_opt_params_loop_0028
 12011 00008A15 488B542410              	mov rdx, qword [rsp + 8 * 2]
 12012 00008A1A 4889E0                  	mov rax, rsp
 12013 00008A1D 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
 12014 00008A22 4989DC                  	mov r12 , rbx
 12015 00008A25 4C89C1                  	mov rcx, r8
 12016 00008A28 48FFC9                  	dec rcx
 12017 00008A2B 4883C203                	add rdx, 3
 12018 00008A2F 4829CA                  	sub rdx,rcx
 12019 00008A32 48C1E103                	shl rcx, 3
 12020                                  	.L_lambda_opt_stack_adjusted_001c:
 12021 00008A36 4883FA00                	cmp rdx, 0
 12022 00008A3A 7419                    	je .L_lambda_opt_params_end_0036
 12023 00008A3C 4889D8                  	mov rax, rbx
 12024 00008A3F 4829C8                  	sub rax, rcx
 12025 00008A42 488B30                  	mov rsi, qword [rax]
 12026 00008A45 488933                  	mov [rbx], rsi
 12027 00008A48 4883EB08                	sub rbx, 8
 12028 00008A4C 48FFCA                  	dec rdx
 12029 00008A4F 4883FA00                	cmp rdx, 0
 12030 00008A53 75E1                    	jne .L_lambda_opt_stack_adjusted_001c
 12031                                  	.L_lambda_opt_params_end_0036:
 12032 00008A55 4801CC                  	add rsp,rcx
 12033 00008A58 BB01000000              	mov rbx, 1
 12034 00008A5D 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 12035 00008A62 4883C303                	add rbx,3
 12036 00008A66 4C29C3                  	sub rbx,r8
 12037 00008A69 48C1E303                	shl rbx, 3
 12038 00008A6D 4801E3                  	add rbx, rsp
 12039 00008A70 4C890B                  	mov qword[rbx] , r9
 12040 00008A73 49FFC8                  	dec r8
 12041 00008A76 4C29442410              	sub qword [rsp + 8 * 2], r8
 12042                                  	.L_lambda_opt_end_0038:
 12043 00008A7B C8000000                	enter 0, 0
 12044                                  	; preparing a non-tail-call
 12045 00008A7F 488B4528                	mov rax, PARAM(1)	; param s
 12046 00008A83 50                      	push rax
 12047 00008A84 488B4520                	mov rax, PARAM(0)	; param a
 12048 00008A88 50                      	push rax
 12049 00008A89 6A02                    	push 2	; arg count
 12050 00008A8B 488B4510                	mov rax, ENV
 12051 00008A8F 488B00                  	mov rax, qword [rax + 8 * 0]
 12052 00008A92 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 12053 00008A95 488B00                  	mov rax, qword [rax]
 12054 00008A98 803804                  	cmp byte [rax], T_closure
 12055 00008A9B 0F85570C0000            	jne L_error_non_closure
 12056 00008AA1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12057 00008AA4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12058                                  	LEAVE
    49 00008AA7 C9                  <1>  leave
 12059 00008AA8 C22000                  	ret AND_KILL_FRAME(2)
 12060                                  .L_lambda_opt_end_0037:
 12061 00008AAB C9                      	leave
 12062 00008AAC C21800                  	ret AND_KILL_FRAME(1)
 12063                                  .L_lambda_simple_end_0055:	; new closure is in rax
 12064 00008AAF 803804                  	cmp byte [rax], T_closure
 12065 00008AB2 0F85400C0000            	jne L_error_non_closure
 12066 00008AB8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12067 00008ABB FF5009                  	call SOB_CLOSURE_CODE(rax)
 12068 00008ABE C9                      	leave
 12069 00008ABF C21800                  	ret AND_KILL_FRAME(1)
 12070                                  .L_lambda_simple_end_0054:	; new closure is in rax
 12071 00008AC2 50                      	push rax
 12072 00008AC3 6A01                    	push 1	; arg count
 12073 00008AC5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12074 00008ACA E8D20C0000              	call malloc
 12075 00008ACF 50                      	push rax
 12076 00008AD0 BF08000000              	mov rdi, 8 * 1	; new rib
 12077 00008AD5 E8C70C0000              	call malloc
 12078 00008ADA 50                      	push rax
 12079 00008ADB BF40000000              	mov rdi, 8 * 8	; extended env
 12080 00008AE0 E8BC0C0000              	call malloc
 12081 00008AE5 488B7D10                	mov rdi, ENV
 12082 00008AE9 BE00000000              	mov rsi, 0
 12083 00008AEE BA01000000              	mov rdx, 1
 12084                                  .L_lambda_simple_env_loop_0057:	; ext_env[i + 1] <-- env[i]
 12085 00008AF3 4883FE07                	cmp rsi, 7
 12086 00008AF7 7410                    	je .L_lambda_simple_env_end_0057
 12087 00008AF9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12088 00008AFD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12089 00008B01 48FFC6                  	inc rsi
 12090 00008B04 48FFC2                  	inc rdx
 12091 00008B07 EBEA                    	jmp .L_lambda_simple_env_loop_0057
 12092                                  .L_lambda_simple_env_end_0057:
 12093 00008B09 5B                      	pop rbx
 12094 00008B0A BE00000000              	mov rsi, 0
 12095                                  .L_lambda_simple_params_loop_0057:	; copy params
 12096 00008B0F 4883FE01                	cmp rsi, 1
 12097 00008B13 740E                    	je .L_lambda_simple_params_end_0057
 12098 00008B15 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12099 00008B1A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12100 00008B1E 48FFC6                  	inc rsi
 12101 00008B21 EBEC                    	jmp .L_lambda_simple_params_loop_0057
 12102                                  .L_lambda_simple_params_end_0057:
 12103 00008B23 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12104 00008B26 4889C3                  	mov rbx, rax
 12105 00008B29 58                      	pop rax
 12106 00008B2A C60004                  	mov byte [rax], T_closure
 12107 00008B2D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12108 00008B31 48C74009[3E8B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0057
 12109 00008B39 E919010000              	jmp .L_lambda_simple_end_0057
 12110                                  .L_lambda_simple_code_0057:	; lambda-simple body
 12111 00008B3E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12112 00008B44 740B                    	je .L_lambda_simple_arity_check_ok_0065
 12113 00008B46 FF742410                	push qword [rsp + 8 * 2]
 12114 00008B4A 6A01                    	push 1
 12115 00008B4C E9090C0000              	jmp L_error_incorrect_arity_simple
 12116                                  .L_lambda_simple_arity_check_ok_0065:
 12117 00008B51 C8000000                	enter 0, 0
 12118                                  	; preparing a non-tail-call
 12119 00008B55 488B4510                	mov rax, ENV
 12120 00008B59 488B4020                	mov rax, qword [rax + 8 * 4]
 12121 00008B5D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 12122 00008B60 50                      	push rax
 12123 00008B61 6A01                    	push 1	; arg count
 12124 00008B63 488B4520                	mov rax, PARAM(0)	; param make-run
 12125 00008B67 803804                  	cmp byte [rax], T_closure
 12126 00008B6A 0F85880B0000            	jne L_error_non_closure
 12127 00008B70 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12128 00008B73 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12129 00008B76 48890425[550A0000]      	mov qword [free_var_4], rax
 12130 00008B7E 48B8-                   	mov rax, sob_void
 12130 00008B80 [0000000000000000] 
 12131                                  
 12132                                  	; preparing a non-tail-call
 12133 00008B88 488B4510                	mov rax, ENV
 12134 00008B8C 488B00                  	mov rax, qword [rax + 8 * 0]
 12135 00008B8F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<=?
 12136 00008B92 50                      	push rax
 12137 00008B93 6A01                    	push 1	; arg count
 12138 00008B95 488B4520                	mov rax, PARAM(0)	; param make-run
 12139 00008B99 803804                  	cmp byte [rax], T_closure
 12140 00008B9C 0F85560B0000            	jne L_error_non_closure
 12141 00008BA2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12142 00008BA5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12143 00008BA8 48890425[660A0000]      	mov qword [free_var_5], rax
 12144 00008BB0 48B8-                   	mov rax, sob_void
 12144 00008BB2 [0000000000000000] 
 12145                                  
 12146                                  	; preparing a non-tail-call
 12147 00008BBA 488B4510                	mov rax, ENV
 12148 00008BBE 488B4008                	mov rax, qword [rax + 8 * 1]
 12149 00008BC2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 12150 00008BC5 50                      	push rax
 12151 00008BC6 6A01                    	push 1	; arg count
 12152 00008BC8 488B4520                	mov rax, PARAM(0)	; param make-run
 12153 00008BCC 803804                  	cmp byte [rax], T_closure
 12154 00008BCF 0F85230B0000            	jne L_error_non_closure
 12155 00008BD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12156 00008BD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12157 00008BDB 48890425[880A0000]      	mov qword [free_var_7], rax
 12158 00008BE3 48B8-                   	mov rax, sob_void
 12158 00008BE5 [0000000000000000] 
 12159                                  
 12160                                  	; preparing a non-tail-call
 12161 00008BED 488B4510                	mov rax, ENV
 12162 00008BF1 488B4010                	mov rax, qword [rax + 8 * 2]
 12163 00008BF5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>=?
 12164 00008BF8 50                      	push rax
 12165 00008BF9 6A01                    	push 1	; arg count
 12166 00008BFB 488B4520                	mov rax, PARAM(0)	; param make-run
 12167 00008BFF 803804                  	cmp byte [rax], T_closure
 12168 00008C02 0F85F00A0000            	jne L_error_non_closure
 12169 00008C08 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12170 00008C0B FF5009                  	call SOB_CLOSURE_CODE(rax)
 12171 00008C0E 48890425[990A0000]      	mov qword [free_var_8], rax
 12172 00008C16 48B8-                   	mov rax, sob_void
 12172 00008C18 [0000000000000000] 
 12173                                  
 12174                                  	; preparing a non-tail-call
 12175 00008C20 488B4510                	mov rax, ENV
 12176 00008C24 488B4018                	mov rax, qword [rax + 8 * 3]
 12177 00008C28 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin=?
 12178 00008C2B 50                      	push rax
 12179 00008C2C 6A01                    	push 1	; arg count
 12180 00008C2E 488B4520                	mov rax, PARAM(0)	; param make-run
 12181 00008C32 803804                  	cmp byte [rax], T_closure
 12182 00008C35 0F85BD0A0000            	jne L_error_non_closure
 12183 00008C3B FF7001                  	push SOB_CLOSURE_ENV(rax)
 12184 00008C3E FF5009                  	call SOB_CLOSURE_CODE(rax)
 12185 00008C41 48890425[770A0000]      	mov qword [free_var_6], rax
 12186 00008C49 48B8-                   	mov rax, sob_void
 12186 00008C4B [0000000000000000] 
 12187 00008C53 C9                      	leave
 12188 00008C54 C21800                  	ret AND_KILL_FRAME(1)
 12189                                  .L_lambda_simple_end_0057:	; new closure is in rax
 12190 00008C57 803804                  	cmp byte [rax], T_closure
 12191 00008C5A 0F85980A0000            	jne L_error_non_closure
 12192 00008C60 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12193 00008C63 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12194 00008C66 C9                      	leave
 12195 00008C67 C21800                  	ret AND_KILL_FRAME(1)
 12196                                  .L_lambda_simple_end_0053:	; new closure is in rax
 12197 00008C6A 803804                  	cmp byte [rax], T_closure
 12198 00008C6D 0F85850A0000            	jne L_error_non_closure
 12199 00008C73 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12200 00008C76 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12201 00008C79 C9                      	leave
 12202 00008C7A C21800                  	ret AND_KILL_FRAME(1)
 12203                                  .L_lambda_simple_end_0051:	; new closure is in rax
 12204 00008C7D 803804                  	cmp byte [rax], T_closure
 12205 00008C80 0F85720A0000            	jne L_error_non_closure
 12206 00008C86 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12207 00008C89 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12208 00008C8C C9                      	leave
 12209 00008C8D C21800                  	ret AND_KILL_FRAME(1)
 12210                                  .L_lambda_simple_end_004f:	; new closure is in rax
 12211 00008C90 803804                  	cmp byte [rax], T_closure
 12212 00008C93 0F855F0A0000            	jne L_error_non_closure
 12213 00008C99 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12214 00008C9C FF5009                  	call SOB_CLOSURE_CODE(rax)
 12215 00008C9F C9                      	leave
 12216 00008CA0 C21800                  	ret AND_KILL_FRAME(1)
 12217                                  .L_lambda_simple_end_004d:	; new closure is in rax
 12218 00008CA3 803804                  	cmp byte [rax], T_closure
 12219 00008CA6 0F854C0A0000            	jne L_error_non_closure
 12220 00008CAC FF7001                  	push SOB_CLOSURE_ENV(rax)
 12221 00008CAF FF5009                  	call SOB_CLOSURE_CODE(rax)
 12222 00008CB2 C9                      	leave
 12223 00008CB3 C21800                  	ret AND_KILL_FRAME(1)
 12224                                  .L_lambda_simple_end_004c:	; new closure is in rax
 12225 00008CB6 803804                  	cmp byte [rax], T_closure
 12226 00008CB9 0F85390A0000            	jne L_error_non_closure
 12227 00008CBF FF7001                  	push SOB_CLOSURE_ENV(rax)
 12228 00008CC2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12229 00008CC5 C9                      	leave
 12230 00008CC6 C21800                  	ret AND_KILL_FRAME(1)
 12231                                  .L_lambda_simple_end_004b:	; new closure is in rax
 12232 00008CC9 803804                  	cmp byte [rax], T_closure
 12233 00008CCC 0F85260A0000            	jne L_error_non_closure
 12234 00008CD2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12235 00008CD5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12236 00008CD8 C9                      	leave
 12237 00008CD9 C21800                  	ret AND_KILL_FRAME(1)
 12238                                  .L_lambda_simple_end_0048:	; new closure is in rax
 12239 00008CDC 803804                  	cmp byte [rax], T_closure
 12240 00008CDF 0F85130A0000            	jne L_error_non_closure
 12241 00008CE5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12242 00008CE8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12243                                  
 12244 00008CEB 4889C7                  	mov rdi, rax
 12245 00008CEE E8030D0000              	call print_sexpr_if_not_void
 12246 00008CF3 48B8-                   	mov rax, L_constants + 0
 12246 00008CF5 [0000000000000000] 
 12247 00008CFD 48890425[840E0000]      	mov qword [free_var_67], rax
 12248 00008D05 48B8-                   	mov rax, sob_void
 12248 00008D07 [0000000000000000] 
 12249                                  
 12250 00008D0F 4889C7                  	mov rdi, rax
 12251 00008D12 E8DF0C0000              	call print_sexpr_if_not_void
 12252 00008D17 48B8-                   	mov rax, L_constants + 0
 12252 00008D19 [0000000000000000] 
 12253 00008D21 48890425[730E0000]      	mov qword [free_var_66], rax
 12254 00008D29 48B8-                   	mov rax, sob_void
 12254 00008D2B [0000000000000000] 
 12255                                  
 12256 00008D33 4889C7                  	mov rdi, rax
 12257 00008D36 E8BB0C0000              	call print_sexpr_if_not_void
 12258 00008D3B 48B8-                   	mov rax, L_constants + 0
 12258 00008D3D [0000000000000000] 
 12259 00008D45 48890425[950E0000]      	mov qword [free_var_68], rax
 12260 00008D4D 48B8-                   	mov rax, sob_void
 12260 00008D4F [0000000000000000] 
 12261                                  
 12262 00008D57 4889C7                  	mov rdi, rax
 12263 00008D5A E8970C0000              	call print_sexpr_if_not_void
 12264 00008D5F 48B8-                   	mov rax, L_constants + 0
 12264 00008D61 [0000000000000000] 
 12265 00008D69 48890425[B70E0000]      	mov qword [free_var_70], rax
 12266 00008D71 48B8-                   	mov rax, sob_void
 12266 00008D73 [0000000000000000] 
 12267                                  
 12268 00008D7B 4889C7                  	mov rdi, rax
 12269 00008D7E E8730C0000              	call print_sexpr_if_not_void
 12270 00008D83 48B8-                   	mov rax, L_constants + 0
 12270 00008D85 [0000000000000000] 
 12271 00008D8D 48890425[A60E0000]      	mov qword [free_var_69], rax
 12272 00008D95 48B8-                   	mov rax, sob_void
 12272 00008D97 [0000000000000000] 
 12273                                  
 12274 00008D9F 4889C7                  	mov rdi, rax
 12275 00008DA2 E84F0C0000              	call print_sexpr_if_not_void
 12276                                  	; preparing a non-tail-call
 12277 00008DA7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12278 00008DAC E8F0090000              	call malloc
 12279 00008DB1 50                      	push rax
 12280 00008DB2 BF00000000              	mov rdi, 8 * 0	; new rib
 12281 00008DB7 E8E5090000              	call malloc
 12282 00008DBC 50                      	push rax
 12283 00008DBD BF08000000              	mov rdi, 8 * 1	; extended env
 12284 00008DC2 E8DA090000              	call malloc
 12285 00008DC7 488B7D10                	mov rdi, ENV
 12286 00008DCB BE00000000              	mov rsi, 0
 12287 00008DD0 BA01000000              	mov rdx, 1
 12288                                  .L_lambda_simple_env_loop_0058:	; ext_env[i + 1] <-- env[i]
 12289 00008DD5 4883FE00                	cmp rsi, 0
 12290 00008DD9 7410                    	je .L_lambda_simple_env_end_0058
 12291 00008DDB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12292 00008DDF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12293 00008DE3 48FFC6                  	inc rsi
 12294 00008DE6 48FFC2                  	inc rdx
 12295 00008DE9 EBEA                    	jmp .L_lambda_simple_env_loop_0058
 12296                                  .L_lambda_simple_env_end_0058:
 12297 00008DEB 5B                      	pop rbx
 12298 00008DEC BE00000000              	mov rsi, 0
 12299                                  .L_lambda_simple_params_loop_0058:	; copy params
 12300 00008DF1 4883FE00                	cmp rsi, 0
 12301 00008DF5 740E                    	je .L_lambda_simple_params_end_0058
 12302 00008DF7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12303 00008DFC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12304 00008E00 48FFC6                  	inc rsi
 12305 00008E03 EBEC                    	jmp .L_lambda_simple_params_loop_0058
 12306                                  .L_lambda_simple_params_end_0058:
 12307 00008E05 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12308 00008E08 4889C3                  	mov rbx, rax
 12309 00008E0B 58                      	pop rax
 12310 00008E0C C60004                  	mov byte [rax], T_closure
 12311 00008E0F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12312 00008E13 48C74009[208E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0058
 12313 00008E1B E90D020000              	jmp .L_lambda_simple_end_0058
 12314                                  .L_lambda_simple_code_0058:	; lambda-simple body
 12315 00008E20 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12316 00008E26 740B                    	je .L_lambda_simple_arity_check_ok_0066
 12317 00008E28 FF742410                	push qword [rsp + 8 * 2]
 12318 00008E2C 6A01                    	push 1
 12319 00008E2E E927090000              	jmp L_error_incorrect_arity_simple
 12320                                  .L_lambda_simple_arity_check_ok_0066:
 12321 00008E33 C8000000                	enter 0, 0
 12322 00008E37 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12323 00008E3C E860090000              	call malloc
 12324 00008E41 50                      	push rax
 12325 00008E42 4C8B4D10                	mov r9, qword [rbp + 8 * 2]
 12326 00008E46 4C8B4D18                	mov r9, qword [rbp + 8 * 3]
 12327 00008E4A BF08000000              	mov rdi, 8 * 1	; new rib for optional parameters
 12328 00008E4F E84D090000              	call malloc
 12329 00008E54 50                      	push rax
 12330 00008E55 BF10000000              	mov rdi, 8 * 2	; extended env
 12331 00008E5A E842090000              	call malloc
 12332 00008E5F 488B7D10                	mov rdi, ENV
 12333 00008E63 BE00000000              	mov rsi, 0
 12334 00008E68 BA01000000              	mov rdx, 1
 12335                                  .L_lambda_opt_code_002b:	; ext_env[i + 1] <-- env[i] copy all the array
 12336 00008E6D 4883FE01                	cmp rsi, 1
 12337 00008E71 7410                    	je .L_lambda_opt_end_0039
 12338 00008E73 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12339 00008E77 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12340 00008E7B 48FFC6                  	inc rsi
 12341 00008E7E 48FFC2                  	inc rdx
 12342 00008E81 EBEA                    	jmp .L_lambda_opt_code_002b
 12343                                  .L_lambda_opt_end_0039:
 12344 00008E83 5B                      	pop rbx
 12345 00008E84 BE00000000              	mov rsi, 0
 12346                                  .L_lambda_opt_code_002c:	; copy params
 12347 00008E89 4883FE01                	cmp rsi, 1
 12348 00008E8D 740E                    	je .L_lambda_opt_end_003a
 12349 00008E8F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12350 00008E94 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12351 00008E98 48FFC6                  	inc rsi
 12352 00008E9B EBEC                    	jmp .L_lambda_opt_code_002c
 12353                                  .L_lambda_opt_end_003a:
 12354 00008E9D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12355 00008EA0 4889C3                  	mov rbx, rax
 12356 00008EA3 58                      	pop rax
 12357 00008EA4 C60004                  	mov byte [rax], T_closure
 12358 00008EA7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12359 00008EAB 48C74009[B88E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002d
 12360 00008EB3 E971010000              	jmp .L_lambda_opt_end_003b
 12361                                  .L_lambda_opt_code_002d:	; lambda-opt body
 12362 00008EB8 48837C241000            	cmp qword [rsp + 8 * 2], 0
 12363 00008EBE 7D0B                    	jge .L_lambda_simple_arity_check_ok_0067
 12364 00008EC0 FF742410                	push qword [rsp + 8 * 2]
 12365 00008EC4 6A00                    	push 0
 12366 00008EC6 E98F080000              	jmp L_error_incorrect_arity_simple
 12367                                  .L_lambda_simple_arity_check_ok_0067:
 12368 00008ECB 4C8B442410              	mov r8, qword [rsp + 8 * 2]
 12369 00008ED0 4983E800                	sub r8, 0
 12370 00008ED4 4C89C3                  	mov rbx,r8
 12371 00008ED7 4983F800                	cmp r8, 0
 12372 00008EDB 7535                    	jne .L_lambda_opt_params_loop_002d
 12373 00008EDD 488B542410              	mov rdx, qword [rsp + 8 * 2]
 12374 00008EE2 4883C203                	add rdx , 3
 12375 00008EE6 4883EC08                	sub rsp , 8
 12376 00008EEA 4889E1                  	mov rcx, rsp
 12377                                  .L_lambda_opt_stack_adjusted_001d: ;pushing down the stack of the current function
 12378 00008EED 488B5908                	mov rbx, qword [rcx + 8 * 1]
 12379 00008EF1 488919                  	mov qword[rcx] , rbx
 12380 00008EF4 4883C108                	add rcx , 8
 12381 00008EF8 48FFCA                  	dec rdx
 12382 00008EFB 4883FA00                	cmp rdx, 0
 12383 00008EFF 75EC                    	jne .L_lambda_opt_stack_adjusted_001d
 12384 00008F01 48FF442410              	inc qword [rsp + 8 * 2]
 12385 00008F06 48C701[01000000]        	mov qword [rcx], sob_nil 
 12386 00008F0D E9A8000000              	jmp .L_lambda_opt_end_003c
 12387                                  	.L_lambda_opt_params_loop_002d:
 12388 00008F12 488B542410              	mov rdx, qword [rsp + 8*2]
 12389 00008F17 488D4CD410              	lea rcx, [rsp + 8*2 + 8*rdx]
 12390 00008F1C 4C89C2                  	mov rdx, r8
 12391 00008F1F 49B9-                   	mov r9, sob_nil
 12391 00008F21 [0100000000000000] 
 12392 00008F29 4989C9                  	mov r9, rcx
 12393                                  	.L_lambda_opt_params_loop_002b: ;loop for copying the opt into list
 12394 00008F2C BF11000000              	mov rdi, (1 + 8 + 8)
 12395 00008F31 E86B080000              	call malloc
 12396 00008F36 C60021                  	mov byte[rax], T_pair
 12397 00008F39 488B19                  	mov rbx, qword [rcx]
 12398 00008F3C 48895801                	mov SOB_PAIR_CAR(rax), rbx
 12399 00008F40 4C894809                	mov SOB_PAIR_CDR(rax), r9
 12400 00008F44 4989C1                  	mov r9, rax
 12401 00008F47 48FFCA                  	dec rdx
 12402 00008F4A 4883E908                	sub rcx, 8
 12403 00008F4E 4883FA00                	cmp rdx, 0
 12404 00008F52 75D8                    	jne .L_lambda_opt_params_loop_002b
 12405 00008F54 488B542410              	mov rdx, qword [rsp + 8 * 2]
 12406 00008F59 4889E0                  	mov rax, rsp
 12407 00008F5C 488D5CD410              	lea rbx, [rsp + 8*(rdx + 2)]
 12408 00008F61 4989DC                  	mov r12 , rbx
 12409 00008F64 4C89C1                  	mov rcx, r8
 12410 00008F67 48FFC9                  	dec rcx
 12411 00008F6A 4883C203                	add rdx, 3
 12412 00008F6E 4829CA                  	sub rdx,rcx
 12413 00008F71 48C1E103                	shl rcx, 3
 12414                                  	.L_lambda_opt_stack_adjusted_001e:
 12415 00008F75 4883FA00                	cmp rdx, 0
 12416 00008F79 7419                    	je .L_lambda_opt_params_end_003a
 12417 00008F7B 4889D8                  	mov rax, rbx
 12418 00008F7E 4829C8                  	sub rax, rcx
 12419 00008F81 488B30                  	mov rsi, qword [rax]
 12420 00008F84 488933                  	mov [rbx], rsi
 12421 00008F87 4883EB08                	sub rbx, 8
 12422 00008F8B 48FFCA                  	dec rdx
 12423 00008F8E 4883FA00                	cmp rdx, 0
 12424 00008F92 75E1                    	jne .L_lambda_opt_stack_adjusted_001e
 12425                                  	.L_lambda_opt_params_end_003a:
 12426 00008F94 4801CC                  	add rsp,rcx
 12427 00008F97 BB00000000              	mov rbx, 0
 12428 00008F9C 488B5C2410              	mov rbx, qword [rsp + 8 * 2]
 12429 00008FA1 4883C303                	add rbx,3
 12430 00008FA5 4C29C3                  	sub rbx,r8
 12431 00008FA8 48C1E303                	shl rbx, 3
 12432 00008FAC 4801E3                  	add rbx, rsp
 12433 00008FAF 4C890B                  	mov qword[rbx] , r9
 12434 00008FB2 49FFC8                  	dec r8
 12435 00008FB5 4C29442410              	sub qword [rsp + 8 * 2], r8
 12436                                  	.L_lambda_opt_end_003c:
 12437 00008FBA C8000000                	enter 0, 0
 12438                                  	; preparing a non-tail-call
 12439                                  	; preparing a non-tail-call
 12440 00008FBE 488B4520                	mov rax, PARAM(0)	; param s
 12441 00008FC2 50                      	push rax
 12442 00008FC3 488B0425[400E0000]      	mov rax, qword [free_var_63]	; free var char->integer
 12443 00008FCB 803805                  	cmp byte [rax], T_undefined
 12444 00008FCE 0F84A0060000            	je L_error_fvar_undefined
 12445 00008FD4 50                      	push rax
 12446 00008FD5 6A02                    	push 2	; arg count
 12447 00008FD7 488B0425[A50F0000]      	mov rax, qword [free_var_84]	; free var map
 12448 00008FDF 803805                  	cmp byte [rax], T_undefined
 12449 00008FE2 0F848C060000            	je L_error_fvar_undefined
 12450 00008FE8 803804                  	cmp byte [rax], T_closure
 12451 00008FEB 0F8507070000            	jne L_error_non_closure
 12452 00008FF1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12453 00008FF4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12454 00008FF7 50                      	push rax
 12455 00008FF8 488B4510                	mov rax, ENV
 12456 00008FFC 488B00                  	mov rax, qword [rax + 8 * 0]
 12457 00008FFF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 12458 00009002 50                      	push rax
 12459 00009003 6A02                    	push 2	; arg count
 12460 00009005 488B0425[310C0000]      	mov rax, qword [free_var_32]	; free var apply
 12461 0000900D 803805                  	cmp byte [rax], T_undefined
 12462 00009010 0F845E060000            	je L_error_fvar_undefined
 12463 00009016 803804                  	cmp byte [rax], T_closure
 12464 00009019 0F85D9060000            	jne L_error_non_closure
 12465 0000901F FF7001                  	push SOB_CLOSURE_ENV(rax)
 12466 00009022 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12467                                  	LEAVE
    49 00009025 C9                  <1>  leave
 12468 00009026 C21800                  	ret AND_KILL_FRAME(1)
 12469                                  .L_lambda_opt_end_003b:
 12470 00009029 C9                      	leave
 12471 0000902A C21800                  	ret AND_KILL_FRAME(1)
 12472                                  .L_lambda_simple_end_0058:	; new closure is in rax
 12473 0000902D 50                      	push rax
 12474 0000902E 6A01                    	push 1	; arg count
 12475 00009030 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12476 00009035 E867070000              	call malloc
 12477 0000903A 50                      	push rax
 12478 0000903B BF00000000              	mov rdi, 8 * 0	; new rib
 12479 00009040 E85C070000              	call malloc
 12480 00009045 50                      	push rax
 12481 00009046 BF08000000              	mov rdi, 8 * 1	; extended env
 12482 0000904B E851070000              	call malloc
 12483 00009050 488B7D10                	mov rdi, ENV
 12484 00009054 BE00000000              	mov rsi, 0
 12485 00009059 BA01000000              	mov rdx, 1
 12486                                  .L_lambda_simple_env_loop_0059:	; ext_env[i + 1] <-- env[i]
 12487 0000905E 4883FE00                	cmp rsi, 0
 12488 00009062 7410                    	je .L_lambda_simple_env_end_0059
 12489 00009064 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12490 00009068 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12491 0000906C 48FFC6                  	inc rsi
 12492 0000906F 48FFC2                  	inc rdx
 12493 00009072 EBEA                    	jmp .L_lambda_simple_env_loop_0059
 12494                                  .L_lambda_simple_env_end_0059:
 12495 00009074 5B                      	pop rbx
 12496 00009075 BE00000000              	mov rsi, 0
 12497                                  .L_lambda_simple_params_loop_0059:	; copy params
 12498 0000907A 4883FE00                	cmp rsi, 0
 12499 0000907E 740E                    	je .L_lambda_simple_params_end_0059
 12500 00009080 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12501 00009085 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12502 00009089 48FFC6                  	inc rsi
 12503 0000908C EBEC                    	jmp .L_lambda_simple_params_loop_0059
 12504                                  .L_lambda_simple_params_end_0059:
 12505 0000908E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12506 00009091 4889C3                  	mov rbx, rax
 12507 00009094 58                      	pop rax
 12508 00009095 C60004                  	mov byte [rax], T_closure
 12509 00009098 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12510 0000909C 48C74009[A9900000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0059
 12511 000090A4 E938010000              	jmp .L_lambda_simple_end_0059
 12512                                  .L_lambda_simple_code_0059:	; lambda-simple body
 12513 000090A9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12514 000090AF 740B                    	je .L_lambda_simple_arity_check_ok_0068
 12515 000090B1 FF742410                	push qword [rsp + 8 * 2]
 12516 000090B5 6A01                    	push 1
 12517 000090B7 E99E060000              	jmp L_error_incorrect_arity_simple
 12518                                  .L_lambda_simple_arity_check_ok_0068:
 12519 000090BC C8000000                	enter 0, 0
 12520                                  	; preparing a non-tail-call
 12521 000090C0 488B0425[550A0000]      	mov rax, qword [free_var_4]	; free var <
 12522 000090C8 803805                  	cmp byte [rax], T_undefined
 12523 000090CB 0F84A3050000            	je L_error_fvar_undefined
 12524 000090D1 50                      	push rax
 12525 000090D2 6A01                    	push 1	; arg count
 12526 000090D4 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 12527 000090D8 803804                  	cmp byte [rax], T_closure
 12528 000090DB 0F8517060000            	jne L_error_non_closure
 12529 000090E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12530 000090E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12531 000090E7 48890425[840E0000]      	mov qword [free_var_67], rax
 12532 000090EF 48B8-                   	mov rax, sob_void
 12532 000090F1 [0000000000000000] 
 12533                                  
 12534                                  	; preparing a non-tail-call
 12535 000090F9 488B0425[660A0000]      	mov rax, qword [free_var_5]	; free var <=
 12536 00009101 803805                  	cmp byte [rax], T_undefined
 12537 00009104 0F846A050000            	je L_error_fvar_undefined
 12538 0000910A 50                      	push rax
 12539 0000910B 6A01                    	push 1	; arg count
 12540 0000910D 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 12541 00009111 803804                  	cmp byte [rax], T_closure
 12542 00009114 0F85DE050000            	jne L_error_non_closure
 12543 0000911A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12544 0000911D FF5009                  	call SOB_CLOSURE_CODE(rax)
 12545 00009120 48890425[730E0000]      	mov qword [free_var_66], rax
 12546 00009128 48B8-                   	mov rax, sob_void
 12546 0000912A [0000000000000000] 
 12547                                  
 12548                                  	; preparing a non-tail-call
 12549 00009132 488B0425[770A0000]      	mov rax, qword [free_var_6]	; free var =
 12550 0000913A 803805                  	cmp byte [rax], T_undefined
 12551 0000913D 0F8431050000            	je L_error_fvar_undefined
 12552 00009143 50                      	push rax
 12553 00009144 6A01                    	push 1	; arg count
 12554 00009146 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 12555 0000914A 803804                  	cmp byte [rax], T_closure
 12556 0000914D 0F85A5050000            	jne L_error_non_closure
 12557 00009153 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12558 00009156 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12559 00009159 48890425[950E0000]      	mov qword [free_var_68], rax
 12560 00009161 48B8-                   	mov rax, sob_void
 12560 00009163 [0000000000000000] 
 12561                                  
 12562                                  	; preparing a non-tail-call
 12563 0000916B 488B0425[880A0000]      	mov rax, qword [free_var_7]	; free var >
 12564 00009173 803805                  	cmp byte [rax], T_undefined
 12565 00009176 0F84F8040000            	je L_error_fvar_undefined
 12566 0000917C 50                      	push rax
 12567 0000917D 6A01                    	push 1	; arg count
 12568 0000917F 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 12569 00009183 803804                  	cmp byte [rax], T_closure
 12570 00009186 0F856C050000            	jne L_error_non_closure
 12571 0000918C FF7001                  	push SOB_CLOSURE_ENV(rax)
 12572 0000918F FF5009                  	call SOB_CLOSURE_CODE(rax)
 12573 00009192 48890425[B70E0000]      	mov qword [free_var_70], rax
 12574 0000919A 48B8-                   	mov rax, sob_void
 12574 0000919C [0000000000000000] 
 12575                                  
 12576                                  	; preparing a non-tail-call
 12577 000091A4 488B0425[990A0000]      	mov rax, qword [free_var_8]	; free var >=
 12578 000091AC 803805                  	cmp byte [rax], T_undefined
 12579 000091AF 0F84BF040000            	je L_error_fvar_undefined
 12580 000091B5 50                      	push rax
 12581 000091B6 6A01                    	push 1	; arg count
 12582 000091B8 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 12583 000091BC 803804                  	cmp byte [rax], T_closure
 12584 000091BF 0F8533050000            	jne L_error_non_closure
 12585 000091C5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12586 000091C8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12587 000091CB 48890425[A60E0000]      	mov qword [free_var_69], rax
 12588 000091D3 48B8-                   	mov rax, sob_void
 12588 000091D5 [0000000000000000] 
 12589 000091DD C9                      	leave
 12590 000091DE C21800                  	ret AND_KILL_FRAME(1)
 12591                                  .L_lambda_simple_end_0059:	; new closure is in rax
 12592 000091E1 803804                  	cmp byte [rax], T_closure
 12593 000091E4 0F850E050000            	jne L_error_non_closure
 12594 000091EA FF7001                  	push SOB_CLOSURE_ENV(rax)
 12595 000091ED FF5009                  	call SOB_CLOSURE_CODE(rax)
 12596                                  
 12597 000091F0 4889C7                  	mov rdi, rax
 12598 000091F3 E8FE070000              	call print_sexpr_if_not_void
 12599 000091F8 48B8-                   	mov rax, L_constants + 0
 12599 000091FA [0000000000000000] 
 12600 00009202 48890425[510E0000]      	mov qword [free_var_64], rax
 12601 0000920A 48B8-                   	mov rax, sob_void
 12601 0000920C [0000000000000000] 
 12602                                  
 12603 00009214 4889C7                  	mov rdi, rax
 12604 00009217 E8DA070000              	call print_sexpr_if_not_void
 12605 0000921C 48B8-                   	mov rax, L_constants + 0
 12605 0000921E [0000000000000000] 
 12606 00009226 48890425[620E0000]      	mov qword [free_var_65], rax
 12607 0000922E 48B8-                   	mov rax, sob_void
 12607 00009230 [0000000000000000] 
 12608                                  
 12609 00009238 4889C7                  	mov rdi, rax
 12610 0000923B E8B6070000              	call print_sexpr_if_not_void
 12611                                  	; preparing a non-tail-call
 12612                                  	; preparing a non-tail-call
 12613                                  	; preparing a non-tail-call
 12614 00009240 48B8-                   	mov rax, L_constants + 2569
 12614 00009242 [090A000000000000] 
 12615 0000924A 50                      	push rax
 12616 0000924B 6A01                    	push 1	; arg count
 12617 0000924D 488B0425[400E0000]      	mov rax, qword [free_var_63]	; free var char->integer
 12618 00009255 803805                  	cmp byte [rax], T_undefined
 12619 00009258 0F8416040000            	je L_error_fvar_undefined
 12620 0000925E 803804                  	cmp byte [rax], T_closure
 12621 00009261 0F8591040000            	jne L_error_non_closure
 12622 00009267 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12623 0000926A FF5009                  	call SOB_CLOSURE_CODE(rax)
 12624 0000926D 50                      	push rax
 12625                                  	; preparing a non-tail-call
 12626 0000926E 48B8-                   	mov rax, L_constants + 2573
 12626 00009270 [0D0A000000000000] 
 12627 00009278 50                      	push rax
 12628 00009279 6A01                    	push 1	; arg count
 12629 0000927B 488B0425[400E0000]      	mov rax, qword [free_var_63]	; free var char->integer
 12630 00009283 803805                  	cmp byte [rax], T_undefined
 12631 00009286 0F84E8030000            	je L_error_fvar_undefined
 12632 0000928C 803804                  	cmp byte [rax], T_closure
 12633 0000928F 0F8563040000            	jne L_error_non_closure
 12634 00009295 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12635 00009298 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12636 0000929B 50                      	push rax
 12637 0000929C 6A02                    	push 2	; arg count
 12638 0000929E 488B0425[330A0000]      	mov rax, qword [free_var_2]	; free var -
 12639 000092A6 803805                  	cmp byte [rax], T_undefined
 12640 000092A9 0F84C5030000            	je L_error_fvar_undefined
 12641 000092AF 803804                  	cmp byte [rax], T_closure
 12642 000092B2 0F8540040000            	jne L_error_non_closure
 12643 000092B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12644 000092BB FF5009                  	call SOB_CLOSURE_CODE(rax)
 12645 000092BE 50                      	push rax
 12646 000092BF 6A01                    	push 1	; arg count
 12647 000092C1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12648 000092C6 E8D6040000              	call malloc
 12649 000092CB 50                      	push rax
 12650 000092CC BF00000000              	mov rdi, 8 * 0	; new rib
 12651 000092D1 E8CB040000              	call malloc
 12652 000092D6 50                      	push rax
 12653 000092D7 BF08000000              	mov rdi, 8 * 1	; extended env
 12654 000092DC E8C0040000              	call malloc
 12655 000092E1 488B7D10                	mov rdi, ENV
 12656 000092E5 BE00000000              	mov rsi, 0
 12657 000092EA BA01000000              	mov rdx, 1
 12658                                  .L_lambda_simple_env_loop_005a:	; ext_env[i + 1] <-- env[i]
 12659 000092EF 4883FE00                	cmp rsi, 0
 12660 000092F3 7410                    	je .L_lambda_simple_env_end_005a
 12661 000092F5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12662 000092F9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12663 000092FD 48FFC6                  	inc rsi
 12664 00009300 48FFC2                  	inc rdx
 12665 00009303 EBEA                    	jmp .L_lambda_simple_env_loop_005a
 12666                                  .L_lambda_simple_env_end_005a:
 12667 00009305 5B                      	pop rbx
 12668 00009306 BE00000000              	mov rsi, 0
 12669                                  .L_lambda_simple_params_loop_005a:	; copy params
 12670 0000930B 4883FE00                	cmp rsi, 0
 12671 0000930F 740E                    	je .L_lambda_simple_params_end_005a
 12672 00009311 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12673 00009316 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12674 0000931A 48FFC6                  	inc rsi
 12675 0000931D EBEC                    	jmp .L_lambda_simple_params_loop_005a
 12676                                  .L_lambda_simple_params_end_005a:
 12677 0000931F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12678 00009322 4889C3                  	mov rbx, rax
 12679 00009325 58                      	pop rax
 12680 00009326 C60004                  	mov byte [rax], T_closure
 12681 00009329 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12682 0000932D 48C74009[3A930000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005a
 12683 00009335 E9ED020000              	jmp .L_lambda_simple_end_005a
 12684                                  .L_lambda_simple_code_005a:	; lambda-simple body
 12685 0000933A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12686 00009340 740B                    	je .L_lambda_simple_arity_check_ok_0069
 12687 00009342 FF742410                	push qword [rsp + 8 * 2]
 12688 00009346 6A01                    	push 1
 12689 00009348 E90D040000              	jmp L_error_incorrect_arity_simple
 12690                                  .L_lambda_simple_arity_check_ok_0069:
 12691 0000934D C8000000                	enter 0, 0
 12692 00009351 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12693 00009356 E846040000              	call malloc
 12694 0000935B 50                      	push rax
 12695 0000935C BF08000000              	mov rdi, 8 * 1	; new rib
 12696 00009361 E83B040000              	call malloc
 12697 00009366 50                      	push rax
 12698 00009367 BF10000000              	mov rdi, 8 * 2	; extended env
 12699 0000936C E830040000              	call malloc
 12700 00009371 488B7D10                	mov rdi, ENV
 12701 00009375 BE00000000              	mov rsi, 0
 12702 0000937A BA01000000              	mov rdx, 1
 12703                                  .L_lambda_simple_env_loop_005b:	; ext_env[i + 1] <-- env[i]
 12704 0000937F 4883FE01                	cmp rsi, 1
 12705 00009383 7410                    	je .L_lambda_simple_env_end_005b
 12706 00009385 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12707 00009389 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12708 0000938D 48FFC6                  	inc rsi
 12709 00009390 48FFC2                  	inc rdx
 12710 00009393 EBEA                    	jmp .L_lambda_simple_env_loop_005b
 12711                                  .L_lambda_simple_env_end_005b:
 12712 00009395 5B                      	pop rbx
 12713 00009396 BE00000000              	mov rsi, 0
 12714                                  .L_lambda_simple_params_loop_005b:	; copy params
 12715 0000939B 4883FE01                	cmp rsi, 1
 12716 0000939F 740E                    	je .L_lambda_simple_params_end_005b
 12717 000093A1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12718 000093A6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12719 000093AA 48FFC6                  	inc rsi
 12720 000093AD EBEC                    	jmp .L_lambda_simple_params_loop_005b
 12721                                  .L_lambda_simple_params_end_005b:
 12722 000093AF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12723 000093B2 4889C3                  	mov rbx, rax
 12724 000093B5 58                      	pop rax
 12725 000093B6 C60004                  	mov byte [rax], T_closure
 12726 000093B9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12727 000093BD 48C74009[CA930000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005b
 12728 000093C5 E9DE000000              	jmp .L_lambda_simple_end_005b
 12729                                  .L_lambda_simple_code_005b:	; lambda-simple body
 12730 000093CA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12731 000093D0 740B                    	je .L_lambda_simple_arity_check_ok_006a
 12732 000093D2 FF742410                	push qword [rsp + 8 * 2]
 12733 000093D6 6A01                    	push 1
 12734 000093D8 E97D030000              	jmp L_error_incorrect_arity_simple
 12735                                  .L_lambda_simple_arity_check_ok_006a:
 12736 000093DD C8000000                	enter 0, 0
 12737                                  	; preparing a non-tail-call
 12738 000093E1 48B8-                   	mov rax, L_constants + 2571
 12738 000093E3 [0B0A000000000000] 
 12739 000093EB 50                      	push rax
 12740 000093EC 488B4520                	mov rax, PARAM(0)	; param ch
 12741 000093F0 50                      	push rax
 12742 000093F1 48B8-                   	mov rax, L_constants + 2569
 12742 000093F3 [090A000000000000] 
 12743 000093FB 50                      	push rax
 12744 000093FC 6A03                    	push 3	; arg count
 12745 000093FE 488B0425[730E0000]      	mov rax, qword [free_var_66]	; free var char<=?
 12746 00009406 803805                  	cmp byte [rax], T_undefined
 12747 00009409 0F8465020000            	je L_error_fvar_undefined
 12748 0000940F 803804                  	cmp byte [rax], T_closure
 12749 00009412 0F85E0020000            	jne L_error_non_closure
 12750 00009418 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12751 0000941B FF5009                  	call SOB_CLOSURE_CODE(rax)
 12752 0000941E 483D[02000000]          	cmp rax, sob_boolean_false
 12753 00009424 747A                    	je .L_if_else_0051
 12754                                  	; preparing a non-tail-call
 12755                                  	; preparing a non-tail-call
 12756 00009426 488B4510                	mov rax, ENV
 12757 0000942A 488B00                  	mov rax, qword [rax + 8 * 0]
 12758 0000942D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 12759 00009430 50                      	push rax
 12760                                  	; preparing a non-tail-call
 12761 00009431 488B4520                	mov rax, PARAM(0)	; param ch
 12762 00009435 50                      	push rax
 12763 00009436 6A01                    	push 1	; arg count
 12764 00009438 488B0425[400E0000]      	mov rax, qword [free_var_63]	; free var char->integer
 12765 00009440 803805                  	cmp byte [rax], T_undefined
 12766 00009443 0F842B020000            	je L_error_fvar_undefined
 12767 00009449 803804                  	cmp byte [rax], T_closure
 12768 0000944C 0F85A6020000            	jne L_error_non_closure
 12769 00009452 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12770 00009455 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12771 00009458 50                      	push rax
 12772 00009459 6A02                    	push 2	; arg count
 12773 0000945B 488B0425[220A0000]      	mov rax, qword [free_var_1]	; free var +
 12774 00009463 803805                  	cmp byte [rax], T_undefined
 12775 00009466 0F8408020000            	je L_error_fvar_undefined
 12776 0000946C 803804                  	cmp byte [rax], T_closure
 12777 0000946F 0F8583020000            	jne L_error_non_closure
 12778 00009475 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12779 00009478 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12780 0000947B 50                      	push rax
 12781 0000947C 6A01                    	push 1	; arg count
 12782 0000947E 488B0425[3F0F0000]      	mov rax, qword [free_var_78]	; free var integer->char
 12783 00009486 803805                  	cmp byte [rax], T_undefined
 12784 00009489 0F84E5010000            	je L_error_fvar_undefined
 12785 0000948F 803804                  	cmp byte [rax], T_closure
 12786 00009492 0F8560020000            	jne L_error_non_closure
 12787 00009498 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12788 0000949B FF5009                  	call SOB_CLOSURE_CODE(rax)
 12789 0000949E EB04                    	jmp .L_if_end_0057
 12790                                  .L_if_else_0051:
 12791 000094A0 488B4520                	mov rax, PARAM(0)	; param ch
 12792                                  .L_if_end_0057:
 12793 000094A4 C9                      	leave
 12794 000094A5 C21800                  	ret AND_KILL_FRAME(1)
 12795                                  .L_lambda_simple_end_005b:	; new closure is in rax
 12796 000094A8 48890425[510E0000]      	mov qword [free_var_64], rax
 12797 000094B0 48B8-                   	mov rax, sob_void
 12797 000094B2 [0000000000000000] 
 12798                                  
 12799 000094BA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12800 000094BF E8DD020000              	call malloc
 12801 000094C4 50                      	push rax
 12802 000094C5 BF08000000              	mov rdi, 8 * 1	; new rib
 12803 000094CA E8D2020000              	call malloc
 12804 000094CF 50                      	push rax
 12805 000094D0 BF10000000              	mov rdi, 8 * 2	; extended env
 12806 000094D5 E8C7020000              	call malloc
 12807 000094DA 488B7D10                	mov rdi, ENV
 12808 000094DE BE00000000              	mov rsi, 0
 12809 000094E3 BA01000000              	mov rdx, 1
 12810                                  .L_lambda_simple_env_loop_005c:	; ext_env[i + 1] <-- env[i]
 12811 000094E8 4883FE01                	cmp rsi, 1
 12812 000094EC 7410                    	je .L_lambda_simple_env_end_005c
 12813 000094EE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12814 000094F2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12815 000094F6 48FFC6                  	inc rsi
 12816 000094F9 48FFC2                  	inc rdx
 12817 000094FC EBEA                    	jmp .L_lambda_simple_env_loop_005c
 12818                                  .L_lambda_simple_env_end_005c:
 12819 000094FE 5B                      	pop rbx
 12820 000094FF BE00000000              	mov rsi, 0
 12821                                  .L_lambda_simple_params_loop_005c:	; copy params
 12822 00009504 4883FE01                	cmp rsi, 1
 12823 00009508 740E                    	je .L_lambda_simple_params_end_005c
 12824 0000950A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12825 0000950F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12826 00009513 48FFC6                  	inc rsi
 12827 00009516 EBEC                    	jmp .L_lambda_simple_params_loop_005c
 12828                                  .L_lambda_simple_params_end_005c:
 12829 00009518 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12830 0000951B 4889C3                  	mov rbx, rax
 12831 0000951E 58                      	pop rax
 12832 0000951F C60004                  	mov byte [rax], T_closure
 12833 00009522 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12834 00009526 48C74009[33950000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005c
 12835 0000952E E9DE000000              	jmp .L_lambda_simple_end_005c
 12836                                  .L_lambda_simple_code_005c:	; lambda-simple body
 12837 00009533 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12838 00009539 740B                    	je .L_lambda_simple_arity_check_ok_006b
 12839 0000953B FF742410                	push qword [rsp + 8 * 2]
 12840 0000953F 6A01                    	push 1
 12841 00009541 E914020000              	jmp L_error_incorrect_arity_simple
 12842                                  .L_lambda_simple_arity_check_ok_006b:
 12843 00009546 C8000000                	enter 0, 0
 12844                                  	; preparing a non-tail-call
 12845 0000954A 48B8-                   	mov rax, L_constants + 2575
 12845 0000954C [0F0A000000000000] 
 12846 00009554 50                      	push rax
 12847 00009555 488B4520                	mov rax, PARAM(0)	; param ch
 12848 00009559 50                      	push rax
 12849 0000955A 48B8-                   	mov rax, L_constants + 2573
 12849 0000955C [0D0A000000000000] 
 12850 00009564 50                      	push rax
 12851 00009565 6A03                    	push 3	; arg count
 12852 00009567 488B0425[730E0000]      	mov rax, qword [free_var_66]	; free var char<=?
 12853 0000956F 803805                  	cmp byte [rax], T_undefined
 12854 00009572 0F84FC000000            	je L_error_fvar_undefined
 12855 00009578 803804                  	cmp byte [rax], T_closure
 12856 0000957B 0F8577010000            	jne L_error_non_closure
 12857 00009581 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12858 00009584 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12859 00009587 483D[02000000]          	cmp rax, sob_boolean_false
 12860 0000958D 747A                    	je .L_if_else_0052
 12861                                  	; preparing a non-tail-call
 12862                                  	; preparing a non-tail-call
 12863 0000958F 488B4510                	mov rax, ENV
 12864 00009593 488B00                  	mov rax, qword [rax + 8 * 0]
 12865 00009596 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 12866 00009599 50                      	push rax
 12867                                  	; preparing a non-tail-call
 12868 0000959A 488B4520                	mov rax, PARAM(0)	; param ch
 12869 0000959E 50                      	push rax
 12870 0000959F 6A01                    	push 1	; arg count
 12871 000095A1 488B0425[400E0000]      	mov rax, qword [free_var_63]	; free var char->integer
 12872 000095A9 803805                  	cmp byte [rax], T_undefined
 12873 000095AC 0F84C2000000            	je L_error_fvar_undefined
 12874 000095B2 803804                  	cmp byte [rax], T_closure
 12875 000095B5 0F853D010000            	jne L_error_non_closure
 12876 000095BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 12877 000095BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 12878 000095C1 50                      	push rax
 12879 000095C2 6A02                    	push 2	; arg count
 12880 000095C4 488B0425[330A0000]      	mov rax, qword [free_var_2]	; free var -
 12881 000095CC 803805                  	cmp byte [rax], T_undefined
 12882 000095CF 0F849F000000            	je L_error_fvar_undefined
 12883 000095D5 803804                  	cmp byte [rax], T_closure
 12884 000095D8 0F851A010000            	jne L_error_non_closure
 12885 000095DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 12886 000095E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12887 000095E4 50                      	push rax
 12888 000095E5 6A01                    	push 1	; arg count
 12889 000095E7 488B0425[3F0F0000]      	mov rax, qword [free_var_78]	; free var integer->char
 12890 000095EF 803805                  	cmp byte [rax], T_undefined
 12891 000095F2 0F847C000000            	je L_error_fvar_undefined
 12892 000095F8 803804                  	cmp byte [rax], T_closure
 12893 000095FB 0F85F7000000            	jne L_error_non_closure
 12894 00009601 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12895 00009604 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12896 00009607 EB04                    	jmp .L_if_end_0058
 12897                                  .L_if_else_0052:
 12898 00009609 488B4520                	mov rax, PARAM(0)	; param ch
 12899                                  .L_if_end_0058:
 12900 0000960D C9                      	leave
 12901 0000960E C21800                  	ret AND_KILL_FRAME(1)
 12902                                  .L_lambda_simple_end_005c:	; new closure is in rax
 12903 00009611 48890425[620E0000]      	mov qword [free_var_65], rax
 12904 00009619 48B8-                   	mov rax, sob_void
 12904 0000961B [0000000000000000] 
 12905 00009623 C9                      	leave
 12906 00009624 C21800                  	ret AND_KILL_FRAME(1)
 12907                                  .L_lambda_simple_end_005a:	; new closure is in rax
 12908 00009627 803804                  	cmp byte [rax], T_closure
 12909 0000962A 0F85C8000000            	jne L_error_non_closure
 12910 00009630 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12911 00009633 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12912                                  Lend:
 12913 00009636 4889C7                  	mov rdi, rax
 12914 00009639 E8B8030000              	call print_sexpr_if_not_void
 12915                                  
 12916 0000963E 48BF-                           mov rdi, fmt_memory_usage
 12916 00009640 [E710000000000000] 
 12917 00009648 488B3425[6D110000]              mov rsi, qword [top_of_memory]
 12918 00009650 4881EE[00000000]                sub rsi, memory
 12919 00009657 B800000000                      mov rax, 0
 12920                                          ENTER
    44 0000965C C8000000            <1>  enter 0, 0
    45 00009660 4883E4F0            <1>  and rsp, ~15
 12921 00009664 E8(00000000)                    call printf
 12922                                          LEAVE
    49 00009669 C9                  <1>  leave
 12923 0000966A B800000000                      mov rax, 0
 12924 0000966F E8(00000000)                    call exit
 12925                                  
 12926                                  L_error_fvar_undefined:
 12927 00009674 50                              push rax
 12928 00009675 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
 12929 0000967D 48BE-                           mov rsi, fmt_undefined_free_var_1
 12929 0000967F [4F10000000000000] 
 12930 00009687 B800000000                      mov rax, 0
 12931                                          ENTER
    44 0000968C C8000000            <1>  enter 0, 0
    45 00009690 4883E4F0            <1>  and rsp, ~15
 12932 00009694 E8(00000000)                    call fprintf
 12933                                          LEAVE
    49 00009699 C9                  <1>  leave
 12934 0000969A 58                              pop rax
 12935 0000969B 488B4001                        mov rax, qword [rax + 1] ; string
 12936 0000969F 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 12937 000096A3 BE01000000                      mov rsi, 1               ; sizeof(char)
 12938 000096A8 488B5001                        mov rdx, qword [rax + 1] ; string-length
 12939 000096AC 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
 12940 000096B4 B800000000                      mov rax, 0
 12941                                          ENTER
    44 000096B9 C8000000            <1>  enter 0, 0
    45 000096BD 4883E4F0            <1>  and rsp, ~15
 12942 000096C1 E8(00000000)                    call fwrite
 12943                                          LEAVE
    49 000096C6 C9                  <1>  leave
 12944 000096C7 488B3C25[00000000]              mov rdi, [stderr]       ; destination
 12945 000096CF 48BE-                           mov rsi, fmt_undefined_free_var_2
 12945 000096D1 [6610000000000000] 
 12946 000096D9 B800000000                      mov rax, 0
 12947                                          ENTER
    44 000096DE C8000000            <1>  enter 0, 0
    45 000096E2 4883E4F0            <1>  and rsp, ~15
 12948 000096E6 E8(00000000)                    call fprintf
 12949                                          LEAVE
    49 000096EB C9                  <1>  leave
 12950 000096EC 48C7C0F6FFFFFF                  mov rax, -10
 12951 000096F3 E8(00000000)                    call exit
 12952                                  
 12953                                  L_error_non_closure:
 12954 000096F8 488B3C25[00000000]              mov rdi, qword [stderr]
 12955 00009700 48BE-                           mov rsi, fmt_non_closure
 12955 00009702 [1D11000000000000] 
 12956 0000970A B800000000                      mov rax, 0
 12957                                          ENTER
    44 0000970F C8000000            <1>  enter 0, 0
    45 00009713 4883E4F0            <1>  and rsp, ~15
 12958 00009717 E8(00000000)                    call fprintf
 12959                                          LEAVE
    49 0000971C C9                  <1>  leave
 12960 0000971D 48C7C0FEFFFFFF                  mov rax, -2
 12961 00009724 E8(00000000)                    call exit
 12962                                  
 12963                                  L_error_improper_list:
 12964 00009729 488B3C25[00000000]      	mov rdi, qword [stderr]
 12965 00009731 48BE-                   	mov rsi, fmt_error_improper_list
 12965 00009733 [4511000000000000] 
 12966 0000973B B800000000              	mov rax, 0
 12967                                          ENTER
    44 00009740 C8000000            <1>  enter 0, 0
    45 00009744 4883E4F0            <1>  and rsp, ~15
 12968 00009748 E8(00000000)            	call fprintf
 12969                                          LEAVE
    49 0000974D C9                  <1>  leave
 12970 0000974E 48C7C0F9FFFFFF          	mov rax, -7
 12971 00009755 E8(00000000)            	call exit
 12972                                  
 12973                                  L_error_incorrect_arity_simple:
 12974 0000975A 488B3C25[00000000]              mov rdi, qword [stderr]
 12975 00009762 48BE-                           mov rsi, fmt_incorrect_arity_simple
 12975 00009764 [8810000000000000] 
 12976 0000976C EB12                            jmp L_error_incorrect_arity_common
 12977                                  L_error_incorrect_arity_opt:
 12978 0000976E 488B3C25[00000000]              mov rdi, qword [stderr]
 12979 00009776 48BE-                           mov rsi, fmt_incorrect_arity_opt
 12979 00009778 [B310000000000000] 
 12980                                  L_error_incorrect_arity_common:
 12981 00009780 5A                              pop rdx
 12982 00009781 59                              pop rcx
 12983 00009782 B800000000                      mov rax, 0
 12984                                          ENTER
    44 00009787 C8000000            <1>  enter 0, 0
    45 0000978B 4883E4F0            <1>  and rsp, ~15
 12985 0000978F E8(00000000)                    call fprintf
 12986                                          LEAVE
    49 00009794 C9                  <1>  leave
 12987 00009795 48C7C0FAFFFFFF                  mov rax, -6
 12988 0000979C E8(00000000)                    call exit
 12989                                  
 12990                                  section .data
 12991                                  fmt_undefined_free_var_1:
 12992 0000104F 212121205468652066-             db `!!! The free variable \0`
 12992 00001058 726565207661726961-
 12992 00001061 626C652000         
 12993                                  fmt_undefined_free_var_2:
 12994 00001066 207761732075736564-             db ` was used before it was defined.\n\0`
 12994 0000106F 206265666F72652069-
 12994 00001078 742077617320646566-
 12994 00001081 696E65642E0A00     
 12995                                  fmt_incorrect_arity_simple:
 12996 00001088 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 12996 00001091 74656420256C642061-
 12996 0000109A 7267756D656E74732C-
 12996 000010A3 206275742067697665-
 12996 000010AC 6E20256C640A00     
 12997                                  fmt_incorrect_arity_opt:
 12998 000010B3 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 12998 000010BC 746564206174206C65-
 12998 000010C5 61737420256C642061-
 12998 000010CE 7267756D656E74732C-
 12998 000010D7 206275742067697665-
 12998 000010E0 6E20256C640A00     
 12999                                  fmt_memory_usage:
 13000 000010E7 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 13000 000010F0 20256C642062797465-
 13000 000010F9 73206F662064796E61-
 13000 00001102 6D6963616C6C792D61-
 13000 0000110B 6C6C6F636174656420-
 13000 00001114 6D656D6F72790A0A00 
 13001                                  fmt_non_closure:
 13002 0000111D 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 13002 00001126 7074696E6720746F20-
 13002 0000112F 6170706C792061206E-
 13002 00001138 6F6E2D636C6F737572-
 13002 00001141 65210A00           
 13003                                  fmt_error_improper_list:
 13004 00001145 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 13004 0000114E 7267756D656E742069-
 13004 00001157 73206E6F7420612070-
 13004 00001160 726F706572206C6973-
 13004 00001169 74210A00           
 13005                                  
 13006                                  section .bss
 13007                                  memory:
 13008 00000000 <res 40000000h>         	resb gbytes(1)
 13009                                  
 13010                                  section .data
 13011                                  top_of_memory:
 13012 0000116D [0000000000000000]              dq memory
 13013                                  
 13014                                  section .text
 13015                                  malloc:
 13016 000097A1 488B0425[6D110000]              mov rax, qword [top_of_memory]
 13017 000097A9 48013C25[6D110000]              add qword [top_of_memory], rdi
 13018 000097B1 C3                              ret
 13019                                  
 13020                                  L_code_ptr_return:
 13021 000097B2 48837C241002            	cmp qword [rsp + 8*2], 2
 13022 000097B8 0F85F21C0000            	jne L_error_arg_count_2
 13023 000097BE 488B4C2418              	mov rcx, qword [rsp + 8*3]
 13024                                  	assert_integer(rcx)
    53 000097C3 803911              <1>  cmp byte [%1], %2
    54 000097C6 0F85831D0000        <1>  jne L_error_incorrect_type
 13025 000097CC 488B4901                	mov rcx, qword [rcx + 1]
 13026 000097D0 4883F900                	cmp rcx, 0
 13027 000097D4 0F8C0A1C0000            	jl L_error_integer_range
 13028 000097DA 488B442420              	mov rax, qword [rsp + 8*4]
 13029                                  .L0:
 13030 000097DF 4883F900                        cmp rcx, 0
 13031 000097E3 7409                            je .L1
 13032 000097E5 488B6D00                	mov rbp, qword [rbp]
 13033 000097E9 48FFC9                  	dec rcx
 13034 000097EC 7FF1                    	jg .L0
 13035                                  .L1:
 13036 000097EE 4889EC                  	mov rsp, rbp
 13037 000097F1 5D                      	pop rbp
 13038 000097F2 5B                              pop rbx
 13039 000097F3 488B4C2408                      mov rcx, qword [rsp + 8*1]
 13040 000097F8 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
 13041 000097FD FFE3                    	jmp rbx
 13042                                  
 13043                                  L_code_ptr_make_list:
 13044 000097FF C8000000                	enter 0, 0
 13045 00009803 48837D1801                      cmp COUNT, 1
 13046 00009808 740C                            je .L0
 13047 0000980A 48837D1802                      cmp COUNT, 2
 13048 0000980F 7411                            je .L1
 13049 00009811 E9CF1C0000                      jmp L_error_arg_count_12
 13050                                  .L0:
 13051 00009816 49B9-                           mov r9, sob_void
 13051 00009818 [0000000000000000] 
 13052 00009820 EB04                            jmp .L2
 13053                                  .L1:
 13054 00009822 4C8B4D28                        mov r9, PARAM(1)
 13055                                  .L2:
 13056 00009826 488B4D20                        mov rcx, PARAM(0)
 13057                                          assert_integer(rcx)
    53 0000982A 803911              <1>  cmp byte [%1], %2
    54 0000982D 0F851C1D0000        <1>  jne L_error_incorrect_type
 13058 00009833 488B4901                        mov rcx, qword [rcx + 1]
 13059 00009837 4883F900                        cmp rcx, 0
 13060 0000983B 0F8CD41B0000                    jl L_error_arg_negative
 13061 00009841 49B8-                           mov r8, sob_nil
 13061 00009843 [0100000000000000] 
 13062                                  .L3:
 13063 0000984B 4883F900                        cmp rcx, 0
 13064 0000984F 7E1D                            jle .L4
 13065 00009851 BF11000000                      mov rdi, 1 + 8 + 8
 13066 00009856 E846FFFFFF                      call malloc
 13067 0000985B C60021                          mov byte [rax], T_pair
 13068 0000985E 4C894801                        mov qword [rax + 1], r9
 13069 00009862 4C894009                        mov qword [rax + 1 + 8], r8
 13070 00009866 4989C0                          mov r8, rax
 13071 00009869 48FFC9                          dec rcx
 13072 0000986C EBDD                            jmp .L3
 13073                                  .L4:
 13074 0000986E 4C89C0                          mov rax, r8
 13075 00009871 48837D1802                      cmp COUNT, 2
 13076 00009876 7404                            je .L5
 13077 00009878 C9                              leave
 13078 00009879 C21800                          ret AND_KILL_FRAME(1)
 13079                                  .L5:
 13080 0000987C C9                      	leave
 13081 0000987D C22000                  	ret AND_KILL_FRAME(2)
 13082                                  
 13083                                  L_code_ptr_is_primitive:
 13084 00009880 C8000000                	enter 0, 0
 13085 00009884 48837D1801              	cmp COUNT, 1
 13086 00009889 0F85EC1B0000            	jne L_error_arg_count_1
 13087 0000988F 488B4520                	mov rax, PARAM(0)
 13088                                  	assert_closure(rax)
    53 00009893 803804              <1>  cmp byte [%1], %2
    54 00009896 0F85B31C0000        <1>  jne L_error_incorrect_type
 13089 0000989C 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
 13090 000098A1 750C                    	jne .L_false
 13091 000098A3 48B8-                   	mov rax, sob_boolean_true
 13091 000098A5 [0300000000000000] 
 13092 000098AD EB0A                    	jmp .L_end
 13093                                  .L_false:
 13094 000098AF 48B8-                   	mov rax, sob_boolean_false
 13094 000098B1 [0200000000000000] 
 13095                                  .L_end:
 13096 000098B9 C9                      	leave
 13097 000098BA C21800                  	ret AND_KILL_FRAME(1)
 13098                                  
 13099                                  L_code_ptr_length:
 13100 000098BD C8000000                	enter 0, 0
 13101 000098C1 48837D1801              	cmp COUNT, 1
 13102 000098C6 0F85AF1B0000            	jne L_error_arg_count_1
 13103 000098CC 488B5D20                	mov rbx, PARAM(0)
 13104 000098D0 BF00000000              	mov rdi, 0
 13105                                  .L:
 13106 000098D5 803B01                  	cmp byte [rbx], T_nil
 13107 000098D8 7412                    	je .L_end
 13108                                  	assert_pair(rbx)
    53 000098DA 803B21              <1>  cmp byte [%1], %2
    54 000098DD 0F856C1C0000        <1>  jne L_error_incorrect_type
 13109 000098E3 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
 13110 000098E7 48FFC7                  	inc rdi
 13111 000098EA EBE9                    	jmp .L
 13112                                  .L_end:
 13113 000098EC E8D91A0000              	call make_integer
 13114 000098F1 C9                      	leave
 13115 000098F2 C21800                  	ret AND_KILL_FRAME(1)
 13116                                  
 13117                                  L_code_ptr_break:
 13118 000098F5 48837C241000                    cmp qword [rsp + 8 * 2], 0
 13119 000098FB 0F85451B0000                    jne L_error_arg_count_0
 13120 00009901 CC                              int3
 13121 00009902 48B8-                           mov rax, sob_void
 13121 00009904 [0000000000000000] 
 13122 0000990C C21000                          ret AND_KILL_FRAME(0)        
 13123                                  
 13124                                  L_code_ptr_frame:
 13125 0000990F C8000000                        enter 0, 0
 13126 00009913 48837D1800                      cmp COUNT, 0
 13127 00009918 0F85281B0000                    jne L_error_arg_count_0
 13128                                  
 13129 0000991E 48BF-                           mov rdi, fmt_frame
 13129 00009920 [7511000000000000] 
 13130 00009928 488B7500                        mov rsi, qword [rbp]    ; old rbp
 13131 0000992C 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
 13132 00009930 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
 13133 00009934 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
 13134 00009938 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
 13135 0000993C 6A00                            push 0
 13136 0000993E 4151                            push r9
 13137 00009940 4150                            push r8                   ; we'll use it when printing the params
 13138 00009942 B800000000                      mov rax, 0
 13139                                          
 13140                                          ENTER
    44 00009947 C8000000            <1>  enter 0, 0
    45 0000994B 4883E4F0            <1>  and rsp, ~15
 13141 0000994F E8(00000000)                    call printf
 13142                                          LEAVE
    49 00009954 C9                  <1>  leave
 13143                                  
 13144                                  .L:
 13145 00009955 488B0C24                        mov rcx, qword [rsp]
 13146 00009959 4883F900                        cmp rcx, 0
 13147 0000995D 7467                            je .L_out
 13148 0000995F 48BF-                           mov rdi, fmt_frame_param_prefix
 13148 00009961 [AE11000000000000] 
 13149 00009969 488B742410                      mov rsi, qword [rsp + 8*2]
 13150 0000996E B800000000                      mov rax, 0
 13151                                          
 13152                                          ENTER
    44 00009973 C8000000            <1>  enter 0, 0
    45 00009977 4883E4F0            <1>  and rsp, ~15
 13153 0000997B E8(00000000)                    call printf
 13154                                          LEAVE
    49 00009980 C9                  <1>  leave
 13155                                  
 13156 00009981 488B0C24                        mov rcx, qword [rsp]
 13157 00009985 48FFC9                          dec rcx
 13158 00009988 48890C24                        mov qword [rsp], rcx    ; dec arg count
 13159 0000998C 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
 13160 00009991 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
 13161 00009996 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
 13162 0000999A 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
 13163 0000999F 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
 13164 000099A2 E87B000000                      call print_sexpr
 13165 000099A7 48BF-                           mov rdi, fmt_newline
 13165 000099A9 [DA11000000000000] 
 13166 000099B1 B800000000                      mov rax, 0
 13167                                          ENTER
    44 000099B6 C8000000            <1>  enter 0, 0
    45 000099BA 4883E4F0            <1>  and rsp, ~15
 13168 000099BE E8(00000000)                    call printf
 13169                                          LEAVE
    49 000099C3 C9                  <1>  leave
 13170 000099C4 EB8F                            jmp .L
 13171                                  .L_out:
 13172 000099C6 48BF-                           mov rdi, fmt_frame_continue
 13172 000099C8 [BF11000000000000] 
 13173 000099D0 B800000000                      mov rax, 0
 13174                                          ENTER
    44 000099D5 C8000000            <1>  enter 0, 0
    45 000099D9 4883E4F0            <1>  and rsp, ~15
 13175 000099DD E8(00000000)                    call printf
 13176 000099E2 E8(00000000)                    call getchar
 13177                                          LEAVE
    49 000099E7 C9                  <1>  leave
 13178                                          
 13179 000099E8 48B8-                           mov rax, sob_void
 13179 000099EA [0000000000000000] 
 13180 000099F2 C9                              leave
 13181 000099F3 C21000                          ret AND_KILL_FRAME(0)
 13182                                          
 13183                                  print_sexpr_if_not_void:
 13184 000099F6 4881FF[00000000]        	cmp rdi, sob_void
 13185 000099FD 7422                    	je .done
 13186 000099FF E81E000000              	call print_sexpr
 13187 00009A04 48BF-                   	mov rdi, fmt_newline
 13187 00009A06 [DA11000000000000] 
 13188 00009A0E B800000000              	mov rax, 0
 13189                                  	ENTER
    44 00009A13 C8000000            <1>  enter 0, 0
    45 00009A17 4883E4F0            <1>  and rsp, ~15
 13190 00009A1B E8(00000000)            	call printf
 13191                                  	LEAVE
    49 00009A20 C9                  <1>  leave
 13192                                  .done:
 13193 00009A21 C3                      	ret
 13194                                  
 13195                                  section .data
 13196                                  fmt_frame:
 13197 00001175 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
 13197 0000117E 207265742061646472-
 13197 00001187 203D2025703B206C65-
 13197 00001190 7820656E76203D2025-
 13197 00001199 703B20706172616D20-
 13197 000011A2 636F756E74203D2025-
 13197 000011AB 640A00             
 13198                                  fmt_frame_param_prefix:
 13199 000011AE 3D3D5B706172616D20-             db `==[param %d]==> \0`
 13199 000011B7 25645D3D3D3E2000   
 13200                                  fmt_frame_continue:
 13201 000011BF 486974203C456E7465-             db `Hit <Enter> to continue...\0`
 13201 000011C8 723E20746F20636F6E-
 13201 000011D1 74696E75652E2E2E00 
 13202                                  fmt_newline:
 13203 000011DA 0A00                    	db `\n\0`
 13204                                  fmt_void:
 13205 000011DC 233C766F69643E00        	db `#<void>\0`
 13206                                  fmt_nil:
 13207 000011E4 282900                  	db `()\0`
 13208                                  fmt_boolean_false:
 13209 000011E7 236600                  	db `#f\0`
 13210                                  fmt_boolean_true:
 13211 000011EA 237400                  	db `#t\0`
 13212                                  fmt_char_backslash:
 13213 000011ED 235C5C00                	db `#\\\\\0`
 13214                                  fmt_char_dquote:
 13215 000011F1 235C2200                	db `#\\"\0`
 13216                                  fmt_char_simple:
 13217 000011F5 235C256300              	db `#\\%c\0`
 13218                                  fmt_char_null:
 13219 000011FA 235C6E756C00            	db `#\\nul\0`
 13220                                  fmt_char_bell:
 13221 00001200 235C62656C6C00          	db `#\\bell\0`
 13222                                  fmt_char_backspace:
 13223 00001207 235C6261636B737061-     	db `#\\backspace\0`
 13223 00001210 636500             
 13224                                  fmt_char_tab:
 13225 00001213 235C74616200            	db `#\\tab\0`
 13226                                  fmt_char_newline:
 13227 00001219 235C6E65776C696E65-     	db `#\\newline\0`
 13227 00001222 00                 
 13228                                  fmt_char_formfeed:
 13229 00001223 235C7061676500          	db `#\\page\0`
 13230                                  fmt_char_return:
 13231 0000122A 235C72657475726E00      	db `#\\return\0`
 13232                                  fmt_char_escape:
 13233 00001233 235C65736300            	db `#\\esc\0`
 13234                                  fmt_char_space:
 13235 00001239 235C737061636500        	db `#\\space\0`
 13236                                  fmt_char_hex:
 13237 00001241 235C782530325800        	db `#\\x%02X\0`
 13238                                  fmt_gensym:
 13239 00001249 47256C6400                      db `G%ld\0`
 13240                                  fmt_closure:
 13241 0000124E 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 13241 00001257 206174203078253038-
 13241 00001260 5820656E763D307825-
 13241 00001269 30385820636F64653D-
 13241 00001272 3078253038583E00   
 13242                                  fmt_lparen:
 13243 0000127A 2800                    	db `(\0`
 13244                                  fmt_dotted_pair:
 13245 0000127C 202E2000                	db ` . \0`
 13246                                  fmt_rparen:
 13247 00001280 2900                    	db `)\0`
 13248                                  fmt_space:
 13249 00001282 2000                    	db ` \0`
 13250                                  fmt_empty_vector:
 13251 00001284 23282900                	db `#()\0`
 13252                                  fmt_vector:
 13253 00001288 232800                  	db `#(\0`
 13254                                  fmt_real:
 13255 0000128B 256600                  	db `%f\0`
 13256                                  fmt_fraction:
 13257 0000128E 256C642F256C6400        	db `%ld/%ld\0`
 13258                                  fmt_zero:
 13259 00001296 3000                    	db `0\0`
 13260                                  fmt_int:
 13261 00001298 256C6400                	db `%ld\0`
 13262                                  fmt_unknown_scheme_object_error:
 13263 0000129C 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
 13263 000012A5 6F723A20556E6B6E6F-
 13263 000012AE 776E20536368656D65-
 13263 000012B7 2D6F626A6563742028-
 13263 000012C0 525454492030782530-
 13263 000012C9 32582920           
 13264 000012CD 617420616464726573-     	db `at address 0x%08X\n\n\0`
 13264 000012D6 73203078253038580A-
 13264 000012DF 0A00               
 13265                                  fmt_dquote:
 13266 000012E1 2200                    	db `\"\0`
 13267                                  fmt_string_char:
 13268 000012E3 256300                          db `%c\0`
 13269                                  fmt_string_char_7:
 13270 000012E6 5C6100                          db `\\a\0`
 13271                                  fmt_string_char_8:
 13272 000012E9 5C6200                          db `\\b\0`
 13273                                  fmt_string_char_9:
 13274 000012EC 5C7400                          db `\\t\0`
 13275                                  fmt_string_char_10:
 13276 000012EF 5C6E00                          db `\\n\0`
 13277                                  fmt_string_char_11:
 13278 000012F2 5C7600                          db `\\v\0`
 13279                                  fmt_string_char_12:
 13280 000012F5 5C6600                          db `\\f\0`
 13281                                  fmt_string_char_13:
 13282 000012F8 5C7200                          db `\\r\0`
 13283                                  fmt_string_char_34:
 13284 000012FB 5C2200                          db `\\"\0`
 13285                                  fmt_string_char_92:
 13286 000012FE 5C5C00                          db `\\\\\0`
 13287                                  fmt_string_char_hex:
 13288 00001301 5C7825583B00                    db `\\x%X;\0`
 13289                                  
 13290                                  section .text
 13291                                  
 13292                                  print_sexpr:
 13293 00009A22 C8000000                	enter 0, 0
 13294 00009A26 8A07                    	mov al, byte [rdi]
 13295 00009A28 3C00                    	cmp al, T_void
 13296 00009A2A 7465                    	je .Lvoid
 13297 00009A2C 3C01                    	cmp al, T_nil
 13298 00009A2E 7470                    	je .Lnil
 13299 00009A30 3C09                    	cmp al, T_boolean_false
 13300 00009A32 747B                    	je .Lboolean_false
 13301 00009A34 3C0A                    	cmp al, T_boolean_true
 13302 00009A36 0F8482000000            	je .Lboolean_true
 13303 00009A3C 3C02                    	cmp al, T_char
 13304 00009A3E 0F8489000000            	je .Lchar
 13305 00009A44 3C41                    	cmp al, T_interned_symbol
 13306 00009A46 0F84CB010000            	je .Linterned_symbol
 13307 00009A4C 3C42                            cmp al, T_uninterned_symbol
 13308 00009A4E 0F84EF010000                    je .Luninterned_symbol
 13309 00009A54 3C21                    	cmp al, T_pair
 13310 00009A56 0F84FA010000            	je .Lpair
 13311 00009A5C 3C22                    	cmp al, T_vector
 13312 00009A5E 0F84C3020000            	je .Lvector
 13313 00009A64 3C04                    	cmp al, T_closure
 13314 00009A66 0F8491010000            	je .Lclosure
 13315 00009A6C 3C13                    	cmp al, T_real
 13316 00009A6E 0F8454030000            	je .Lreal
 13317 00009A74 3C12                    	cmp al, T_fraction
 13318 00009A76 0F847A030000            	je .Lfraction
 13319 00009A7C 3C11                    	cmp al, T_integer
 13320 00009A7E 0F84B3030000            	je .Linteger
 13321 00009A84 3C03                    	cmp al, T_string
 13322 00009A86 0F84BE030000            	je .Lstring
 13323                                  
 13324 00009A8C E9F6040000              	jmp .Lunknown_sexpr_type
 13325                                  
 13326                                  .Lvoid:
 13327 00009A91 48BF-                   	mov rdi, fmt_void
 13327 00009A93 [DC11000000000000] 
 13328 00009A9B E91A050000              	jmp .Lemit
 13329                                  
 13330                                  .Lnil:
 13331 00009AA0 48BF-                   	mov rdi, fmt_nil
 13331 00009AA2 [E411000000000000] 
 13332 00009AAA E90B050000              	jmp .Lemit
 13333                                  
 13334                                  .Lboolean_false:
 13335 00009AAF 48BF-                   	mov rdi, fmt_boolean_false
 13335 00009AB1 [E711000000000000] 
 13336 00009AB9 E9FC040000              	jmp .Lemit
 13337                                  
 13338                                  .Lboolean_true:
 13339 00009ABE 48BF-                   	mov rdi, fmt_boolean_true
 13339 00009AC0 [EA11000000000000] 
 13340 00009AC8 E9ED040000              	jmp .Lemit
 13341                                  
 13342                                  .Lchar:
 13343 00009ACD 8A4701                  	mov al, byte [rdi + 1]
 13344 00009AD0 3C20                    	cmp al, ' '
 13345 00009AD2 7E28                    	jle .Lchar_whitespace
 13346 00009AD4 3C5C                    	cmp al, 92 		; backslash
 13347 00009AD6 0F847C000000            	je .Lchar_backslash
 13348 00009ADC 3C22                    	cmp al, '"'
 13349 00009ADE 0F8483000000            	je .Lchar_dquote
 13350 00009AE4 4825FF000000            	and rax, 255
 13351 00009AEA 48BF-                   	mov rdi, fmt_char_simple
 13351 00009AEC [F511000000000000] 
 13352 00009AF4 4889C6                  	mov rsi, rax
 13353 00009AF7 E9BE040000              	jmp .Lemit
 13354                                  
 13355                                  .Lchar_whitespace:
 13356 00009AFC 3C00                    	cmp al, 0
 13357 00009AFE 7476                    	je .Lchar_null
 13358 00009B00 3C07                    	cmp al, 7
 13359 00009B02 0F847D000000            	je .Lchar_bell
 13360 00009B08 3C08                    	cmp al, 8
 13361 00009B0A 0F8484000000            	je .Lchar_backspace
 13362 00009B10 3C09                    	cmp al, 9
 13363 00009B12 0F848B000000            	je .Lchar_tab
 13364 00009B18 3C0A                    	cmp al, 10
 13365 00009B1A 0F8492000000            	je .Lchar_newline
 13366 00009B20 3C0C                    	cmp al, 12
 13367 00009B22 0F8499000000            	je .Lchar_formfeed
 13368 00009B28 3C0D                    	cmp al, 13
 13369 00009B2A 0F84A0000000            	je .Lchar_return
 13370 00009B30 3C1B                    	cmp al, 27
 13371 00009B32 0F84A7000000            	je .Lchar_escape
 13372 00009B38 4825FF000000            	and rax, 255
 13373 00009B3E 3C20                    	cmp al, ' '
 13374 00009B40 0F84A8000000            	je .Lchar_space
 13375 00009B46 48BF-                   	mov rdi, fmt_char_hex
 13375 00009B48 [4112000000000000] 
 13376 00009B50 4889C6                  	mov rsi, rax
 13377 00009B53 E962040000              	jmp .Lemit	
 13378                                  
 13379                                  .Lchar_backslash:
 13380 00009B58 48BF-                   	mov rdi, fmt_char_backslash
 13380 00009B5A [ED11000000000000] 
 13381 00009B62 E953040000              	jmp .Lemit
 13382                                  
 13383                                  .Lchar_dquote:
 13384 00009B67 48BF-                   	mov rdi, fmt_char_dquote
 13384 00009B69 [F111000000000000] 
 13385 00009B71 E944040000              	jmp .Lemit
 13386                                  
 13387                                  .Lchar_null:
 13388 00009B76 48BF-                   	mov rdi, fmt_char_null
 13388 00009B78 [FA11000000000000] 
 13389 00009B80 E935040000              	jmp .Lemit
 13390                                  
 13391                                  .Lchar_bell:
 13392 00009B85 48BF-                   	mov rdi, fmt_char_bell
 13392 00009B87 [0012000000000000] 
 13393 00009B8F E926040000              	jmp .Lemit
 13394                                  
 13395                                  .Lchar_backspace:
 13396 00009B94 48BF-                   	mov rdi, fmt_char_backspace
 13396 00009B96 [0712000000000000] 
 13397 00009B9E E917040000              	jmp .Lemit
 13398                                  
 13399                                  .Lchar_tab:
 13400 00009BA3 48BF-                   	mov rdi, fmt_char_tab
 13400 00009BA5 [1312000000000000] 
 13401 00009BAD E908040000              	jmp .Lemit
 13402                                  
 13403                                  .Lchar_newline:
 13404 00009BB2 48BF-                   	mov rdi, fmt_char_newline
 13404 00009BB4 [1912000000000000] 
 13405 00009BBC E9F9030000              	jmp .Lemit
 13406                                  
 13407                                  .Lchar_formfeed:
 13408 00009BC1 48BF-                   	mov rdi, fmt_char_formfeed
 13408 00009BC3 [2312000000000000] 
 13409 00009BCB E9EA030000              	jmp .Lemit
 13410                                  
 13411                                  .Lchar_return:
 13412 00009BD0 48BF-                   	mov rdi, fmt_char_return
 13412 00009BD2 [2A12000000000000] 
 13413 00009BDA E9DB030000              	jmp .Lemit
 13414                                  
 13415                                  .Lchar_escape:
 13416 00009BDF 48BF-                   	mov rdi, fmt_char_escape
 13416 00009BE1 [3312000000000000] 
 13417 00009BE9 E9CC030000              	jmp .Lemit
 13418                                  
 13419                                  .Lchar_space:
 13420 00009BEE 48BF-                   	mov rdi, fmt_char_space
 13420 00009BF0 [3912000000000000] 
 13421 00009BF8 E9BD030000              	jmp .Lemit
 13422                                  
 13423                                  .Lclosure:
 13424 00009BFD 4889FE                  	mov rsi, qword rdi
 13425 00009C00 48BF-                   	mov rdi, fmt_closure
 13425 00009C02 [4E12000000000000] 
 13426 00009C0A 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 13427 00009C0E 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 13428 00009C12 E9A3030000              	jmp .Lemit
 13429                                  
 13430                                  .Linterned_symbol:
 13431 00009C17 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 13432 00009C1B BE01000000              	mov rsi, 1		 ; size = 1 byte
 13433 00009C20 488B5701                	mov rdx, qword [rdi + 1] ; length
 13434 00009C24 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 13435 00009C28 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 13436                                  	ENTER
    44 00009C30 C8000000            <1>  enter 0, 0
    45 00009C34 4883E4F0            <1>  and rsp, ~15
 13437 00009C38 E8(00000000)            	call fwrite
 13438                                  	LEAVE
    49 00009C3D C9                  <1>  leave
 13439 00009C3E E98C030000              	jmp .Lend
 13440                                  
 13441                                  .Luninterned_symbol:
 13442 00009C43 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
 13443 00009C47 48BF-                           mov rdi, fmt_gensym
 13443 00009C49 [4912000000000000] 
 13444 00009C51 E964030000                      jmp .Lemit
 13445                                  	
 13446                                  .Lpair:
 13447 00009C56 57                      	push rdi
 13448 00009C57 48BF-                   	mov rdi, fmt_lparen
 13448 00009C59 [7A12000000000000] 
 13449 00009C61 B800000000              	mov rax, 0
 13450                                          ENTER
    44 00009C66 C8000000            <1>  enter 0, 0
    45 00009C6A 4883E4F0            <1>  and rsp, ~15
 13451 00009C6E E8(00000000)            	call printf
 13452                                          LEAVE
    49 00009C73 C9                  <1>  leave
 13453 00009C74 488B3C24                	mov rdi, qword [rsp] 	; pair
 13454 00009C78 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 13455 00009C7C E8A1FDFFFF              	call print_sexpr
 13456 00009C81 5F                      	pop rdi 		; pair
 13457 00009C82 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 13458                                  .Lcdr:
 13459 00009C86 8A07                    	mov al, byte [rdi]
 13460 00009C88 3C01                    	cmp al, T_nil
 13461 00009C8A 7447                    	je .Lcdr_nil
 13462 00009C8C 3C21                    	cmp al, T_pair
 13463 00009C8E 7462                    	je .Lcdr_pair
 13464 00009C90 57                      	push rdi
 13465 00009C91 48BF-                   	mov rdi, fmt_dotted_pair
 13465 00009C93 [7C12000000000000] 
 13466 00009C9B B800000000              	mov rax, 0
 13467                                          ENTER
    44 00009CA0 C8000000            <1>  enter 0, 0
    45 00009CA4 4883E4F0            <1>  and rsp, ~15
 13468 00009CA8 E8(00000000)            	call printf
 13469                                          LEAVE
    49 00009CAD C9                  <1>  leave
 13470 00009CAE 5F                      	pop rdi
 13471 00009CAF E86EFDFFFF              	call print_sexpr
 13472 00009CB4 48BF-                   	mov rdi, fmt_rparen
 13472 00009CB6 [8012000000000000] 
 13473 00009CBE B800000000              	mov rax, 0
 13474                                          ENTER
    44 00009CC3 C8000000            <1>  enter 0, 0
    45 00009CC7 4883E4F0            <1>  and rsp, ~15
 13475 00009CCB E8(00000000)            	call printf
 13476                                          LEAVE
    49 00009CD0 C9                  <1>  leave
 13477 00009CD1 C9                      	leave
 13478 00009CD2 C3                      	ret
 13479                                  
 13480                                  .Lcdr_nil:
 13481 00009CD3 48BF-                   	mov rdi, fmt_rparen
 13481 00009CD5 [8012000000000000] 
 13482 00009CDD B800000000              	mov rax, 0
 13483                                          ENTER
    44 00009CE2 C8000000            <1>  enter 0, 0
    45 00009CE6 4883E4F0            <1>  and rsp, ~15
 13484 00009CEA E8(00000000)            	call printf
 13485                                          LEAVE
    49 00009CEF C9                  <1>  leave
 13486 00009CF0 C9                      	leave
 13487 00009CF1 C3                      	ret
 13488                                  
 13489                                  .Lcdr_pair:
 13490 00009CF2 57                      	push rdi
 13491 00009CF3 48BF-                   	mov rdi, fmt_space
 13491 00009CF5 [8212000000000000] 
 13492 00009CFD B800000000              	mov rax, 0
 13493                                          ENTER
    44 00009D02 C8000000            <1>  enter 0, 0
    45 00009D06 4883E4F0            <1>  and rsp, ~15
 13494 00009D0A E8(00000000)            	call printf
 13495                                          LEAVE
    49 00009D0F C9                  <1>  leave
 13496 00009D10 488B3C24                	mov rdi, qword [rsp]
 13497 00009D14 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 13498 00009D18 E805FDFFFF              	call print_sexpr
 13499 00009D1D 5F                      	pop rdi
 13500 00009D1E 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 13501 00009D22 E95FFFFFFF              	jmp .Lcdr
 13502                                  
 13503                                  .Lvector:
 13504 00009D27 488B4701                	mov rax, qword [rdi + 1] ; length
 13505 00009D2B 4883F800                	cmp rax, 0
 13506 00009D2F 0F8484000000            	je .Lvector_empty
 13507 00009D35 57                      	push rdi
 13508 00009D36 48BF-                   	mov rdi, fmt_vector
 13508 00009D38 [8812000000000000] 
 13509 00009D40 B800000000              	mov rax, 0
 13510                                          ENTER
    44 00009D45 C8000000            <1>  enter 0, 0
    45 00009D49 4883E4F0            <1>  and rsp, ~15
 13511 00009D4D E8(00000000)            	call printf
 13512                                          LEAVE
    49 00009D52 C9                  <1>  leave
 13513 00009D53 488B3C24                	mov rdi, qword [rsp]
 13514 00009D57 FF7701                  	push qword [rdi + 1]
 13515 00009D5A 6A01                    	push 1
 13516 00009D5C 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 13517 00009D60 E8BDFCFFFF              	call print_sexpr
 13518                                  .Lvector_loop:
 13519                                  	; [rsp] index
 13520                                  	; [rsp + 8*1] limit
 13521                                  	; [rsp + 8*2] vector
 13522 00009D65 488B0424                	mov rax, qword [rsp]
 13523 00009D69 483B442408              	cmp rax, qword [rsp + 8*1]
 13524 00009D6E 7436                    	je .Lvector_end
 13525 00009D70 48BF-                   	mov rdi, fmt_space
 13525 00009D72 [8212000000000000] 
 13526 00009D7A B800000000              	mov rax, 0
 13527                                          ENTER
    44 00009D7F C8000000            <1>  enter 0, 0
    45 00009D83 4883E4F0            <1>  and rsp, ~15
 13528 00009D87 E8(00000000)            	call printf
 13529                                          LEAVE
    49 00009D8C C9                  <1>  leave
 13530 00009D8D 488B0424                	mov rax, qword [rsp]
 13531 00009D91 488B5C2410              	mov rbx, qword [rsp + 8*2]
 13532 00009D96 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 13533 00009D9B E882FCFFFF              	call print_sexpr
 13534 00009DA0 48FF0424                	inc qword [rsp]
 13535 00009DA4 EBBF                    	jmp .Lvector_loop
 13536                                  
 13537                                  .Lvector_end:
 13538 00009DA6 4883C418                	add rsp, 8*3
 13539 00009DAA 48BF-                   	mov rdi, fmt_rparen
 13539 00009DAC [8012000000000000] 
 13540 00009DB4 E901020000              	jmp .Lemit	
 13541                                  
 13542                                  .Lvector_empty:
 13543 00009DB9 48BF-                   	mov rdi, fmt_empty_vector
 13543 00009DBB [8412000000000000] 
 13544 00009DC3 E9F2010000              	jmp .Lemit
 13545                                  
 13546                                  .Lreal:
 13547 00009DC8 FF7701                  	push qword [rdi + 1]
 13548 00009DCB F20F100424              	movsd xmm0, qword [rsp]
 13549 00009DD0 4883C408                	add rsp, 8*1
 13550 00009DD4 48BF-                   	mov rdi, fmt_real
 13550 00009DD6 [8B12000000000000] 
 13551 00009DDE B801000000              	mov rax, 1
 13552                                  	ENTER
    44 00009DE3 C8000000            <1>  enter 0, 0
    45 00009DE7 4883E4F0            <1>  and rsp, ~15
 13553 00009DEB E8(00000000)            	call printf
 13554                                  	LEAVE
    49 00009DF0 C9                  <1>  leave
 13555 00009DF1 E9D9010000              	jmp .Lend
 13556                                  
 13557                                  .Lfraction:
 13558 00009DF6 488B7701                	mov rsi, qword [rdi + 1]
 13559 00009DFA 488B5709                	mov rdx, qword [rdi + 1 + 8]
 13560 00009DFE 4883FE00                	cmp rsi, 0
 13561 00009E02 7415                    	je .Lrat_zero
 13562 00009E04 4883FA01                	cmp rdx, 1
 13563 00009E08 741E                    	je .Lrat_int
 13564 00009E0A 48BF-                   	mov rdi, fmt_fraction
 13564 00009E0C [8E12000000000000] 
 13565 00009E14 E9A1010000              	jmp .Lemit
 13566                                  
 13567                                  .Lrat_zero:
 13568 00009E19 48BF-                   	mov rdi, fmt_zero
 13568 00009E1B [9612000000000000] 
 13569 00009E23 E992010000              	jmp .Lemit
 13570                                  
 13571                                  .Lrat_int:
 13572 00009E28 48BF-                   	mov rdi, fmt_int
 13572 00009E2A [9812000000000000] 
 13573 00009E32 E983010000              	jmp .Lemit
 13574                                  
 13575                                  .Linteger:
 13576 00009E37 488B7701                	mov rsi, qword [rdi + 1]
 13577 00009E3B 48BF-                   	mov rdi, fmt_int
 13577 00009E3D [9812000000000000] 
 13578 00009E45 E970010000              	jmp .Lemit
 13579                                  
 13580                                  .Lstring:
 13581 00009E4A 488D4709                	lea rax, [rdi + 1 + 8]
 13582 00009E4E 50                      	push rax
 13583 00009E4F FF7701                  	push qword [rdi + 1]
 13584 00009E52 48BF-                   	mov rdi, fmt_dquote
 13584 00009E54 [E112000000000000] 
 13585 00009E5C B800000000              	mov rax, 0
 13586                                  	ENTER
    44 00009E61 C8000000            <1>  enter 0, 0
    45 00009E65 4883E4F0            <1>  and rsp, ~15
 13587 00009E69 E8(00000000)            	call printf
 13588                                  	LEAVE
    49 00009E6E C9                  <1>  leave
 13589                                  .Lstring_loop:
 13590                                  	; qword [rsp]: limit
 13591                                  	; qword [rsp + 8*1]: char *
 13592 00009E6F 48833C2400              	cmp qword [rsp], 0
 13593 00009E74 0F84FD000000            	je .Lstring_end
 13594 00009E7A 488B442408              	mov rax, qword [rsp + 8*1]
 13595 00009E7F 8A00                    	mov al, byte [rax]
 13596 00009E81 4825FF000000            	and rax, 255
 13597 00009E87 3C07                    	cmp al, 7
 13598 00009E89 7468                            je .Lstring_char_7
 13599 00009E8B 3C08                            cmp al, 8
 13600 00009E8D 7470                            je .Lstring_char_8
 13601 00009E8F 3C09                            cmp al, 9
 13602 00009E91 7478                            je .Lstring_char_9
 13603 00009E93 3C0A                            cmp al, 10
 13604 00009E95 0F847C000000                    je .Lstring_char_10
 13605 00009E9B 3C0B                            cmp al, 11
 13606 00009E9D 0F8480000000                    je .Lstring_char_11
 13607 00009EA3 3C0C                            cmp al, 12
 13608 00009EA5 0F8484000000                    je .Lstring_char_12
 13609 00009EAB 3C0D                            cmp al, 13
 13610 00009EAD 0F8488000000                    je .Lstring_char_13
 13611 00009EB3 3C22                            cmp al, 34
 13612 00009EB5 0F848C000000                    je .Lstring_char_34
 13613 00009EBB 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 13615 00009EBD 3C20                            cmp al, ' '
 13616 00009EBF 0F8CA0000000                    jl .Lstring_char_hex
 13617 00009EC5 48BF-                           mov rdi, fmt_string_char
 13617 00009EC7 [E312000000000000] 
 13618 00009ECF 4889C6                          mov rsi, rax
 13619                                  .Lstring_char_emit:
 13620 00009ED2 B800000000                      mov rax, 0
 13621                                          ENTER
    44 00009ED7 C8000000            <1>  enter 0, 0
    45 00009EDB 4883E4F0            <1>  and rsp, ~15
 13622 00009EDF E8(00000000)                    call printf
 13623                                          LEAVE
    49 00009EE4 C9                  <1>  leave
 13624 00009EE5 48FF0C24                        dec qword [rsp]
 13625 00009EE9 48FF442408                      inc qword [rsp + 8*1]
 13626 00009EEE E97CFFFFFF                      jmp .Lstring_loop
 13627                                  
 13628                                  .Lstring_char_7:
 13629 00009EF3 48BF-                           mov rdi, fmt_string_char_7
 13629 00009EF5 [E612000000000000] 
 13630 00009EFD EBD3                            jmp .Lstring_char_emit
 13631                                  
 13632                                  .Lstring_char_8:
 13633 00009EFF 48BF-                           mov rdi, fmt_string_char_8
 13633 00009F01 [E912000000000000] 
 13634 00009F09 EBC7                            jmp .Lstring_char_emit
 13635                                          
 13636                                  .Lstring_char_9:
 13637 00009F0B 48BF-                           mov rdi, fmt_string_char_9
 13637 00009F0D [EC12000000000000] 
 13638 00009F15 EBBB                            jmp .Lstring_char_emit
 13639                                  
 13640                                  .Lstring_char_10:
 13641 00009F17 48BF-                           mov rdi, fmt_string_char_10
 13641 00009F19 [EF12000000000000] 
 13642 00009F21 EBAF                            jmp .Lstring_char_emit
 13643                                  
 13644                                  .Lstring_char_11:
 13645 00009F23 48BF-                           mov rdi, fmt_string_char_11
 13645 00009F25 [F212000000000000] 
 13646 00009F2D EBA3                            jmp .Lstring_char_emit
 13647                                  
 13648                                  .Lstring_char_12:
 13649 00009F2F 48BF-                           mov rdi, fmt_string_char_12
 13649 00009F31 [F512000000000000] 
 13650 00009F39 EB97                            jmp .Lstring_char_emit
 13651                                  
 13652                                  .Lstring_char_13:
 13653 00009F3B 48BF-                           mov rdi, fmt_string_char_13
 13653 00009F3D [F812000000000000] 
 13654 00009F45 EB8B                            jmp .Lstring_char_emit
 13655                                  
 13656                                  .Lstring_char_34:
 13657 00009F47 48BF-                           mov rdi, fmt_string_char_34
 13657 00009F49 [FB12000000000000] 
 13658 00009F51 E97CFFFFFF                      jmp .Lstring_char_emit
 13659                                  
 13660                                  .Lstring_char_92:
 13661 00009F56 48BF-                           mov rdi, fmt_string_char_92
 13661 00009F58 [FE12000000000000] 
 13662 00009F60 E96DFFFFFF                      jmp .Lstring_char_emit
 13663                                  
 13664                                  .Lstring_char_hex:
 13665 00009F65 48BF-                           mov rdi, fmt_string_char_hex
 13665 00009F67 [0113000000000000] 
 13666 00009F6F 4889C6                          mov rsi, rax
 13667 00009F72 E95BFFFFFF                      jmp .Lstring_char_emit        
 13668                                  
 13669                                  .Lstring_end:
 13670 00009F77 4883C410                	add rsp, 8 * 2
 13671 00009F7B 48BF-                   	mov rdi, fmt_dquote
 13671 00009F7D [E112000000000000] 
 13672 00009F85 EB33                    	jmp .Lemit
 13673                                  
 13674                                  .Lunknown_sexpr_type:
 13675 00009F87 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
 13675 00009F89 [9C12000000000000] 
 13676 00009F91 4825FF000000            	and rax, 255
 13677 00009F97 4889C2                  	mov rdx, rax
 13678 00009F9A 4889F9                  	mov rcx, rdi
 13679 00009F9D 488B3C25[00000000]      	mov rdi, qword [stderr]
 13680 00009FA5 B800000000              	mov rax, 0
 13681                                          ENTER
    44 00009FAA C8000000            <1>  enter 0, 0
    45 00009FAE 4883E4F0            <1>  and rsp, ~15
 13682 00009FB2 E8(00000000)            	call fprintf
 13683                                          LEAVE
    49 00009FB7 C9                  <1>  leave
 13684 00009FB8 C9                              leave
 13685 00009FB9 C3                              ret
 13686                                  
 13687                                  .Lemit:
 13688 00009FBA B800000000              	mov rax, 0
 13689                                          ENTER
    44 00009FBF C8000000            <1>  enter 0, 0
    45 00009FC3 4883E4F0            <1>  and rsp, ~15
 13690 00009FC7 E8(00000000)            	call printf
 13691                                          LEAVE
    49 00009FCC C9                  <1>  leave
 13692 00009FCD EB00                    	jmp .Lend
 13693                                  
 13694                                  .Lend:
 13695                                  	LEAVE
    49 00009FCF C9                  <1>  leave
 13696 00009FD0 C3                      	ret
 13697                                  
 13698                                  ;;; rdi: address of free variable
 13699                                  ;;; rsi: address of code-pointer
 13700                                  bind_primitive:
 13701 00009FD1 C8000000                        enter 0, 0
 13702 00009FD5 57                              push rdi
 13703 00009FD6 BF11000000                      mov rdi, (1 + 8 + 8)
 13704 00009FDB E8C1F7FFFF                      call malloc
 13705 00009FE0 5F                              pop rdi
 13706 00009FE1 C60004                          mov byte [rax], T_closure
 13707 00009FE4 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 13708 00009FEC 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 13709 00009FF0 488907                          mov qword [rdi], rax
 13710 00009FF3 48B8-                           mov rax, sob_void
 13710 00009FF5 [0000000000000000] 
 13711 00009FFD C9                              leave
 13712 00009FFE C3                              ret
 13713                                  
 13714                                  L_code_ptr_ash:
 13715 00009FFF C8000000                        enter 0, 0
 13716 0000A003 48837D1802                      cmp COUNT, 2
 13717 0000A008 0F85A2140000                    jne L_error_arg_count_2
 13718 0000A00E 488B7D20                        mov rdi, PARAM(0)
 13719                                          assert_integer(rdi)
    53 0000A012 803F11              <1>  cmp byte [%1], %2
    54 0000A015 0F8534150000        <1>  jne L_error_incorrect_type
 13720 0000A01B 488B4D28                        mov rcx, PARAM(1)
 13721                                          assert_integer(rcx)
    53 0000A01F 803911              <1>  cmp byte [%1], %2
    54 0000A022 0F8527150000        <1>  jne L_error_incorrect_type
 13722 0000A028 488B7F01                        mov rdi, qword [rdi + 1]
 13723 0000A02C 488B4901                        mov rcx, qword [rcx + 1]
 13724 0000A030 4883F900                        cmp rcx, 0
 13725 0000A034 7C0F                            jl .L_negative
 13726                                  .L_loop_positive:
 13727 0000A036 4883F900                        cmp rcx, 0
 13728 0000A03A 741B                            je .L_exit
 13729 0000A03C 48D3E7                          sal rdi, cl
 13730 0000A03F 48C1E908                        shr rcx, 8
 13731 0000A043 EBF1                            jmp .L_loop_positive
 13732                                  .L_negative:
 13733 0000A045 48F7D9                          neg rcx
 13734                                  .L_loop_negative:
 13735 0000A048 4883F900                        cmp rcx, 0
 13736 0000A04C 7409                            je .L_exit
 13737 0000A04E 48D3FF                          sar rdi, cl
 13738 0000A051 48C1E908                        shr rcx, 8
 13739 0000A055 EBF1                            jmp .L_loop_negative
 13740                                  .L_exit:
 13741 0000A057 E86E130000                      call make_integer
 13742 0000A05C C9                              leave
 13743 0000A05D C22000                          ret AND_KILL_FRAME(2)
 13744                                  
 13745                                  L_code_ptr_logand:
 13746 0000A060 C8000000                        enter 0, 0
 13747 0000A064 48837D1802                      cmp COUNT, 2
 13748 0000A069 0F8541140000                    jne L_error_arg_count_2
 13749 0000A06F 4C8B4520                        mov r8, PARAM(0)
 13750                                          assert_integer(r8)
    53 0000A073 41803811            <1>  cmp byte [%1], %2
    54 0000A077 0F85D2140000        <1>  jne L_error_incorrect_type
 13751 0000A07D 4C8B4D28                        mov r9, PARAM(1)
 13752                                          assert_integer(r9)
    53 0000A081 41803911            <1>  cmp byte [%1], %2
    54 0000A085 0F85C4140000        <1>  jne L_error_incorrect_type
 13753 0000A08B 498B7801                        mov rdi, qword [r8 + 1]
 13754 0000A08F 49237901                        and rdi, qword [r9 + 1]
 13755 0000A093 E832130000                      call make_integer
 13756 0000A098 C9                              leave
 13757 0000A099 C22000                          ret AND_KILL_FRAME(2)
 13758                                  
 13759                                  L_code_ptr_logor:
 13760 0000A09C C8000000                        enter 0, 0
 13761 0000A0A0 48837D1802                      cmp COUNT, 2
 13762 0000A0A5 0F8505140000                    jne L_error_arg_count_2
 13763 0000A0AB 4C8B4520                        mov r8, PARAM(0)
 13764                                          assert_integer(r8)
    53 0000A0AF 41803811            <1>  cmp byte [%1], %2
    54 0000A0B3 0F8596140000        <1>  jne L_error_incorrect_type
 13765 0000A0B9 4C8B4D28                        mov r9, PARAM(1)
 13766                                          assert_integer(r9)
    53 0000A0BD 41803911            <1>  cmp byte [%1], %2
    54 0000A0C1 0F8588140000        <1>  jne L_error_incorrect_type
 13767 0000A0C7 498B7801                        mov rdi, qword [r8 + 1]
 13768 0000A0CB 490B7901                        or rdi, qword [r9 + 1]
 13769 0000A0CF E8F6120000                      call make_integer
 13770 0000A0D4 C9                              leave
 13771 0000A0D5 C22000                          ret AND_KILL_FRAME(2)
 13772                                  
 13773                                  L_code_ptr_logxor:
 13774 0000A0D8 C8000000                        enter 0, 0
 13775 0000A0DC 48837D1802                      cmp COUNT, 2
 13776 0000A0E1 0F85C9130000                    jne L_error_arg_count_2
 13777 0000A0E7 4C8B4520                        mov r8, PARAM(0)
 13778                                          assert_integer(r8)
    53 0000A0EB 41803811            <1>  cmp byte [%1], %2
    54 0000A0EF 0F855A140000        <1>  jne L_error_incorrect_type
 13779 0000A0F5 4C8B4D28                        mov r9, PARAM(1)
 13780                                          assert_integer(r9)
    53 0000A0F9 41803911            <1>  cmp byte [%1], %2
    54 0000A0FD 0F854C140000        <1>  jne L_error_incorrect_type
 13781 0000A103 498B7801                        mov rdi, qword [r8 + 1]
 13782 0000A107 49337901                        xor rdi, qword [r9 + 1]
 13783 0000A10B E8BA120000                      call make_integer
 13784                                          LEAVE
    49 0000A110 C9                  <1>  leave
 13785 0000A111 C22000                          ret AND_KILL_FRAME(2)
 13786                                  
 13787                                  L_code_ptr_lognot:
 13788 0000A114 C8000000                        enter 0, 0
 13789 0000A118 48837D1801                      cmp COUNT, 1
 13790 0000A11D 0F8558130000                    jne L_error_arg_count_1
 13791 0000A123 4C8B4520                        mov r8, PARAM(0)
 13792                                          assert_integer(r8)
    53 0000A127 41803811            <1>  cmp byte [%1], %2
    54 0000A12B 0F851E140000        <1>  jne L_error_incorrect_type
 13793 0000A131 498B7801                        mov rdi, qword [r8 + 1]
 13794 0000A135 48F7D7                          not rdi
 13795 0000A138 E88D120000                      call make_integer
 13796 0000A13D C9                              leave
 13797 0000A13E C21800                          ret AND_KILL_FRAME(1)
 13798                                  
 13799                                  
 13800                                  L_code_ptr_bin_apply:
 13801 0000A141 C8000000                        enter 0, 0
 13802 0000A145 48837D1802                      cmp COUNT, 2
 13803 0000A14A 0F8560130000                    jne L_error_arg_count_2
 13804 0000A150 488B4528                        mov rax, PARAM(1) ; list
 13805 0000A154 BB00000000                      mov rbx,0 ;list length count
 13806                                  .L_length_loop: ;this loop is to iterate through the list and count it's  (stop when encountering nil)
 13807 0000A159 803801                          cmp byte [rax], T_nil ;TODO: check if correct
 13808 0000A15C 7413                            je .L_length_loop_exit
 13809                                          assert_pair(rax)
    53 0000A15E 803821              <1>  cmp byte [%1], %2
    54 0000A161 0F85E8130000        <1>  jne L_error_incorrect_type
 13810 0000A167 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 13811 0000A16B 4883C301                        add rbx,1
 13812 0000A16F EBE8                            jmp .L_length_loop
 13813                                  .L_length_loop_exit: ;1381
 13814 0000A171 488B4528                        mov rax, PARAM(1) ; list
 13815                                          ;rbx contains list's length
 13816 0000A175 488B4D20                        mov rcx, PARAM(0) ; PROC
 13817                                          assert_closure(rcx)
    53 0000A179 803904              <1>  cmp byte [%1], %2
    54 0000A17C 0F85CD130000        <1>  jne L_error_incorrect_type
 13818 0000A182 BA00000000                      mov rdx, 0 ;i in (int i =0;i<list.length;i++)
 13819 0000A187 4C8B4508                        mov r8, RET_ADDR
 13820 0000A18B 488B6D00                        mov rbp, OLD_RBP
 13821 0000A18F 4889EC                          mov rsp, rbp
 13822                                  .L_loop: ;loop to push list's to stack. not done with push because we need to invert it's order on stack.
 13823 0000A192 4839DA                          cmp rdx, rbx ; rdx=index, rbx=count
 13824 0000A195 7422                            je .L_loop_exit
 13825 0000A197 4989D9                          mov r9, rbx
 13826 0000A19A 4929D1                          sub r9, rdx
 13827 0000A19D 4983C101                        add r9, 1
 13828 0000A1A1 4D6BC9F8                        imul r9, -8
 13829 0000A1A5 4901E9                          add r9, rbp
 13830                                          ;mov [rbp-8*(rbx - rdx + 1)], SOB_PAIR_CAR(rax)
 13831 0000A1A8 488B7801                        mov rdi, SOB_PAIR_CAR(rax)
 13832 0000A1AC 498939                          mov [r9], rdi
 13833                                          ;;above line should push parameters in backward order (for list (1 2 3) should push 1 2 3 to stack)
 13834 0000A1AF 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 13835 0000A1B3 4883C201                        add rdx, 1
 13836 0000A1B7 EBD9                            jmp .L_loop
 13837                                  .L_loop_exit:
 13838 0000A1B9 4989D9                          mov r9, rbx
 13839 0000A1BC 4983C101                        add r9,1
 13840 0000A1C0 4D6BC9F8                        imul r9, -8
 13841 0000A1C4 4901E9                          add r9,rbp
 13842                                         ; mov rsp, rbp- 8 * (rbx + 1) ;fix stack pointer to include added parameters in loop.
 13843 0000A1C7 4C89CC                          mov rsp, r9
 13844 0000A1CA 53                              push rbx
 13845 0000A1CB FF7101                          push SOB_CLOSURE_ENV(rcx)
 13846 0000A1CE 4150                            push r8
 13847 0000A1D0 FF6109                          jmp SOB_CLOSURE_CODE(rcx)
 13848                                  
 13849                                  
 13850                                  L_code_ptr_is_null:
 13851 0000A1D3 C8000000                        enter 0, 0
 13852 0000A1D7 48837D1801                      cmp COUNT, 1
 13853 0000A1DC 0F8599120000                    jne L_error_arg_count_1
 13854 0000A1E2 488B4520                        mov rax, PARAM(0)
 13855 0000A1E6 803801                          cmp byte [rax], T_nil
 13856 0000A1E9 750C                            jne .L_false
 13857 0000A1EB 48B8-                           mov rax, sob_boolean_true
 13857 0000A1ED [0300000000000000] 
 13858 0000A1F5 EB0A                            jmp .L_end
 13859                                  .L_false:
 13860 0000A1F7 48B8-                           mov rax, sob_boolean_false
 13860 0000A1F9 [0200000000000000] 
 13861                                  .L_end:
 13862 0000A201 C9                              leave
 13863 0000A202 C21800                          ret AND_KILL_FRAME(1)
 13864                                  
 13865                                  L_code_ptr_is_pair:
 13866 0000A205 C8000000                        enter 0, 0
 13867 0000A209 48837D1801                      cmp COUNT, 1
 13868 0000A20E 0F8567120000                    jne L_error_arg_count_1
 13869 0000A214 488B4520                        mov rax, PARAM(0)
 13870 0000A218 803821                          cmp byte [rax], T_pair
 13871 0000A21B 750C                            jne .L_false
 13872 0000A21D 48B8-                           mov rax, sob_boolean_true
 13872 0000A21F [0300000000000000] 
 13873 0000A227 EB0A                            jmp .L_end
 13874                                  .L_false:
 13875 0000A229 48B8-                           mov rax, sob_boolean_false
 13875 0000A22B [0200000000000000] 
 13876                                  .L_end:
 13877 0000A233 C9                              leave
 13878 0000A234 C21800                          ret AND_KILL_FRAME(1)
 13879                                          
 13880                                  L_code_ptr_is_void:
 13881 0000A237 C8000000                        enter 0, 0
 13882 0000A23B 48837D1801                      cmp COUNT, 1
 13883 0000A240 0F8535120000                    jne L_error_arg_count_1
 13884 0000A246 488B4520                        mov rax, PARAM(0)
 13885 0000A24A 803800                          cmp byte [rax], T_void
 13886 0000A24D 750C                            jne .L_false
 13887 0000A24F 48B8-                           mov rax, sob_boolean_true
 13887 0000A251 [0300000000000000] 
 13888 0000A259 EB0A                            jmp .L_end
 13889                                  .L_false:
 13890 0000A25B 48B8-                           mov rax, sob_boolean_false
 13890 0000A25D [0200000000000000] 
 13891                                  .L_end:
 13892 0000A265 C9                              leave
 13893 0000A266 C21800                          ret AND_KILL_FRAME(1)
 13894                                  
 13895                                  L_code_ptr_is_char:
 13896 0000A269 C8000000                        enter 0, 0
 13897 0000A26D 48837D1801                      cmp COUNT, 1
 13898 0000A272 0F8503120000                    jne L_error_arg_count_1
 13899 0000A278 488B4520                        mov rax, PARAM(0)
 13900 0000A27C 803802                          cmp byte [rax], T_char
 13901 0000A27F 750C                            jne .L_false
 13902 0000A281 48B8-                           mov rax, sob_boolean_true
 13902 0000A283 [0300000000000000] 
 13903 0000A28B EB0A                            jmp .L_end
 13904                                  .L_false:
 13905 0000A28D 48B8-                           mov rax, sob_boolean_false
 13905 0000A28F [0200000000000000] 
 13906                                  .L_end:
 13907 0000A297 C9                              leave
 13908 0000A298 C21800                          ret AND_KILL_FRAME(1)
 13909                                  
 13910                                  L_code_ptr_is_string:
 13911 0000A29B C8000000                        enter 0, 0
 13912 0000A29F 48837D1801                      cmp COUNT, 1
 13913 0000A2A4 0F85D1110000                    jne L_error_arg_count_1
 13914 0000A2AA 488B4520                        mov rax, PARAM(0)
 13915 0000A2AE 803803                          cmp byte [rax], T_string
 13916 0000A2B1 750C                            jne .L_false
 13917 0000A2B3 48B8-                           mov rax, sob_boolean_true
 13917 0000A2B5 [0300000000000000] 
 13918 0000A2BD EB0A                            jmp .L_end
 13919                                  .L_false:
 13920 0000A2BF 48B8-                           mov rax, sob_boolean_false
 13920 0000A2C1 [0200000000000000] 
 13921                                  .L_end:
 13922 0000A2C9 C9                              leave
 13923 0000A2CA C21800                          ret AND_KILL_FRAME(1)
 13924                                  
 13925                                  L_code_ptr_is_symbol:
 13926 0000A2CD C8000000                        enter 0, 0
 13927 0000A2D1 48837D1801                      cmp COUNT, 1
 13928 0000A2D6 0F859F110000                    jne L_error_arg_count_1
 13929 0000A2DC 4C8B4520                        mov r8, PARAM(0)
 13930 0000A2E0 41802040                        and byte [r8], T_symbol
 13931 0000A2E4 740C                            jz .L_false
 13932 0000A2E6 48B8-                           mov rax, sob_boolean_true
 13932 0000A2E8 [0300000000000000] 
 13933 0000A2F0 EB0A                            jmp .L_exit
 13934                                  .L_false:
 13935 0000A2F2 48B8-                           mov rax, sob_boolean_false
 13935 0000A2F4 [0200000000000000] 
 13936                                  .L_exit:
 13937 0000A2FC C9                              leave
 13938 0000A2FD C21800                          ret AND_KILL_FRAME(1)
 13939                                  
 13940                                  L_code_ptr_is_uninterned_symbol:
 13941 0000A300 C8000000                        enter 0, 0
 13942 0000A304 48837D1801                      cmp COUNT, 1
 13943 0000A309 0F856C110000                    jne L_error_arg_count_1
 13944 0000A30F 4C8B4520                        mov r8, PARAM(0)
 13945 0000A313 41803842                        cmp byte [r8], T_uninterned_symbol
 13946 0000A317 750C                            jne .L_false
 13947 0000A319 48B8-                           mov rax, sob_boolean_true
 13947 0000A31B [0300000000000000] 
 13948 0000A323 EB0A                            jmp .L_exit
 13949                                  .L_false:
 13950 0000A325 48B8-                           mov rax, sob_boolean_false
 13950 0000A327 [0200000000000000] 
 13951                                  .L_exit:
 13952 0000A32F C9                              leave
 13953 0000A330 C21800                          ret AND_KILL_FRAME(1)
 13954                                  
 13955                                  L_code_ptr_is_interned_symbol:
 13956 0000A333 C8000000                        enter 0, 0
 13957 0000A337 48837D1801                      cmp COUNT, 1
 13958 0000A33C 0F8539110000                    jne L_error_arg_count_1
 13959 0000A342 488B4520                        mov rax, PARAM(0)
 13960 0000A346 803841                          cmp byte [rax], T_interned_symbol
 13961 0000A349 750C                            jne .L_false
 13962 0000A34B 48B8-                           mov rax, sob_boolean_true
 13962 0000A34D [0300000000000000] 
 13963 0000A355 EB0A                            jmp .L_end
 13964                                  .L_false:
 13965 0000A357 48B8-                           mov rax, sob_boolean_false
 13965 0000A359 [0200000000000000] 
 13966                                  .L_end:
 13967 0000A361 C9                              leave
 13968 0000A362 C21800                          ret AND_KILL_FRAME(1)
 13969                                  
 13970                                  L_code_ptr_gensym:
 13971 0000A365 C8000000                        enter 0, 0
 13972 0000A369 48837D1800                      cmp COUNT, 0
 13973 0000A36E 0F85D2100000                    jne L_error_arg_count_0
 13974 0000A374 48FF0425[07130000]              inc qword [gensym_count]
 13975 0000A37C BF09000000                      mov rdi, (1 + 8)
 13976 0000A381 E81BF4FFFF                      call malloc
 13977 0000A386 C60042                          mov byte [rax], T_uninterned_symbol
 13978 0000A389 488B0C25[07130000]              mov rcx, qword [gensym_count]
 13979 0000A391 48894801                        mov qword [rax + 1], rcx
 13980 0000A395 C9                              leave
 13981 0000A396 C21000                          ret AND_KILL_FRAME(0)
 13982                                  
 13983                                  L_code_ptr_is_vector:
 13984 0000A399 C8000000                        enter 0, 0
 13985 0000A39D 48837D1801                      cmp COUNT, 1
 13986 0000A3A2 0F85D3100000                    jne L_error_arg_count_1
 13987 0000A3A8 488B4520                        mov rax, PARAM(0)
 13988 0000A3AC 803822                          cmp byte [rax], T_vector
 13989 0000A3AF 750C                            jne .L_false
 13990 0000A3B1 48B8-                           mov rax, sob_boolean_true
 13990 0000A3B3 [0300000000000000] 
 13991 0000A3BB EB0A                            jmp .L_end
 13992                                  .L_false:
 13993 0000A3BD 48B8-                           mov rax, sob_boolean_false
 13993 0000A3BF [0200000000000000] 
 13994                                  .L_end:
 13995 0000A3C7 C9                              leave
 13996 0000A3C8 C21800                          ret AND_KILL_FRAME(1)
 13997                                  
 13998                                  L_code_ptr_is_closure:
 13999 0000A3CB C8000000                        enter 0, 0
 14000 0000A3CF 48837D1801                      cmp COUNT, 1
 14001 0000A3D4 0F85A1100000                    jne L_error_arg_count_1
 14002 0000A3DA 488B4520                        mov rax, PARAM(0)
 14003 0000A3DE 803804                          cmp byte [rax], T_closure
 14004 0000A3E1 750C                            jne .L_false
 14005 0000A3E3 48B8-                           mov rax, sob_boolean_true
 14005 0000A3E5 [0300000000000000] 
 14006 0000A3ED EB0A                            jmp .L_end
 14007                                  .L_false:
 14008 0000A3EF 48B8-                           mov rax, sob_boolean_false
 14008 0000A3F1 [0200000000000000] 
 14009                                  .L_end:
 14010 0000A3F9 C9                              leave
 14011 0000A3FA C21800                          ret AND_KILL_FRAME(1)
 14012                                  
 14013                                  L_code_ptr_is_real:
 14014 0000A3FD C8000000                        enter 0, 0
 14015 0000A401 48837D1801                      cmp COUNT, 1
 14016 0000A406 0F856F100000                    jne L_error_arg_count_1
 14017 0000A40C 488B4520                        mov rax, PARAM(0)
 14018 0000A410 803813                          cmp byte [rax], T_real
 14019 0000A413 750C                            jne .L_false
 14020 0000A415 48B8-                           mov rax, sob_boolean_true
 14020 0000A417 [0300000000000000] 
 14021 0000A41F EB0A                            jmp .L_end
 14022                                  .L_false:
 14023 0000A421 48B8-                           mov rax, sob_boolean_false
 14023 0000A423 [0200000000000000] 
 14024                                  .L_end:
 14025 0000A42B C9                              leave
 14026 0000A42C C21800                          ret AND_KILL_FRAME(1)
 14027                                  
 14028                                  L_code_ptr_is_fraction:
 14029 0000A42F C8000000                        enter 0, 0
 14030 0000A433 48837D1801                      cmp COUNT, 1
 14031 0000A438 0F853D100000                    jne L_error_arg_count_1
 14032 0000A43E 488B4520                        mov rax, PARAM(0)
 14033 0000A442 803812                          cmp byte [rax], T_fraction
 14034 0000A445 750C                            jne .L_false
 14035 0000A447 48B8-                           mov rax, sob_boolean_true
 14035 0000A449 [0300000000000000] 
 14036 0000A451 EB0A                            jmp .L_end
 14037                                  .L_false:
 14038 0000A453 48B8-                           mov rax, sob_boolean_false
 14038 0000A455 [0200000000000000] 
 14039                                  .L_end:
 14040 0000A45D C9                              leave
 14041 0000A45E C21800                          ret AND_KILL_FRAME(1)
 14042                                  
 14043                                  L_code_ptr_is_boolean:
 14044 0000A461 C8000000                        enter 0, 0
 14045 0000A465 48837D1801                      cmp COUNT, 1
 14046 0000A46A 0F850B100000                    jne L_error_arg_count_1
 14047 0000A470 488B4520                        mov rax, PARAM(0)
 14048 0000A474 8A18                            mov bl, byte [rax]
 14049 0000A476 80E308                          and bl, T_boolean
 14050 0000A479 740C                            je .L_false
 14051 0000A47B 48B8-                           mov rax, sob_boolean_true
 14051 0000A47D [0300000000000000] 
 14052 0000A485 EB0A                            jmp .L_end
 14053                                  .L_false:
 14054 0000A487 48B8-                           mov rax, sob_boolean_false
 14054 0000A489 [0200000000000000] 
 14055                                  .L_end:
 14056 0000A491 C9                              leave
 14057 0000A492 C21800                          ret AND_KILL_FRAME(1)
 14058                                          
 14059                                  L_code_ptr_is_boolean_false:
 14060 0000A495 C8000000                        enter 0, 0
 14061 0000A499 48837D1801                      cmp COUNT, 1
 14062 0000A49E 0F85D70F0000                    jne L_error_arg_count_1
 14063 0000A4A4 488B4520                        mov rax, PARAM(0)
 14064 0000A4A8 8A18                            mov bl, byte [rax]
 14065 0000A4AA 80FB09                          cmp bl, T_boolean_false
 14066 0000A4AD 750C                            jne .L_false
 14067 0000A4AF 48B8-                           mov rax, sob_boolean_true
 14067 0000A4B1 [0300000000000000] 
 14068 0000A4B9 EB0A                            jmp .L_end
 14069                                  .L_false:
 14070 0000A4BB 48B8-                           mov rax, sob_boolean_false
 14070 0000A4BD [0200000000000000] 
 14071                                  .L_end:
 14072 0000A4C5 C9                              leave
 14073 0000A4C6 C21800                          ret AND_KILL_FRAME(1)
 14074                                  
 14075                                  L_code_ptr_is_boolean_true:
 14076 0000A4C9 C8000000                        enter 0, 0
 14077 0000A4CD 48837D1801                      cmp COUNT, 1
 14078 0000A4D2 0F85A30F0000                    jne L_error_arg_count_1
 14079 0000A4D8 488B4520                        mov rax, PARAM(0)
 14080 0000A4DC 8A18                            mov bl, byte [rax]
 14081 0000A4DE 80FB0A                          cmp bl, T_boolean_true
 14082 0000A4E1 750C                            jne .L_false
 14083 0000A4E3 48B8-                           mov rax, sob_boolean_true
 14083 0000A4E5 [0300000000000000] 
 14084 0000A4ED EB0A                            jmp .L_end
 14085                                  .L_false:
 14086 0000A4EF 48B8-                           mov rax, sob_boolean_false
 14086 0000A4F1 [0200000000000000] 
 14087                                  .L_end:
 14088 0000A4F9 C9                              leave
 14089 0000A4FA C21800                          ret AND_KILL_FRAME(1)
 14090                                  
 14091                                  L_code_ptr_is_number:
 14092 0000A4FD C8000000                        enter 0, 0
 14093 0000A501 48837D1801                      cmp COUNT, 1
 14094 0000A506 0F856F0F0000                    jne L_error_arg_count_1
 14095 0000A50C 488B4520                        mov rax, PARAM(0)
 14096 0000A510 8A18                            mov bl, byte [rax]
 14097 0000A512 80E310                          and bl, T_number
 14098 0000A515 740C                            jz .L_false
 14099 0000A517 48B8-                           mov rax, sob_boolean_true
 14099 0000A519 [0300000000000000] 
 14100 0000A521 EB0A                            jmp .L_end
 14101                                  .L_false:
 14102 0000A523 48B8-                           mov rax, sob_boolean_false
 14102 0000A525 [0200000000000000] 
 14103                                  .L_end:
 14104 0000A52D C9                              leave
 14105 0000A52E C21800                          ret AND_KILL_FRAME(1)
 14106                                          
 14107                                  L_code_ptr_is_collection:
 14108 0000A531 C8000000                        enter 0, 0
 14109 0000A535 48837D1801                      cmp COUNT, 1
 14110 0000A53A 0F853B0F0000                    jne L_error_arg_count_1
 14111 0000A540 488B4520                        mov rax, PARAM(0)
 14112 0000A544 8A18                            mov bl, byte [rax]
 14113 0000A546 80E320                          and bl, T_collection
 14114 0000A549 740C                            je .L_false
 14115 0000A54B 48B8-                           mov rax, sob_boolean_true
 14115 0000A54D [0300000000000000] 
 14116 0000A555 EB0A                            jmp .L_end
 14117                                  .L_false:
 14118 0000A557 48B8-                           mov rax, sob_boolean_false
 14118 0000A559 [0200000000000000] 
 14119                                  .L_end:
 14120 0000A561 C9                              leave
 14121 0000A562 C21800                          ret AND_KILL_FRAME(1)
 14122                                  
 14123                                  L_code_ptr_cons:
 14124 0000A565 C8000000                        enter 0, 0
 14125 0000A569 48837D1802                      cmp COUNT, 2
 14126 0000A56E 0F853C0F0000                    jne L_error_arg_count_2
 14127 0000A574 BF11000000                      mov rdi, (1 + 8 + 8)
 14128 0000A579 E823F2FFFF                      call malloc
 14129 0000A57E C60021                          mov byte [rax], T_pair
 14130 0000A581 488B5D20                        mov rbx, PARAM(0)
 14131 0000A585 48895801                        mov SOB_PAIR_CAR(rax), rbx
 14132 0000A589 488B5D28                        mov rbx, PARAM(1)
 14133 0000A58D 48895809                        mov SOB_PAIR_CDR(rax), rbx
 14134 0000A591 C9                              leave
 14135 0000A592 C22000                          ret AND_KILL_FRAME(2)
 14136                                  
 14137                                  L_code_ptr_display_sexpr:
 14138 0000A595 C8000000                        enter 0, 0
 14139 0000A599 48837D1801                      cmp COUNT, 1
 14140 0000A59E 0F85D70E0000                    jne L_error_arg_count_1
 14141 0000A5A4 488B7D20                        mov rdi, PARAM(0)
 14142 0000A5A8 E875F4FFFF                      call print_sexpr
 14143 0000A5AD 48B8-                           mov rax, sob_void
 14143 0000A5AF [0000000000000000] 
 14144 0000A5B7 C9                              leave
 14145 0000A5B8 C21800                          ret AND_KILL_FRAME(1)
 14146                                  
 14147                                  L_code_ptr_write_char:
 14148 0000A5BB C8000000                        enter 0, 0
 14149 0000A5BF 48837D1801                      cmp COUNT, 1
 14150 0000A5C4 0F85B10E0000                    jne L_error_arg_count_1
 14151 0000A5CA 488B4520                        mov rax, PARAM(0)
 14152                                          assert_char(rax)
    53 0000A5CE 803802              <1>  cmp byte [%1], %2
    54 0000A5D1 0F85780F0000        <1>  jne L_error_incorrect_type
 14153 0000A5D7 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 14154 0000A5DA 4825FF000000                    and rax, 255
 14155 0000A5E0 48BF-                           mov rdi, fmt_char
 14155 0000A5E2 [0F13000000000000] 
 14156 0000A5EA 4889C6                          mov rsi, rax
 14157 0000A5ED B800000000                      mov rax, 0
 14158                                          ENTER
    44 0000A5F2 C8000000            <1>  enter 0, 0
    45 0000A5F6 4883E4F0            <1>  and rsp, ~15
 14159 0000A5FA E8(00000000)                    call printf
 14160                                          LEAVE
    49 0000A5FF C9                  <1>  leave
 14161 0000A600 48B8-                           mov rax, sob_void
 14161 0000A602 [0000000000000000] 
 14162 0000A60A C9                              leave
 14163 0000A60B C21800                          ret AND_KILL_FRAME(1)
 14164                                  
 14165                                  L_code_ptr_car:
 14166 0000A60E C8000000                        enter 0, 0
 14167 0000A612 48837D1801                      cmp COUNT, 1
 14168 0000A617 0F855E0E0000                    jne L_error_arg_count_1
 14169 0000A61D 488B4520                        mov rax, PARAM(0)
 14170                                          assert_pair(rax)
    53 0000A621 803821              <1>  cmp byte [%1], %2
    54 0000A624 0F85250F0000        <1>  jne L_error_incorrect_type
 14171 0000A62A 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 14172 0000A62E C9                              leave
 14173 0000A62F C21800                          ret AND_KILL_FRAME(1)
 14174                                          
 14175                                  L_code_ptr_cdr:
 14176 0000A632 C8000000                        enter 0, 0
 14177 0000A636 48837D1801                      cmp COUNT, 1
 14178 0000A63B 0F853A0E0000                    jne L_error_arg_count_1
 14179 0000A641 488B4520                        mov rax, PARAM(0)
 14180                                          assert_pair(rax)
    53 0000A645 803821              <1>  cmp byte [%1], %2
    54 0000A648 0F85010F0000        <1>  jne L_error_incorrect_type
 14181 0000A64E 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 14182 0000A652 C9                              leave
 14183 0000A653 C21800                          ret AND_KILL_FRAME(1)
 14184                                          
 14185                                  L_code_ptr_string_length:
 14186 0000A656 C8000000                        enter 0, 0
 14187 0000A65A 48837D1801                      cmp COUNT, 1
 14188 0000A65F 0F85160E0000                    jne L_error_arg_count_1
 14189 0000A665 488B4520                        mov rax, PARAM(0)
 14190                                          assert_string(rax)
    53 0000A669 803803              <1>  cmp byte [%1], %2
    54 0000A66C 0F85DD0E0000        <1>  jne L_error_incorrect_type
 14191 0000A672 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 14192 0000A676 E84F0D0000                      call make_integer
 14193 0000A67B C9                              leave
 14194 0000A67C C21800                          ret AND_KILL_FRAME(1)
 14195                                  
 14196                                  L_code_ptr_vector_length:
 14197 0000A67F C8000000                        enter 0, 0
 14198 0000A683 48837D1801                      cmp COUNT, 1
 14199 0000A688 0F85ED0D0000                    jne L_error_arg_count_1
 14200 0000A68E 488B4520                        mov rax, PARAM(0)
 14201                                          assert_vector(rax)
    53 0000A692 803822              <1>  cmp byte [%1], %2
    54 0000A695 0F85B40E0000        <1>  jne L_error_incorrect_type
 14202 0000A69B 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 14203 0000A69F E8260D0000                      call make_integer
 14204 0000A6A4 C9                              leave
 14205 0000A6A5 C21800                          ret AND_KILL_FRAME(1)
 14206                                  
 14207                                  L_code_ptr_real_to_integer:
 14208 0000A6A8 C8000000                        enter 0, 0
 14209 0000A6AC 48837D1801                      cmp COUNT, 1
 14210 0000A6B1 0F85C40D0000                    jne L_error_arg_count_1
 14211 0000A6B7 488B5D20                        mov rbx, PARAM(0)
 14212                                          assert_real(rbx)
    53 0000A6BB 803B13              <1>  cmp byte [%1], %2
    54 0000A6BE 0F858B0E0000        <1>  jne L_error_incorrect_type
 14213 0000A6C4 F20F104301                      movsd xmm0, qword [rbx + 1]
 14214 0000A6C9 F2480F2CF8                      cvttsd2si rdi, xmm0
 14215 0000A6CE E8F70C0000                      call make_integer
 14216 0000A6D3 C9                              leave
 14217 0000A6D4 C21800                          ret AND_KILL_FRAME(1)
 14218                                  
 14219                                  L_code_ptr_exit:
 14220 0000A6D7 C8000000                        enter 0, 0
 14221 0000A6DB 48837D1800                      cmp COUNT, 0
 14222 0000A6E0 0F85600D0000                    jne L_error_arg_count_0
 14223 0000A6E6 B800000000                      mov rax, 0
 14224 0000A6EB E8(00000000)                    call exit
 14225                                  
 14226                                  L_code_ptr_integer_to_real:
 14227 0000A6F0 C8000000                        enter 0, 0
 14228 0000A6F4 48837D1801                      cmp COUNT, 1
 14229 0000A6F9 0F857C0D0000                    jne L_error_arg_count_1
 14230 0000A6FF 488B4520                        mov rax, PARAM(0)
 14231                                          assert_integer(rax)
    53 0000A703 803811              <1>  cmp byte [%1], %2
    54 0000A706 0F85430E0000        <1>  jne L_error_incorrect_type
 14232 0000A70C FF7001                          push qword [rax + 1]
 14233 0000A70F F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 14234 0000A715 E8980C0000                      call make_real
 14235 0000A71A C9                              leave
 14236 0000A71B C21800                          ret AND_KILL_FRAME(1)
 14237                                  
 14238                                  L_code_ptr_fraction_to_real:
 14239 0000A71E C8000000                        enter 0, 0
 14240 0000A722 48837D1801                      cmp COUNT, 1
 14241 0000A727 0F854E0D0000                    jne L_error_arg_count_1
 14242 0000A72D 488B4520                        mov rax, PARAM(0)
 14243                                          assert_fraction(rax)
    53 0000A731 803812              <1>  cmp byte [%1], %2
    54 0000A734 0F85150E0000        <1>  jne L_error_incorrect_type
 14244 0000A73A FF7001                          push qword [rax + 1]
 14245 0000A73D F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 14246 0000A743 FF7009                          push qword [rax + 1 + 8]
 14247 0000A746 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 14248 0000A74C F20F5EC1                        divsd xmm0, xmm1
 14249 0000A750 E85D0C0000                      call make_real
 14250 0000A755 C9                              leave
 14251 0000A756 C21800                          ret AND_KILL_FRAME(1)
 14252                                  
 14253                                  L_code_ptr_char_to_integer:
 14254 0000A759 C8000000                        enter 0, 0
 14255 0000A75D 48837D1801                      cmp COUNT, 1
 14256 0000A762 0F85130D0000                    jne L_error_arg_count_1
 14257 0000A768 488B4520                        mov rax, PARAM(0)
 14258                                          assert_char(rax)
    53 0000A76C 803802              <1>  cmp byte [%1], %2
    54 0000A76F 0F85DA0D0000        <1>  jne L_error_incorrect_type
 14259 0000A775 8A4001                          mov al, byte [rax + 1]
 14260 0000A778 4825FF000000                    and rax, 255
 14261 0000A77E 4889C7                          mov rdi, rax
 14262 0000A781 E8440C0000                      call make_integer
 14263 0000A786 C9                              leave
 14264 0000A787 C21800                          ret AND_KILL_FRAME(1)
 14265                                  
 14266                                  L_code_ptr_integer_to_fraction:
 14267 0000A78A C8000000                        enter 0, 0
 14268 0000A78E 48837D1801                      cmp COUNT, 1
 14269 0000A793 0F85E20C0000                    jne L_error_arg_count_1
 14270 0000A799 4C8B4520                        mov r8, PARAM(0)
 14271                                          assert_integer(r8)
    53 0000A79D 41803811            <1>  cmp byte [%1], %2
    54 0000A7A1 0F85A80D0000        <1>  jne L_error_incorrect_type
 14272 0000A7A7 BF11000000                      mov rdi, (1 + 8 + 8)
 14273 0000A7AC E8F0EFFFFF                      call malloc
 14274 0000A7B1 498B5801                        mov rbx, qword [r8 + 1]
 14275 0000A7B5 C60012                          mov byte [rax], T_fraction
 14276 0000A7B8 48895801                        mov qword [rax + 1], rbx
 14277 0000A7BC 48C7400901000000                mov qword [rax + 1 + 8], 1
 14278 0000A7C4 C9                              leave
 14279 0000A7C5 C21800                          ret AND_KILL_FRAME(1)
 14280                                  
 14281                                  L_code_ptr_integer_to_char:
 14282 0000A7C8 C8000000                        enter 0, 0
 14283 0000A7CC 48837D1801                      cmp COUNT, 1
 14284 0000A7D1 0F85A40C0000                    jne L_error_arg_count_1
 14285 0000A7D7 488B4520                        mov rax, PARAM(0)
 14286                                          assert_integer(rax)
    53 0000A7DB 803811              <1>  cmp byte [%1], %2
    54 0000A7DE 0F856B0D0000        <1>  jne L_error_incorrect_type
 14287 0000A7E4 488B5801                        mov rbx, qword [rax + 1]
 14288 0000A7E8 4883FB00                        cmp rbx, 0
 14289 0000A7EC 0F8EF20B0000                    jle L_error_integer_range
 14290 0000A7F2 4881FB00010000                  cmp rbx, 256
 14291 0000A7F9 0F8DE50B0000                    jge L_error_integer_range
 14292 0000A7FF BF02000000                      mov rdi, (1 + 1)
 14293 0000A804 E898EFFFFF                      call malloc
 14294 0000A809 C60002                          mov byte [rax], T_char
 14295 0000A80C 885801                          mov byte [rax + 1], bl
 14296 0000A80F C9                              leave
 14297 0000A810 C21800                          ret AND_KILL_FRAME(1)
 14298                                  
 14299                                  L_code_ptr_trng:
 14300 0000A813 C8000000                        enter 0, 0
 14301 0000A817 48837D1800                      cmp COUNT, 0
 14302 0000A81C 0F85240C0000                    jne L_error_arg_count_0
 14303 0000A822 480FC7F7                        rdrand rdi
 14304 0000A826 48D1EF                          shr rdi, 1
 14305 0000A829 E89C0B0000                      call make_integer
 14306 0000A82E C9                              leave
 14307 0000A82F C21000                          ret AND_KILL_FRAME(0)
 14308                                  
 14309                                  L_code_ptr_is_zero:
 14310 0000A832 C8000000                        enter 0, 0
 14311 0000A836 48837D1801                      cmp COUNT, 1
 14312 0000A83B 0F853A0C0000                    jne L_error_arg_count_1
 14313 0000A841 488B4520                        mov rax, PARAM(0)
 14314 0000A845 803811                          cmp byte [rax], T_integer
 14315 0000A848 740F                            je .L_integer
 14316 0000A84A 803812                          cmp byte [rax], T_fraction
 14317 0000A84D 7413                            je .L_fraction
 14318 0000A84F 803813                          cmp byte [rax], T_real
 14319 0000A852 7417                            je .L_real
 14320 0000A854 E9F60C0000                      jmp L_error_incorrect_type
 14321                                  .L_integer:
 14322 0000A859 4883780100                      cmp qword [rax + 1], 0
 14323 0000A85E 7429                            je .L_zero
 14324 0000A860 EB1B                            jmp .L_not_zero
 14325                                  .L_fraction:
 14326 0000A862 4883780100                      cmp qword [rax + 1], 0
 14327 0000A867 7420                            je .L_zero
 14328 0000A869 EB12                            jmp .L_not_zero
 14329                                  .L_real:
 14330 0000A86B 660FEFC0                        pxor xmm0, xmm0
 14331 0000A86F FF7001                          push qword [rax + 1]
 14332 0000A872 F20F100C24                      movsd xmm1, qword [rsp]
 14333 0000A877 660F2EC1                        ucomisd xmm0, xmm1
 14334 0000A87B 740C                            je .L_zero
 14335                                  .L_not_zero:
 14336 0000A87D 48B8-                           mov rax, sob_boolean_false
 14336 0000A87F [0200000000000000] 
 14337 0000A887 EB0A                            jmp .L_end
 14338                                  .L_zero:
 14339 0000A889 48B8-                           mov rax, sob_boolean_true
 14339 0000A88B [0300000000000000] 
 14340                                  .L_end:
 14341 0000A893 C9                              leave
 14342 0000A894 C21800                          ret AND_KILL_FRAME(1)
 14343                                  
 14344                                  L_code_ptr_is_integer:
 14345 0000A897 C8000000                        enter 0, 0
 14346 0000A89B 48837D1801                      cmp COUNT, 1
 14347 0000A8A0 0F85D50B0000                    jne L_error_arg_count_1
 14348 0000A8A6 488B4520                        mov rax, PARAM(0)
 14349 0000A8AA 803811                          cmp byte [rax], T_integer
 14350 0000A8AD 750C                            jne .L_false
 14351 0000A8AF 48B8-                           mov rax, sob_boolean_true
 14351 0000A8B1 [0300000000000000] 
 14352 0000A8B9 EB0A                            jmp .L_exit
 14353                                  .L_false:
 14354 0000A8BB 48B8-                           mov rax, sob_boolean_false
 14354 0000A8BD [0200000000000000] 
 14355                                  .L_exit:
 14356 0000A8C5 C9                              leave
 14357 0000A8C6 C21800                          ret AND_KILL_FRAME(1)
 14358                                  
 14359                                  L_code_ptr_raw_bin_add_rr:
 14360 0000A8C9 C8000000                        enter 0, 0
 14361 0000A8CD 48837D1802                      cmp COUNT, 2
 14362 0000A8D2 0F85D80B0000                    jne L_error_arg_count_2
 14363 0000A8D8 488B5D20                        mov rbx, PARAM(0)
 14364                                          assert_real(rbx)
    53 0000A8DC 803B13              <1>  cmp byte [%1], %2
    54 0000A8DF 0F856A0C0000        <1>  jne L_error_incorrect_type
 14365 0000A8E5 488B4D28                        mov rcx, PARAM(1)
 14366                                          assert_real(rcx)
    53 0000A8E9 803913              <1>  cmp byte [%1], %2
    54 0000A8EC 0F855D0C0000        <1>  jne L_error_incorrect_type
 14367 0000A8F2 F20F104301                      movsd xmm0, qword [rbx + 1]
 14368 0000A8F7 F20F104901                      movsd xmm1, qword [rcx + 1]
 14369 0000A8FC F20F58C1                        addsd xmm0, xmm1
 14370 0000A900 E8AD0A0000                      call make_real
 14371 0000A905 C9                              leave
 14372 0000A906 C22000                          ret AND_KILL_FRAME(2)
 14373                                  
 14374                                  L_code_ptr_raw_bin_sub_rr:
 14375 0000A909 C8000000                        enter 0, 0
 14376 0000A90D 48837D1802                      cmp COUNT, 2
 14377 0000A912 0F85980B0000                    jne L_error_arg_count_2
 14378 0000A918 488B5D20                        mov rbx, PARAM(0)
 14379                                          assert_real(rbx)
    53 0000A91C 803B13              <1>  cmp byte [%1], %2
    54 0000A91F 0F852A0C0000        <1>  jne L_error_incorrect_type
 14380 0000A925 488B4D28                        mov rcx, PARAM(1)
 14381                                          assert_real(rcx)
    53 0000A929 803913              <1>  cmp byte [%1], %2
    54 0000A92C 0F851D0C0000        <1>  jne L_error_incorrect_type
 14382 0000A932 F20F104301                      movsd xmm0, qword [rbx + 1]
 14383 0000A937 F20F104901                      movsd xmm1, qword [rcx + 1]
 14384 0000A93C F20F5CC1                        subsd xmm0, xmm1
 14385 0000A940 E86D0A0000                      call make_real
 14386 0000A945 C9                              leave
 14387 0000A946 C22000                          ret AND_KILL_FRAME(2)
 14388                                  
 14389                                  L_code_ptr_raw_bin_mul_rr:
 14390 0000A949 C8000000                        enter 0, 0
 14391 0000A94D 48837D1802                      cmp COUNT, 2
 14392 0000A952 0F85580B0000                    jne L_error_arg_count_2
 14393 0000A958 488B5D20                        mov rbx, PARAM(0)
 14394                                          assert_real(rbx)
    53 0000A95C 803B13              <1>  cmp byte [%1], %2
    54 0000A95F 0F85EA0B0000        <1>  jne L_error_incorrect_type
 14395 0000A965 488B4D28                        mov rcx, PARAM(1)
 14396                                          assert_real(rcx)
    53 0000A969 803913              <1>  cmp byte [%1], %2
    54 0000A96C 0F85DD0B0000        <1>  jne L_error_incorrect_type
 14397 0000A972 F20F104301                      movsd xmm0, qword [rbx + 1]
 14398 0000A977 F20F104901                      movsd xmm1, qword [rcx + 1]
 14399 0000A97C F20F59C1                        mulsd xmm0, xmm1
 14400 0000A980 E82D0A0000                      call make_real
 14401 0000A985 C9                              leave
 14402 0000A986 C22000                          ret AND_KILL_FRAME(2)
 14403                                  
 14404                                  L_code_ptr_raw_bin_div_rr:
 14405 0000A989 C8000000                        enter 0, 0
 14406 0000A98D 48837D1802                      cmp COUNT, 2
 14407 0000A992 0F85180B0000                    jne L_error_arg_count_2
 14408 0000A998 488B5D20                        mov rbx, PARAM(0)
 14409                                          assert_real(rbx)
    53 0000A99C 803B13              <1>  cmp byte [%1], %2
    54 0000A99F 0F85AA0B0000        <1>  jne L_error_incorrect_type
 14410 0000A9A5 488B4D28                        mov rcx, PARAM(1)
 14411                                          assert_real(rcx)
    53 0000A9A9 803913              <1>  cmp byte [%1], %2
    54 0000A9AC 0F859D0B0000        <1>  jne L_error_incorrect_type
 14412 0000A9B2 F20F104301                      movsd xmm0, qword [rbx + 1]
 14413 0000A9B7 F20F104901                      movsd xmm1, qword [rcx + 1]
 14414 0000A9BC 660FEFD2                        pxor xmm2, xmm2
 14415 0000A9C0 660F2ECA                        ucomisd xmm1, xmm2
 14416 0000A9C4 0F84B60B0000                    je L_error_division_by_zero
 14417 0000A9CA F20F5EC1                        divsd xmm0, xmm1
 14418 0000A9CE E8DF090000                      call make_real
 14419 0000A9D3 C9                              leave
 14420 0000A9D4 C22000                          ret AND_KILL_FRAME(2)
 14421                                  
 14422                                  L_code_ptr_raw_bin_add_zz:
 14423 0000A9D7 C8000000                	enter 0, 0
 14424 0000A9DB 48837D1802              	cmp COUNT, 2
 14425 0000A9E0 0F85CA0A0000            	jne L_error_arg_count_2
 14426 0000A9E6 4C8B4520                	mov r8, PARAM(0)
 14427                                  	assert_integer(r8)
    53 0000A9EA 41803811            <1>  cmp byte [%1], %2
    54 0000A9EE 0F855B0B0000        <1>  jne L_error_incorrect_type
 14428 0000A9F4 4C8B4D28                	mov r9, PARAM(1)
 14429                                  	assert_integer(r9)
    53 0000A9F8 41803911            <1>  cmp byte [%1], %2
    54 0000A9FC 0F854D0B0000        <1>  jne L_error_incorrect_type
 14430 0000AA02 498B7801                	mov rdi, qword [r8 + 1]
 14431 0000AA06 49037901                	add rdi, qword [r9 + 1]
 14432 0000AA0A E8BB090000              	call make_integer
 14433 0000AA0F C9                      	leave
 14434 0000AA10 C22000                  	ret AND_KILL_FRAME(2)
 14435                                  
 14436                                  L_code_ptr_raw_bin_add_qq:
 14437 0000AA13 C8000000                        enter 0, 0
 14438 0000AA17 48837D1802                      cmp COUNT, 2
 14439 0000AA1C 0F858E0A0000                    jne L_error_arg_count_2
 14440 0000AA22 4C8B4520                        mov r8, PARAM(0)
 14441                                          assert_fraction(r8)
    53 0000AA26 41803812            <1>  cmp byte [%1], %2
    54 0000AA2A 0F851F0B0000        <1>  jne L_error_incorrect_type
 14442 0000AA30 4C8B4D28                        mov r9, PARAM(1)
 14443                                          assert_fraction(r9)
    53 0000AA34 41803912            <1>  cmp byte [%1], %2
    54 0000AA38 0F85110B0000        <1>  jne L_error_incorrect_type
 14444 0000AA3E 498B4001                        mov rax, qword [r8 + 1] ; num1
 14445 0000AA42 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 14446 0000AA46 4899                            cqo
 14447 0000AA48 48F7EB                          imul rbx
 14448 0000AA4B 4889C6                          mov rsi, rax
 14449 0000AA4E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 14450 0000AA52 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 14451 0000AA56 4899                            cqo
 14452 0000AA58 48F7EB                          imul rbx
 14453 0000AA5B 4801C6                          add rsi, rax
 14454 0000AA5E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 14455 0000AA62 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 14456 0000AA66 4899                            cqo
 14457 0000AA68 48F7EB                          imul rbx
 14458 0000AA6B 4889C7                          mov rdi, rax
 14459 0000AA6E E8DE010000                      call normalize_fraction
 14460 0000AA73 C9                              leave
 14461 0000AA74 C22000                          ret AND_KILL_FRAME(2)
 14462                                  
 14463                                  L_code_ptr_raw_bin_sub_zz:
 14464 0000AA77 C8000000                	enter 0, 0
 14465 0000AA7B 48837D1802              	cmp COUNT, 2
 14466 0000AA80 0F852A0A0000            	jne L_error_arg_count_2
 14467 0000AA86 4C8B4520                	mov r8, PARAM(0)
 14468                                  	assert_integer(r8)
    53 0000AA8A 41803811            <1>  cmp byte [%1], %2
    54 0000AA8E 0F85BB0A0000        <1>  jne L_error_incorrect_type
 14469 0000AA94 4C8B4D28                	mov r9, PARAM(1)
 14470                                  	assert_integer(r9)
    53 0000AA98 41803911            <1>  cmp byte [%1], %2
    54 0000AA9C 0F85AD0A0000        <1>  jne L_error_incorrect_type
 14471 0000AAA2 498B7801                	mov rdi, qword [r8 + 1]
 14472 0000AAA6 492B7901                	sub rdi, qword [r9 + 1]
 14473 0000AAAA E81B090000              	call make_integer
 14474 0000AAAF C9                      	leave
 14475 0000AAB0 C22000                  	ret AND_KILL_FRAME(2)
 14476                                  
 14477                                  L_code_ptr_raw_bin_sub_qq:
 14478 0000AAB3 C8000000                        enter 0, 0
 14479 0000AAB7 48837D1802                      cmp COUNT, 2
 14480 0000AABC 0F85EE090000                    jne L_error_arg_count_2
 14481 0000AAC2 4C8B4520                        mov r8, PARAM(0)
 14482                                          assert_fraction(r8)
    53 0000AAC6 41803812            <1>  cmp byte [%1], %2
    54 0000AACA 0F857F0A0000        <1>  jne L_error_incorrect_type
 14483 0000AAD0 4C8B4D28                        mov r9, PARAM(1)
 14484                                          assert_fraction(r9)
    53 0000AAD4 41803912            <1>  cmp byte [%1], %2
    54 0000AAD8 0F85710A0000        <1>  jne L_error_incorrect_type
 14485 0000AADE 498B4001                        mov rax, qword [r8 + 1] ; num1
 14486 0000AAE2 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 14487 0000AAE6 4899                            cqo
 14488 0000AAE8 48F7EB                          imul rbx
 14489 0000AAEB 4889C6                          mov rsi, rax
 14490 0000AAEE 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 14491 0000AAF2 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 14492 0000AAF6 4899                            cqo
 14493 0000AAF8 48F7EB                          imul rbx
 14494 0000AAFB 4829C6                          sub rsi, rax
 14495 0000AAFE 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 14496 0000AB02 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 14497 0000AB06 4899                            cqo
 14498 0000AB08 48F7EB                          imul rbx
 14499 0000AB0B 4889C7                          mov rdi, rax
 14500 0000AB0E E83E010000                      call normalize_fraction
 14501 0000AB13 C9                              leave
 14502 0000AB14 C22000                          ret AND_KILL_FRAME(2)
 14503                                  
 14504                                  L_code_ptr_raw_bin_mul_zz:
 14505 0000AB17 C8000000                	enter 0, 0
 14506 0000AB1B 48837D1802              	cmp COUNT, 2
 14507 0000AB20 0F858A090000            	jne L_error_arg_count_2
 14508 0000AB26 4C8B4520                	mov r8, PARAM(0)
 14509                                  	assert_integer(r8)
    53 0000AB2A 41803811            <1>  cmp byte [%1], %2
    54 0000AB2E 0F851B0A0000        <1>  jne L_error_incorrect_type
 14510 0000AB34 4C8B4D28                	mov r9, PARAM(1)
 14511                                  	assert_integer(r9)
    53 0000AB38 41803911            <1>  cmp byte [%1], %2
    54 0000AB3C 0F850D0A0000        <1>  jne L_error_incorrect_type
 14512 0000AB42 4899                    	cqo
 14513 0000AB44 498B4001                	mov rax, qword [r8 + 1]
 14514 0000AB48 49F76101                	mul qword [r9 + 1]
 14515 0000AB4C 4889C7                  	mov rdi, rax
 14516 0000AB4F E876080000              	call make_integer
 14517 0000AB54 C9                      	leave
 14518 0000AB55 C22000                  	ret AND_KILL_FRAME(2)
 14519                                  
 14520                                  L_code_ptr_raw_bin_mul_qq:
 14521 0000AB58 C8000000                        enter 0, 0
 14522 0000AB5C 48837D1802                      cmp COUNT, 2
 14523 0000AB61 0F8549090000                    jne L_error_arg_count_2
 14524 0000AB67 4C8B4520                        mov r8, PARAM(0)
 14525                                          assert_fraction(r8)
    53 0000AB6B 41803812            <1>  cmp byte [%1], %2
    54 0000AB6F 0F85DA090000        <1>  jne L_error_incorrect_type
 14526 0000AB75 4C8B4D28                        mov r9, PARAM(1)
 14527                                          assert_fraction(r9)
    53 0000AB79 41803912            <1>  cmp byte [%1], %2
    54 0000AB7D 0F85CC090000        <1>  jne L_error_incorrect_type
 14528 0000AB83 498B4001                        mov rax, qword [r8 + 1] ; num1
 14529 0000AB87 498B5901                        mov rbx, qword [r9 + 1] ; num2
 14530 0000AB8B 4899                            cqo
 14531 0000AB8D 48F7EB                          imul rbx
 14532 0000AB90 4889C6                          mov rsi, rax
 14533 0000AB93 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 14534 0000AB97 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 14535 0000AB9B 4899                            cqo
 14536 0000AB9D 48F7EB                          imul rbx
 14537 0000ABA0 4889C7                          mov rdi, rax
 14538 0000ABA3 E8A9000000                      call normalize_fraction
 14539 0000ABA8 C9                              leave
 14540 0000ABA9 C22000                          ret AND_KILL_FRAME(2)
 14541                                          
 14542                                  L_code_ptr_raw_bin_div_zz:
 14543 0000ABAC C8000000                	enter 0, 0
 14544 0000ABB0 48837D1802              	cmp COUNT, 2
 14545 0000ABB5 0F85F5080000            	jne L_error_arg_count_2
 14546 0000ABBB 4C8B4520                	mov r8, PARAM(0)
 14547                                  	assert_integer(r8)
    53 0000ABBF 41803811            <1>  cmp byte [%1], %2
    54 0000ABC3 0F8586090000        <1>  jne L_error_incorrect_type
 14548 0000ABC9 4C8B4D28                	mov r9, PARAM(1)
 14549                                  	assert_integer(r9)
    53 0000ABCD 41803911            <1>  cmp byte [%1], %2
    54 0000ABD1 0F8578090000        <1>  jne L_error_incorrect_type
 14550 0000ABD7 498B7901                	mov rdi, qword [r9 + 1]
 14551 0000ABDB 4883FF00                	cmp rdi, 0
 14552 0000ABDF 0F849B090000            	je L_error_division_by_zero
 14553 0000ABE5 498B7001                	mov rsi, qword [r8 + 1]
 14554 0000ABE9 E863000000              	call normalize_fraction
 14555 0000ABEE C9                      	leave
 14556 0000ABEF C22000                  	ret AND_KILL_FRAME(2)
 14557                                  
 14558                                  L_code_ptr_raw_bin_div_qq:
 14559 0000ABF2 C8000000                        enter 0, 0
 14560 0000ABF6 48837D1802                      cmp COUNT, 2
 14561 0000ABFB 0F85AF080000                    jne L_error_arg_count_2
 14562 0000AC01 4C8B4520                        mov r8, PARAM(0)
 14563                                          assert_fraction(r8)
    53 0000AC05 41803812            <1>  cmp byte [%1], %2
    54 0000AC09 0F8540090000        <1>  jne L_error_incorrect_type
 14564 0000AC0F 4C8B4D28                        mov r9, PARAM(1)
 14565                                          assert_fraction(r9)
    53 0000AC13 41803912            <1>  cmp byte [%1], %2
    54 0000AC17 0F8532090000        <1>  jne L_error_incorrect_type
 14566 0000AC1D 4983790100                      cmp qword [r9 + 1], 0
 14567 0000AC22 0F8458090000                    je L_error_division_by_zero
 14568 0000AC28 498B4001                        mov rax, qword [r8 + 1] ; num1
 14569 0000AC2C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 14570 0000AC30 4899                            cqo
 14571 0000AC32 48F7EB                          imul rbx
 14572 0000AC35 4889C6                          mov rsi, rax
 14573 0000AC38 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 14574 0000AC3C 498B5901                        mov rbx, qword [r9 + 1] ; num2
 14575 0000AC40 4899                            cqo
 14576 0000AC42 48F7EB                          imul rbx
 14577 0000AC45 4889C7                          mov rdi, rax
 14578 0000AC48 E804000000                      call normalize_fraction
 14579 0000AC4D C9                              leave
 14580 0000AC4E C22000                          ret AND_KILL_FRAME(2)
 14581                                          
 14582                                  normalize_fraction:
 14583 0000AC51 56                              push rsi
 14584 0000AC52 57                              push rdi
 14585 0000AC53 E859000000                      call gcd
 14586 0000AC58 4889C3                          mov rbx, rax
 14587 0000AC5B 58                              pop rax
 14588 0000AC5C 4899                            cqo
 14589 0000AC5E 48F7FB                          idiv rbx
 14590 0000AC61 4989C0                          mov r8, rax
 14591 0000AC64 58                              pop rax
 14592 0000AC65 4899                            cqo
 14593 0000AC67 48F7FB                          idiv rbx
 14594 0000AC6A 4989C1                          mov r9, rax
 14595 0000AC6D 4983F900                        cmp r9, 0
 14596 0000AC71 741C                            je .L_zero
 14597 0000AC73 4983F801                        cmp r8, 1
 14598 0000AC77 7421                            je .L_int
 14599 0000AC79 BF11000000                      mov rdi, (1 + 8 + 8)
 14600 0000AC7E E81EEBFFFF                      call malloc
 14601 0000AC83 C60012                          mov byte [rax], T_fraction
 14602 0000AC86 4C894801                        mov qword [rax + 1], r9
 14603 0000AC8A 4C894009                        mov qword [rax + 1 + 8], r8
 14604 0000AC8E C3                              ret
 14605                                  .L_zero:
 14606 0000AC8F BF00000000                      mov rdi, 0
 14607 0000AC94 E831070000                      call make_integer
 14608 0000AC99 C3                              ret
 14609                                  .L_int:
 14610 0000AC9A 4C89CF                          mov rdi, r9
 14611 0000AC9D E828070000                      call make_integer
 14612 0000ACA2 C3                              ret
 14613                                  
 14614                                  iabs:
 14615 0000ACA3 4889F8                          mov rax, rdi
 14616 0000ACA6 4883F800                        cmp rax, 0
 14617 0000ACAA 7C01                            jl .Lneg
 14618 0000ACAC C3                              ret
 14619                                  .Lneg:
 14620 0000ACAD 48F7D8                          neg rax
 14621 0000ACB0 C3                              ret
 14622                                  
 14623                                  gcd:
 14624 0000ACB1 E8EDFFFFFF                      call iabs
 14625 0000ACB6 4889C3                          mov rbx, rax
 14626 0000ACB9 4889F7                          mov rdi, rsi
 14627 0000ACBC E8E2FFFFFF                      call iabs
 14628 0000ACC1 4883F800                        cmp rax, 0
 14629 0000ACC5 7502                            jne .L0
 14630 0000ACC7 4893                            xchg rax, rbx
 14631                                  .L0:
 14632 0000ACC9 4883FB00                        cmp rbx, 0
 14633 0000ACCD 740C                            je .L1
 14634 0000ACCF 4899                            cqo
 14635 0000ACD1 48F7F3                          div rbx
 14636 0000ACD4 4889D0                          mov rax, rdx
 14637 0000ACD7 4893                            xchg rax, rbx
 14638 0000ACD9 EBEE                            jmp .L0
 14639                                  .L1:
 14640 0000ACDB C3                              ret
 14641                                  
 14642                                  L_code_ptr_error:
 14643 0000ACDC C8000000                        enter 0, 0
 14644 0000ACE0 48837D1802                      cmp COUNT, 2
 14645 0000ACE5 0F85C5070000                    jne L_error_arg_count_2
 14646 0000ACEB 488B7520                        mov rsi, PARAM(0)
 14647                                          assert_interned_symbol(rsi)
    53 0000ACEF 803E41              <1>  cmp byte [%1], %2
    54 0000ACF2 0F8557080000        <1>  jne L_error_incorrect_type
 14648 0000ACF8 488B7528                        mov rsi, PARAM(1)
 14649                                          assert_string(rsi)
    53 0000ACFC 803E03              <1>  cmp byte [%1], %2
    54 0000ACFF 0F854A080000        <1>  jne L_error_incorrect_type
 14650 0000AD05 48BF-                           mov rdi, fmt_scheme_error_part_1
 14650 0000AD07 [6D14000000000000] 
 14651 0000AD0F B800000000                      mov rax, 0
 14652                                          ENTER
    44 0000AD14 C8000000            <1>  enter 0, 0
    45 0000AD18 4883E4F0            <1>  and rsp, ~15
 14653 0000AD1C E8(00000000)                    call printf
 14654                                          LEAVE
    49 0000AD21 C9                  <1>  leave
 14655 0000AD22 488B7D20                        mov rdi, PARAM(0)
 14656 0000AD26 E8F7ECFFFF                      call print_sexpr
 14657 0000AD2B 48BF-                           mov rdi, fmt_scheme_error_part_2
 14657 0000AD2D [8114000000000000] 
 14658 0000AD35 B800000000                      mov rax, 0
 14659                                          ENTER
    44 0000AD3A C8000000            <1>  enter 0, 0
    45 0000AD3E 4883E4F0            <1>  and rsp, ~15
 14660 0000AD42 E8(00000000)                    call printf
 14661                                          LEAVE
    49 0000AD47 C9                  <1>  leave
 14662 0000AD48 488B4528                        mov rax, PARAM(1)       ; sob_string
 14663 0000AD4C BE01000000                      mov rsi, 1              ; size = 1 byte
 14664 0000AD51 488B5001                        mov rdx, qword [rax + 1] ; length
 14665 0000AD55 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 14666 0000AD59 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 14667                                  	ENTER
    44 0000AD61 C8000000            <1>  enter 0, 0
    45 0000AD65 4883E4F0            <1>  and rsp, ~15
 14668 0000AD69 E8(00000000)                    call fwrite
 14669                                  	LEAVE
    49 0000AD6E C9                  <1>  leave
 14670 0000AD6F 48BF-                           mov rdi, fmt_scheme_error_part_3
 14670 0000AD71 [C314000000000000] 
 14671 0000AD79 B800000000                      mov rax, 0
 14672                                          ENTER
    44 0000AD7E C8000000            <1>  enter 0, 0
    45 0000AD82 4883E4F0            <1>  and rsp, ~15
 14673 0000AD86 E8(00000000)                    call printf
 14674                                          LEAVE
    49 0000AD8B C9                  <1>  leave
 14675 0000AD8C 48C7C0F7FFFFFF                  mov rax, -9
 14676 0000AD93 E8(00000000)                    call exit
 14677                                  
 14678                                  L_code_ptr_raw_less_than_rr:
 14679 0000AD98 C8000000                        enter 0, 0
 14680 0000AD9C 48837D1802                      cmp COUNT, 2
 14681 0000ADA1 0F8509070000                    jne L_error_arg_count_2
 14682 0000ADA7 488B7520                        mov rsi, PARAM(0)
 14683                                          assert_real(rsi)
    53 0000ADAB 803E13              <1>  cmp byte [%1], %2
    54 0000ADAE 0F859B070000        <1>  jne L_error_incorrect_type
 14684 0000ADB4 488B7D28                        mov rdi, PARAM(1)
 14685                                          assert_real(rdi)
    53 0000ADB8 803F13              <1>  cmp byte [%1], %2
    54 0000ADBB 0F858E070000        <1>  jne L_error_incorrect_type
 14686 0000ADC1 F20F104601                      movsd xmm0, qword [rsi + 1]
 14687 0000ADC6 F20F104F01                      movsd xmm1, qword [rdi + 1]
 14688 0000ADCB 660F2FC1                        comisd xmm0, xmm1
 14689 0000ADCF 730C                            jae .L_false
 14690 0000ADD1 48B8-                           mov rax, sob_boolean_true
 14690 0000ADD3 [0300000000000000] 
 14691 0000ADDB EB0A                            jmp .L_exit
 14692                                  .L_false:
 14693 0000ADDD 48B8-                           mov rax, sob_boolean_false
 14693 0000ADDF [0200000000000000] 
 14694                                  .L_exit:
 14695 0000ADE7 C9                              leave
 14696 0000ADE8 C22000                          ret AND_KILL_FRAME(2)
 14697                                          
 14698                                  L_code_ptr_raw_less_than_zz:
 14699 0000ADEB C8000000                	enter 0, 0
 14700 0000ADEF 48837D1802              	cmp COUNT, 2
 14701 0000ADF4 0F85B6060000            	jne L_error_arg_count_2
 14702 0000ADFA 4C8B4520                	mov r8, PARAM(0)
 14703                                  	assert_integer(r8)
    53 0000ADFE 41803811            <1>  cmp byte [%1], %2
    54 0000AE02 0F8547070000        <1>  jne L_error_incorrect_type
 14704 0000AE08 4C8B4D28                	mov r9, PARAM(1)
 14705                                  	assert_integer(r9)
    53 0000AE0C 41803911            <1>  cmp byte [%1], %2
    54 0000AE10 0F8539070000        <1>  jne L_error_incorrect_type
 14706 0000AE16 498B7801                	mov rdi, qword [r8 + 1]
 14707 0000AE1A 493B7901                	cmp rdi, qword [r9 + 1]
 14708 0000AE1E 7D0C                    	jge .L_false
 14709 0000AE20 48B8-                   	mov rax, sob_boolean_true
 14709 0000AE22 [0300000000000000] 
 14710 0000AE2A EB0A                    	jmp .L_exit
 14711                                  .L_false:
 14712 0000AE2C 48B8-                   	mov rax, sob_boolean_false
 14712 0000AE2E [0200000000000000] 
 14713                                  .L_exit:
 14714 0000AE36 C9                      	leave
 14715 0000AE37 C22000                  	ret AND_KILL_FRAME(2)
 14716                                  
 14717                                  L_code_ptr_raw_less_than_qq:
 14718 0000AE3A C8000000                        enter 0, 0
 14719 0000AE3E 48837D1802                      cmp COUNT, 2
 14720 0000AE43 0F8567060000                    jne L_error_arg_count_2
 14721 0000AE49 488B7520                        mov rsi, PARAM(0)
 14722                                          assert_fraction(rsi)
    53 0000AE4D 803E12              <1>  cmp byte [%1], %2
    54 0000AE50 0F85F9060000        <1>  jne L_error_incorrect_type
 14723 0000AE56 488B7D28                        mov rdi, PARAM(1)
 14724                                          assert_fraction(rdi)
    53 0000AE5A 803F12              <1>  cmp byte [%1], %2
    54 0000AE5D 0F85EC060000        <1>  jne L_error_incorrect_type
 14725 0000AE63 488B4601                        mov rax, qword [rsi + 1] ; num1
 14726 0000AE67 4899                            cqo
 14727 0000AE69 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 14728 0000AE6D 4889C1                          mov rcx, rax
 14729 0000AE70 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 14730 0000AE74 4899                            cqo
 14731 0000AE76 48F76F01                        imul qword [rdi + 1]          ; num2
 14732 0000AE7A 4829C1                          sub rcx, rax
 14733 0000AE7D 7D0C                            jge .L_false
 14734 0000AE7F 48B8-                           mov rax, sob_boolean_true
 14734 0000AE81 [0300000000000000] 
 14735 0000AE89 EB0A                            jmp .L_exit
 14736                                  .L_false:
 14737 0000AE8B 48B8-                           mov rax, sob_boolean_false
 14737 0000AE8D [0200000000000000] 
 14738                                  .L_exit:
 14739 0000AE95 C9                              leave
 14740 0000AE96 C22000                          ret AND_KILL_FRAME(2)
 14741                                  
 14742                                  L_code_ptr_raw_equal_rr:
 14743 0000AE99 C8000000                        enter 0, 0
 14744 0000AE9D 48837D1802                      cmp COUNT, 2
 14745 0000AEA2 0F8508060000                    jne L_error_arg_count_2
 14746 0000AEA8 488B7520                        mov rsi, PARAM(0)
 14747                                          assert_real(rsi)
    53 0000AEAC 803E13              <1>  cmp byte [%1], %2
    54 0000AEAF 0F859A060000        <1>  jne L_error_incorrect_type
 14748 0000AEB5 488B7D28                        mov rdi, PARAM(1)
 14749                                          assert_real(rdi)
    53 0000AEB9 803F13              <1>  cmp byte [%1], %2
    54 0000AEBC 0F858D060000        <1>  jne L_error_incorrect_type
 14750 0000AEC2 F20F104601                      movsd xmm0, qword [rsi + 1]
 14751 0000AEC7 F20F104F01                      movsd xmm1, qword [rdi + 1]
 14752 0000AECC 660F2FC1                        comisd xmm0, xmm1
 14753 0000AED0 750C                            jne .L_false
 14754 0000AED2 48B8-                           mov rax, sob_boolean_true
 14754 0000AED4 [0300000000000000] 
 14755 0000AEDC EB0A                            jmp .L_exit
 14756                                  .L_false:
 14757 0000AEDE 48B8-                           mov rax, sob_boolean_false
 14757 0000AEE0 [0200000000000000] 
 14758                                  .L_exit:
 14759 0000AEE8 C9                              leave
 14760 0000AEE9 C22000                          ret AND_KILL_FRAME(2)
 14761                                          
 14762                                  L_code_ptr_raw_equal_zz:
 14763 0000AEEC C8000000                	enter 0, 0
 14764 0000AEF0 48837D1802              	cmp COUNT, 2
 14765 0000AEF5 0F85B5050000            	jne L_error_arg_count_2
 14766 0000AEFB 4C8B4520                	mov r8, PARAM(0)
 14767                                  	assert_integer(r8)
    53 0000AEFF 41803811            <1>  cmp byte [%1], %2
    54 0000AF03 0F8546060000        <1>  jne L_error_incorrect_type
 14768 0000AF09 4C8B4D28                	mov r9, PARAM(1)
 14769                                  	assert_integer(r9)
    53 0000AF0D 41803911            <1>  cmp byte [%1], %2
    54 0000AF11 0F8538060000        <1>  jne L_error_incorrect_type
 14770 0000AF17 498B7801                	mov rdi, qword [r8 + 1]
 14771 0000AF1B 493B7901                	cmp rdi, qword [r9 + 1]
 14772 0000AF1F 750C                    	jne .L_false
 14773 0000AF21 48B8-                   	mov rax, sob_boolean_true
 14773 0000AF23 [0300000000000000] 
 14774 0000AF2B EB0A                    	jmp .L_exit
 14775                                  .L_false:
 14776 0000AF2D 48B8-                   	mov rax, sob_boolean_false
 14776 0000AF2F [0200000000000000] 
 14777                                  .L_exit:
 14778 0000AF37 C9                      	leave
 14779 0000AF38 C22000                  	ret AND_KILL_FRAME(2)
 14780                                  
 14781                                  L_code_ptr_raw_equal_qq:
 14782 0000AF3B C8000000                        enter 0, 0
 14783 0000AF3F 48837D1802                      cmp COUNT, 2
 14784 0000AF44 0F8566050000                    jne L_error_arg_count_2
 14785 0000AF4A 488B7520                        mov rsi, PARAM(0)
 14786                                          assert_fraction(rsi)
    53 0000AF4E 803E12              <1>  cmp byte [%1], %2
    54 0000AF51 0F85F8050000        <1>  jne L_error_incorrect_type
 14787 0000AF57 488B7D28                        mov rdi, PARAM(1)
 14788                                          assert_fraction(rdi)
    53 0000AF5B 803F12              <1>  cmp byte [%1], %2
    54 0000AF5E 0F85EB050000        <1>  jne L_error_incorrect_type
 14789 0000AF64 488B4601                        mov rax, qword [rsi + 1] ; num1
 14790 0000AF68 4899                            cqo
 14791 0000AF6A 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 14792 0000AF6E 4889C1                          mov rcx, rax
 14793 0000AF71 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 14794 0000AF75 4899                            cqo
 14795 0000AF77 48F76F01                        imul qword [rdi + 1]          ; num2
 14796 0000AF7B 4829C1                          sub rcx, rax
 14797 0000AF7E 750C                            jne .L_false
 14798 0000AF80 48B8-                           mov rax, sob_boolean_true
 14798 0000AF82 [0300000000000000] 
 14799 0000AF8A EB0A                            jmp .L_exit
 14800                                  .L_false:
 14801 0000AF8C 48B8-                           mov rax, sob_boolean_false
 14801 0000AF8E [0200000000000000] 
 14802                                  .L_exit:
 14803 0000AF96 C9                              leave
 14804 0000AF97 C22000                          ret AND_KILL_FRAME(2)
 14805                                  
 14806                                  L_code_ptr_quotient:
 14807 0000AF9A C8000000                        enter 0, 0
 14808 0000AF9E 48837D1802                      cmp COUNT, 2
 14809 0000AFA3 0F8507050000                    jne L_error_arg_count_2
 14810 0000AFA9 488B7520                        mov rsi, PARAM(0)
 14811                                          assert_integer(rsi)
    53 0000AFAD 803E11              <1>  cmp byte [%1], %2
    54 0000AFB0 0F8599050000        <1>  jne L_error_incorrect_type
 14812 0000AFB6 488B7D28                        mov rdi, PARAM(1)
 14813                                          assert_integer(rdi)
    53 0000AFBA 803F11              <1>  cmp byte [%1], %2
    54 0000AFBD 0F858C050000        <1>  jne L_error_incorrect_type
 14814 0000AFC3 488B4601                        mov rax, qword [rsi + 1]
 14815 0000AFC7 488B5F01                        mov rbx, qword [rdi + 1]
 14816 0000AFCB 4883FB00                        cmp rbx, 0
 14817 0000AFCF 0F84AB050000                    je L_error_division_by_zero
 14818 0000AFD5 4899                            cqo
 14819 0000AFD7 48F7FB                          idiv rbx
 14820 0000AFDA 4889C7                          mov rdi, rax
 14821 0000AFDD E8E8030000                      call make_integer
 14822 0000AFE2 C9                              leave
 14823 0000AFE3 C22000                          ret AND_KILL_FRAME(2)
 14824                                          
 14825                                  L_code_ptr_remainder:
 14826 0000AFE6 C8000000                        enter 0, 0
 14827 0000AFEA 48837D1802                      cmp COUNT, 2
 14828 0000AFEF 0F85BB040000                    jne L_error_arg_count_2
 14829 0000AFF5 488B7520                        mov rsi, PARAM(0)
 14830                                          assert_integer(rsi)
    53 0000AFF9 803E11              <1>  cmp byte [%1], %2
    54 0000AFFC 0F854D050000        <1>  jne L_error_incorrect_type
 14831 0000B002 488B7D28                        mov rdi, PARAM(1)
 14832                                          assert_integer(rdi)
    53 0000B006 803F11              <1>  cmp byte [%1], %2
    54 0000B009 0F8540050000        <1>  jne L_error_incorrect_type
 14833 0000B00F 488B4601                        mov rax, qword [rsi + 1]
 14834 0000B013 488B5F01                        mov rbx, qword [rdi + 1]
 14835 0000B017 4883FB00                        cmp rbx, 0
 14836 0000B01B 0F845F050000                    je L_error_division_by_zero
 14837 0000B021 4899                            cqo
 14838 0000B023 48F7FB                          idiv rbx
 14839 0000B026 4889D7                          mov rdi, rdx
 14840 0000B029 E89C030000                      call make_integer
 14841 0000B02E C9                              leave
 14842 0000B02F C22000                          ret AND_KILL_FRAME(2)
 14843                                  
 14844                                  L_code_ptr_set_car:
 14845 0000B032 C8000000                        enter 0, 0
 14846 0000B036 48837D1802                      cmp COUNT, 2
 14847 0000B03B 0F856F040000                    jne L_error_arg_count_2
 14848 0000B041 488B4520                        mov rax, PARAM(0)
 14849                                          assert_pair(rax)
    53 0000B045 803821              <1>  cmp byte [%1], %2
    54 0000B048 0F8501050000        <1>  jne L_error_incorrect_type
 14850 0000B04E 488B5D28                        mov rbx, PARAM(1)
 14851 0000B052 48895801                        mov SOB_PAIR_CAR(rax), rbx
 14852 0000B056 48B8-                           mov rax, sob_void
 14852 0000B058 [0000000000000000] 
 14853 0000B060 C9                              leave
 14854 0000B061 C22000                          ret AND_KILL_FRAME(2)
 14855                                  
 14856                                  L_code_ptr_set_cdr:
 14857 0000B064 C8000000                        enter 0, 0
 14858 0000B068 48837D1802                      cmp COUNT, 2
 14859 0000B06D 0F853D040000                    jne L_error_arg_count_2
 14860 0000B073 488B4520                        mov rax, PARAM(0)
 14861                                          assert_pair(rax)
    53 0000B077 803821              <1>  cmp byte [%1], %2
    54 0000B07A 0F85CF040000        <1>  jne L_error_incorrect_type
 14862 0000B080 488B5D28                        mov rbx, PARAM(1)
 14863 0000B084 48895809                        mov SOB_PAIR_CDR(rax), rbx
 14864 0000B088 48B8-                           mov rax, sob_void
 14864 0000B08A [0000000000000000] 
 14865 0000B092 C9                              leave
 14866 0000B093 C22000                          ret AND_KILL_FRAME(2)
 14867                                  
 14868                                  L_code_ptr_string_ref:
 14869 0000B096 C8000000                        enter 0, 0
 14870 0000B09A 48837D1802                      cmp COUNT, 2
 14871 0000B09F 0F850B040000                    jne L_error_arg_count_2
 14872 0000B0A5 488B7D20                        mov rdi, PARAM(0)
 14873                                          assert_string(rdi)
    53 0000B0A9 803F03              <1>  cmp byte [%1], %2
    54 0000B0AC 0F859D040000        <1>  jne L_error_incorrect_type
 14874 0000B0B2 488B7528                        mov rsi, PARAM(1)
 14875                                          assert_integer(rsi)
    53 0000B0B6 803E11              <1>  cmp byte [%1], %2
    54 0000B0B9 0F8590040000        <1>  jne L_error_incorrect_type
 14876 0000B0BF 488B5701                        mov rdx, qword [rdi + 1]
 14877 0000B0C3 488B4E01                        mov rcx, qword [rsi + 1]
 14878 0000B0C7 4839D1                          cmp rcx, rdx
 14879 0000B0CA 0F8D14030000                    jge L_error_integer_range
 14880 0000B0D0 4883F900                        cmp rcx, 0
 14881 0000B0D4 0F8C0A030000                    jl L_error_integer_range
 14882 0000B0DA 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 14883 0000B0DE BF02000000                      mov rdi, 2
 14884 0000B0E3 E8B9E6FFFF                      call malloc
 14885 0000B0E8 C60002                          mov byte [rax], T_char
 14886 0000B0EB 885801                          mov byte [rax + 1], bl
 14887 0000B0EE C9                              leave
 14888 0000B0EF C22000                          ret AND_KILL_FRAME(2)
 14889                                  
 14890                                  L_code_ptr_vector_ref:
 14891 0000B0F2 C8000000                        enter 0, 0
 14892 0000B0F6 48837D1802                      cmp COUNT, 2
 14893 0000B0FB 0F85AF030000                    jne L_error_arg_count_2
 14894 0000B101 488B7D20                        mov rdi, PARAM(0)
 14895                                          assert_vector(rdi)
    53 0000B105 803F22              <1>  cmp byte [%1], %2
    54 0000B108 0F8541040000        <1>  jne L_error_incorrect_type
 14896 0000B10E 488B7528                        mov rsi, PARAM(1)
 14897                                          assert_integer(rsi)
    53 0000B112 803E11              <1>  cmp byte [%1], %2
    54 0000B115 0F8534040000        <1>  jne L_error_incorrect_type
 14898 0000B11B 488B5701                        mov rdx, qword [rdi + 1]
 14899 0000B11F 488B4E01                        mov rcx, qword [rsi + 1]
 14900 0000B123 4839D1                          cmp rcx, rdx
 14901 0000B126 0F8DB8020000                    jge L_error_integer_range
 14902 0000B12C 4883F900                        cmp rcx, 0
 14903 0000B130 0F8CAE020000                    jl L_error_integer_range
 14904 0000B136 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 14905 0000B13B C9                              leave
 14906 0000B13C C22000                          ret AND_KILL_FRAME(2)
 14907                                  
 14908                                  L_code_ptr_vector_set:
 14909 0000B13F C8000000                        enter 0, 0
 14910 0000B143 48837D1803                      cmp COUNT, 3
 14911 0000B148 0F85CC030000                    jne L_error_arg_count_3
 14912 0000B14E 488B7D20                        mov rdi, PARAM(0)
 14913                                          assert_vector(rdi)
    53 0000B152 803F22              <1>  cmp byte [%1], %2
    54 0000B155 0F85F4030000        <1>  jne L_error_incorrect_type
 14914 0000B15B 488B7528                        mov rsi, PARAM(1)
 14915                                          assert_integer(rsi)
    53 0000B15F 803E11              <1>  cmp byte [%1], %2
    54 0000B162 0F85E7030000        <1>  jne L_error_incorrect_type
 14916 0000B168 488B5701                        mov rdx, qword [rdi + 1]
 14917 0000B16C 488B4E01                        mov rcx, qword [rsi + 1]
 14918 0000B170 4839D1                          cmp rcx, rdx
 14919 0000B173 0F8D6B020000                    jge L_error_integer_range
 14920 0000B179 4883F900                        cmp rcx, 0
 14921 0000B17D 0F8C61020000                    jl L_error_integer_range
 14922 0000B183 488B4530                        mov rax, PARAM(2)
 14923 0000B187 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 14924 0000B18C 48B8-                           mov rax, sob_void
 14924 0000B18E [0000000000000000] 
 14925 0000B196 C9                              leave
 14926 0000B197 C22800                          ret AND_KILL_FRAME(3)
 14927                                  
 14928                                  L_code_ptr_string_set:
 14929 0000B19A C8000000                        enter 0, 0
 14930 0000B19E 48837D1803                      cmp COUNT, 3
 14931 0000B1A3 0F8571030000                    jne L_error_arg_count_3
 14932 0000B1A9 488B7D20                        mov rdi, PARAM(0)
 14933                                          assert_string(rdi)
    53 0000B1AD 803F03              <1>  cmp byte [%1], %2
    54 0000B1B0 0F8599030000        <1>  jne L_error_incorrect_type
 14934 0000B1B6 488B7528                        mov rsi, PARAM(1)
 14935                                          assert_integer(rsi)
    53 0000B1BA 803E11              <1>  cmp byte [%1], %2
    54 0000B1BD 0F858C030000        <1>  jne L_error_incorrect_type
 14936 0000B1C3 488B5701                        mov rdx, qword [rdi + 1]
 14937 0000B1C7 488B4E01                        mov rcx, qword [rsi + 1]
 14938 0000B1CB 4839D1                          cmp rcx, rdx
 14939 0000B1CE 0F8D10020000                    jge L_error_integer_range
 14940 0000B1D4 4883F900                        cmp rcx, 0
 14941 0000B1D8 0F8C06020000                    jl L_error_integer_range
 14942 0000B1DE 488B4530                        mov rax, PARAM(2)
 14943                                          assert_char(rax)
    53 0000B1E2 803802              <1>  cmp byte [%1], %2
    54 0000B1E5 0F8564030000        <1>  jne L_error_incorrect_type
 14944 0000B1EB 8A4001                          mov al, byte [rax + 1]
 14945 0000B1EE 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 14946 0000B1F2 48B8-                           mov rax, sob_void
 14946 0000B1F4 [0000000000000000] 
 14947 0000B1FC C9                              leave
 14948 0000B1FD C22800                          ret AND_KILL_FRAME(3)
 14949                                  
 14950                                  L_code_ptr_make_vector:
 14951 0000B200 C8000000                        enter 0, 0
 14952 0000B204 48837D1802                      cmp COUNT, 2
 14953 0000B209 0F85A1020000                    jne L_error_arg_count_2
 14954 0000B20F 488B4D20                        mov rcx, PARAM(0)
 14955                                          assert_integer(rcx)
    53 0000B213 803911              <1>  cmp byte [%1], %2
    54 0000B216 0F8533030000        <1>  jne L_error_incorrect_type
 14956 0000B21C 488B4901                        mov rcx, qword [rcx + 1]
 14957 0000B220 4883F900                        cmp rcx, 0
 14958 0000B224 0F8CBA010000                    jl L_error_integer_range
 14959 0000B22A 488B5528                        mov rdx, PARAM(1)
 14960 0000B22E 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 14961 0000B236 E866E5FFFF                      call malloc
 14962 0000B23B C60022                          mov byte [rax], T_vector
 14963 0000B23E 48894801                        mov qword [rax + 1], rcx
 14964 0000B242 41B800000000                    mov r8, 0
 14965                                  .L0:
 14966 0000B248 4939C8                          cmp r8, rcx
 14967 0000B24B 740A                            je .L1
 14968 0000B24D 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 14969 0000B252 49FFC0                          inc r8
 14970 0000B255 EBF1                            jmp .L0
 14971                                  .L1:
 14972 0000B257 C9                              leave
 14973 0000B258 C22000                          ret AND_KILL_FRAME(2)
 14974                                          
 14975                                  L_code_ptr_make_string:
 14976 0000B25B C8000000                        enter 0, 0
 14977 0000B25F 48837D1802                      cmp COUNT, 2
 14978 0000B264 0F8546020000                    jne L_error_arg_count_2
 14979 0000B26A 488B4D20                        mov rcx, PARAM(0)
 14980                                          assert_integer(rcx)
    53 0000B26E 803911              <1>  cmp byte [%1], %2
    54 0000B271 0F85D8020000        <1>  jne L_error_incorrect_type
 14981 0000B277 488B4901                        mov rcx, qword [rcx + 1]
 14982 0000B27B 4883F900                        cmp rcx, 0
 14983 0000B27F 0F8C5F010000                    jl L_error_integer_range
 14984 0000B285 488B5528                        mov rdx, PARAM(1)
 14985                                          assert_char(rdx)
    53 0000B289 803A02              <1>  cmp byte [%1], %2
    54 0000B28C 0F85BD020000        <1>  jne L_error_incorrect_type
 14986 0000B292 8A5201                          mov dl, byte [rdx + 1]
 14987 0000B295 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 14988 0000B299 E803E5FFFF                      call malloc
 14989 0000B29E C60003                          mov byte [rax], T_string
 14990 0000B2A1 48894801                        mov qword [rax + 1], rcx
 14991 0000B2A5 41B800000000                    mov r8, 0
 14992                                  .L0:
 14993 0000B2AB 4939C8                          cmp r8, rcx
 14994 0000B2AE 740A                            je .L1
 14995 0000B2B0 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 14996 0000B2B5 49FFC0                          inc r8
 14997 0000B2B8 EBF1                            jmp .L0
 14998                                  .L1:
 14999 0000B2BA C9                              leave
 15000 0000B2BB C22000                          ret AND_KILL_FRAME(2)
 15001                                  
 15002                                  L_code_ptr_numerator:
 15003 0000B2BE C8000000                        enter 0, 0
 15004 0000B2C2 48837D1801                      cmp COUNT, 1
 15005 0000B2C7 0F85AE010000                    jne L_error_arg_count_1
 15006 0000B2CD 488B4520                        mov rax, PARAM(0)
 15007                                          assert_fraction(rax)
    53 0000B2D1 803812              <1>  cmp byte [%1], %2
    54 0000B2D4 0F8575020000        <1>  jne L_error_incorrect_type
 15008 0000B2DA 488B7801                        mov rdi, qword [rax + 1]
 15009 0000B2DE E8E7000000                      call make_integer
 15010 0000B2E3 C9                              leave
 15011 0000B2E4 C21800                          ret AND_KILL_FRAME(1)
 15012                                          
 15013                                  L_code_ptr_denominator:
 15014 0000B2E7 C8000000                        enter 0, 0
 15015 0000B2EB 48837D1801                      cmp COUNT, 1
 15016 0000B2F0 0F8585010000                    jne L_error_arg_count_1
 15017 0000B2F6 488B4520                        mov rax, PARAM(0)
 15018                                          assert_fraction(rax)
    53 0000B2FA 803812              <1>  cmp byte [%1], %2
    54 0000B2FD 0F854C020000        <1>  jne L_error_incorrect_type
 15019 0000B303 488B7809                        mov rdi, qword [rax + 1 + 8]
 15020 0000B307 E8BE000000                      call make_integer
 15021 0000B30C C9                              leave
 15022 0000B30D C21800                          ret AND_KILL_FRAME(1)
 15023                                  
 15024                                  L_code_ptr_is_eq:
 15025 0000B310 C8000000                	enter 0, 0
 15026 0000B314 48837D1802              	cmp COUNT, 2
 15027 0000B319 0F8591010000            	jne L_error_arg_count_2
 15028 0000B31F 488B7D20                	mov rdi, PARAM(0)
 15029 0000B323 488B7528                	mov rsi, PARAM(1)
 15030 0000B327 4839F7                  	cmp rdi, rsi
 15031 0000B32A 746C                    	je .L_eq_true
 15032 0000B32C 8A17                    	mov dl, byte [rdi]
 15033 0000B32E 3A16                    	cmp dl, byte [rsi]
 15034 0000B330 7572                    	jne .L_eq_false
 15035 0000B332 80FA02                  	cmp dl, T_char
 15036 0000B335 7459                    	je .L_char
 15037 0000B337 80FA41                  	cmp dl, T_interned_symbol
 15038 0000B33A 7440                    	je .L_interned_symbol
 15039 0000B33C 80FA42                          cmp dl, T_uninterned_symbol
 15040 0000B33F 7443                            je .L_uninterned_symbol
 15041 0000B341 80FA13                  	cmp dl, T_real
 15042 0000B344 742E                    	je .L_real
 15043 0000B346 80FA12                  	cmp dl, T_fraction
 15044 0000B349 7413                    	je .L_fraction
 15045 0000B34B 80FA11                          cmp dl, T_integer
 15046 0000B34E 7402                            je .L_integer
 15047 0000B350 EB52                    	jmp .L_eq_false
 15048                                  .L_integer:
 15049 0000B352 488B4601                        mov rax, qword [rsi + 1]
 15050 0000B356 483B4701                        cmp rax, qword [rdi + 1]
 15051 0000B35A 7548                            jne .L_eq_false
 15052 0000B35C EB3A                            jmp .L_eq_true
 15053                                  .L_fraction:
 15054 0000B35E 488B4601                	mov rax, qword [rsi + 1]
 15055 0000B362 483B4701                	cmp rax, qword [rdi + 1]
 15056 0000B366 753C                    	jne .L_eq_false
 15057 0000B368 488B4609                	mov rax, qword [rsi + 1 + 8]
 15058 0000B36C 483B4709                	cmp rax, qword [rdi + 1 + 8]
 15059 0000B370 7532                    	jne .L_eq_false
 15060 0000B372 EB24                    	jmp .L_eq_true
 15061                                  .L_real:
 15062 0000B374 488B4601                	mov rax, qword [rsi + 1]
 15063 0000B378 483B4701                	cmp rax, qword [rdi + 1]
 15064                                  .L_interned_symbol:
 15065                                  	; never reached, because interned_symbols are static!
 15066                                  	; but I'm keeping it in case, I'll ever change
 15067                                  	; the implementation
 15068 0000B37C 488B4601                	mov rax, qword [rsi + 1]
 15069 0000B380 483B4701                	cmp rax, qword [rdi + 1]
 15070                                  .L_uninterned_symbol:
 15071 0000B384 4C8B4701                        mov r8, qword [rdi + 1]
 15072 0000B388 4C3B4601                        cmp r8, qword [rsi + 1]
 15073 0000B38C 7516                            jne .L_eq_false
 15074 0000B38E EB08                            jmp .L_eq_true
 15075                                  .L_char:
 15076 0000B390 8A5E01                  	mov bl, byte [rsi + 1]
 15077 0000B393 3A5F01                  	cmp bl, byte [rdi + 1]
 15078 0000B396 750C                    	jne .L_eq_false
 15079                                  .L_eq_true:
 15080 0000B398 48B8-                   	mov rax, sob_boolean_true
 15080 0000B39A [0300000000000000] 
 15081 0000B3A2 EB0A                    	jmp .L_eq_exit
 15082                                  .L_eq_false:
 15083 0000B3A4 48B8-                   	mov rax, sob_boolean_false
 15083 0000B3A6 [0200000000000000] 
 15084                                  .L_eq_exit:
 15085 0000B3AE C9                      	leave
 15086 0000B3AF C22000                  	ret AND_KILL_FRAME(2)
 15087                                  
 15088                                  make_real:
 15089 0000B3B2 C8000000                        enter 0, 0
 15090 0000B3B6 BF09000000                      mov rdi, (1 + 8)
 15091 0000B3BB E8E1E3FFFF                      call malloc
 15092 0000B3C0 C60013                          mov byte [rax], T_real
 15093 0000B3C3 F20F114001                      movsd qword [rax + 1], xmm0
 15094 0000B3C8 C9                              leave 
 15095 0000B3C9 C3                              ret
 15096                                          
 15097                                  make_integer:
 15098 0000B3CA C8000000                        enter 0, 0
 15099 0000B3CE 4889FE                          mov rsi, rdi
 15100 0000B3D1 BF09000000                      mov rdi, (1 + 8)
 15101 0000B3D6 E8C6E3FFFF                      call malloc
 15102 0000B3DB C60011                          mov byte [rax], T_integer
 15103 0000B3DE 48897001                        mov qword [rax + 1], rsi
 15104 0000B3E2 C9                              leave
 15105 0000B3E3 C3                              ret
 15106                                          
 15107                                  L_error_integer_range:
 15108 0000B3E4 488B3C25[00000000]              mov rdi, qword [stderr]
 15109 0000B3EC 48BE-                           mov rsi, fmt_integer_range
 15109 0000B3EE [3A14000000000000] 
 15110 0000B3F6 B800000000                      mov rax, 0
 15111                                          ENTER
    44 0000B3FB C8000000            <1>  enter 0, 0
    45 0000B3FF 4883E4F0            <1>  and rsp, ~15
 15112 0000B403 E8(00000000)                    call fprintf
 15113                                          LEAVE
    49 0000B408 C9                  <1>  leave
 15114 0000B409 48C7C0FBFFFFFF                  mov rax, -5
 15115 0000B410 E8(00000000)                    call exit
 15116                                  
 15117                                  L_error_arg_negative:
 15118 0000B415 488B3C25[00000000]              mov rdi, qword [stderr]
 15119 0000B41D 48BE-                           mov rsi, fmt_arg_negative
 15119 0000B41F [1213000000000000] 
 15120 0000B427 B800000000                      mov rax, 0
 15121                                          ENTER
    44 0000B42C C8000000            <1>  enter 0, 0
    45 0000B430 4883E4F0            <1>  and rsp, ~15
 15122 0000B434 E8(00000000)                    call fprintf
 15123                                          LEAVE
    49 0000B439 C9                  <1>  leave
 15124 0000B43A 48C7C0FDFFFFFF                  mov rax, -3
 15125 0000B441 E8(00000000)                    call exit
 15126                                  
 15127                                  L_error_arg_count_0:
 15128 0000B446 488B3C25[00000000]              mov rdi, qword [stderr]
 15129 0000B44E 48BE-                           mov rsi, fmt_arg_count_0
 15129 0000B450 [3813000000000000] 
 15130 0000B458 488B5518                        mov rdx, COUNT
 15131 0000B45C B800000000                      mov rax, 0
 15132                                          ENTER
    44 0000B461 C8000000            <1>  enter 0, 0
    45 0000B465 4883E4F0            <1>  and rsp, ~15
 15133 0000B469 E8(00000000)                    call fprintf
 15134                                          LEAVE
    49 0000B46E C9                  <1>  leave
 15135 0000B46F 48C7C0FDFFFFFF                  mov rax, -3
 15136 0000B476 E8(00000000)                    call exit
 15137                                  
 15138                                  L_error_arg_count_1:
 15139 0000B47B 488B3C25[00000000]              mov rdi, qword [stderr]
 15140 0000B483 48BE-                           mov rsi, fmt_arg_count_1
 15140 0000B485 [6013000000000000] 
 15141 0000B48D 488B5518                        mov rdx, COUNT
 15142 0000B491 B800000000                      mov rax, 0
 15143                                          ENTER
    44 0000B496 C8000000            <1>  enter 0, 0
    45 0000B49A 4883E4F0            <1>  and rsp, ~15
 15144 0000B49E E8(00000000)                    call fprintf
 15145                                          LEAVE
    49 0000B4A3 C9                  <1>  leave
 15146 0000B4A4 48C7C0FDFFFFFF                  mov rax, -3
 15147 0000B4AB E8(00000000)                    call exit
 15148                                  
 15149                                  L_error_arg_count_2:
 15150 0000B4B0 488B3C25[00000000]              mov rdi, qword [stderr]
 15151 0000B4B8 48BE-                           mov rsi, fmt_arg_count_2
 15151 0000B4BA [C613000000000000] 
 15152 0000B4C2 488B5518                        mov rdx, COUNT
 15153 0000B4C6 B800000000                      mov rax, 0
 15154                                          ENTER
    44 0000B4CB C8000000            <1>  enter 0, 0
    45 0000B4CF 4883E4F0            <1>  and rsp, ~15
 15155 0000B4D3 E8(00000000)                    call fprintf
 15156                                          LEAVE
    49 0000B4D8 C9                  <1>  leave
 15157 0000B4D9 48C7C0FDFFFFFF                  mov rax, -3
 15158 0000B4E0 E8(00000000)                    call exit
 15159                                  
 15160                                  L_error_arg_count_12:
 15161 0000B4E5 488B3C25[00000000]              mov rdi, qword [stderr]
 15162 0000B4ED 48BE-                           mov rsi, fmt_arg_count_12
 15162 0000B4EF [8613000000000000] 
 15163 0000B4F7 488B5518                        mov rdx, COUNT
 15164 0000B4FB B800000000                      mov rax, 0
 15165                                          ENTER
    44 0000B500 C8000000            <1>  enter 0, 0
    45 0000B504 4883E4F0            <1>  and rsp, ~15
 15166 0000B508 E8(00000000)                    call fprintf
 15167                                          LEAVE
    49 0000B50D C9                  <1>  leave
 15168 0000B50E 48C7C0FDFFFFFF                  mov rax, -3
 15169 0000B515 E8(00000000)                    call exit
 15170                                  
 15171                                  L_error_arg_count_3:
 15172 0000B51A 488B3C25[00000000]              mov rdi, qword [stderr]
 15173 0000B522 48BE-                           mov rsi, fmt_arg_count_3
 15173 0000B524 [ED13000000000000] 
 15174 0000B52C 488B5518                        mov rdx, COUNT
 15175 0000B530 B800000000                      mov rax, 0
 15176                                          ENTER
    44 0000B535 C8000000            <1>  enter 0, 0
    45 0000B539 4883E4F0            <1>  and rsp, ~15
 15177 0000B53D E8(00000000)                    call fprintf
 15178                                          LEAVE
    49 0000B542 C9                  <1>  leave
 15179 0000B543 48C7C0FDFFFFFF                  mov rax, -3
 15180 0000B54A E8(00000000)                    call exit
 15181                                          
 15182                                  L_error_incorrect_type:
 15183 0000B54F 488B3C25[00000000]              mov rdi, qword [stderr]
 15184 0000B557 48BE-                           mov rsi, fmt_type
 15184 0000B559 [1614000000000000] 
 15185 0000B561 B800000000                      mov rax, 0
 15186                                          ENTER
    44 0000B566 C8000000            <1>  enter 0, 0
    45 0000B56A 4883E4F0            <1>  and rsp, ~15
 15187 0000B56E E8(00000000)                    call fprintf
 15188                                          LEAVE
    49 0000B573 C9                  <1>  leave
 15189 0000B574 48C7C0FCFFFFFF                  mov rax, -4
 15190 0000B57B E8(00000000)                    call exit
 15191                                  
 15192                                  L_error_division_by_zero:
 15193 0000B580 488B3C25[00000000]              mov rdi, qword [stderr]
 15194 0000B588 48BE-                           mov rsi, fmt_division_by_zero
 15194 0000B58A [5714000000000000] 
 15195 0000B592 B800000000                      mov rax, 0
 15196                                          ENTER
    44 0000B597 C8000000            <1>  enter 0, 0
    45 0000B59B 4883E4F0            <1>  and rsp, ~15
 15197 0000B59F E8(00000000)                    call fprintf
 15198                                          LEAVE
    49 0000B5A4 C9                  <1>  leave
 15199 0000B5A5 48C7C0F8FFFFFF                  mov rax, -8
 15200 0000B5AC E8(00000000)                    call exit
 15201                                  
 15202                                  section .data
 15203                                  gensym_count:
 15204 00001307 0000000000000000                dq 0
 15205                                  fmt_char:
 15206 0000130F 256300                          db `%c\0`
 15207                                  fmt_arg_negative:
 15208 00001312 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
 15208 0000131B 7267756D656E742063-
 15208 00001324 616E6E6F7420626520-
 15208 0000132D 6E656761746976652E-
 15208 00001336 0A00               
 15209                                  fmt_arg_count_0:
 15210 00001338 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 15210 00001341 74696E67207A65726F-
 15210 0000134A 20617267756D656E74-
 15210 00001353 732E20466F756E6420-
 15210 0000135C 25640A00           
 15211                                  fmt_arg_count_1:
 15212 00001360 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 15212 00001369 74696E67206F6E6520-
 15212 00001372 617267756D656E742E-
 15212 0000137B 20466F756E64202564-
 15212 00001384 0A00               
 15213                                  fmt_arg_count_12:
 15214 00001386 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 15214 0000138F 74696E67206F6E6520-
 15214 00001398 726571756972656420-
 15214 000013A1 616E64206F6E65206F-
 15214 000013AA 7074696F6E616C2061-
 15214 000013B3 7267756D656E742E20-
 15214 000013BC 466F756E642025640A-
 15214 000013C5 00                 
 15215                                  fmt_arg_count_2:
 15216 000013C6 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 15216 000013CF 74696E672074776F20-
 15216 000013D8 617267756D656E7473-
 15216 000013E1 2E20466F756E642025-
 15216 000013EA 640A00             
 15217                                  fmt_arg_count_3:
 15218 000013ED 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 15218 000013F6 74696E672074687265-
 15218 000013FF 6520617267756D656E-
 15218 00001408 74732E20466F756E64-
 15218 00001411 2025640A00         
 15219                                  fmt_type:
 15220 00001416 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 15220 0000141F 696F6E207061737365-
 15220 00001428 6420696E636F727265-
 15220 00001431 637420747970650A00 
 15221                                  fmt_integer_range:
 15222 0000143A 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 15222 00001443 7265637420696E7465-
 15222 0000144C 6765722072616E6765-
 15222 00001455 0A00               
 15223                                  fmt_division_by_zero:
 15224 00001457 212121204469766973-             db `!!! Division by zero\n\0`
 15224 00001460 696F6E206279207A65-
 15224 00001469 726F0A00           
 15225                                  fmt_scheme_error_part_1:
 15226 0000146D 0A2121212054686520-             db `\n!!! The procedure \0`
 15226 00001476 70726F636564757265-
 15226 0000147F 2000               
 15227                                  fmt_scheme_error_part_2:
 15228 00001481 2061736B656420746F-             db ` asked to terminate the program\n`
 15228 0000148A 207465726D696E6174-
 15228 00001493 65207468652070726F-
 15228 0000149C 6772616D0A         
 15229 000014A1 202020207769746820-             db `    with the following message:\n\n\0`
 15229 000014AA 74686520666F6C6C6F-
 15229 000014B3 77696E67206D657373-
 15229 000014BC 6167653A0A0A00     
 15230                                  fmt_scheme_error_part_3:
 15231 000014C3 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 15231 000014CC 210A0A00           

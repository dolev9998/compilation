     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 11                      	db T_integer	; 5
   469 000005DE 0500000000000000        	dq 5
   470                                  free_var_0:	; location of cons
   471 000005E6 [EE05000000000000]      	dq .undefined_object
   472                                  .undefined_object:
   473 000005EE 05                      	db T_undefined
   474 000005EF [DF00000000000000]      	dq L_constants + 223
   475                                  
   476                                  
   477                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   478                                  global main
   479                                  section .text
   480                                  main:
   481 00000000 C8000000                        enter 0, 0
   482 00000004 6A00                            push 0
   483 00000006 6A00                            push 0
   484 00000008 68[66010000]                    push Lend
   485 0000000D C8000000                        enter 0, 0
   486                                  	; building closure for cons
   487 00000011 48BF-                   	mov rdi, free_var_0
   487 00000013 [E605000000000000] 
   488 0000001B 48BE-                   	mov rsi, L_code_ptr_cons
   488 0000001D [7B10000000000000] 
   489 00000025 E8BD0A0000              	call bind_primitive
   490                                  
   491                                  	; preparing a non-tail-call
   492 0000002A 48B8-                   	mov rax, L_constants + 1501
   492 0000002C [DD05000000000000] 
   493 00000034 50                      	push rax
   494 00000035 6A01                    	push 1	; arg count
   495 00000037 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   496 0000003C E890020000              	call malloc
   497 00000041 50                      	push rax
   498 00000042 BF00000000              	mov rdi, 8 * 0	; new rib
   499 00000047 E885020000              	call malloc
   500 0000004C 50                      	push rax
   501 0000004D BF08000000              	mov rdi, 8 * 1	; extended env
   502 00000052 E87A020000              	call malloc
   503 00000057 488B7D10                	mov rdi, ENV
   504 0000005B BE00000000              	mov rsi, 0
   505 00000060 BA01000000              	mov rdx, 1
   506                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   507 00000065 4883FE00                	cmp rsi, 0
   508 00000069 7410                    	je .L_lambda_simple_env_end_0001
   509 0000006B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   510 0000006F 48890CD0                	mov qword [rax + 8 * rdx], rcx
   511 00000073 48FFC6                  	inc rsi
   512 00000076 48FFC2                  	inc rdx
   513 00000079 EBEA                    	jmp .L_lambda_simple_env_loop_0001
   514                                  .L_lambda_simple_env_end_0001:
   515 0000007B 5B                      	pop rbx
   516 0000007C BE00000000              	mov rsi, 0
   517                                  .L_lambda_simple_params_loop_0001:	; copy params
   518 00000081 4883FE00                	cmp rsi, 0
   519 00000085 740E                    	je .L_lambda_simple_params_end_0001
   520 00000087 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   521 0000008C 488914F3                	mov qword [rbx + 8 * rsi], rdx
   522 00000090 48FFC6                  	inc rsi
   523 00000093 EBEC                    	jmp .L_lambda_simple_params_loop_0001
   524                                  .L_lambda_simple_params_end_0001:
   525 00000095 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   526 00000098 4889C3                  	mov rbx, rax
   527 0000009B 58                      	pop rax
   528 0000009C C60004                  	mov byte [rax], T_closure
   529 0000009F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   530 000000A3 48C74009[B0000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
   531 000000AB E9A7000000              	jmp .L_lambda_simple_end_0001
   532                                  .L_lambda_simple_code_0001:	; lambda-simple body
   533 000000B0 48837C241001            	cmp qword [rsp + 8 * 2], 1
   534 000000B6 740B                    	je .L_lambda_simple_arity_check_ok_0001
   535 000000B8 FF742410                	push qword [rsp + 8 * 2]
   536 000000BC 6A01                    	push 1
   537 000000BE E9C7010000              	jmp L_error_incorrect_arity_simple
   538                                  .L_lambda_simple_arity_check_ok_0001:
   539 000000C3 C8000000                	enter 0, 0
   540                                  	; preparing a tail-call
   541 000000C7 48B8-                   	mov rax, L_constants + 1
   541 000000C9 [0100000000000000] 
   542 000000D1 50                      	push rax
   543 000000D2 488B4520                	mov rax, PARAM(0)	; param x
   544 000000D6 50                      	push rax
   545 000000D7 6A02                    	push 2	; arg count
   546 000000D9 488B0425[E6050000]      	mov rax, qword [free_var_0]	; free var cons
   547 000000E1 803805                  	cmp byte [rax], T_undefined
   548 000000E4 0F84BA000000            	je L_error_fvar_undefined
   549 000000EA 803804                  	cmp byte [rax], T_closure
   550 000000ED 0F8535010000            	jne L_error_non_closure
   551 000000F3 FF7001                  	push SOB_CLOSURE_ENV(rax)
   552 000000F6 FF7508                  	push qword [rbp + 8 *1]
   553 000000F9 50                      	push rax
   554 000000FA 488B5D18                	mov rbx, COUNT
   555 000000FE 4883C303                	add rbx,3
   556 00000102 48C1E303                	shl rbx,3
   557 00000106 4801EB                  	add rbx, rbp
   558 00000109 4889DF                  	mov rdi, rbx
   559 0000010C 4889E8                  	mov rax, rbp
   560 0000010F 4883E808                	sub rax, 8
   561 00000113 488B6D00                	mov rbp, [rbp]
   562 00000117 B900000000              	mov rcx,0
   563 0000011C 488B542418              	mov rdx, [rsp + 8 * 3]
   564 00000121 4883C203                	add rdx, 3
   565                                  	.L_tc_recycle_frame_loop_0001:
   566 00000125 4839D1                  	cmp rcx, rdx
   567 00000128 7417                    	je .L_tc_recycle_frame_done_0001
   568 0000012A 4989C9                  	mov r9, rcx
   569 0000012D 49C1E103                	shl r9, 3
   570 00000131 4901D9                  	add r9,rbx
   571 00000134 4C8B04C8                	mov r8, [rax + 8 * rcx]
   572 00000138 4D8901                  	mov [r9], r8
   573 0000013B 4883C101                	add rcx,1
   574 0000013F EBE4                    	jmp .L_tc_recycle_frame_loop_0001
   575                                  	.L_tc_recycle_frame_done_0001:
   576 00000141 5B                      	pop rbx
   577 00000142 4883E901                	sub rcx, 1
   578 00000146 48C1E103                	shl rcx,3
   579 0000014A 4801CF                  	add rdi,rcx
   580 0000014D 4889FC                  	mov rsp,rdi
   581 00000150 FF6309                  	jmp SOB_CLOSURE_CODE(rbx)
   582 00000153 C9                      	leave
   583 00000154 C21800                  	ret AND_KILL_FRAME(1)
   584                                  .L_lambda_simple_end_0001:	; new closure is in rax
   585 00000157 803804                  	cmp byte [rax], T_closure
   586 0000015A 0F85C8000000            	jne L_error_non_closure
   587 00000160 FF7001                  	push SOB_CLOSURE_ENV(rax)
   588 00000163 FF5009                  	call SOB_CLOSURE_CODE(rax)
   589                                  Lend:
   590 00000166 4889C7                  	mov rdi, rax
   591 00000169 E8B8030000              	call print_sexpr_if_not_void
   592                                  
   593 0000016E 48BF-                           mov rdi, fmt_memory_usage
   593 00000170 [8F06000000000000] 
   594 00000178 488B3425[15070000]              mov rsi, qword [top_of_memory]
   595 00000180 4881EE[00000000]                sub rsi, memory
   596 00000187 B800000000                      mov rax, 0
   597                                          ENTER
    44 0000018C C8000000            <1>  enter 0, 0
    45 00000190 4883E4F0            <1>  and rsp, ~15
   598 00000194 E8(00000000)                    call printf
   599                                          LEAVE
    49 00000199 C9                  <1>  leave
   600 0000019A B800000000                      mov rax, 0
   601 0000019F E8(00000000)                    call exit
   602                                  
   603                                  L_error_fvar_undefined:
   604 000001A4 50                              push rax
   605 000001A5 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   606 000001AD 48BE-                           mov rsi, fmt_undefined_free_var_1
   606 000001AF [F705000000000000] 
   607 000001B7 B800000000                      mov rax, 0
   608                                          ENTER
    44 000001BC C8000000            <1>  enter 0, 0
    45 000001C0 4883E4F0            <1>  and rsp, ~15
   609 000001C4 E8(00000000)                    call fprintf
   610                                          LEAVE
    49 000001C9 C9                  <1>  leave
   611 000001CA 58                              pop rax
   612 000001CB 488B4001                        mov rax, qword [rax + 1] ; string
   613 000001CF 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   614 000001D3 BE01000000                      mov rsi, 1               ; sizeof(char)
   615 000001D8 488B5001                        mov rdx, qword [rax + 1] ; string-length
   616 000001DC 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   617 000001E4 B800000000                      mov rax, 0
   618                                          ENTER
    44 000001E9 C8000000            <1>  enter 0, 0
    45 000001ED 4883E4F0            <1>  and rsp, ~15
   619 000001F1 E8(00000000)                    call fwrite
   620                                          LEAVE
    49 000001F6 C9                  <1>  leave
   621 000001F7 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   622 000001FF 48BE-                           mov rsi, fmt_undefined_free_var_2
   622 00000201 [0E06000000000000] 
   623 00000209 B800000000                      mov rax, 0
   624                                          ENTER
    44 0000020E C8000000            <1>  enter 0, 0
    45 00000212 4883E4F0            <1>  and rsp, ~15
   625 00000216 E8(00000000)                    call fprintf
   626                                          LEAVE
    49 0000021B C9                  <1>  leave
   627 0000021C 48C7C0F6FFFFFF                  mov rax, -10
   628 00000223 E8(00000000)                    call exit
   629                                  
   630                                  L_error_non_closure:
   631 00000228 488B3C25[00000000]              mov rdi, qword [stderr]
   632 00000230 48BE-                           mov rsi, fmt_non_closure
   632 00000232 [C506000000000000] 
   633 0000023A B800000000                      mov rax, 0
   634                                          ENTER
    44 0000023F C8000000            <1>  enter 0, 0
    45 00000243 4883E4F0            <1>  and rsp, ~15
   635 00000247 E8(00000000)                    call fprintf
   636                                          LEAVE
    49 0000024C C9                  <1>  leave
   637 0000024D 48C7C0FEFFFFFF                  mov rax, -2
   638 00000254 E8(00000000)                    call exit
   639                                  
   640                                  L_error_improper_list:
   641 00000259 488B3C25[00000000]      	mov rdi, qword [stderr]
   642 00000261 48BE-                   	mov rsi, fmt_error_improper_list
   642 00000263 [ED06000000000000] 
   643 0000026B B800000000              	mov rax, 0
   644                                          ENTER
    44 00000270 C8000000            <1>  enter 0, 0
    45 00000274 4883E4F0            <1>  and rsp, ~15
   645 00000278 E8(00000000)            	call fprintf
   646                                          LEAVE
    49 0000027D C9                  <1>  leave
   647 0000027E 48C7C0F9FFFFFF          	mov rax, -7
   648 00000285 E8(00000000)            	call exit
   649                                  
   650                                  L_error_incorrect_arity_simple:
   651 0000028A 488B3C25[00000000]              mov rdi, qword [stderr]
   652 00000292 48BE-                           mov rsi, fmt_incorrect_arity_simple
   652 00000294 [3006000000000000] 
   653 0000029C EB12                            jmp L_error_incorrect_arity_common
   654                                  L_error_incorrect_arity_opt:
   655 0000029E 488B3C25[00000000]              mov rdi, qword [stderr]
   656 000002A6 48BE-                           mov rsi, fmt_incorrect_arity_opt
   656 000002A8 [5B06000000000000] 
   657                                  L_error_incorrect_arity_common:
   658 000002B0 5A                              pop rdx
   659 000002B1 59                              pop rcx
   660 000002B2 B800000000                      mov rax, 0
   661                                          ENTER
    44 000002B7 C8000000            <1>  enter 0, 0
    45 000002BB 4883E4F0            <1>  and rsp, ~15
   662 000002BF E8(00000000)                    call fprintf
   663                                          LEAVE
    49 000002C4 C9                  <1>  leave
   664 000002C5 48C7C0FAFFFFFF                  mov rax, -6
   665 000002CC E8(00000000)                    call exit
   666                                  
   667                                  section .data
   668                                  fmt_undefined_free_var_1:
   669 000005F7 212121205468652066-             db `!!! The free variable \0`
   669 00000600 726565207661726961-
   669 00000609 626C652000         
   670                                  fmt_undefined_free_var_2:
   671 0000060E 207761732075736564-             db ` was used before it was defined.\n\0`
   671 00000617 206265666F72652069-
   671 00000620 742077617320646566-
   671 00000629 696E65642E0A00     
   672                                  fmt_incorrect_arity_simple:
   673 00000630 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   673 00000639 74656420256C642061-
   673 00000642 7267756D656E74732C-
   673 0000064B 206275742067697665-
   673 00000654 6E20256C640A00     
   674                                  fmt_incorrect_arity_opt:
   675 0000065B 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   675 00000664 746564206174206C65-
   675 0000066D 61737420256C642061-
   675 00000676 7267756D656E74732C-
   675 0000067F 206275742067697665-
   675 00000688 6E20256C640A00     
   676                                  fmt_memory_usage:
   677 0000068F 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   677 00000698 20256C642062797465-
   677 000006A1 73206F662064796E61-
   677 000006AA 6D6963616C6C792D61-
   677 000006B3 6C6C6F636174656420-
   677 000006BC 6D656D6F72790A0A00 
   678                                  fmt_non_closure:
   679 000006C5 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   679 000006CE 7074696E6720746F20-
   679 000006D7 6170706C792061206E-
   679 000006E0 6F6E2D636C6F737572-
   679 000006E9 65210A00           
   680                                  fmt_error_improper_list:
   681 000006ED 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   681 000006F6 7267756D656E742069-
   681 000006FF 73206E6F7420612070-
   681 00000708 726F706572206C6973-
   681 00000711 74210A00           
   682                                  
   683                                  section .bss
   684                                  memory:
   685 00000000 <res 40000000h>         	resb gbytes(1)
   686                                  
   687                                  section .data
   688                                  top_of_memory:
   689 00000715 [0000000000000000]              dq memory
   690                                  
   691                                  section .text
   692                                  malloc:
   693 000002D1 488B0425[15070000]              mov rax, qword [top_of_memory]
   694 000002D9 48013C25[15070000]              add qword [top_of_memory], rdi
   695 000002E1 C3                              ret
   696                                  
   697                                  L_code_ptr_return:
   698 000002E2 48837C241002            	cmp qword [rsp + 8*2], 2
   699 000002E8 0F85D81C0000            	jne L_error_arg_count_2
   700 000002EE 488B4C2418              	mov rcx, qword [rsp + 8*3]
   701                                  	assert_integer(rcx)
    53 000002F3 803911              <1>  cmp byte [%1], %2
    54 000002F6 0F85691D0000        <1>  jne L_error_incorrect_type
   702 000002FC 488B4901                	mov rcx, qword [rcx + 1]
   703 00000300 4883F900                	cmp rcx, 0
   704 00000304 0F8CF01B0000            	jl L_error_integer_range
   705 0000030A 488B442420              	mov rax, qword [rsp + 8*4]
   706                                  .L0:
   707 0000030F 4883F900                        cmp rcx, 0
   708 00000313 7409                            je .L1
   709 00000315 488B6D00                	mov rbp, qword [rbp]
   710 00000319 48FFC9                  	dec rcx
   711 0000031C 7FF1                    	jg .L0
   712                                  .L1:
   713 0000031E 4889EC                  	mov rsp, rbp
   714 00000321 5D                      	pop rbp
   715 00000322 5B                              pop rbx
   716 00000323 488B4C2408                      mov rcx, qword [rsp + 8*1]
   717 00000328 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   718 0000032D FFE3                    	jmp rbx
   719                                  
   720                                  L_code_ptr_make_list:
   721 0000032F C8000000                	enter 0, 0
   722 00000333 48837D1801                      cmp COUNT, 1
   723 00000338 740C                            je .L0
   724 0000033A 48837D1802                      cmp COUNT, 2
   725 0000033F 7411                            je .L1
   726 00000341 E9B51C0000                      jmp L_error_arg_count_12
   727                                  .L0:
   728 00000346 49B9-                           mov r9, sob_void
   728 00000348 [0000000000000000] 
   729 00000350 EB04                            jmp .L2
   730                                  .L1:
   731 00000352 4C8B4D28                        mov r9, PARAM(1)
   732                                  .L2:
   733 00000356 488B4D20                        mov rcx, PARAM(0)
   734                                          assert_integer(rcx)
    53 0000035A 803911              <1>  cmp byte [%1], %2
    54 0000035D 0F85021D0000        <1>  jne L_error_incorrect_type
   735 00000363 488B4901                        mov rcx, qword [rcx + 1]
   736 00000367 4883F900                        cmp rcx, 0
   737 0000036B 0F8CBA1B0000                    jl L_error_arg_negative
   738 00000371 49B8-                           mov r8, sob_nil
   738 00000373 [0100000000000000] 
   739                                  .L3:
   740 0000037B 4883F900                        cmp rcx, 0
   741 0000037F 7E1D                            jle .L4
   742 00000381 BF11000000                      mov rdi, 1 + 8 + 8
   743 00000386 E846FFFFFF                      call malloc
   744 0000038B C60021                          mov byte [rax], T_pair
   745 0000038E 4C894801                        mov qword [rax + 1], r9
   746 00000392 4C894009                        mov qword [rax + 1 + 8], r8
   747 00000396 4989C0                          mov r8, rax
   748 00000399 48FFC9                          dec rcx
   749 0000039C EBDD                            jmp .L3
   750                                  .L4:
   751 0000039E 4C89C0                          mov rax, r8
   752 000003A1 48837D1802                      cmp COUNT, 2
   753 000003A6 7404                            je .L5
   754 000003A8 C9                              leave
   755 000003A9 C21800                          ret AND_KILL_FRAME(1)
   756                                  .L5:
   757 000003AC C9                      	leave
   758 000003AD C22000                  	ret AND_KILL_FRAME(2)
   759                                  
   760                                  L_code_ptr_is_primitive:
   761 000003B0 C8000000                	enter 0, 0
   762 000003B4 48837D1801              	cmp COUNT, 1
   763 000003B9 0F85D21B0000            	jne L_error_arg_count_1
   764 000003BF 488B4520                	mov rax, PARAM(0)
   765                                  	assert_closure(rax)
    53 000003C3 803804              <1>  cmp byte [%1], %2
    54 000003C6 0F85991C0000        <1>  jne L_error_incorrect_type
   766 000003CC 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   767 000003D1 750C                    	jne .L_false
   768 000003D3 48B8-                   	mov rax, sob_boolean_true
   768 000003D5 [0300000000000000] 
   769 000003DD EB0A                    	jmp .L_end
   770                                  .L_false:
   771 000003DF 48B8-                   	mov rax, sob_boolean_false
   771 000003E1 [0200000000000000] 
   772                                  .L_end:
   773 000003E9 C9                      	leave
   774 000003EA C21800                  	ret AND_KILL_FRAME(1)
   775                                  
   776                                  L_code_ptr_length:
   777 000003ED C8000000                	enter 0, 0
   778 000003F1 48837D1801              	cmp COUNT, 1
   779 000003F6 0F85951B0000            	jne L_error_arg_count_1
   780 000003FC 488B5D20                	mov rbx, PARAM(0)
   781 00000400 BF00000000              	mov rdi, 0
   782                                  .L:
   783 00000405 803B01                  	cmp byte [rbx], T_nil
   784 00000408 7412                    	je .L_end
   785                                  	assert_pair(rbx)
    53 0000040A 803B21              <1>  cmp byte [%1], %2
    54 0000040D 0F85521C0000        <1>  jne L_error_incorrect_type
   786 00000413 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   787 00000417 48FFC7                  	inc rdi
   788 0000041A EBE9                    	jmp .L
   789                                  .L_end:
   790 0000041C E8BF1A0000              	call make_integer
   791 00000421 C9                      	leave
   792 00000422 C21800                  	ret AND_KILL_FRAME(1)
   793                                  
   794                                  L_code_ptr_break:
   795 00000425 48837C241000                    cmp qword [rsp + 8 * 2], 0
   796 0000042B 0F852B1B0000                    jne L_error_arg_count_0
   797 00000431 CC                              int3
   798 00000432 48B8-                           mov rax, sob_void
   798 00000434 [0000000000000000] 
   799 0000043C C21000                          ret AND_KILL_FRAME(0)        
   800                                  
   801                                  L_code_ptr_frame:
   802 0000043F C8000000                        enter 0, 0
   803 00000443 48837D1800                      cmp COUNT, 0
   804 00000448 0F850E1B0000                    jne L_error_arg_count_0
   805                                  
   806 0000044E 48BF-                           mov rdi, fmt_frame
   806 00000450 [1D07000000000000] 
   807 00000458 488B7500                        mov rsi, qword [rbp]    ; old rbp
   808 0000045C 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   809 00000460 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   810 00000464 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   811 00000468 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   812 0000046C 6A00                            push 0
   813 0000046E 4151                            push r9
   814 00000470 4150                            push r8                   ; we'll use it when printing the params
   815 00000472 B800000000                      mov rax, 0
   816                                          
   817                                          ENTER
    44 00000477 C8000000            <1>  enter 0, 0
    45 0000047B 4883E4F0            <1>  and rsp, ~15
   818 0000047F E8(00000000)                    call printf
   819                                          LEAVE
    49 00000484 C9                  <1>  leave
   820                                  
   821                                  .L:
   822 00000485 488B0C24                        mov rcx, qword [rsp]
   823 00000489 4883F900                        cmp rcx, 0
   824 0000048D 7467                            je .L_out
   825 0000048F 48BF-                           mov rdi, fmt_frame_param_prefix
   825 00000491 [5607000000000000] 
   826 00000499 488B742410                      mov rsi, qword [rsp + 8*2]
   827 0000049E B800000000                      mov rax, 0
   828                                          
   829                                          ENTER
    44 000004A3 C8000000            <1>  enter 0, 0
    45 000004A7 4883E4F0            <1>  and rsp, ~15
   830 000004AB E8(00000000)                    call printf
   831                                          LEAVE
    49 000004B0 C9                  <1>  leave
   832                                  
   833 000004B1 488B0C24                        mov rcx, qword [rsp]
   834 000004B5 48FFC9                          dec rcx
   835 000004B8 48890C24                        mov qword [rsp], rcx    ; dec arg count
   836 000004BC 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   837 000004C1 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   838 000004C6 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   839 000004CA 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   840 000004CF 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   841 000004D2 E87B000000                      call print_sexpr
   842 000004D7 48BF-                           mov rdi, fmt_newline
   842 000004D9 [8207000000000000] 
   843 000004E1 B800000000                      mov rax, 0
   844                                          ENTER
    44 000004E6 C8000000            <1>  enter 0, 0
    45 000004EA 4883E4F0            <1>  and rsp, ~15
   845 000004EE E8(00000000)                    call printf
   846                                          LEAVE
    49 000004F3 C9                  <1>  leave
   847 000004F4 EB8F                            jmp .L
   848                                  .L_out:
   849 000004F6 48BF-                           mov rdi, fmt_frame_continue
   849 000004F8 [6707000000000000] 
   850 00000500 B800000000                      mov rax, 0
   851                                          ENTER
    44 00000505 C8000000            <1>  enter 0, 0
    45 00000509 4883E4F0            <1>  and rsp, ~15
   852 0000050D E8(00000000)                    call printf
   853 00000512 E8(00000000)                    call getchar
   854                                          LEAVE
    49 00000517 C9                  <1>  leave
   855                                          
   856 00000518 48B8-                           mov rax, sob_void
   856 0000051A [0000000000000000] 
   857 00000522 C9                              leave
   858 00000523 C21000                          ret AND_KILL_FRAME(0)
   859                                          
   860                                  print_sexpr_if_not_void:
   861 00000526 4881FF[00000000]        	cmp rdi, sob_void
   862 0000052D 7422                    	je .done
   863 0000052F E81E000000              	call print_sexpr
   864 00000534 48BF-                   	mov rdi, fmt_newline
   864 00000536 [8207000000000000] 
   865 0000053E B800000000              	mov rax, 0
   866                                  	ENTER
    44 00000543 C8000000            <1>  enter 0, 0
    45 00000547 4883E4F0            <1>  and rsp, ~15
   867 0000054B E8(00000000)            	call printf
   868                                  	LEAVE
    49 00000550 C9                  <1>  leave
   869                                  .done:
   870 00000551 C3                      	ret
   871                                  
   872                                  section .data
   873                                  fmt_frame:
   874 0000071D 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   874 00000726 207265742061646472-
   874 0000072F 203D2025703B206C65-
   874 00000738 7820656E76203D2025-
   874 00000741 703B20706172616D20-
   874 0000074A 636F756E74203D2025-
   874 00000753 640A00             
   875                                  fmt_frame_param_prefix:
   876 00000756 3D3D5B706172616D20-             db `==[param %d]==> \0`
   876 0000075F 25645D3D3D3E2000   
   877                                  fmt_frame_continue:
   878 00000767 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   878 00000770 723E20746F20636F6E-
   878 00000779 74696E75652E2E2E00 
   879                                  fmt_newline:
   880 00000782 0A00                    	db `\n\0`
   881                                  fmt_void:
   882 00000784 233C766F69643E00        	db `#<void>\0`
   883                                  fmt_nil:
   884 0000078C 282900                  	db `()\0`
   885                                  fmt_boolean_false:
   886 0000078F 236600                  	db `#f\0`
   887                                  fmt_boolean_true:
   888 00000792 237400                  	db `#t\0`
   889                                  fmt_char_backslash:
   890 00000795 235C5C00                	db `#\\\\\0`
   891                                  fmt_char_dquote:
   892 00000799 235C2200                	db `#\\"\0`
   893                                  fmt_char_simple:
   894 0000079D 235C256300              	db `#\\%c\0`
   895                                  fmt_char_null:
   896 000007A2 235C6E756C00            	db `#\\nul\0`
   897                                  fmt_char_bell:
   898 000007A8 235C62656C6C00          	db `#\\bell\0`
   899                                  fmt_char_backspace:
   900 000007AF 235C6261636B737061-     	db `#\\backspace\0`
   900 000007B8 636500             
   901                                  fmt_char_tab:
   902 000007BB 235C74616200            	db `#\\tab\0`
   903                                  fmt_char_newline:
   904 000007C1 235C6E65776C696E65-     	db `#\\newline\0`
   904 000007CA 00                 
   905                                  fmt_char_formfeed:
   906 000007CB 235C7061676500          	db `#\\page\0`
   907                                  fmt_char_return:
   908 000007D2 235C72657475726E00      	db `#\\return\0`
   909                                  fmt_char_escape:
   910 000007DB 235C65736300            	db `#\\esc\0`
   911                                  fmt_char_space:
   912 000007E1 235C737061636500        	db `#\\space\0`
   913                                  fmt_char_hex:
   914 000007E9 235C782530325800        	db `#\\x%02X\0`
   915                                  fmt_gensym:
   916 000007F1 47256C6400                      db `G%ld\0`
   917                                  fmt_closure:
   918 000007F6 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   918 000007FF 206174203078253038-
   918 00000808 5820656E763D307825-
   918 00000811 30385820636F64653D-
   918 0000081A 3078253038583E00   
   919                                  fmt_lparen:
   920 00000822 2800                    	db `(\0`
   921                                  fmt_dotted_pair:
   922 00000824 202E2000                	db ` . \0`
   923                                  fmt_rparen:
   924 00000828 2900                    	db `)\0`
   925                                  fmt_space:
   926 0000082A 2000                    	db ` \0`
   927                                  fmt_empty_vector:
   928 0000082C 23282900                	db `#()\0`
   929                                  fmt_vector:
   930 00000830 232800                  	db `#(\0`
   931                                  fmt_real:
   932 00000833 256600                  	db `%f\0`
   933                                  fmt_fraction:
   934 00000836 256C642F256C6400        	db `%ld/%ld\0`
   935                                  fmt_zero:
   936 0000083E 3000                    	db `0\0`
   937                                  fmt_int:
   938 00000840 256C6400                	db `%ld\0`
   939                                  fmt_unknown_scheme_object_error:
   940 00000844 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   940 0000084D 6F723A20556E6B6E6F-
   940 00000856 776E20536368656D65-
   940 0000085F 2D6F626A6563742028-
   940 00000868 525454492030782530-
   940 00000871 32582920           
   941 00000875 617420616464726573-     	db `at address 0x%08X\n\n\0`
   941 0000087E 73203078253038580A-
   941 00000887 0A00               
   942                                  fmt_dquote:
   943 00000889 2200                    	db `\"\0`
   944                                  fmt_string_char:
   945 0000088B 256300                          db `%c\0`
   946                                  fmt_string_char_7:
   947 0000088E 5C6100                          db `\\a\0`
   948                                  fmt_string_char_8:
   949 00000891 5C6200                          db `\\b\0`
   950                                  fmt_string_char_9:
   951 00000894 5C7400                          db `\\t\0`
   952                                  fmt_string_char_10:
   953 00000897 5C6E00                          db `\\n\0`
   954                                  fmt_string_char_11:
   955 0000089A 5C7600                          db `\\v\0`
   956                                  fmt_string_char_12:
   957 0000089D 5C6600                          db `\\f\0`
   958                                  fmt_string_char_13:
   959 000008A0 5C7200                          db `\\r\0`
   960                                  fmt_string_char_34:
   961 000008A3 5C2200                          db `\\"\0`
   962                                  fmt_string_char_92:
   963 000008A6 5C5C00                          db `\\\\\0`
   964                                  fmt_string_char_hex:
   965 000008A9 5C7825583B00                    db `\\x%X;\0`
   966                                  
   967                                  section .text
   968                                  
   969                                  print_sexpr:
   970 00000552 C8000000                	enter 0, 0
   971 00000556 8A07                    	mov al, byte [rdi]
   972 00000558 3C00                    	cmp al, T_void
   973 0000055A 7465                    	je .Lvoid
   974 0000055C 3C01                    	cmp al, T_nil
   975 0000055E 7470                    	je .Lnil
   976 00000560 3C09                    	cmp al, T_boolean_false
   977 00000562 747B                    	je .Lboolean_false
   978 00000564 3C0A                    	cmp al, T_boolean_true
   979 00000566 0F8482000000            	je .Lboolean_true
   980 0000056C 3C02                    	cmp al, T_char
   981 0000056E 0F8489000000            	je .Lchar
   982 00000574 3C41                    	cmp al, T_interned_symbol
   983 00000576 0F84BF010000            	je .Linterned_symbol
   984 0000057C 3C42                            cmp al, T_uninterned_symbol
   985 0000057E 0F84E3010000                    je .Luninterned_symbol
   986 00000584 3C21                    	cmp al, T_pair
   987 00000586 0F84EE010000            	je .Lpair
   988 0000058C 3C22                    	cmp al, T_vector
   989 0000058E 0F84B7020000            	je .Lvector
   990 00000594 3C04                    	cmp al, T_closure
   991 00000596 0F8485010000            	je .Lclosure
   992 0000059C 3C13                    	cmp al, T_real
   993 0000059E 0F8448030000            	je .Lreal
   994 000005A4 3C12                    	cmp al, T_fraction
   995 000005A6 0F846E030000            	je .Lfraction
   996 000005AC 3C11                    	cmp al, T_integer
   997 000005AE 0F84A7030000            	je .Linteger
   998 000005B4 3C03                    	cmp al, T_string
   999 000005B6 0F84B2030000            	je .Lstring
  1000                                  
  1001 000005BC E9DC040000              	jmp .Lunknown_sexpr_type
  1002                                  
  1003                                  .Lvoid:
  1004 000005C1 48BF-                   	mov rdi, fmt_void
  1004 000005C3 [8407000000000000] 
  1005 000005CB E900050000              	jmp .Lemit
  1006                                  
  1007                                  .Lnil:
  1008 000005D0 48BF-                   	mov rdi, fmt_nil
  1008 000005D2 [8C07000000000000] 
  1009 000005DA E9F1040000              	jmp .Lemit
  1010                                  
  1011                                  .Lboolean_false:
  1012 000005DF 48BF-                   	mov rdi, fmt_boolean_false
  1012 000005E1 [8F07000000000000] 
  1013 000005E9 E9E2040000              	jmp .Lemit
  1014                                  
  1015                                  .Lboolean_true:
  1016 000005EE 48BF-                   	mov rdi, fmt_boolean_true
  1016 000005F0 [9207000000000000] 
  1017 000005F8 E9D3040000              	jmp .Lemit
  1018                                  
  1019                                  .Lchar:
  1020 000005FD 8A4701                  	mov al, byte [rdi + 1]
  1021 00000600 3C20                    	cmp al, ' '
  1022 00000602 7E20                    	jle .Lchar_whitespace
  1023 00000604 3C5C                    	cmp al, 92 		; backslash
  1024 00000606 7474                    	je .Lchar_backslash
  1025 00000608 3C22                    	cmp al, '"'
  1026 0000060A 747F                    	je .Lchar_dquote
  1027 0000060C 4825FF000000            	and rax, 255
  1028 00000612 48BF-                   	mov rdi, fmt_char_simple
  1028 00000614 [9D07000000000000] 
  1029 0000061C 4889C6                  	mov rsi, rax
  1030 0000061F E9AC040000              	jmp .Lemit
  1031                                  
  1032                                  .Lchar_whitespace:
  1033 00000624 3C00                    	cmp al, 0
  1034 00000626 7472                    	je .Lchar_null
  1035 00000628 3C07                    	cmp al, 7
  1036 0000062A 747D                    	je .Lchar_bell
  1037 0000062C 3C08                    	cmp al, 8
  1038 0000062E 0F8484000000            	je .Lchar_backspace
  1039 00000634 3C09                    	cmp al, 9
  1040 00000636 0F848B000000            	je .Lchar_tab
  1041 0000063C 3C0A                    	cmp al, 10
  1042 0000063E 0F8492000000            	je .Lchar_newline
  1043 00000644 3C0C                    	cmp al, 12
  1044 00000646 0F8499000000            	je .Lchar_formfeed
  1045 0000064C 3C0D                    	cmp al, 13
  1046 0000064E 0F84A0000000            	je .Lchar_return
  1047 00000654 3C1B                    	cmp al, 27
  1048 00000656 0F84A7000000            	je .Lchar_escape
  1049 0000065C 4825FF000000            	and rax, 255
  1050 00000662 3C20                    	cmp al, ' '
  1051 00000664 0F84A8000000            	je .Lchar_space
  1052 0000066A 48BF-                   	mov rdi, fmt_char_hex
  1052 0000066C [E907000000000000] 
  1053 00000674 4889C6                  	mov rsi, rax
  1054 00000677 E954040000              	jmp .Lemit	
  1055                                  
  1056                                  .Lchar_backslash:
  1057 0000067C 48BF-                   	mov rdi, fmt_char_backslash
  1057 0000067E [9507000000000000] 
  1058 00000686 E945040000              	jmp .Lemit
  1059                                  
  1060                                  .Lchar_dquote:
  1061 0000068B 48BF-                   	mov rdi, fmt_char_dquote
  1061 0000068D [9907000000000000] 
  1062 00000695 E936040000              	jmp .Lemit
  1063                                  
  1064                                  .Lchar_null:
  1065 0000069A 48BF-                   	mov rdi, fmt_char_null
  1065 0000069C [A207000000000000] 
  1066 000006A4 E927040000              	jmp .Lemit
  1067                                  
  1068                                  .Lchar_bell:
  1069 000006A9 48BF-                   	mov rdi, fmt_char_bell
  1069 000006AB [A807000000000000] 
  1070 000006B3 E918040000              	jmp .Lemit
  1071                                  
  1072                                  .Lchar_backspace:
  1073 000006B8 48BF-                   	mov rdi, fmt_char_backspace
  1073 000006BA [AF07000000000000] 
  1074 000006C2 E909040000              	jmp .Lemit
  1075                                  
  1076                                  .Lchar_tab:
  1077 000006C7 48BF-                   	mov rdi, fmt_char_tab
  1077 000006C9 [BB07000000000000] 
  1078 000006D1 E9FA030000              	jmp .Lemit
  1079                                  
  1080                                  .Lchar_newline:
  1081 000006D6 48BF-                   	mov rdi, fmt_char_newline
  1081 000006D8 [C107000000000000] 
  1082 000006E0 E9EB030000              	jmp .Lemit
  1083                                  
  1084                                  .Lchar_formfeed:
  1085 000006E5 48BF-                   	mov rdi, fmt_char_formfeed
  1085 000006E7 [CB07000000000000] 
  1086 000006EF E9DC030000              	jmp .Lemit
  1087                                  
  1088                                  .Lchar_return:
  1089 000006F4 48BF-                   	mov rdi, fmt_char_return
  1089 000006F6 [D207000000000000] 
  1090 000006FE E9CD030000              	jmp .Lemit
  1091                                  
  1092                                  .Lchar_escape:
  1093 00000703 48BF-                   	mov rdi, fmt_char_escape
  1093 00000705 [DB07000000000000] 
  1094 0000070D E9BE030000              	jmp .Lemit
  1095                                  
  1096                                  .Lchar_space:
  1097 00000712 48BF-                   	mov rdi, fmt_char_space
  1097 00000714 [E107000000000000] 
  1098 0000071C E9AF030000              	jmp .Lemit
  1099                                  
  1100                                  .Lclosure:
  1101 00000721 4889FE                  	mov rsi, qword rdi
  1102 00000724 48BF-                   	mov rdi, fmt_closure
  1102 00000726 [F607000000000000] 
  1103 0000072E 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1104 00000732 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1105 00000736 E995030000              	jmp .Lemit
  1106                                  
  1107                                  .Linterned_symbol:
  1108 0000073B 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1109 0000073F BE01000000              	mov rsi, 1		 ; size = 1 byte
  1110 00000744 488B5701                	mov rdx, qword [rdi + 1] ; length
  1111 00000748 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1112 0000074C 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1113                                  	ENTER
    44 00000754 C8000000            <1>  enter 0, 0
    45 00000758 4883E4F0            <1>  and rsp, ~15
  1114 0000075C E8(00000000)            	call fwrite
  1115                                  	LEAVE
    49 00000761 C9                  <1>  leave
  1116 00000762 E97E030000              	jmp .Lend
  1117                                  
  1118                                  .Luninterned_symbol:
  1119 00000767 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  1120 0000076B 48BF-                           mov rdi, fmt_gensym
  1120 0000076D [F107000000000000] 
  1121 00000775 E956030000                      jmp .Lemit
  1122                                  	
  1123                                  .Lpair:
  1124 0000077A 57                      	push rdi
  1125 0000077B 48BF-                   	mov rdi, fmt_lparen
  1125 0000077D [2208000000000000] 
  1126 00000785 B800000000              	mov rax, 0
  1127                                          ENTER
    44 0000078A C8000000            <1>  enter 0, 0
    45 0000078E 4883E4F0            <1>  and rsp, ~15
  1128 00000792 E8(00000000)            	call printf
  1129                                          LEAVE
    49 00000797 C9                  <1>  leave
  1130 00000798 488B3C24                	mov rdi, qword [rsp] 	; pair
  1131 0000079C 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1132 000007A0 E8ADFDFFFF              	call print_sexpr
  1133 000007A5 5F                      	pop rdi 		; pair
  1134 000007A6 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1135                                  .Lcdr:
  1136 000007AA 8A07                    	mov al, byte [rdi]
  1137 000007AC 3C01                    	cmp al, T_nil
  1138 000007AE 7447                    	je .Lcdr_nil
  1139 000007B0 3C21                    	cmp al, T_pair
  1140 000007B2 7462                    	je .Lcdr_pair
  1141 000007B4 57                      	push rdi
  1142 000007B5 48BF-                   	mov rdi, fmt_dotted_pair
  1142 000007B7 [2408000000000000] 
  1143 000007BF B800000000              	mov rax, 0
  1144                                          ENTER
    44 000007C4 C8000000            <1>  enter 0, 0
    45 000007C8 4883E4F0            <1>  and rsp, ~15
  1145 000007CC E8(00000000)            	call printf
  1146                                          LEAVE
    49 000007D1 C9                  <1>  leave
  1147 000007D2 5F                      	pop rdi
  1148 000007D3 E87AFDFFFF              	call print_sexpr
  1149 000007D8 48BF-                   	mov rdi, fmt_rparen
  1149 000007DA [2808000000000000] 
  1150 000007E2 B800000000              	mov rax, 0
  1151                                          ENTER
    44 000007E7 C8000000            <1>  enter 0, 0
    45 000007EB 4883E4F0            <1>  and rsp, ~15
  1152 000007EF E8(00000000)            	call printf
  1153                                          LEAVE
    49 000007F4 C9                  <1>  leave
  1154 000007F5 C9                      	leave
  1155 000007F6 C3                      	ret
  1156                                  
  1157                                  .Lcdr_nil:
  1158 000007F7 48BF-                   	mov rdi, fmt_rparen
  1158 000007F9 [2808000000000000] 
  1159 00000801 B800000000              	mov rax, 0
  1160                                          ENTER
    44 00000806 C8000000            <1>  enter 0, 0
    45 0000080A 4883E4F0            <1>  and rsp, ~15
  1161 0000080E E8(00000000)            	call printf
  1162                                          LEAVE
    49 00000813 C9                  <1>  leave
  1163 00000814 C9                      	leave
  1164 00000815 C3                      	ret
  1165                                  
  1166                                  .Lcdr_pair:
  1167 00000816 57                      	push rdi
  1168 00000817 48BF-                   	mov rdi, fmt_space
  1168 00000819 [2A08000000000000] 
  1169 00000821 B800000000              	mov rax, 0
  1170                                          ENTER
    44 00000826 C8000000            <1>  enter 0, 0
    45 0000082A 4883E4F0            <1>  and rsp, ~15
  1171 0000082E E8(00000000)            	call printf
  1172                                          LEAVE
    49 00000833 C9                  <1>  leave
  1173 00000834 488B3C24                	mov rdi, qword [rsp]
  1174 00000838 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1175 0000083C E811FDFFFF              	call print_sexpr
  1176 00000841 5F                      	pop rdi
  1177 00000842 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1178 00000846 E95FFFFFFF              	jmp .Lcdr
  1179                                  
  1180                                  .Lvector:
  1181 0000084B 488B4701                	mov rax, qword [rdi + 1] ; length
  1182 0000084F 4883F800                	cmp rax, 0
  1183 00000853 0F8484000000            	je .Lvector_empty
  1184 00000859 57                      	push rdi
  1185 0000085A 48BF-                   	mov rdi, fmt_vector
  1185 0000085C [3008000000000000] 
  1186 00000864 B800000000              	mov rax, 0
  1187                                          ENTER
    44 00000869 C8000000            <1>  enter 0, 0
    45 0000086D 4883E4F0            <1>  and rsp, ~15
  1188 00000871 E8(00000000)            	call printf
  1189                                          LEAVE
    49 00000876 C9                  <1>  leave
  1190 00000877 488B3C24                	mov rdi, qword [rsp]
  1191 0000087B FF7701                  	push qword [rdi + 1]
  1192 0000087E 6A01                    	push 1
  1193 00000880 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1194 00000884 E8C9FCFFFF              	call print_sexpr
  1195                                  .Lvector_loop:
  1196                                  	; [rsp] index
  1197                                  	; [rsp + 8*1] limit
  1198                                  	; [rsp + 8*2] vector
  1199 00000889 488B0424                	mov rax, qword [rsp]
  1200 0000088D 483B442408              	cmp rax, qword [rsp + 8*1]
  1201 00000892 7436                    	je .Lvector_end
  1202 00000894 48BF-                   	mov rdi, fmt_space
  1202 00000896 [2A08000000000000] 
  1203 0000089E B800000000              	mov rax, 0
  1204                                          ENTER
    44 000008A3 C8000000            <1>  enter 0, 0
    45 000008A7 4883E4F0            <1>  and rsp, ~15
  1205 000008AB E8(00000000)            	call printf
  1206                                          LEAVE
    49 000008B0 C9                  <1>  leave
  1207 000008B1 488B0424                	mov rax, qword [rsp]
  1208 000008B5 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1209 000008BA 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1210 000008BF E88EFCFFFF              	call print_sexpr
  1211 000008C4 48FF0424                	inc qword [rsp]
  1212 000008C8 EBBF                    	jmp .Lvector_loop
  1213                                  
  1214                                  .Lvector_end:
  1215 000008CA 4883C418                	add rsp, 8*3
  1216 000008CE 48BF-                   	mov rdi, fmt_rparen
  1216 000008D0 [2808000000000000] 
  1217 000008D8 E9F3010000              	jmp .Lemit	
  1218                                  
  1219                                  .Lvector_empty:
  1220 000008DD 48BF-                   	mov rdi, fmt_empty_vector
  1220 000008DF [2C08000000000000] 
  1221 000008E7 E9E4010000              	jmp .Lemit
  1222                                  
  1223                                  .Lreal:
  1224 000008EC FF7701                  	push qword [rdi + 1]
  1225 000008EF F20F100424              	movsd xmm0, qword [rsp]
  1226 000008F4 4883C408                	add rsp, 8*1
  1227 000008F8 48BF-                   	mov rdi, fmt_real
  1227 000008FA [3308000000000000] 
  1228 00000902 B801000000              	mov rax, 1
  1229                                  	ENTER
    44 00000907 C8000000            <1>  enter 0, 0
    45 0000090B 4883E4F0            <1>  and rsp, ~15
  1230 0000090F E8(00000000)            	call printf
  1231                                  	LEAVE
    49 00000914 C9                  <1>  leave
  1232 00000915 E9CB010000              	jmp .Lend
  1233                                  
  1234                                  .Lfraction:
  1235 0000091A 488B7701                	mov rsi, qword [rdi + 1]
  1236 0000091E 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1237 00000922 4883FE00                	cmp rsi, 0
  1238 00000926 7415                    	je .Lrat_zero
  1239 00000928 4883FA01                	cmp rdx, 1
  1240 0000092C 741E                    	je .Lrat_int
  1241 0000092E 48BF-                   	mov rdi, fmt_fraction
  1241 00000930 [3608000000000000] 
  1242 00000938 E993010000              	jmp .Lemit
  1243                                  
  1244                                  .Lrat_zero:
  1245 0000093D 48BF-                   	mov rdi, fmt_zero
  1245 0000093F [3E08000000000000] 
  1246 00000947 E984010000              	jmp .Lemit
  1247                                  
  1248                                  .Lrat_int:
  1249 0000094C 48BF-                   	mov rdi, fmt_int
  1249 0000094E [4008000000000000] 
  1250 00000956 E975010000              	jmp .Lemit
  1251                                  
  1252                                  .Linteger:
  1253 0000095B 488B7701                	mov rsi, qword [rdi + 1]
  1254 0000095F 48BF-                   	mov rdi, fmt_int
  1254 00000961 [4008000000000000] 
  1255 00000969 E962010000              	jmp .Lemit
  1256                                  
  1257                                  .Lstring:
  1258 0000096E 488D4709                	lea rax, [rdi + 1 + 8]
  1259 00000972 50                      	push rax
  1260 00000973 FF7701                  	push qword [rdi + 1]
  1261 00000976 48BF-                   	mov rdi, fmt_dquote
  1261 00000978 [8908000000000000] 
  1262 00000980 B800000000              	mov rax, 0
  1263                                  	ENTER
    44 00000985 C8000000            <1>  enter 0, 0
    45 00000989 4883E4F0            <1>  and rsp, ~15
  1264 0000098D E8(00000000)            	call printf
  1265                                  	LEAVE
    49 00000992 C9                  <1>  leave
  1266                                  .Lstring_loop:
  1267                                  	; qword [rsp]: limit
  1268                                  	; qword [rsp + 8*1]: char *
  1269 00000993 48833C2400              	cmp qword [rsp], 0
  1270 00000998 0F84EF000000            	je .Lstring_end
  1271 0000099E 488B442408              	mov rax, qword [rsp + 8*1]
  1272 000009A3 8A00                    	mov al, byte [rax]
  1273 000009A5 4825FF000000            	and rax, 255
  1274 000009AB 3C07                    	cmp al, 7
  1275 000009AD 745D                            je .Lstring_char_7
  1276 000009AF 3C08                            cmp al, 8
  1277 000009B1 7465                            je .Lstring_char_8
  1278 000009B3 3C09                            cmp al, 9
  1279 000009B5 746D                            je .Lstring_char_9
  1280 000009B7 3C0A                            cmp al, 10
  1281 000009B9 7475                            je .Lstring_char_10
  1282 000009BB 3C0B                            cmp al, 11
  1283 000009BD 747D                            je .Lstring_char_11
  1284 000009BF 3C0C                            cmp al, 12
  1285 000009C1 0F8481000000                    je .Lstring_char_12
  1286 000009C7 3C0D                            cmp al, 13
  1287 000009C9 0F8485000000                    je .Lstring_char_13
  1288 000009CF 3C22                            cmp al, 34
  1289 000009D1 0F8489000000                    je .Lstring_char_34
  1290 000009D7 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1292 000009D9 3C20                            cmp al, ' '
  1293 000009DB 0F8C9A000000                    jl .Lstring_char_hex
  1294 000009E1 48BF-                           mov rdi, fmt_string_char
  1294 000009E3 [8B08000000000000] 
  1295 000009EB 4889C6                          mov rsi, rax
  1296                                  .Lstring_char_emit:
  1297 000009EE B800000000                      mov rax, 0
  1298                                          ENTER
    44 000009F3 C8000000            <1>  enter 0, 0
    45 000009F7 4883E4F0            <1>  and rsp, ~15
  1299 000009FB E8(00000000)                    call printf
  1300                                          LEAVE
    49 00000A00 C9                  <1>  leave
  1301 00000A01 48FF0C24                        dec qword [rsp]
  1302 00000A05 48FF442408                      inc qword [rsp + 8*1]
  1303 00000A0A EB87                            jmp .Lstring_loop
  1304                                  
  1305                                  .Lstring_char_7:
  1306 00000A0C 48BF-                           mov rdi, fmt_string_char_7
  1306 00000A0E [8E08000000000000] 
  1307 00000A16 EBD6                            jmp .Lstring_char_emit
  1308                                  
  1309                                  .Lstring_char_8:
  1310 00000A18 48BF-                           mov rdi, fmt_string_char_8
  1310 00000A1A [9108000000000000] 
  1311 00000A22 EBCA                            jmp .Lstring_char_emit
  1312                                          
  1313                                  .Lstring_char_9:
  1314 00000A24 48BF-                           mov rdi, fmt_string_char_9
  1314 00000A26 [9408000000000000] 
  1315 00000A2E EBBE                            jmp .Lstring_char_emit
  1316                                  
  1317                                  .Lstring_char_10:
  1318 00000A30 48BF-                           mov rdi, fmt_string_char_10
  1318 00000A32 [9708000000000000] 
  1319 00000A3A EBB2                            jmp .Lstring_char_emit
  1320                                  
  1321                                  .Lstring_char_11:
  1322 00000A3C 48BF-                           mov rdi, fmt_string_char_11
  1322 00000A3E [9A08000000000000] 
  1323 00000A46 EBA6                            jmp .Lstring_char_emit
  1324                                  
  1325                                  .Lstring_char_12:
  1326 00000A48 48BF-                           mov rdi, fmt_string_char_12
  1326 00000A4A [9D08000000000000] 
  1327 00000A52 EB9A                            jmp .Lstring_char_emit
  1328                                  
  1329                                  .Lstring_char_13:
  1330 00000A54 48BF-                           mov rdi, fmt_string_char_13
  1330 00000A56 [A008000000000000] 
  1331 00000A5E EB8E                            jmp .Lstring_char_emit
  1332                                  
  1333                                  .Lstring_char_34:
  1334 00000A60 48BF-                           mov rdi, fmt_string_char_34
  1334 00000A62 [A308000000000000] 
  1335 00000A6A EB82                            jmp .Lstring_char_emit
  1336                                  
  1337                                  .Lstring_char_92:
  1338 00000A6C 48BF-                           mov rdi, fmt_string_char_92
  1338 00000A6E [A608000000000000] 
  1339 00000A76 E973FFFFFF                      jmp .Lstring_char_emit
  1340                                  
  1341                                  .Lstring_char_hex:
  1342 00000A7B 48BF-                           mov rdi, fmt_string_char_hex
  1342 00000A7D [A908000000000000] 
  1343 00000A85 4889C6                          mov rsi, rax
  1344 00000A88 E961FFFFFF                      jmp .Lstring_char_emit        
  1345                                  
  1346                                  .Lstring_end:
  1347 00000A8D 4883C410                	add rsp, 8 * 2
  1348 00000A91 48BF-                   	mov rdi, fmt_dquote
  1348 00000A93 [8908000000000000] 
  1349 00000A9B EB33                    	jmp .Lemit
  1350                                  
  1351                                  .Lunknown_sexpr_type:
  1352 00000A9D 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1352 00000A9F [4408000000000000] 
  1353 00000AA7 4825FF000000            	and rax, 255
  1354 00000AAD 4889C2                  	mov rdx, rax
  1355 00000AB0 4889F9                  	mov rcx, rdi
  1356 00000AB3 488B3C25[00000000]      	mov rdi, qword [stderr]
  1357 00000ABB B800000000              	mov rax, 0
  1358                                          ENTER
    44 00000AC0 C8000000            <1>  enter 0, 0
    45 00000AC4 4883E4F0            <1>  and rsp, ~15
  1359 00000AC8 E8(00000000)            	call fprintf
  1360                                          LEAVE
    49 00000ACD C9                  <1>  leave
  1361 00000ACE C9                              leave
  1362 00000ACF C3                              ret
  1363                                  
  1364                                  .Lemit:
  1365 00000AD0 B800000000              	mov rax, 0
  1366                                          ENTER
    44 00000AD5 C8000000            <1>  enter 0, 0
    45 00000AD9 4883E4F0            <1>  and rsp, ~15
  1367 00000ADD E8(00000000)            	call printf
  1368                                          LEAVE
    49 00000AE2 C9                  <1>  leave
  1369 00000AE3 EB00                    	jmp .Lend
  1370                                  
  1371                                  .Lend:
  1372                                  	LEAVE
    49 00000AE5 C9                  <1>  leave
  1373 00000AE6 C3                      	ret
  1374                                  
  1375                                  ;;; rdi: address of free variable
  1376                                  ;;; rsi: address of code-pointer
  1377                                  bind_primitive:
  1378 00000AE7 C8000000                        enter 0, 0
  1379 00000AEB 57                              push rdi
  1380 00000AEC BF11000000                      mov rdi, (1 + 8 + 8)
  1381 00000AF1 E8DBF7FFFF                      call malloc
  1382 00000AF6 5F                              pop rdi
  1383 00000AF7 C60004                          mov byte [rax], T_closure
  1384 00000AFA 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1385 00000B02 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1386 00000B06 488907                          mov qword [rdi], rax
  1387 00000B09 48B8-                           mov rax, sob_void
  1387 00000B0B [0000000000000000] 
  1388 00000B13 C9                              leave
  1389 00000B14 C3                              ret
  1390                                  
  1391                                  L_code_ptr_ash:
  1392 00000B15 C8000000                        enter 0, 0
  1393 00000B19 48837D1802                      cmp COUNT, 2
  1394 00000B1E 0F85A2140000                    jne L_error_arg_count_2
  1395 00000B24 488B7D20                        mov rdi, PARAM(0)
  1396                                          assert_integer(rdi)
    53 00000B28 803F11              <1>  cmp byte [%1], %2
    54 00000B2B 0F8534150000        <1>  jne L_error_incorrect_type
  1397 00000B31 488B4D28                        mov rcx, PARAM(1)
  1398                                          assert_integer(rcx)
    53 00000B35 803911              <1>  cmp byte [%1], %2
    54 00000B38 0F8527150000        <1>  jne L_error_incorrect_type
  1399 00000B3E 488B7F01                        mov rdi, qword [rdi + 1]
  1400 00000B42 488B4901                        mov rcx, qword [rcx + 1]
  1401 00000B46 4883F900                        cmp rcx, 0
  1402 00000B4A 7C0F                            jl .L_negative
  1403                                  .L_loop_positive:
  1404 00000B4C 4883F900                        cmp rcx, 0
  1405 00000B50 741B                            je .L_exit
  1406 00000B52 48D3E7                          sal rdi, cl
  1407 00000B55 48C1E908                        shr rcx, 8
  1408 00000B59 EBF1                            jmp .L_loop_positive
  1409                                  .L_negative:
  1410 00000B5B 48F7D9                          neg rcx
  1411                                  .L_loop_negative:
  1412 00000B5E 4883F900                        cmp rcx, 0
  1413 00000B62 7409                            je .L_exit
  1414 00000B64 48D3FF                          sar rdi, cl
  1415 00000B67 48C1E908                        shr rcx, 8
  1416 00000B6B EBF1                            jmp .L_loop_negative
  1417                                  .L_exit:
  1418 00000B6D E86E130000                      call make_integer
  1419 00000B72 C9                              leave
  1420 00000B73 C22000                          ret AND_KILL_FRAME(2)
  1421                                  
  1422                                  L_code_ptr_logand:
  1423 00000B76 C8000000                        enter 0, 0
  1424 00000B7A 48837D1802                      cmp COUNT, 2
  1425 00000B7F 0F8541140000                    jne L_error_arg_count_2
  1426 00000B85 4C8B4520                        mov r8, PARAM(0)
  1427                                          assert_integer(r8)
    53 00000B89 41803811            <1>  cmp byte [%1], %2
    54 00000B8D 0F85D2140000        <1>  jne L_error_incorrect_type
  1428 00000B93 4C8B4D28                        mov r9, PARAM(1)
  1429                                          assert_integer(r9)
    53 00000B97 41803911            <1>  cmp byte [%1], %2
    54 00000B9B 0F85C4140000        <1>  jne L_error_incorrect_type
  1430 00000BA1 498B7801                        mov rdi, qword [r8 + 1]
  1431 00000BA5 49237901                        and rdi, qword [r9 + 1]
  1432 00000BA9 E832130000                      call make_integer
  1433 00000BAE C9                              leave
  1434 00000BAF C22000                          ret AND_KILL_FRAME(2)
  1435                                  
  1436                                  L_code_ptr_logor:
  1437 00000BB2 C8000000                        enter 0, 0
  1438 00000BB6 48837D1802                      cmp COUNT, 2
  1439 00000BBB 0F8505140000                    jne L_error_arg_count_2
  1440 00000BC1 4C8B4520                        mov r8, PARAM(0)
  1441                                          assert_integer(r8)
    53 00000BC5 41803811            <1>  cmp byte [%1], %2
    54 00000BC9 0F8596140000        <1>  jne L_error_incorrect_type
  1442 00000BCF 4C8B4D28                        mov r9, PARAM(1)
  1443                                          assert_integer(r9)
    53 00000BD3 41803911            <1>  cmp byte [%1], %2
    54 00000BD7 0F8588140000        <1>  jne L_error_incorrect_type
  1444 00000BDD 498B7801                        mov rdi, qword [r8 + 1]
  1445 00000BE1 490B7901                        or rdi, qword [r9 + 1]
  1446 00000BE5 E8F6120000                      call make_integer
  1447 00000BEA C9                              leave
  1448 00000BEB C22000                          ret AND_KILL_FRAME(2)
  1449                                  
  1450                                  L_code_ptr_logxor:
  1451 00000BEE C8000000                        enter 0, 0
  1452 00000BF2 48837D1802                      cmp COUNT, 2
  1453 00000BF7 0F85C9130000                    jne L_error_arg_count_2
  1454 00000BFD 4C8B4520                        mov r8, PARAM(0)
  1455                                          assert_integer(r8)
    53 00000C01 41803811            <1>  cmp byte [%1], %2
    54 00000C05 0F855A140000        <1>  jne L_error_incorrect_type
  1456 00000C0B 4C8B4D28                        mov r9, PARAM(1)
  1457                                          assert_integer(r9)
    53 00000C0F 41803911            <1>  cmp byte [%1], %2
    54 00000C13 0F854C140000        <1>  jne L_error_incorrect_type
  1458 00000C19 498B7801                        mov rdi, qword [r8 + 1]
  1459 00000C1D 49337901                        xor rdi, qword [r9 + 1]
  1460 00000C21 E8BA120000                      call make_integer
  1461                                          LEAVE
    49 00000C26 C9                  <1>  leave
  1462 00000C27 C22000                          ret AND_KILL_FRAME(2)
  1463                                  
  1464                                  L_code_ptr_lognot:
  1465 00000C2A C8000000                        enter 0, 0
  1466 00000C2E 48837D1801                      cmp COUNT, 1
  1467 00000C33 0F8558130000                    jne L_error_arg_count_1
  1468 00000C39 4C8B4520                        mov r8, PARAM(0)
  1469                                          assert_integer(r8)
    53 00000C3D 41803811            <1>  cmp byte [%1], %2
    54 00000C41 0F851E140000        <1>  jne L_error_incorrect_type
  1470 00000C47 498B7801                        mov rdi, qword [r8 + 1]
  1471 00000C4B 48F7D7                          not rdi
  1472 00000C4E E88D120000                      call make_integer
  1473 00000C53 C9                              leave
  1474 00000C54 C21800                          ret AND_KILL_FRAME(1)
  1475                                  
  1476                                  L_code_ptr_bin_apply:
  1477 00000C57 C8000000                        enter 0, 0
  1478 00000C5B 48837D1802                      cmp COUNT, 2
  1479 00000C60 0F8560130000                    jne L_error_arg_count_2
  1480 00000C66 488B4528                        mov rax, PARAM(1) ; list
  1481 00000C6A BB00000000                      mov rbx,0 ;list length count
  1482                                  .L_length_loop: ;this loop is to iterate through the list and count it's  (stop when encountering nil)
  1483 00000C6F 803801                          cmp byte [rax], T_nil ;TODO: check if correct
  1484 00000C72 7413                            je .L_length_loop_exit
  1485                                          assert_pair(rax)
    53 00000C74 803821              <1>  cmp byte [%1], %2
    54 00000C77 0F85E8130000        <1>  jne L_error_incorrect_type
  1486 00000C7D 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1487 00000C81 4883C301                        add rbx,1
  1488 00000C85 EBE8                            jmp .L_length_loop
  1489                                  .L_length_loop_exit: ;1381
  1490 00000C87 488B4528                        mov rax, PARAM(1) ; list
  1491                                          ;rbx contains list's length
  1492 00000C8B 488B4D20                        mov rcx, PARAM(0) ; PROC
  1493                                          assert_closure(rcx)
    53 00000C8F 803904              <1>  cmp byte [%1], %2
    54 00000C92 0F85CD130000        <1>  jne L_error_incorrect_type
  1494 00000C98 BA00000000                      mov rdx, 0 ;i in (int i =0;i<list.length;i++)
  1495 00000C9D 4C8B4508                        mov r8, RET_ADDR
  1496 00000CA1 488B6D00                        mov rbp, OLD_RBP
  1497 00000CA5 4889EC                          mov rsp, rbp
  1498                                  .L_loop: ;loop to push list's to stack. not done with push because we need to invert it's order on stack.
  1499 00000CA8 4839DA                          cmp rdx, rbx ; rdx=index, rbx=count
  1500 00000CAB 7422                            je .L_loop_exit
  1501 00000CAD 4989D9                          mov r9, rbx
  1502 00000CB0 4929D1                          sub r9, rdx
  1503 00000CB3 4983C101                        add r9, 1
  1504 00000CB7 4D6BC9F8                        imul r9, -8
  1505 00000CBB 4901E9                          add r9, rbp
  1506                                          ;mov [rbp-8*(rbx - rdx + 1)], SOB_PAIR_CAR(rax)
  1507 00000CBE 488B7801                        mov rdi, SOB_PAIR_CAR(rax)
  1508 00000CC2 498939                          mov [r9], rdi
  1509                                          ;;above line should push parameters in backward order (for list (1 2 3) should push 1 2 3 to stack)
  1510 00000CC5 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1511 00000CC9 4883C201                        add rdx, 1
  1512 00000CCD EBD9                            jmp .L_loop
  1513                                  .L_loop_exit:
  1514 00000CCF 4989D9                          mov r9, rbx
  1515 00000CD2 4983C101                        add r9,1
  1516 00000CD6 4D6BC9F8                        imul r9, -8
  1517 00000CDA 4901E9                          add r9,rbp
  1518                                         ; mov rsp, rbp- 8 * (rbx + 1) ;fix stack pointer to include added parameters in loop.
  1519 00000CDD 4C89CC                          mov rsp, r9
  1520 00000CE0 53                              push rbx
  1521 00000CE1 FF7101                          push SOB_CLOSURE_ENV(rcx)
  1522 00000CE4 4150                            push r8
  1523 00000CE6 FF6109                          jmp SOB_CLOSURE_CODE(rcx)
  1524                                  
  1525                                          
  1526                                  
  1527                                          
  1528                                  ;;; fill in for final project!
  1529                                  
  1530                                  L_code_ptr_is_null:
  1531 00000CE9 C8000000                        enter 0, 0
  1532 00000CED 48837D1801                      cmp COUNT, 1
  1533 00000CF2 0F8599120000                    jne L_error_arg_count_1
  1534 00000CF8 488B4520                        mov rax, PARAM(0)
  1535 00000CFC 803801                          cmp byte [rax], T_nil
  1536 00000CFF 750C                            jne .L_false
  1537 00000D01 48B8-                           mov rax, sob_boolean_true
  1537 00000D03 [0300000000000000] 
  1538 00000D0B EB0A                            jmp .L_end
  1539                                  .L_false:
  1540 00000D0D 48B8-                           mov rax, sob_boolean_false
  1540 00000D0F [0200000000000000] 
  1541                                  .L_end:
  1542 00000D17 C9                              leave
  1543 00000D18 C21800                          ret AND_KILL_FRAME(1)
  1544                                  
  1545                                  L_code_ptr_is_pair:
  1546 00000D1B C8000000                        enter 0, 0
  1547 00000D1F 48837D1801                      cmp COUNT, 1
  1548 00000D24 0F8567120000                    jne L_error_arg_count_1
  1549 00000D2A 488B4520                        mov rax, PARAM(0)
  1550 00000D2E 803821                          cmp byte [rax], T_pair
  1551 00000D31 750C                            jne .L_false
  1552 00000D33 48B8-                           mov rax, sob_boolean_true
  1552 00000D35 [0300000000000000] 
  1553 00000D3D EB0A                            jmp .L_end
  1554                                  .L_false:
  1555 00000D3F 48B8-                           mov rax, sob_boolean_false
  1555 00000D41 [0200000000000000] 
  1556                                  .L_end:
  1557 00000D49 C9                              leave
  1558 00000D4A C21800                          ret AND_KILL_FRAME(1)
  1559                                          
  1560                                  L_code_ptr_is_void:
  1561 00000D4D C8000000                        enter 0, 0
  1562 00000D51 48837D1801                      cmp COUNT, 1
  1563 00000D56 0F8535120000                    jne L_error_arg_count_1
  1564 00000D5C 488B4520                        mov rax, PARAM(0)
  1565 00000D60 803800                          cmp byte [rax], T_void
  1566 00000D63 750C                            jne .L_false
  1567 00000D65 48B8-                           mov rax, sob_boolean_true
  1567 00000D67 [0300000000000000] 
  1568 00000D6F EB0A                            jmp .L_end
  1569                                  .L_false:
  1570 00000D71 48B8-                           mov rax, sob_boolean_false
  1570 00000D73 [0200000000000000] 
  1571                                  .L_end:
  1572 00000D7B C9                              leave
  1573 00000D7C C21800                          ret AND_KILL_FRAME(1)
  1574                                  
  1575                                  L_code_ptr_is_char:
  1576 00000D7F C8000000                        enter 0, 0
  1577 00000D83 48837D1801                      cmp COUNT, 1
  1578 00000D88 0F8503120000                    jne L_error_arg_count_1
  1579 00000D8E 488B4520                        mov rax, PARAM(0)
  1580 00000D92 803802                          cmp byte [rax], T_char
  1581 00000D95 750C                            jne .L_false
  1582 00000D97 48B8-                           mov rax, sob_boolean_true
  1582 00000D99 [0300000000000000] 
  1583 00000DA1 EB0A                            jmp .L_end
  1584                                  .L_false:
  1585 00000DA3 48B8-                           mov rax, sob_boolean_false
  1585 00000DA5 [0200000000000000] 
  1586                                  .L_end:
  1587 00000DAD C9                              leave
  1588 00000DAE C21800                          ret AND_KILL_FRAME(1)
  1589                                  
  1590                                  L_code_ptr_is_string:
  1591 00000DB1 C8000000                        enter 0, 0
  1592 00000DB5 48837D1801                      cmp COUNT, 1
  1593 00000DBA 0F85D1110000                    jne L_error_arg_count_1
  1594 00000DC0 488B4520                        mov rax, PARAM(0)
  1595 00000DC4 803803                          cmp byte [rax], T_string
  1596 00000DC7 750C                            jne .L_false
  1597 00000DC9 48B8-                           mov rax, sob_boolean_true
  1597 00000DCB [0300000000000000] 
  1598 00000DD3 EB0A                            jmp .L_end
  1599                                  .L_false:
  1600 00000DD5 48B8-                           mov rax, sob_boolean_false
  1600 00000DD7 [0200000000000000] 
  1601                                  .L_end:
  1602 00000DDF C9                              leave
  1603 00000DE0 C21800                          ret AND_KILL_FRAME(1)
  1604                                  
  1605                                  L_code_ptr_is_symbol:
  1606 00000DE3 C8000000                        enter 0, 0
  1607 00000DE7 48837D1801                      cmp COUNT, 1
  1608 00000DEC 0F859F110000                    jne L_error_arg_count_1
  1609 00000DF2 4C8B4520                        mov r8, PARAM(0)
  1610 00000DF6 41802040                        and byte [r8], T_symbol
  1611 00000DFA 740C                            jz .L_false
  1612 00000DFC 48B8-                           mov rax, sob_boolean_true
  1612 00000DFE [0300000000000000] 
  1613 00000E06 EB0A                            jmp .L_exit
  1614                                  .L_false:
  1615 00000E08 48B8-                           mov rax, sob_boolean_false
  1615 00000E0A [0200000000000000] 
  1616                                  .L_exit:
  1617 00000E12 C9                              leave
  1618 00000E13 C21800                          ret AND_KILL_FRAME(1)
  1619                                  
  1620                                  L_code_ptr_is_uninterned_symbol:
  1621 00000E16 C8000000                        enter 0, 0
  1622 00000E1A 48837D1801                      cmp COUNT, 1
  1623 00000E1F 0F856C110000                    jne L_error_arg_count_1
  1624 00000E25 4C8B4520                        mov r8, PARAM(0)
  1625 00000E29 41803842                        cmp byte [r8], T_uninterned_symbol
  1626 00000E2D 750C                            jne .L_false
  1627 00000E2F 48B8-                           mov rax, sob_boolean_true
  1627 00000E31 [0300000000000000] 
  1628 00000E39 EB0A                            jmp .L_exit
  1629                                  .L_false:
  1630 00000E3B 48B8-                           mov rax, sob_boolean_false
  1630 00000E3D [0200000000000000] 
  1631                                  .L_exit:
  1632 00000E45 C9                              leave
  1633 00000E46 C21800                          ret AND_KILL_FRAME(1)
  1634                                  
  1635                                  L_code_ptr_is_interned_symbol:
  1636 00000E49 C8000000                        enter 0, 0
  1637 00000E4D 48837D1801                      cmp COUNT, 1
  1638 00000E52 0F8539110000                    jne L_error_arg_count_1
  1639 00000E58 488B4520                        mov rax, PARAM(0)
  1640 00000E5C 803841                          cmp byte [rax], T_interned_symbol
  1641 00000E5F 750C                            jne .L_false
  1642 00000E61 48B8-                           mov rax, sob_boolean_true
  1642 00000E63 [0300000000000000] 
  1643 00000E6B EB0A                            jmp .L_end
  1644                                  .L_false:
  1645 00000E6D 48B8-                           mov rax, sob_boolean_false
  1645 00000E6F [0200000000000000] 
  1646                                  .L_end:
  1647 00000E77 C9                              leave
  1648 00000E78 C21800                          ret AND_KILL_FRAME(1)
  1649                                  
  1650                                  L_code_ptr_gensym:
  1651 00000E7B C8000000                        enter 0, 0
  1652 00000E7F 48837D1800                      cmp COUNT, 0
  1653 00000E84 0F85D2100000                    jne L_error_arg_count_0
  1654 00000E8A 48FF0425[AF080000]              inc qword [gensym_count]
  1655 00000E92 BF09000000                      mov rdi, (1 + 8)
  1656 00000E97 E835F4FFFF                      call malloc
  1657 00000E9C C60042                          mov byte [rax], T_uninterned_symbol
  1658 00000E9F 488B0C25[AF080000]              mov rcx, qword [gensym_count]
  1659 00000EA7 48894801                        mov qword [rax + 1], rcx
  1660 00000EAB C9                              leave
  1661 00000EAC C21000                          ret AND_KILL_FRAME(0)
  1662                                  
  1663                                  L_code_ptr_is_vector:
  1664 00000EAF C8000000                        enter 0, 0
  1665 00000EB3 48837D1801                      cmp COUNT, 1
  1666 00000EB8 0F85D3100000                    jne L_error_arg_count_1
  1667 00000EBE 488B4520                        mov rax, PARAM(0)
  1668 00000EC2 803822                          cmp byte [rax], T_vector
  1669 00000EC5 750C                            jne .L_false
  1670 00000EC7 48B8-                           mov rax, sob_boolean_true
  1670 00000EC9 [0300000000000000] 
  1671 00000ED1 EB0A                            jmp .L_end
  1672                                  .L_false:
  1673 00000ED3 48B8-                           mov rax, sob_boolean_false
  1673 00000ED5 [0200000000000000] 
  1674                                  .L_end:
  1675 00000EDD C9                              leave
  1676 00000EDE C21800                          ret AND_KILL_FRAME(1)
  1677                                  
  1678                                  L_code_ptr_is_closure:
  1679 00000EE1 C8000000                        enter 0, 0
  1680 00000EE5 48837D1801                      cmp COUNT, 1
  1681 00000EEA 0F85A1100000                    jne L_error_arg_count_1
  1682 00000EF0 488B4520                        mov rax, PARAM(0)
  1683 00000EF4 803804                          cmp byte [rax], T_closure
  1684 00000EF7 750C                            jne .L_false
  1685 00000EF9 48B8-                           mov rax, sob_boolean_true
  1685 00000EFB [0300000000000000] 
  1686 00000F03 EB0A                            jmp .L_end
  1687                                  .L_false:
  1688 00000F05 48B8-                           mov rax, sob_boolean_false
  1688 00000F07 [0200000000000000] 
  1689                                  .L_end:
  1690 00000F0F C9                              leave
  1691 00000F10 C21800                          ret AND_KILL_FRAME(1)
  1692                                  
  1693                                  L_code_ptr_is_real:
  1694 00000F13 C8000000                        enter 0, 0
  1695 00000F17 48837D1801                      cmp COUNT, 1
  1696 00000F1C 0F856F100000                    jne L_error_arg_count_1
  1697 00000F22 488B4520                        mov rax, PARAM(0)
  1698 00000F26 803813                          cmp byte [rax], T_real
  1699 00000F29 750C                            jne .L_false
  1700 00000F2B 48B8-                           mov rax, sob_boolean_true
  1700 00000F2D [0300000000000000] 
  1701 00000F35 EB0A                            jmp .L_end
  1702                                  .L_false:
  1703 00000F37 48B8-                           mov rax, sob_boolean_false
  1703 00000F39 [0200000000000000] 
  1704                                  .L_end:
  1705 00000F41 C9                              leave
  1706 00000F42 C21800                          ret AND_KILL_FRAME(1)
  1707                                  
  1708                                  L_code_ptr_is_fraction:
  1709 00000F45 C8000000                        enter 0, 0
  1710 00000F49 48837D1801                      cmp COUNT, 1
  1711 00000F4E 0F853D100000                    jne L_error_arg_count_1
  1712 00000F54 488B4520                        mov rax, PARAM(0)
  1713 00000F58 803812                          cmp byte [rax], T_fraction
  1714 00000F5B 750C                            jne .L_false
  1715 00000F5D 48B8-                           mov rax, sob_boolean_true
  1715 00000F5F [0300000000000000] 
  1716 00000F67 EB0A                            jmp .L_end
  1717                                  .L_false:
  1718 00000F69 48B8-                           mov rax, sob_boolean_false
  1718 00000F6B [0200000000000000] 
  1719                                  .L_end:
  1720 00000F73 C9                              leave
  1721 00000F74 C21800                          ret AND_KILL_FRAME(1)
  1722                                  
  1723                                  L_code_ptr_is_boolean:
  1724 00000F77 C8000000                        enter 0, 0
  1725 00000F7B 48837D1801                      cmp COUNT, 1
  1726 00000F80 0F850B100000                    jne L_error_arg_count_1
  1727 00000F86 488B4520                        mov rax, PARAM(0)
  1728 00000F8A 8A18                            mov bl, byte [rax]
  1729 00000F8C 80E308                          and bl, T_boolean
  1730 00000F8F 740C                            je .L_false
  1731 00000F91 48B8-                           mov rax, sob_boolean_true
  1731 00000F93 [0300000000000000] 
  1732 00000F9B EB0A                            jmp .L_end
  1733                                  .L_false:
  1734 00000F9D 48B8-                           mov rax, sob_boolean_false
  1734 00000F9F [0200000000000000] 
  1735                                  .L_end:
  1736 00000FA7 C9                              leave
  1737 00000FA8 C21800                          ret AND_KILL_FRAME(1)
  1738                                          
  1739                                  L_code_ptr_is_boolean_false:
  1740 00000FAB C8000000                        enter 0, 0
  1741 00000FAF 48837D1801                      cmp COUNT, 1
  1742 00000FB4 0F85D70F0000                    jne L_error_arg_count_1
  1743 00000FBA 488B4520                        mov rax, PARAM(0)
  1744 00000FBE 8A18                            mov bl, byte [rax]
  1745 00000FC0 80FB09                          cmp bl, T_boolean_false
  1746 00000FC3 750C                            jne .L_false
  1747 00000FC5 48B8-                           mov rax, sob_boolean_true
  1747 00000FC7 [0300000000000000] 
  1748 00000FCF EB0A                            jmp .L_end
  1749                                  .L_false:
  1750 00000FD1 48B8-                           mov rax, sob_boolean_false
  1750 00000FD3 [0200000000000000] 
  1751                                  .L_end:
  1752 00000FDB C9                              leave
  1753 00000FDC C21800                          ret AND_KILL_FRAME(1)
  1754                                  
  1755                                  L_code_ptr_is_boolean_true:
  1756 00000FDF C8000000                        enter 0, 0
  1757 00000FE3 48837D1801                      cmp COUNT, 1
  1758 00000FE8 0F85A30F0000                    jne L_error_arg_count_1
  1759 00000FEE 488B4520                        mov rax, PARAM(0)
  1760 00000FF2 8A18                            mov bl, byte [rax]
  1761 00000FF4 80FB0A                          cmp bl, T_boolean_true
  1762 00000FF7 750C                            jne .L_false
  1763 00000FF9 48B8-                           mov rax, sob_boolean_true
  1763 00000FFB [0300000000000000] 
  1764 00001003 EB0A                            jmp .L_end
  1765                                  .L_false:
  1766 00001005 48B8-                           mov rax, sob_boolean_false
  1766 00001007 [0200000000000000] 
  1767                                  .L_end:
  1768 0000100F C9                              leave
  1769 00001010 C21800                          ret AND_KILL_FRAME(1)
  1770                                  
  1771                                  L_code_ptr_is_number:
  1772 00001013 C8000000                        enter 0, 0
  1773 00001017 48837D1801                      cmp COUNT, 1
  1774 0000101C 0F856F0F0000                    jne L_error_arg_count_1
  1775 00001022 488B4520                        mov rax, PARAM(0)
  1776 00001026 8A18                            mov bl, byte [rax]
  1777 00001028 80E310                          and bl, T_number
  1778 0000102B 740C                            jz .L_false
  1779 0000102D 48B8-                           mov rax, sob_boolean_true
  1779 0000102F [0300000000000000] 
  1780 00001037 EB0A                            jmp .L_end
  1781                                  .L_false:
  1782 00001039 48B8-                           mov rax, sob_boolean_false
  1782 0000103B [0200000000000000] 
  1783                                  .L_end:
  1784 00001043 C9                              leave
  1785 00001044 C21800                          ret AND_KILL_FRAME(1)
  1786                                          
  1787                                  L_code_ptr_is_collection:
  1788 00001047 C8000000                        enter 0, 0
  1789 0000104B 48837D1801                      cmp COUNT, 1
  1790 00001050 0F853B0F0000                    jne L_error_arg_count_1
  1791 00001056 488B4520                        mov rax, PARAM(0)
  1792 0000105A 8A18                            mov bl, byte [rax]
  1793 0000105C 80E320                          and bl, T_collection
  1794 0000105F 740C                            je .L_false
  1795 00001061 48B8-                           mov rax, sob_boolean_true
  1795 00001063 [0300000000000000] 
  1796 0000106B EB0A                            jmp .L_end
  1797                                  .L_false:
  1798 0000106D 48B8-                           mov rax, sob_boolean_false
  1798 0000106F [0200000000000000] 
  1799                                  .L_end:
  1800 00001077 C9                              leave
  1801 00001078 C21800                          ret AND_KILL_FRAME(1)
  1802                                  
  1803                                  L_code_ptr_cons:
  1804 0000107B C8000000                        enter 0, 0
  1805 0000107F 48837D1802                      cmp COUNT, 2
  1806 00001084 0F853C0F0000                    jne L_error_arg_count_2
  1807 0000108A BF11000000                      mov rdi, (1 + 8 + 8)
  1808 0000108F E83DF2FFFF                      call malloc
  1809 00001094 C60021                          mov byte [rax], T_pair
  1810 00001097 488B5D20                        mov rbx, PARAM(0)
  1811 0000109B 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1812 0000109F 488B5D28                        mov rbx, PARAM(1)
  1813 000010A3 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1814 000010A7 C9                              leave
  1815 000010A8 C22000                          ret AND_KILL_FRAME(2)
  1816                                  
  1817                                  L_code_ptr_display_sexpr:
  1818 000010AB C8000000                        enter 0, 0
  1819 000010AF 48837D1801                      cmp COUNT, 1
  1820 000010B4 0F85D70E0000                    jne L_error_arg_count_1
  1821 000010BA 488B7D20                        mov rdi, PARAM(0)
  1822 000010BE E88FF4FFFF                      call print_sexpr
  1823 000010C3 48B8-                           mov rax, sob_void
  1823 000010C5 [0000000000000000] 
  1824 000010CD C9                              leave
  1825 000010CE C21800                          ret AND_KILL_FRAME(1)
  1826                                  
  1827                                  L_code_ptr_write_char:
  1828 000010D1 C8000000                        enter 0, 0
  1829 000010D5 48837D1801                      cmp COUNT, 1
  1830 000010DA 0F85B10E0000                    jne L_error_arg_count_1
  1831 000010E0 488B4520                        mov rax, PARAM(0)
  1832                                          assert_char(rax)
    53 000010E4 803802              <1>  cmp byte [%1], %2
    54 000010E7 0F85780F0000        <1>  jne L_error_incorrect_type
  1833 000010ED 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1834 000010F0 4825FF000000                    and rax, 255
  1835 000010F6 48BF-                           mov rdi, fmt_char
  1835 000010F8 [B708000000000000] 
  1836 00001100 4889C6                          mov rsi, rax
  1837 00001103 B800000000                      mov rax, 0
  1838                                          ENTER
    44 00001108 C8000000            <1>  enter 0, 0
    45 0000110C 4883E4F0            <1>  and rsp, ~15
  1839 00001110 E8(00000000)                    call printf
  1840                                          LEAVE
    49 00001115 C9                  <1>  leave
  1841 00001116 48B8-                           mov rax, sob_void
  1841 00001118 [0000000000000000] 
  1842 00001120 C9                              leave
  1843 00001121 C21800                          ret AND_KILL_FRAME(1)
  1844                                  
  1845                                  L_code_ptr_car:
  1846 00001124 C8000000                        enter 0, 0
  1847 00001128 48837D1801                      cmp COUNT, 1
  1848 0000112D 0F855E0E0000                    jne L_error_arg_count_1
  1849 00001133 488B4520                        mov rax, PARAM(0)
  1850                                          assert_pair(rax)
    53 00001137 803821              <1>  cmp byte [%1], %2
    54 0000113A 0F85250F0000        <1>  jne L_error_incorrect_type
  1851 00001140 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1852 00001144 C9                              leave
  1853 00001145 C21800                          ret AND_KILL_FRAME(1)
  1854                                          
  1855                                  L_code_ptr_cdr:
  1856 00001148 C8000000                        enter 0, 0
  1857 0000114C 48837D1801                      cmp COUNT, 1
  1858 00001151 0F853A0E0000                    jne L_error_arg_count_1
  1859 00001157 488B4520                        mov rax, PARAM(0)
  1860                                          assert_pair(rax)
    53 0000115B 803821              <1>  cmp byte [%1], %2
    54 0000115E 0F85010F0000        <1>  jne L_error_incorrect_type
  1861 00001164 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1862 00001168 C9                              leave
  1863 00001169 C21800                          ret AND_KILL_FRAME(1)
  1864                                          
  1865                                  L_code_ptr_string_length:
  1866 0000116C C8000000                        enter 0, 0
  1867 00001170 48837D1801                      cmp COUNT, 1
  1868 00001175 0F85160E0000                    jne L_error_arg_count_1
  1869 0000117B 488B4520                        mov rax, PARAM(0)
  1870                                          assert_string(rax)
    53 0000117F 803803              <1>  cmp byte [%1], %2
    54 00001182 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1871 00001188 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1872 0000118C E84F0D0000                      call make_integer
  1873 00001191 C9                              leave
  1874 00001192 C21800                          ret AND_KILL_FRAME(1)
  1875                                  
  1876                                  L_code_ptr_vector_length:
  1877 00001195 C8000000                        enter 0, 0
  1878 00001199 48837D1801                      cmp COUNT, 1
  1879 0000119E 0F85ED0D0000                    jne L_error_arg_count_1
  1880 000011A4 488B4520                        mov rax, PARAM(0)
  1881                                          assert_vector(rax)
    53 000011A8 803822              <1>  cmp byte [%1], %2
    54 000011AB 0F85B40E0000        <1>  jne L_error_incorrect_type
  1882 000011B1 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1883 000011B5 E8260D0000                      call make_integer
  1884 000011BA C9                              leave
  1885 000011BB C21800                          ret AND_KILL_FRAME(1)
  1886                                  
  1887                                  L_code_ptr_real_to_integer:
  1888 000011BE C8000000                        enter 0, 0
  1889 000011C2 48837D1801                      cmp COUNT, 1
  1890 000011C7 0F85C40D0000                    jne L_error_arg_count_1
  1891 000011CD 488B5D20                        mov rbx, PARAM(0)
  1892                                          assert_real(rbx)
    53 000011D1 803B13              <1>  cmp byte [%1], %2
    54 000011D4 0F858B0E0000        <1>  jne L_error_incorrect_type
  1893 000011DA F20F104301                      movsd xmm0, qword [rbx + 1]
  1894 000011DF F2480F2CF8                      cvttsd2si rdi, xmm0
  1895 000011E4 E8F70C0000                      call make_integer
  1896 000011E9 C9                              leave
  1897 000011EA C21800                          ret AND_KILL_FRAME(1)
  1898                                  
  1899                                  L_code_ptr_exit:
  1900 000011ED C8000000                        enter 0, 0
  1901 000011F1 48837D1800                      cmp COUNT, 0
  1902 000011F6 0F85600D0000                    jne L_error_arg_count_0
  1903 000011FC B800000000                      mov rax, 0
  1904 00001201 E8(00000000)                    call exit
  1905                                  
  1906                                  L_code_ptr_integer_to_real:
  1907 00001206 C8000000                        enter 0, 0
  1908 0000120A 48837D1801                      cmp COUNT, 1
  1909 0000120F 0F857C0D0000                    jne L_error_arg_count_1
  1910 00001215 488B4520                        mov rax, PARAM(0)
  1911                                          assert_integer(rax)
    53 00001219 803811              <1>  cmp byte [%1], %2
    54 0000121C 0F85430E0000        <1>  jne L_error_incorrect_type
  1912 00001222 FF7001                          push qword [rax + 1]
  1913 00001225 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1914 0000122B E8980C0000                      call make_real
  1915 00001230 C9                              leave
  1916 00001231 C21800                          ret AND_KILL_FRAME(1)
  1917                                  
  1918                                  L_code_ptr_fraction_to_real:
  1919 00001234 C8000000                        enter 0, 0
  1920 00001238 48837D1801                      cmp COUNT, 1
  1921 0000123D 0F854E0D0000                    jne L_error_arg_count_1
  1922 00001243 488B4520                        mov rax, PARAM(0)
  1923                                          assert_fraction(rax)
    53 00001247 803812              <1>  cmp byte [%1], %2
    54 0000124A 0F85150E0000        <1>  jne L_error_incorrect_type
  1924 00001250 FF7001                          push qword [rax + 1]
  1925 00001253 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1926 00001259 FF7009                          push qword [rax + 1 + 8]
  1927 0000125C F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1928 00001262 F20F5EC1                        divsd xmm0, xmm1
  1929 00001266 E85D0C0000                      call make_real
  1930 0000126B C9                              leave
  1931 0000126C C21800                          ret AND_KILL_FRAME(1)
  1932                                  
  1933                                  L_code_ptr_char_to_integer:
  1934 0000126F C8000000                        enter 0, 0
  1935 00001273 48837D1801                      cmp COUNT, 1
  1936 00001278 0F85130D0000                    jne L_error_arg_count_1
  1937 0000127E 488B4520                        mov rax, PARAM(0)
  1938                                          assert_char(rax)
    53 00001282 803802              <1>  cmp byte [%1], %2
    54 00001285 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1939 0000128B 8A4001                          mov al, byte [rax + 1]
  1940 0000128E 4825FF000000                    and rax, 255
  1941 00001294 4889C7                          mov rdi, rax
  1942 00001297 E8440C0000                      call make_integer
  1943 0000129C C9                              leave
  1944 0000129D C21800                          ret AND_KILL_FRAME(1)
  1945                                  
  1946                                  L_code_ptr_integer_to_fraction:
  1947 000012A0 C8000000                        enter 0, 0
  1948 000012A4 48837D1801                      cmp COUNT, 1
  1949 000012A9 0F85E20C0000                    jne L_error_arg_count_1
  1950 000012AF 4C8B4520                        mov r8, PARAM(0)
  1951                                          assert_integer(r8)
    53 000012B3 41803811            <1>  cmp byte [%1], %2
    54 000012B7 0F85A80D0000        <1>  jne L_error_incorrect_type
  1952 000012BD BF11000000                      mov rdi, (1 + 8 + 8)
  1953 000012C2 E80AF0FFFF                      call malloc
  1954 000012C7 498B5801                        mov rbx, qword [r8 + 1]
  1955 000012CB C60012                          mov byte [rax], T_fraction
  1956 000012CE 48895801                        mov qword [rax + 1], rbx
  1957 000012D2 48C7400901000000                mov qword [rax + 1 + 8], 1
  1958 000012DA C9                              leave
  1959 000012DB C21800                          ret AND_KILL_FRAME(1)
  1960                                  
  1961                                  L_code_ptr_integer_to_char:
  1962 000012DE C8000000                        enter 0, 0
  1963 000012E2 48837D1801                      cmp COUNT, 1
  1964 000012E7 0F85A40C0000                    jne L_error_arg_count_1
  1965 000012ED 488B4520                        mov rax, PARAM(0)
  1966                                          assert_integer(rax)
    53 000012F1 803811              <1>  cmp byte [%1], %2
    54 000012F4 0F856B0D0000        <1>  jne L_error_incorrect_type
  1967 000012FA 488B5801                        mov rbx, qword [rax + 1]
  1968 000012FE 4883FB00                        cmp rbx, 0
  1969 00001302 0F8EF20B0000                    jle L_error_integer_range
  1970 00001308 4881FB00010000                  cmp rbx, 256
  1971 0000130F 0F8DE50B0000                    jge L_error_integer_range
  1972 00001315 BF02000000                      mov rdi, (1 + 1)
  1973 0000131A E8B2EFFFFF                      call malloc
  1974 0000131F C60002                          mov byte [rax], T_char
  1975 00001322 885801                          mov byte [rax + 1], bl
  1976 00001325 C9                              leave
  1977 00001326 C21800                          ret AND_KILL_FRAME(1)
  1978                                  
  1979                                  L_code_ptr_trng:
  1980 00001329 C8000000                        enter 0, 0
  1981 0000132D 48837D1800                      cmp COUNT, 0
  1982 00001332 0F85240C0000                    jne L_error_arg_count_0
  1983 00001338 480FC7F7                        rdrand rdi
  1984 0000133C 48D1EF                          shr rdi, 1
  1985 0000133F E89C0B0000                      call make_integer
  1986 00001344 C9                              leave
  1987 00001345 C21000                          ret AND_KILL_FRAME(0)
  1988                                  
  1989                                  L_code_ptr_is_zero:
  1990 00001348 C8000000                        enter 0, 0
  1991 0000134C 48837D1801                      cmp COUNT, 1
  1992 00001351 0F853A0C0000                    jne L_error_arg_count_1
  1993 00001357 488B4520                        mov rax, PARAM(0)
  1994 0000135B 803811                          cmp byte [rax], T_integer
  1995 0000135E 740F                            je .L_integer
  1996 00001360 803812                          cmp byte [rax], T_fraction
  1997 00001363 7413                            je .L_fraction
  1998 00001365 803813                          cmp byte [rax], T_real
  1999 00001368 7417                            je .L_real
  2000 0000136A E9F60C0000                      jmp L_error_incorrect_type
  2001                                  .L_integer:
  2002 0000136F 4883780100                      cmp qword [rax + 1], 0
  2003 00001374 7429                            je .L_zero
  2004 00001376 EB1B                            jmp .L_not_zero
  2005                                  .L_fraction:
  2006 00001378 4883780100                      cmp qword [rax + 1], 0
  2007 0000137D 7420                            je .L_zero
  2008 0000137F EB12                            jmp .L_not_zero
  2009                                  .L_real:
  2010 00001381 660FEFC0                        pxor xmm0, xmm0
  2011 00001385 FF7001                          push qword [rax + 1]
  2012 00001388 F20F100C24                      movsd xmm1, qword [rsp]
  2013 0000138D 660F2EC1                        ucomisd xmm0, xmm1
  2014 00001391 740C                            je .L_zero
  2015                                  .L_not_zero:
  2016 00001393 48B8-                           mov rax, sob_boolean_false
  2016 00001395 [0200000000000000] 
  2017 0000139D EB0A                            jmp .L_end
  2018                                  .L_zero:
  2019 0000139F 48B8-                           mov rax, sob_boolean_true
  2019 000013A1 [0300000000000000] 
  2020                                  .L_end:
  2021 000013A9 C9                              leave
  2022 000013AA C21800                          ret AND_KILL_FRAME(1)
  2023                                  
  2024                                  L_code_ptr_is_integer:
  2025 000013AD C8000000                        enter 0, 0
  2026 000013B1 48837D1801                      cmp COUNT, 1
  2027 000013B6 0F85D50B0000                    jne L_error_arg_count_1
  2028 000013BC 488B4520                        mov rax, PARAM(0)
  2029 000013C0 803811                          cmp byte [rax], T_integer
  2030 000013C3 750C                            jne .L_false
  2031 000013C5 48B8-                           mov rax, sob_boolean_true
  2031 000013C7 [0300000000000000] 
  2032 000013CF EB0A                            jmp .L_exit
  2033                                  .L_false:
  2034 000013D1 48B8-                           mov rax, sob_boolean_false
  2034 000013D3 [0200000000000000] 
  2035                                  .L_exit:
  2036 000013DB C9                              leave
  2037 000013DC C21800                          ret AND_KILL_FRAME(1)
  2038                                  
  2039                                  L_code_ptr_raw_bin_add_rr:
  2040 000013DF C8000000                        enter 0, 0
  2041 000013E3 48837D1802                      cmp COUNT, 2
  2042 000013E8 0F85D80B0000                    jne L_error_arg_count_2
  2043 000013EE 488B5D20                        mov rbx, PARAM(0)
  2044                                          assert_real(rbx)
    53 000013F2 803B13              <1>  cmp byte [%1], %2
    54 000013F5 0F856A0C0000        <1>  jne L_error_incorrect_type
  2045 000013FB 488B4D28                        mov rcx, PARAM(1)
  2046                                          assert_real(rcx)
    53 000013FF 803913              <1>  cmp byte [%1], %2
    54 00001402 0F855D0C0000        <1>  jne L_error_incorrect_type
  2047 00001408 F20F104301                      movsd xmm0, qword [rbx + 1]
  2048 0000140D F20F104901                      movsd xmm1, qword [rcx + 1]
  2049 00001412 F20F58C1                        addsd xmm0, xmm1
  2050 00001416 E8AD0A0000                      call make_real
  2051 0000141B C9                              leave
  2052 0000141C C22000                          ret AND_KILL_FRAME(2)
  2053                                  
  2054                                  L_code_ptr_raw_bin_sub_rr:
  2055 0000141F C8000000                        enter 0, 0
  2056 00001423 48837D1802                      cmp COUNT, 2
  2057 00001428 0F85980B0000                    jne L_error_arg_count_2
  2058 0000142E 488B5D20                        mov rbx, PARAM(0)
  2059                                          assert_real(rbx)
    53 00001432 803B13              <1>  cmp byte [%1], %2
    54 00001435 0F852A0C0000        <1>  jne L_error_incorrect_type
  2060 0000143B 488B4D28                        mov rcx, PARAM(1)
  2061                                          assert_real(rcx)
    53 0000143F 803913              <1>  cmp byte [%1], %2
    54 00001442 0F851D0C0000        <1>  jne L_error_incorrect_type
  2062 00001448 F20F104301                      movsd xmm0, qword [rbx + 1]
  2063 0000144D F20F104901                      movsd xmm1, qword [rcx + 1]
  2064 00001452 F20F5CC1                        subsd xmm0, xmm1
  2065 00001456 E86D0A0000                      call make_real
  2066 0000145B C9                              leave
  2067 0000145C C22000                          ret AND_KILL_FRAME(2)
  2068                                  
  2069                                  L_code_ptr_raw_bin_mul_rr:
  2070 0000145F C8000000                        enter 0, 0
  2071 00001463 48837D1802                      cmp COUNT, 2
  2072 00001468 0F85580B0000                    jne L_error_arg_count_2
  2073 0000146E 488B5D20                        mov rbx, PARAM(0)
  2074                                          assert_real(rbx)
    53 00001472 803B13              <1>  cmp byte [%1], %2
    54 00001475 0F85EA0B0000        <1>  jne L_error_incorrect_type
  2075 0000147B 488B4D28                        mov rcx, PARAM(1)
  2076                                          assert_real(rcx)
    53 0000147F 803913              <1>  cmp byte [%1], %2
    54 00001482 0F85DD0B0000        <1>  jne L_error_incorrect_type
  2077 00001488 F20F104301                      movsd xmm0, qword [rbx + 1]
  2078 0000148D F20F104901                      movsd xmm1, qword [rcx + 1]
  2079 00001492 F20F59C1                        mulsd xmm0, xmm1
  2080 00001496 E82D0A0000                      call make_real
  2081 0000149B C9                              leave
  2082 0000149C C22000                          ret AND_KILL_FRAME(2)
  2083                                  
  2084                                  L_code_ptr_raw_bin_div_rr:
  2085 0000149F C8000000                        enter 0, 0
  2086 000014A3 48837D1802                      cmp COUNT, 2
  2087 000014A8 0F85180B0000                    jne L_error_arg_count_2
  2088 000014AE 488B5D20                        mov rbx, PARAM(0)
  2089                                          assert_real(rbx)
    53 000014B2 803B13              <1>  cmp byte [%1], %2
    54 000014B5 0F85AA0B0000        <1>  jne L_error_incorrect_type
  2090 000014BB 488B4D28                        mov rcx, PARAM(1)
  2091                                          assert_real(rcx)
    53 000014BF 803913              <1>  cmp byte [%1], %2
    54 000014C2 0F859D0B0000        <1>  jne L_error_incorrect_type
  2092 000014C8 F20F104301                      movsd xmm0, qword [rbx + 1]
  2093 000014CD F20F104901                      movsd xmm1, qword [rcx + 1]
  2094 000014D2 660FEFD2                        pxor xmm2, xmm2
  2095 000014D6 660F2ECA                        ucomisd xmm1, xmm2
  2096 000014DA 0F84B60B0000                    je L_error_division_by_zero
  2097 000014E0 F20F5EC1                        divsd xmm0, xmm1
  2098 000014E4 E8DF090000                      call make_real
  2099 000014E9 C9                              leave
  2100 000014EA C22000                          ret AND_KILL_FRAME(2)
  2101                                  
  2102                                  L_code_ptr_raw_bin_add_zz:
  2103 000014ED C8000000                	enter 0, 0
  2104 000014F1 48837D1802              	cmp COUNT, 2
  2105 000014F6 0F85CA0A0000            	jne L_error_arg_count_2
  2106 000014FC 4C8B4520                	mov r8, PARAM(0)
  2107                                  	assert_integer(r8)
    53 00001500 41803811            <1>  cmp byte [%1], %2
    54 00001504 0F855B0B0000        <1>  jne L_error_incorrect_type
  2108 0000150A 4C8B4D28                	mov r9, PARAM(1)
  2109                                  	assert_integer(r9)
    53 0000150E 41803911            <1>  cmp byte [%1], %2
    54 00001512 0F854D0B0000        <1>  jne L_error_incorrect_type
  2110 00001518 498B7801                	mov rdi, qword [r8 + 1]
  2111 0000151C 49037901                	add rdi, qword [r9 + 1]
  2112 00001520 E8BB090000              	call make_integer
  2113 00001525 C9                      	leave
  2114 00001526 C22000                  	ret AND_KILL_FRAME(2)
  2115                                  
  2116                                  L_code_ptr_raw_bin_add_qq:
  2117 00001529 C8000000                        enter 0, 0
  2118 0000152D 48837D1802                      cmp COUNT, 2
  2119 00001532 0F858E0A0000                    jne L_error_arg_count_2
  2120 00001538 4C8B4520                        mov r8, PARAM(0)
  2121                                          assert_fraction(r8)
    53 0000153C 41803812            <1>  cmp byte [%1], %2
    54 00001540 0F851F0B0000        <1>  jne L_error_incorrect_type
  2122 00001546 4C8B4D28                        mov r9, PARAM(1)
  2123                                          assert_fraction(r9)
    53 0000154A 41803912            <1>  cmp byte [%1], %2
    54 0000154E 0F85110B0000        <1>  jne L_error_incorrect_type
  2124 00001554 498B4001                        mov rax, qword [r8 + 1] ; num1
  2125 00001558 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2126 0000155C 4899                            cqo
  2127 0000155E 48F7EB                          imul rbx
  2128 00001561 4889C6                          mov rsi, rax
  2129 00001564 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2130 00001568 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2131 0000156C 4899                            cqo
  2132 0000156E 48F7EB                          imul rbx
  2133 00001571 4801C6                          add rsi, rax
  2134 00001574 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2135 00001578 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2136 0000157C 4899                            cqo
  2137 0000157E 48F7EB                          imul rbx
  2138 00001581 4889C7                          mov rdi, rax
  2139 00001584 E8DE010000                      call normalize_fraction
  2140 00001589 C9                              leave
  2141 0000158A C22000                          ret AND_KILL_FRAME(2)
  2142                                  
  2143                                  L_code_ptr_raw_bin_sub_zz:
  2144 0000158D C8000000                	enter 0, 0
  2145 00001591 48837D1802              	cmp COUNT, 2
  2146 00001596 0F852A0A0000            	jne L_error_arg_count_2
  2147 0000159C 4C8B4520                	mov r8, PARAM(0)
  2148                                  	assert_integer(r8)
    53 000015A0 41803811            <1>  cmp byte [%1], %2
    54 000015A4 0F85BB0A0000        <1>  jne L_error_incorrect_type
  2149 000015AA 4C8B4D28                	mov r9, PARAM(1)
  2150                                  	assert_integer(r9)
    53 000015AE 41803911            <1>  cmp byte [%1], %2
    54 000015B2 0F85AD0A0000        <1>  jne L_error_incorrect_type
  2151 000015B8 498B7801                	mov rdi, qword [r8 + 1]
  2152 000015BC 492B7901                	sub rdi, qword [r9 + 1]
  2153 000015C0 E81B090000              	call make_integer
  2154 000015C5 C9                      	leave
  2155 000015C6 C22000                  	ret AND_KILL_FRAME(2)
  2156                                  
  2157                                  L_code_ptr_raw_bin_sub_qq:
  2158 000015C9 C8000000                        enter 0, 0
  2159 000015CD 48837D1802                      cmp COUNT, 2
  2160 000015D2 0F85EE090000                    jne L_error_arg_count_2
  2161 000015D8 4C8B4520                        mov r8, PARAM(0)
  2162                                          assert_fraction(r8)
    53 000015DC 41803812            <1>  cmp byte [%1], %2
    54 000015E0 0F857F0A0000        <1>  jne L_error_incorrect_type
  2163 000015E6 4C8B4D28                        mov r9, PARAM(1)
  2164                                          assert_fraction(r9)
    53 000015EA 41803912            <1>  cmp byte [%1], %2
    54 000015EE 0F85710A0000        <1>  jne L_error_incorrect_type
  2165 000015F4 498B4001                        mov rax, qword [r8 + 1] ; num1
  2166 000015F8 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2167 000015FC 4899                            cqo
  2168 000015FE 48F7EB                          imul rbx
  2169 00001601 4889C6                          mov rsi, rax
  2170 00001604 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2171 00001608 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2172 0000160C 4899                            cqo
  2173 0000160E 48F7EB                          imul rbx
  2174 00001611 4829C6                          sub rsi, rax
  2175 00001614 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2176 00001618 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2177 0000161C 4899                            cqo
  2178 0000161E 48F7EB                          imul rbx
  2179 00001621 4889C7                          mov rdi, rax
  2180 00001624 E83E010000                      call normalize_fraction
  2181 00001629 C9                              leave
  2182 0000162A C22000                          ret AND_KILL_FRAME(2)
  2183                                  
  2184                                  L_code_ptr_raw_bin_mul_zz:
  2185 0000162D C8000000                	enter 0, 0
  2186 00001631 48837D1802              	cmp COUNT, 2
  2187 00001636 0F858A090000            	jne L_error_arg_count_2
  2188 0000163C 4C8B4520                	mov r8, PARAM(0)
  2189                                  	assert_integer(r8)
    53 00001640 41803811            <1>  cmp byte [%1], %2
    54 00001644 0F851B0A0000        <1>  jne L_error_incorrect_type
  2190 0000164A 4C8B4D28                	mov r9, PARAM(1)
  2191                                  	assert_integer(r9)
    53 0000164E 41803911            <1>  cmp byte [%1], %2
    54 00001652 0F850D0A0000        <1>  jne L_error_incorrect_type
  2192 00001658 4899                    	cqo
  2193 0000165A 498B4001                	mov rax, qword [r8 + 1]
  2194 0000165E 49F76101                	mul qword [r9 + 1]
  2195 00001662 4889C7                  	mov rdi, rax
  2196 00001665 E876080000              	call make_integer
  2197 0000166A C9                      	leave
  2198 0000166B C22000                  	ret AND_KILL_FRAME(2)
  2199                                  
  2200                                  L_code_ptr_raw_bin_mul_qq:
  2201 0000166E C8000000                        enter 0, 0
  2202 00001672 48837D1802                      cmp COUNT, 2
  2203 00001677 0F8549090000                    jne L_error_arg_count_2
  2204 0000167D 4C8B4520                        mov r8, PARAM(0)
  2205                                          assert_fraction(r8)
    53 00001681 41803812            <1>  cmp byte [%1], %2
    54 00001685 0F85DA090000        <1>  jne L_error_incorrect_type
  2206 0000168B 4C8B4D28                        mov r9, PARAM(1)
  2207                                          assert_fraction(r9)
    53 0000168F 41803912            <1>  cmp byte [%1], %2
    54 00001693 0F85CC090000        <1>  jne L_error_incorrect_type
  2208 00001699 498B4001                        mov rax, qword [r8 + 1] ; num1
  2209 0000169D 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2210 000016A1 4899                            cqo
  2211 000016A3 48F7EB                          imul rbx
  2212 000016A6 4889C6                          mov rsi, rax
  2213 000016A9 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2214 000016AD 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2215 000016B1 4899                            cqo
  2216 000016B3 48F7EB                          imul rbx
  2217 000016B6 4889C7                          mov rdi, rax
  2218 000016B9 E8A9000000                      call normalize_fraction
  2219 000016BE C9                              leave
  2220 000016BF C22000                          ret AND_KILL_FRAME(2)
  2221                                          
  2222                                  L_code_ptr_raw_bin_div_zz:
  2223 000016C2 C8000000                	enter 0, 0
  2224 000016C6 48837D1802              	cmp COUNT, 2
  2225 000016CB 0F85F5080000            	jne L_error_arg_count_2
  2226 000016D1 4C8B4520                	mov r8, PARAM(0)
  2227                                  	assert_integer(r8)
    53 000016D5 41803811            <1>  cmp byte [%1], %2
    54 000016D9 0F8586090000        <1>  jne L_error_incorrect_type
  2228 000016DF 4C8B4D28                	mov r9, PARAM(1)
  2229                                  	assert_integer(r9)
    53 000016E3 41803911            <1>  cmp byte [%1], %2
    54 000016E7 0F8578090000        <1>  jne L_error_incorrect_type
  2230 000016ED 498B7901                	mov rdi, qword [r9 + 1]
  2231 000016F1 4883FF00                	cmp rdi, 0
  2232 000016F5 0F849B090000            	je L_error_division_by_zero
  2233 000016FB 498B7001                	mov rsi, qword [r8 + 1]
  2234 000016FF E863000000              	call normalize_fraction
  2235 00001704 C9                      	leave
  2236 00001705 C22000                  	ret AND_KILL_FRAME(2)
  2237                                  
  2238                                  L_code_ptr_raw_bin_div_qq:
  2239 00001708 C8000000                        enter 0, 0
  2240 0000170C 48837D1802                      cmp COUNT, 2
  2241 00001711 0F85AF080000                    jne L_error_arg_count_2
  2242 00001717 4C8B4520                        mov r8, PARAM(0)
  2243                                          assert_fraction(r8)
    53 0000171B 41803812            <1>  cmp byte [%1], %2
    54 0000171F 0F8540090000        <1>  jne L_error_incorrect_type
  2244 00001725 4C8B4D28                        mov r9, PARAM(1)
  2245                                          assert_fraction(r9)
    53 00001729 41803912            <1>  cmp byte [%1], %2
    54 0000172D 0F8532090000        <1>  jne L_error_incorrect_type
  2246 00001733 4983790100                      cmp qword [r9 + 1], 0
  2247 00001738 0F8458090000                    je L_error_division_by_zero
  2248 0000173E 498B4001                        mov rax, qword [r8 + 1] ; num1
  2249 00001742 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2250 00001746 4899                            cqo
  2251 00001748 48F7EB                          imul rbx
  2252 0000174B 4889C6                          mov rsi, rax
  2253 0000174E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2254 00001752 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2255 00001756 4899                            cqo
  2256 00001758 48F7EB                          imul rbx
  2257 0000175B 4889C7                          mov rdi, rax
  2258 0000175E E804000000                      call normalize_fraction
  2259 00001763 C9                              leave
  2260 00001764 C22000                          ret AND_KILL_FRAME(2)
  2261                                          
  2262                                  normalize_fraction:
  2263 00001767 56                              push rsi
  2264 00001768 57                              push rdi
  2265 00001769 E859000000                      call gcd
  2266 0000176E 4889C3                          mov rbx, rax
  2267 00001771 58                              pop rax
  2268 00001772 4899                            cqo
  2269 00001774 48F7FB                          idiv rbx
  2270 00001777 4989C0                          mov r8, rax
  2271 0000177A 58                              pop rax
  2272 0000177B 4899                            cqo
  2273 0000177D 48F7FB                          idiv rbx
  2274 00001780 4989C1                          mov r9, rax
  2275 00001783 4983F900                        cmp r9, 0
  2276 00001787 741C                            je .L_zero
  2277 00001789 4983F801                        cmp r8, 1
  2278 0000178D 7421                            je .L_int
  2279 0000178F BF11000000                      mov rdi, (1 + 8 + 8)
  2280 00001794 E838EBFFFF                      call malloc
  2281 00001799 C60012                          mov byte [rax], T_fraction
  2282 0000179C 4C894801                        mov qword [rax + 1], r9
  2283 000017A0 4C894009                        mov qword [rax + 1 + 8], r8
  2284 000017A4 C3                              ret
  2285                                  .L_zero:
  2286 000017A5 BF00000000                      mov rdi, 0
  2287 000017AA E831070000                      call make_integer
  2288 000017AF C3                              ret
  2289                                  .L_int:
  2290 000017B0 4C89CF                          mov rdi, r9
  2291 000017B3 E828070000                      call make_integer
  2292 000017B8 C3                              ret
  2293                                  
  2294                                  iabs:
  2295 000017B9 4889F8                          mov rax, rdi
  2296 000017BC 4883F800                        cmp rax, 0
  2297 000017C0 7C01                            jl .Lneg
  2298 000017C2 C3                              ret
  2299                                  .Lneg:
  2300 000017C3 48F7D8                          neg rax
  2301 000017C6 C3                              ret
  2302                                  
  2303                                  gcd:
  2304 000017C7 E8EDFFFFFF                      call iabs
  2305 000017CC 4889C3                          mov rbx, rax
  2306 000017CF 4889F7                          mov rdi, rsi
  2307 000017D2 E8E2FFFFFF                      call iabs
  2308 000017D7 4883F800                        cmp rax, 0
  2309 000017DB 7502                            jne .L0
  2310 000017DD 4893                            xchg rax, rbx
  2311                                  .L0:
  2312 000017DF 4883FB00                        cmp rbx, 0
  2313 000017E3 740C                            je .L1
  2314 000017E5 4899                            cqo
  2315 000017E7 48F7F3                          div rbx
  2316 000017EA 4889D0                          mov rax, rdx
  2317 000017ED 4893                            xchg rax, rbx
  2318 000017EF EBEE                            jmp .L0
  2319                                  .L1:
  2320 000017F1 C3                              ret
  2321                                  
  2322                                  L_code_ptr_error:
  2323 000017F2 C8000000                        enter 0, 0
  2324 000017F6 48837D1802                      cmp COUNT, 2
  2325 000017FB 0F85C5070000                    jne L_error_arg_count_2
  2326 00001801 488B7520                        mov rsi, PARAM(0)
  2327                                          assert_interned_symbol(rsi)
    53 00001805 803E41              <1>  cmp byte [%1], %2
    54 00001808 0F8557080000        <1>  jne L_error_incorrect_type
  2328 0000180E 488B7528                        mov rsi, PARAM(1)
  2329                                          assert_string(rsi)
    53 00001812 803E03              <1>  cmp byte [%1], %2
    54 00001815 0F854A080000        <1>  jne L_error_incorrect_type
  2330 0000181B 48BF-                           mov rdi, fmt_scheme_error_part_1
  2330 0000181D [150A000000000000] 
  2331 00001825 B800000000                      mov rax, 0
  2332                                          ENTER
    44 0000182A C8000000            <1>  enter 0, 0
    45 0000182E 4883E4F0            <1>  and rsp, ~15
  2333 00001832 E8(00000000)                    call printf
  2334                                          LEAVE
    49 00001837 C9                  <1>  leave
  2335 00001838 488B7D20                        mov rdi, PARAM(0)
  2336 0000183C E811EDFFFF                      call print_sexpr
  2337 00001841 48BF-                           mov rdi, fmt_scheme_error_part_2
  2337 00001843 [290A000000000000] 
  2338 0000184B B800000000                      mov rax, 0
  2339                                          ENTER
    44 00001850 C8000000            <1>  enter 0, 0
    45 00001854 4883E4F0            <1>  and rsp, ~15
  2340 00001858 E8(00000000)                    call printf
  2341                                          LEAVE
    49 0000185D C9                  <1>  leave
  2342 0000185E 488B4528                        mov rax, PARAM(1)       ; sob_string
  2343 00001862 BE01000000                      mov rsi, 1              ; size = 1 byte
  2344 00001867 488B5001                        mov rdx, qword [rax + 1] ; length
  2345 0000186B 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2346 0000186F 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2347                                  	ENTER
    44 00001877 C8000000            <1>  enter 0, 0
    45 0000187B 4883E4F0            <1>  and rsp, ~15
  2348 0000187F E8(00000000)                    call fwrite
  2349                                  	LEAVE
    49 00001884 C9                  <1>  leave
  2350 00001885 48BF-                           mov rdi, fmt_scheme_error_part_3
  2350 00001887 [6B0A000000000000] 
  2351 0000188F B800000000                      mov rax, 0
  2352                                          ENTER
    44 00001894 C8000000            <1>  enter 0, 0
    45 00001898 4883E4F0            <1>  and rsp, ~15
  2353 0000189C E8(00000000)                    call printf
  2354                                          LEAVE
    49 000018A1 C9                  <1>  leave
  2355 000018A2 48C7C0F7FFFFFF                  mov rax, -9
  2356 000018A9 E8(00000000)                    call exit
  2357                                  
  2358                                  L_code_ptr_raw_less_than_rr:
  2359 000018AE C8000000                        enter 0, 0
  2360 000018B2 48837D1802                      cmp COUNT, 2
  2361 000018B7 0F8509070000                    jne L_error_arg_count_2
  2362 000018BD 488B7520                        mov rsi, PARAM(0)
  2363                                          assert_real(rsi)
    53 000018C1 803E13              <1>  cmp byte [%1], %2
    54 000018C4 0F859B070000        <1>  jne L_error_incorrect_type
  2364 000018CA 488B7D28                        mov rdi, PARAM(1)
  2365                                          assert_real(rdi)
    53 000018CE 803F13              <1>  cmp byte [%1], %2
    54 000018D1 0F858E070000        <1>  jne L_error_incorrect_type
  2366 000018D7 F20F104601                      movsd xmm0, qword [rsi + 1]
  2367 000018DC F20F104F01                      movsd xmm1, qword [rdi + 1]
  2368 000018E1 660F2FC1                        comisd xmm0, xmm1
  2369 000018E5 730C                            jae .L_false
  2370 000018E7 48B8-                           mov rax, sob_boolean_true
  2370 000018E9 [0300000000000000] 
  2371 000018F1 EB0A                            jmp .L_exit
  2372                                  .L_false:
  2373 000018F3 48B8-                           mov rax, sob_boolean_false
  2373 000018F5 [0200000000000000] 
  2374                                  .L_exit:
  2375 000018FD C9                              leave
  2376 000018FE C22000                          ret AND_KILL_FRAME(2)
  2377                                          
  2378                                  L_code_ptr_raw_less_than_zz:
  2379 00001901 C8000000                	enter 0, 0
  2380 00001905 48837D1802              	cmp COUNT, 2
  2381 0000190A 0F85B6060000            	jne L_error_arg_count_2
  2382 00001910 4C8B4520                	mov r8, PARAM(0)
  2383                                  	assert_integer(r8)
    53 00001914 41803811            <1>  cmp byte [%1], %2
    54 00001918 0F8547070000        <1>  jne L_error_incorrect_type
  2384 0000191E 4C8B4D28                	mov r9, PARAM(1)
  2385                                  	assert_integer(r9)
    53 00001922 41803911            <1>  cmp byte [%1], %2
    54 00001926 0F8539070000        <1>  jne L_error_incorrect_type
  2386 0000192C 498B7801                	mov rdi, qword [r8 + 1]
  2387 00001930 493B7901                	cmp rdi, qword [r9 + 1]
  2388 00001934 7D0C                    	jge .L_false
  2389 00001936 48B8-                   	mov rax, sob_boolean_true
  2389 00001938 [0300000000000000] 
  2390 00001940 EB0A                    	jmp .L_exit
  2391                                  .L_false:
  2392 00001942 48B8-                   	mov rax, sob_boolean_false
  2392 00001944 [0200000000000000] 
  2393                                  .L_exit:
  2394 0000194C C9                      	leave
  2395 0000194D C22000                  	ret AND_KILL_FRAME(2)
  2396                                  
  2397                                  L_code_ptr_raw_less_than_qq:
  2398 00001950 C8000000                        enter 0, 0
  2399 00001954 48837D1802                      cmp COUNT, 2
  2400 00001959 0F8567060000                    jne L_error_arg_count_2
  2401 0000195F 488B7520                        mov rsi, PARAM(0)
  2402                                          assert_fraction(rsi)
    53 00001963 803E12              <1>  cmp byte [%1], %2
    54 00001966 0F85F9060000        <1>  jne L_error_incorrect_type
  2403 0000196C 488B7D28                        mov rdi, PARAM(1)
  2404                                          assert_fraction(rdi)
    53 00001970 803F12              <1>  cmp byte [%1], %2
    54 00001973 0F85EC060000        <1>  jne L_error_incorrect_type
  2405 00001979 488B4601                        mov rax, qword [rsi + 1] ; num1
  2406 0000197D 4899                            cqo
  2407 0000197F 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2408 00001983 4889C1                          mov rcx, rax
  2409 00001986 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2410 0000198A 4899                            cqo
  2411 0000198C 48F76F01                        imul qword [rdi + 1]          ; num2
  2412 00001990 4829C1                          sub rcx, rax
  2413 00001993 7D0C                            jge .L_false
  2414 00001995 48B8-                           mov rax, sob_boolean_true
  2414 00001997 [0300000000000000] 
  2415 0000199F EB0A                            jmp .L_exit
  2416                                  .L_false:
  2417 000019A1 48B8-                           mov rax, sob_boolean_false
  2417 000019A3 [0200000000000000] 
  2418                                  .L_exit:
  2419 000019AB C9                              leave
  2420 000019AC C22000                          ret AND_KILL_FRAME(2)
  2421                                  
  2422                                  L_code_ptr_raw_equal_rr:
  2423 000019AF C8000000                        enter 0, 0
  2424 000019B3 48837D1802                      cmp COUNT, 2
  2425 000019B8 0F8508060000                    jne L_error_arg_count_2
  2426 000019BE 488B7520                        mov rsi, PARAM(0)
  2427                                          assert_real(rsi)
    53 000019C2 803E13              <1>  cmp byte [%1], %2
    54 000019C5 0F859A060000        <1>  jne L_error_incorrect_type
  2428 000019CB 488B7D28                        mov rdi, PARAM(1)
  2429                                          assert_real(rdi)
    53 000019CF 803F13              <1>  cmp byte [%1], %2
    54 000019D2 0F858D060000        <1>  jne L_error_incorrect_type
  2430 000019D8 F20F104601                      movsd xmm0, qword [rsi + 1]
  2431 000019DD F20F104F01                      movsd xmm1, qword [rdi + 1]
  2432 000019E2 660F2FC1                        comisd xmm0, xmm1
  2433 000019E6 750C                            jne .L_false
  2434 000019E8 48B8-                           mov rax, sob_boolean_true
  2434 000019EA [0300000000000000] 
  2435 000019F2 EB0A                            jmp .L_exit
  2436                                  .L_false:
  2437 000019F4 48B8-                           mov rax, sob_boolean_false
  2437 000019F6 [0200000000000000] 
  2438                                  .L_exit:
  2439 000019FE C9                              leave
  2440 000019FF C22000                          ret AND_KILL_FRAME(2)
  2441                                          
  2442                                  L_code_ptr_raw_equal_zz:
  2443 00001A02 C8000000                	enter 0, 0
  2444 00001A06 48837D1802              	cmp COUNT, 2
  2445 00001A0B 0F85B5050000            	jne L_error_arg_count_2
  2446 00001A11 4C8B4520                	mov r8, PARAM(0)
  2447                                  	assert_integer(r8)
    53 00001A15 41803811            <1>  cmp byte [%1], %2
    54 00001A19 0F8546060000        <1>  jne L_error_incorrect_type
  2448 00001A1F 4C8B4D28                	mov r9, PARAM(1)
  2449                                  	assert_integer(r9)
    53 00001A23 41803911            <1>  cmp byte [%1], %2
    54 00001A27 0F8538060000        <1>  jne L_error_incorrect_type
  2450 00001A2D 498B7801                	mov rdi, qword [r8 + 1]
  2451 00001A31 493B7901                	cmp rdi, qword [r9 + 1]
  2452 00001A35 750C                    	jne .L_false
  2453 00001A37 48B8-                   	mov rax, sob_boolean_true
  2453 00001A39 [0300000000000000] 
  2454 00001A41 EB0A                    	jmp .L_exit
  2455                                  .L_false:
  2456 00001A43 48B8-                   	mov rax, sob_boolean_false
  2456 00001A45 [0200000000000000] 
  2457                                  .L_exit:
  2458 00001A4D C9                      	leave
  2459 00001A4E C22000                  	ret AND_KILL_FRAME(2)
  2460                                          
  2461                                  L_code_ptr_raw_equal_qq:
  2462 00001A51 C8000000                        enter 0, 0
  2463 00001A55 48837D1802                      cmp COUNT, 2
  2464 00001A5A 0F8566050000                    jne L_error_arg_count_2
  2465 00001A60 488B7520                        mov rsi, PARAM(0)
  2466                                          assert_fraction(rsi)
    53 00001A64 803E12              <1>  cmp byte [%1], %2
    54 00001A67 0F85F8050000        <1>  jne L_error_incorrect_type
  2467 00001A6D 488B7D28                        mov rdi, PARAM(1)
  2468                                          assert_fraction(rdi)
    53 00001A71 803F12              <1>  cmp byte [%1], %2
    54 00001A74 0F85EB050000        <1>  jne L_error_incorrect_type
  2469 00001A7A 488B4601                        mov rax, qword [rsi + 1] ; num1
  2470 00001A7E 4899                            cqo
  2471 00001A80 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2472 00001A84 4889C1                          mov rcx, rax
  2473 00001A87 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2474 00001A8B 4899                            cqo
  2475 00001A8D 48F76F01                        imul qword [rdi + 1]          ; num2
  2476 00001A91 4829C1                          sub rcx, rax
  2477 00001A94 750C                            jne .L_false
  2478 00001A96 48B8-                           mov rax, sob_boolean_true
  2478 00001A98 [0300000000000000] 
  2479 00001AA0 EB0A                            jmp .L_exit
  2480                                  .L_false:
  2481 00001AA2 48B8-                           mov rax, sob_boolean_false
  2481 00001AA4 [0200000000000000] 
  2482                                  .L_exit:
  2483 00001AAC C9                              leave
  2484 00001AAD C22000                          ret AND_KILL_FRAME(2)
  2485                                  
  2486                                  L_code_ptr_quotient:
  2487 00001AB0 C8000000                        enter 0, 0
  2488 00001AB4 48837D1802                      cmp COUNT, 2
  2489 00001AB9 0F8507050000                    jne L_error_arg_count_2
  2490 00001ABF 488B7520                        mov rsi, PARAM(0)
  2491                                          assert_integer(rsi)
    53 00001AC3 803E11              <1>  cmp byte [%1], %2
    54 00001AC6 0F8599050000        <1>  jne L_error_incorrect_type
  2492 00001ACC 488B7D28                        mov rdi, PARAM(1)
  2493                                          assert_integer(rdi)
    53 00001AD0 803F11              <1>  cmp byte [%1], %2
    54 00001AD3 0F858C050000        <1>  jne L_error_incorrect_type
  2494 00001AD9 488B4601                        mov rax, qword [rsi + 1]
  2495 00001ADD 488B5F01                        mov rbx, qword [rdi + 1]
  2496 00001AE1 4883FB00                        cmp rbx, 0
  2497 00001AE5 0F84AB050000                    je L_error_division_by_zero
  2498 00001AEB 4899                            cqo
  2499 00001AED 48F7FB                          idiv rbx
  2500 00001AF0 4889C7                          mov rdi, rax
  2501 00001AF3 E8E8030000                      call make_integer
  2502 00001AF8 C9                              leave
  2503 00001AF9 C22000                          ret AND_KILL_FRAME(2)
  2504                                          
  2505                                  L_code_ptr_remainder:
  2506 00001AFC C8000000                        enter 0, 0
  2507 00001B00 48837D1802                      cmp COUNT, 2
  2508 00001B05 0F85BB040000                    jne L_error_arg_count_2
  2509 00001B0B 488B7520                        mov rsi, PARAM(0)
  2510                                          assert_integer(rsi)
    53 00001B0F 803E11              <1>  cmp byte [%1], %2
    54 00001B12 0F854D050000        <1>  jne L_error_incorrect_type
  2511 00001B18 488B7D28                        mov rdi, PARAM(1)
  2512                                          assert_integer(rdi)
    53 00001B1C 803F11              <1>  cmp byte [%1], %2
    54 00001B1F 0F8540050000        <1>  jne L_error_incorrect_type
  2513 00001B25 488B4601                        mov rax, qword [rsi + 1]
  2514 00001B29 488B5F01                        mov rbx, qword [rdi + 1]
  2515 00001B2D 4883FB00                        cmp rbx, 0
  2516 00001B31 0F845F050000                    je L_error_division_by_zero
  2517 00001B37 4899                            cqo
  2518 00001B39 48F7FB                          idiv rbx
  2519 00001B3C 4889D7                          mov rdi, rdx
  2520 00001B3F E89C030000                      call make_integer
  2521 00001B44 C9                              leave
  2522 00001B45 C22000                          ret AND_KILL_FRAME(2)
  2523                                  
  2524                                  L_code_ptr_set_car:
  2525 00001B48 C8000000                        enter 0, 0
  2526 00001B4C 48837D1802                      cmp COUNT, 2
  2527 00001B51 0F856F040000                    jne L_error_arg_count_2
  2528 00001B57 488B4520                        mov rax, PARAM(0)
  2529                                          assert_pair(rax)
    53 00001B5B 803821              <1>  cmp byte [%1], %2
    54 00001B5E 0F8501050000        <1>  jne L_error_incorrect_type
  2530 00001B64 488B5D28                        mov rbx, PARAM(1)
  2531 00001B68 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2532 00001B6C 48B8-                           mov rax, sob_void
  2532 00001B6E [0000000000000000] 
  2533 00001B76 C9                              leave
  2534 00001B77 C22000                          ret AND_KILL_FRAME(2)
  2535                                  
  2536                                  L_code_ptr_set_cdr:
  2537 00001B7A C8000000                        enter 0, 0
  2538 00001B7E 48837D1802                      cmp COUNT, 2
  2539 00001B83 0F853D040000                    jne L_error_arg_count_2
  2540 00001B89 488B4520                        mov rax, PARAM(0)
  2541                                          assert_pair(rax)
    53 00001B8D 803821              <1>  cmp byte [%1], %2
    54 00001B90 0F85CF040000        <1>  jne L_error_incorrect_type
  2542 00001B96 488B5D28                        mov rbx, PARAM(1)
  2543 00001B9A 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2544 00001B9E 48B8-                           mov rax, sob_void
  2544 00001BA0 [0000000000000000] 
  2545 00001BA8 C9                              leave
  2546 00001BA9 C22000                          ret AND_KILL_FRAME(2)
  2547                                  
  2548                                  L_code_ptr_string_ref:
  2549 00001BAC C8000000                        enter 0, 0
  2550 00001BB0 48837D1802                      cmp COUNT, 2
  2551 00001BB5 0F850B040000                    jne L_error_arg_count_2
  2552 00001BBB 488B7D20                        mov rdi, PARAM(0)
  2553                                          assert_string(rdi)
    53 00001BBF 803F03              <1>  cmp byte [%1], %2
    54 00001BC2 0F859D040000        <1>  jne L_error_incorrect_type
  2554 00001BC8 488B7528                        mov rsi, PARAM(1)
  2555                                          assert_integer(rsi)
    53 00001BCC 803E11              <1>  cmp byte [%1], %2
    54 00001BCF 0F8590040000        <1>  jne L_error_incorrect_type
  2556 00001BD5 488B5701                        mov rdx, qword [rdi + 1]
  2557 00001BD9 488B4E01                        mov rcx, qword [rsi + 1]
  2558 00001BDD 4839D1                          cmp rcx, rdx
  2559 00001BE0 0F8D14030000                    jge L_error_integer_range
  2560 00001BE6 4883F900                        cmp rcx, 0
  2561 00001BEA 0F8C0A030000                    jl L_error_integer_range
  2562 00001BF0 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2563 00001BF4 BF02000000                      mov rdi, 2
  2564 00001BF9 E8D3E6FFFF                      call malloc
  2565 00001BFE C60002                          mov byte [rax], T_char
  2566 00001C01 885801                          mov byte [rax + 1], bl
  2567 00001C04 C9                              leave
  2568 00001C05 C22000                          ret AND_KILL_FRAME(2)
  2569                                  
  2570                                  L_code_ptr_vector_ref:
  2571 00001C08 C8000000                        enter 0, 0
  2572 00001C0C 48837D1802                      cmp COUNT, 2
  2573 00001C11 0F85AF030000                    jne L_error_arg_count_2
  2574 00001C17 488B7D20                        mov rdi, PARAM(0)
  2575                                          assert_vector(rdi)
    53 00001C1B 803F22              <1>  cmp byte [%1], %2
    54 00001C1E 0F8541040000        <1>  jne L_error_incorrect_type
  2576 00001C24 488B7528                        mov rsi, PARAM(1)
  2577                                          assert_integer(rsi)
    53 00001C28 803E11              <1>  cmp byte [%1], %2
    54 00001C2B 0F8534040000        <1>  jne L_error_incorrect_type
  2578 00001C31 488B5701                        mov rdx, qword [rdi + 1]
  2579 00001C35 488B4E01                        mov rcx, qword [rsi + 1]
  2580 00001C39 4839D1                          cmp rcx, rdx
  2581 00001C3C 0F8DB8020000                    jge L_error_integer_range
  2582 00001C42 4883F900                        cmp rcx, 0
  2583 00001C46 0F8CAE020000                    jl L_error_integer_range
  2584 00001C4C 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2585 00001C51 C9                              leave
  2586 00001C52 C22000                          ret AND_KILL_FRAME(2)
  2587                                  
  2588                                  L_code_ptr_vector_set:
  2589 00001C55 C8000000                        enter 0, 0
  2590 00001C59 48837D1803                      cmp COUNT, 3
  2591 00001C5E 0F85CC030000                    jne L_error_arg_count_3
  2592 00001C64 488B7D20                        mov rdi, PARAM(0)
  2593                                          assert_vector(rdi)
    53 00001C68 803F22              <1>  cmp byte [%1], %2
    54 00001C6B 0F85F4030000        <1>  jne L_error_incorrect_type
  2594 00001C71 488B7528                        mov rsi, PARAM(1)
  2595                                          assert_integer(rsi)
    53 00001C75 803E11              <1>  cmp byte [%1], %2
    54 00001C78 0F85E7030000        <1>  jne L_error_incorrect_type
  2596 00001C7E 488B5701                        mov rdx, qword [rdi + 1]
  2597 00001C82 488B4E01                        mov rcx, qword [rsi + 1]
  2598 00001C86 4839D1                          cmp rcx, rdx
  2599 00001C89 0F8D6B020000                    jge L_error_integer_range
  2600 00001C8F 4883F900                        cmp rcx, 0
  2601 00001C93 0F8C61020000                    jl L_error_integer_range
  2602 00001C99 488B4530                        mov rax, PARAM(2)
  2603 00001C9D 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2604 00001CA2 48B8-                           mov rax, sob_void
  2604 00001CA4 [0000000000000000] 
  2605 00001CAC C9                              leave
  2606 00001CAD C22800                          ret AND_KILL_FRAME(3)
  2607                                  
  2608                                  L_code_ptr_string_set:
  2609 00001CB0 C8000000                        enter 0, 0
  2610 00001CB4 48837D1803                      cmp COUNT, 3
  2611 00001CB9 0F8571030000                    jne L_error_arg_count_3
  2612 00001CBF 488B7D20                        mov rdi, PARAM(0)
  2613                                          assert_string(rdi)
    53 00001CC3 803F03              <1>  cmp byte [%1], %2
    54 00001CC6 0F8599030000        <1>  jne L_error_incorrect_type
  2614 00001CCC 488B7528                        mov rsi, PARAM(1)
  2615                                          assert_integer(rsi)
    53 00001CD0 803E11              <1>  cmp byte [%1], %2
    54 00001CD3 0F858C030000        <1>  jne L_error_incorrect_type
  2616 00001CD9 488B5701                        mov rdx, qword [rdi + 1]
  2617 00001CDD 488B4E01                        mov rcx, qword [rsi + 1]
  2618 00001CE1 4839D1                          cmp rcx, rdx
  2619 00001CE4 0F8D10020000                    jge L_error_integer_range
  2620 00001CEA 4883F900                        cmp rcx, 0
  2621 00001CEE 0F8C06020000                    jl L_error_integer_range
  2622 00001CF4 488B4530                        mov rax, PARAM(2)
  2623                                          assert_char(rax)
    53 00001CF8 803802              <1>  cmp byte [%1], %2
    54 00001CFB 0F8564030000        <1>  jne L_error_incorrect_type
  2624 00001D01 8A4001                          mov al, byte [rax + 1]
  2625 00001D04 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2626 00001D08 48B8-                           mov rax, sob_void
  2626 00001D0A [0000000000000000] 
  2627 00001D12 C9                              leave
  2628 00001D13 C22800                          ret AND_KILL_FRAME(3)
  2629                                  
  2630                                  L_code_ptr_make_vector:
  2631 00001D16 C8000000                        enter 0, 0
  2632 00001D1A 48837D1802                      cmp COUNT, 2
  2633 00001D1F 0F85A1020000                    jne L_error_arg_count_2
  2634 00001D25 488B4D20                        mov rcx, PARAM(0)
  2635                                          assert_integer(rcx)
    53 00001D29 803911              <1>  cmp byte [%1], %2
    54 00001D2C 0F8533030000        <1>  jne L_error_incorrect_type
  2636 00001D32 488B4901                        mov rcx, qword [rcx + 1]
  2637 00001D36 4883F900                        cmp rcx, 0
  2638 00001D3A 0F8CBA010000                    jl L_error_integer_range
  2639 00001D40 488B5528                        mov rdx, PARAM(1)
  2640 00001D44 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2641 00001D4C E880E5FFFF                      call malloc
  2642 00001D51 C60022                          mov byte [rax], T_vector
  2643 00001D54 48894801                        mov qword [rax + 1], rcx
  2644 00001D58 41B800000000                    mov r8, 0
  2645                                  .L0:
  2646 00001D5E 4939C8                          cmp r8, rcx
  2647 00001D61 740A                            je .L1
  2648 00001D63 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2649 00001D68 49FFC0                          inc r8
  2650 00001D6B EBF1                            jmp .L0
  2651                                  .L1:
  2652 00001D6D C9                              leave
  2653 00001D6E C22000                          ret AND_KILL_FRAME(2)
  2654                                          
  2655                                  L_code_ptr_make_string:
  2656 00001D71 C8000000                        enter 0, 0
  2657 00001D75 48837D1802                      cmp COUNT, 2
  2658 00001D7A 0F8546020000                    jne L_error_arg_count_2
  2659 00001D80 488B4D20                        mov rcx, PARAM(0)
  2660                                          assert_integer(rcx)
    53 00001D84 803911              <1>  cmp byte [%1], %2
    54 00001D87 0F85D8020000        <1>  jne L_error_incorrect_type
  2661 00001D8D 488B4901                        mov rcx, qword [rcx + 1]
  2662 00001D91 4883F900                        cmp rcx, 0
  2663 00001D95 0F8C5F010000                    jl L_error_integer_range
  2664 00001D9B 488B5528                        mov rdx, PARAM(1)
  2665                                          assert_char(rdx)
    53 00001D9F 803A02              <1>  cmp byte [%1], %2
    54 00001DA2 0F85BD020000        <1>  jne L_error_incorrect_type
  2666 00001DA8 8A5201                          mov dl, byte [rdx + 1]
  2667 00001DAB 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2668 00001DAF E81DE5FFFF                      call malloc
  2669 00001DB4 C60003                          mov byte [rax], T_string
  2670 00001DB7 48894801                        mov qword [rax + 1], rcx
  2671 00001DBB 41B800000000                    mov r8, 0
  2672                                  .L0:
  2673 00001DC1 4939C8                          cmp r8, rcx
  2674 00001DC4 740A                            je .L1
  2675 00001DC6 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2676 00001DCB 49FFC0                          inc r8
  2677 00001DCE EBF1                            jmp .L0
  2678                                  .L1:
  2679 00001DD0 C9                              leave
  2680 00001DD1 C22000                          ret AND_KILL_FRAME(2)
  2681                                  
  2682                                  L_code_ptr_numerator:
  2683 00001DD4 C8000000                        enter 0, 0
  2684 00001DD8 48837D1801                      cmp COUNT, 1
  2685 00001DDD 0F85AE010000                    jne L_error_arg_count_1
  2686 00001DE3 488B4520                        mov rax, PARAM(0)
  2687                                          assert_fraction(rax)
    53 00001DE7 803812              <1>  cmp byte [%1], %2
    54 00001DEA 0F8575020000        <1>  jne L_error_incorrect_type
  2688 00001DF0 488B7801                        mov rdi, qword [rax + 1]
  2689 00001DF4 E8E7000000                      call make_integer
  2690 00001DF9 C9                              leave
  2691 00001DFA C21800                          ret AND_KILL_FRAME(1)
  2692                                          
  2693                                  L_code_ptr_denominator:
  2694 00001DFD C8000000                        enter 0, 0
  2695 00001E01 48837D1801                      cmp COUNT, 1
  2696 00001E06 0F8585010000                    jne L_error_arg_count_1
  2697 00001E0C 488B4520                        mov rax, PARAM(0)
  2698                                          assert_fraction(rax)
    53 00001E10 803812              <1>  cmp byte [%1], %2
    54 00001E13 0F854C020000        <1>  jne L_error_incorrect_type
  2699 00001E19 488B7809                        mov rdi, qword [rax + 1 + 8]
  2700 00001E1D E8BE000000                      call make_integer
  2701 00001E22 C9                              leave
  2702 00001E23 C21800                          ret AND_KILL_FRAME(1)
  2703                                  
  2704                                  L_code_ptr_is_eq:
  2705 00001E26 C8000000                	enter 0, 0
  2706 00001E2A 48837D1802              	cmp COUNT, 2
  2707 00001E2F 0F8591010000            	jne L_error_arg_count_2
  2708 00001E35 488B7D20                	mov rdi, PARAM(0)
  2709 00001E39 488B7528                	mov rsi, PARAM(1)
  2710 00001E3D 4839F7                  	cmp rdi, rsi
  2711 00001E40 746C                    	je .L_eq_true
  2712 00001E42 8A17                    	mov dl, byte [rdi]
  2713 00001E44 3A16                    	cmp dl, byte [rsi]
  2714 00001E46 7572                    	jne .L_eq_false
  2715 00001E48 80FA02                  	cmp dl, T_char
  2716 00001E4B 7459                    	je .L_char
  2717 00001E4D 80FA41                  	cmp dl, T_interned_symbol
  2718 00001E50 7440                    	je .L_interned_symbol
  2719 00001E52 80FA42                          cmp dl, T_uninterned_symbol
  2720 00001E55 7443                            je .L_uninterned_symbol
  2721 00001E57 80FA13                  	cmp dl, T_real
  2722 00001E5A 742E                    	je .L_real
  2723 00001E5C 80FA12                  	cmp dl, T_fraction
  2724 00001E5F 7413                    	je .L_fraction
  2725 00001E61 80FA11                          cmp dl, T_integer
  2726 00001E64 7402                            je .L_integer
  2727 00001E66 EB52                    	jmp .L_eq_false
  2728                                  .L_integer:
  2729 00001E68 488B4601                        mov rax, qword [rsi + 1]
  2730 00001E6C 483B4701                        cmp rax, qword [rdi + 1]
  2731 00001E70 7548                            jne .L_eq_false
  2732 00001E72 EB3A                            jmp .L_eq_true
  2733                                  .L_fraction:
  2734 00001E74 488B4601                	mov rax, qword [rsi + 1]
  2735 00001E78 483B4701                	cmp rax, qword [rdi + 1]
  2736 00001E7C 753C                    	jne .L_eq_false
  2737 00001E7E 488B4609                	mov rax, qword [rsi + 1 + 8]
  2738 00001E82 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2739 00001E86 7532                    	jne .L_eq_false
  2740 00001E88 EB24                    	jmp .L_eq_true
  2741                                  .L_real:
  2742 00001E8A 488B4601                	mov rax, qword [rsi + 1]
  2743 00001E8E 483B4701                	cmp rax, qword [rdi + 1]
  2744                                  .L_interned_symbol:
  2745                                  	; never reached, because interned_symbols are static!
  2746                                  	; but I'm keeping it in case, I'll ever change
  2747                                  	; the implementation
  2748 00001E92 488B4601                	mov rax, qword [rsi + 1]
  2749 00001E96 483B4701                	cmp rax, qword [rdi + 1]
  2750                                  .L_uninterned_symbol:
  2751 00001E9A 4C8B4701                        mov r8, qword [rdi + 1]
  2752 00001E9E 4C3B4601                        cmp r8, qword [rsi + 1]
  2753 00001EA2 7516                            jne .L_eq_false
  2754 00001EA4 EB08                            jmp .L_eq_true
  2755                                  .L_char:
  2756 00001EA6 8A5E01                  	mov bl, byte [rsi + 1]
  2757 00001EA9 3A5F01                  	cmp bl, byte [rdi + 1]
  2758 00001EAC 750C                    	jne .L_eq_false
  2759                                  .L_eq_true:
  2760 00001EAE 48B8-                   	mov rax, sob_boolean_true
  2760 00001EB0 [0300000000000000] 
  2761 00001EB8 EB0A                    	jmp .L_eq_exit
  2762                                  .L_eq_false:
  2763 00001EBA 48B8-                   	mov rax, sob_boolean_false
  2763 00001EBC [0200000000000000] 
  2764                                  .L_eq_exit:
  2765 00001EC4 C9                      	leave
  2766 00001EC5 C22000                  	ret AND_KILL_FRAME(2)
  2767                                  
  2768                                  make_real:
  2769 00001EC8 C8000000                        enter 0, 0
  2770 00001ECC BF09000000                      mov rdi, (1 + 8)
  2771 00001ED1 E8FBE3FFFF                      call malloc
  2772 00001ED6 C60013                          mov byte [rax], T_real
  2773 00001ED9 F20F114001                      movsd qword [rax + 1], xmm0
  2774 00001EDE C9                              leave 
  2775 00001EDF C3                              ret
  2776                                          
  2777                                  make_integer:
  2778 00001EE0 C8000000                        enter 0, 0
  2779 00001EE4 4889FE                          mov rsi, rdi
  2780 00001EE7 BF09000000                      mov rdi, (1 + 8)
  2781 00001EEC E8E0E3FFFF                      call malloc
  2782 00001EF1 C60011                          mov byte [rax], T_integer
  2783 00001EF4 48897001                        mov qword [rax + 1], rsi
  2784 00001EF8 C9                              leave
  2785 00001EF9 C3                              ret
  2786                                          
  2787                                  L_error_integer_range:
  2788 00001EFA 488B3C25[00000000]              mov rdi, qword [stderr]
  2789 00001F02 48BE-                           mov rsi, fmt_integer_range
  2789 00001F04 [E209000000000000] 
  2790 00001F0C B800000000                      mov rax, 0
  2791                                          ENTER
    44 00001F11 C8000000            <1>  enter 0, 0
    45 00001F15 4883E4F0            <1>  and rsp, ~15
  2792 00001F19 E8(00000000)                    call fprintf
  2793                                          LEAVE
    49 00001F1E C9                  <1>  leave
  2794 00001F1F 48C7C0FBFFFFFF                  mov rax, -5
  2795 00001F26 E8(00000000)                    call exit
  2796                                  
  2797                                  L_error_arg_negative:
  2798 00001F2B 488B3C25[00000000]              mov rdi, qword [stderr]
  2799 00001F33 48BE-                           mov rsi, fmt_arg_negative
  2799 00001F35 [BA08000000000000] 
  2800 00001F3D B800000000                      mov rax, 0
  2801                                          ENTER
    44 00001F42 C8000000            <1>  enter 0, 0
    45 00001F46 4883E4F0            <1>  and rsp, ~15
  2802 00001F4A E8(00000000)                    call fprintf
  2803                                          LEAVE
    49 00001F4F C9                  <1>  leave
  2804 00001F50 48C7C0FDFFFFFF                  mov rax, -3
  2805 00001F57 E8(00000000)                    call exit
  2806                                  
  2807                                  L_error_arg_count_0:
  2808 00001F5C 488B3C25[00000000]              mov rdi, qword [stderr]
  2809 00001F64 48BE-                           mov rsi, fmt_arg_count_0
  2809 00001F66 [E008000000000000] 
  2810 00001F6E 488B5518                        mov rdx, COUNT
  2811 00001F72 B800000000                      mov rax, 0
  2812                                          ENTER
    44 00001F77 C8000000            <1>  enter 0, 0
    45 00001F7B 4883E4F0            <1>  and rsp, ~15
  2813 00001F7F E8(00000000)                    call fprintf
  2814                                          LEAVE
    49 00001F84 C9                  <1>  leave
  2815 00001F85 48C7C0FDFFFFFF                  mov rax, -3
  2816 00001F8C E8(00000000)                    call exit
  2817                                  
  2818                                  L_error_arg_count_1:
  2819 00001F91 488B3C25[00000000]              mov rdi, qword [stderr]
  2820 00001F99 48BE-                           mov rsi, fmt_arg_count_1
  2820 00001F9B [0809000000000000] 
  2821 00001FA3 488B5518                        mov rdx, COUNT
  2822 00001FA7 B800000000                      mov rax, 0
  2823                                          ENTER
    44 00001FAC C8000000            <1>  enter 0, 0
    45 00001FB0 4883E4F0            <1>  and rsp, ~15
  2824 00001FB4 E8(00000000)                    call fprintf
  2825                                          LEAVE
    49 00001FB9 C9                  <1>  leave
  2826 00001FBA 48C7C0FDFFFFFF                  mov rax, -3
  2827 00001FC1 E8(00000000)                    call exit
  2828                                  
  2829                                  L_error_arg_count_2:
  2830 00001FC6 488B3C25[00000000]              mov rdi, qword [stderr]
  2831 00001FCE 48BE-                           mov rsi, fmt_arg_count_2
  2831 00001FD0 [6E09000000000000] 
  2832 00001FD8 488B5518                        mov rdx, COUNT
  2833 00001FDC B800000000                      mov rax, 0
  2834                                          ENTER
    44 00001FE1 C8000000            <1>  enter 0, 0
    45 00001FE5 4883E4F0            <1>  and rsp, ~15
  2835 00001FE9 E8(00000000)                    call fprintf
  2836                                          LEAVE
    49 00001FEE C9                  <1>  leave
  2837 00001FEF 48C7C0FDFFFFFF                  mov rax, -3
  2838 00001FF6 E8(00000000)                    call exit
  2839                                  
  2840                                  L_error_arg_count_12:
  2841 00001FFB 488B3C25[00000000]              mov rdi, qword [stderr]
  2842 00002003 48BE-                           mov rsi, fmt_arg_count_12
  2842 00002005 [2E09000000000000] 
  2843 0000200D 488B5518                        mov rdx, COUNT
  2844 00002011 B800000000                      mov rax, 0
  2845                                          ENTER
    44 00002016 C8000000            <1>  enter 0, 0
    45 0000201A 4883E4F0            <1>  and rsp, ~15
  2846 0000201E E8(00000000)                    call fprintf
  2847                                          LEAVE
    49 00002023 C9                  <1>  leave
  2848 00002024 48C7C0FDFFFFFF                  mov rax, -3
  2849 0000202B E8(00000000)                    call exit
  2850                                  
  2851                                  L_error_arg_count_3:
  2852 00002030 488B3C25[00000000]              mov rdi, qword [stderr]
  2853 00002038 48BE-                           mov rsi, fmt_arg_count_3
  2853 0000203A [9509000000000000] 
  2854 00002042 488B5518                        mov rdx, COUNT
  2855 00002046 B800000000                      mov rax, 0
  2856                                          ENTER
    44 0000204B C8000000            <1>  enter 0, 0
    45 0000204F 4883E4F0            <1>  and rsp, ~15
  2857 00002053 E8(00000000)                    call fprintf
  2858                                          LEAVE
    49 00002058 C9                  <1>  leave
  2859 00002059 48C7C0FDFFFFFF                  mov rax, -3
  2860 00002060 E8(00000000)                    call exit
  2861                                          
  2862                                  L_error_incorrect_type:
  2863 00002065 488B3C25[00000000]              mov rdi, qword [stderr]
  2864 0000206D 48BE-                           mov rsi, fmt_type
  2864 0000206F [BE09000000000000] 
  2865 00002077 B800000000                      mov rax, 0
  2866                                          ENTER
    44 0000207C C8000000            <1>  enter 0, 0
    45 00002080 4883E4F0            <1>  and rsp, ~15
  2867 00002084 E8(00000000)                    call fprintf
  2868                                          LEAVE
    49 00002089 C9                  <1>  leave
  2869 0000208A 48C7C0FCFFFFFF                  mov rax, -4
  2870 00002091 E8(00000000)                    call exit
  2871                                  
  2872                                  L_error_division_by_zero:
  2873 00002096 488B3C25[00000000]              mov rdi, qword [stderr]
  2874 0000209E 48BE-                           mov rsi, fmt_division_by_zero
  2874 000020A0 [FF09000000000000] 
  2875 000020A8 B800000000                      mov rax, 0
  2876                                          ENTER
    44 000020AD C8000000            <1>  enter 0, 0
    45 000020B1 4883E4F0            <1>  and rsp, ~15
  2877 000020B5 E8(00000000)                    call fprintf
  2878                                          LEAVE
    49 000020BA C9                  <1>  leave
  2879 000020BB 48C7C0F8FFFFFF                  mov rax, -8
  2880 000020C2 E8(00000000)                    call exit
  2881                                  
  2882                                  section .data
  2883                                  gensym_count:
  2884 000008AF 0000000000000000                dq 0
  2885                                  fmt_char:
  2886 000008B7 256300                          db `%c\0`
  2887                                  fmt_arg_negative:
  2888 000008BA 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2888 000008C3 7267756D656E742063-
  2888 000008CC 616E6E6F7420626520-
  2888 000008D5 6E656761746976652E-
  2888 000008DE 0A00               
  2889                                  fmt_arg_count_0:
  2890 000008E0 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2890 000008E9 74696E67207A65726F-
  2890 000008F2 20617267756D656E74-
  2890 000008FB 732E20466F756E6420-
  2890 00000904 25640A00           
  2891                                  fmt_arg_count_1:
  2892 00000908 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2892 00000911 74696E67206F6E6520-
  2892 0000091A 617267756D656E742E-
  2892 00000923 20466F756E64202564-
  2892 0000092C 0A00               
  2893                                  fmt_arg_count_12:
  2894 0000092E 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2894 00000937 74696E67206F6E6520-
  2894 00000940 726571756972656420-
  2894 00000949 616E64206F6E65206F-
  2894 00000952 7074696F6E616C2061-
  2894 0000095B 7267756D656E742E20-
  2894 00000964 466F756E642025640A-
  2894 0000096D 00                 
  2895                                  fmt_arg_count_2:
  2896 0000096E 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2896 00000977 74696E672074776F20-
  2896 00000980 617267756D656E7473-
  2896 00000989 2E20466F756E642025-
  2896 00000992 640A00             
  2897                                  fmt_arg_count_3:
  2898 00000995 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2898 0000099E 74696E672074687265-
  2898 000009A7 6520617267756D656E-
  2898 000009B0 74732E20466F756E64-
  2898 000009B9 2025640A00         
  2899                                  fmt_type:
  2900 000009BE 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2900 000009C7 696F6E207061737365-
  2900 000009D0 6420696E636F727265-
  2900 000009D9 637420747970650A00 
  2901                                  fmt_integer_range:
  2902 000009E2 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2902 000009EB 7265637420696E7465-
  2902 000009F4 6765722072616E6765-
  2902 000009FD 0A00               
  2903                                  fmt_division_by_zero:
  2904 000009FF 212121204469766973-             db `!!! Division by zero\n\0`
  2904 00000A08 696F6E206279207A65-
  2904 00000A11 726F0A00           
  2905                                  fmt_scheme_error_part_1:
  2906 00000A15 0A2121212054686520-             db `\n!!! The procedure \0`
  2906 00000A1E 70726F636564757265-
  2906 00000A27 2000               
  2907                                  fmt_scheme_error_part_2:
  2908 00000A29 2061736B656420746F-             db ` asked to terminate the program\n`
  2908 00000A32 207465726D696E6174-
  2908 00000A3B 65207468652070726F-
  2908 00000A44 6772616D0A         
  2909 00000A49 202020207769746820-             db `    with the following message:\n\n\0`
  2909 00000A52 74686520666F6C6C6F-
  2909 00000A5B 77696E67206D657373-
  2909 00000A64 6167653A0A0A00     
  2910                                  fmt_scheme_error_part_3:
  2911 00000A6B 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2911 00000A74 210A0A00           

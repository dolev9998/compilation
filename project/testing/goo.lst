     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "caar"
   469 000005DE 0400000000000000        	dq 4
   470 000005E6 63616172                	db 0x63, 0x61, 0x61, 0x72
   471                                  	; L_constants + 1514:
   472 000005EA 03                      	db T_string	; "cadr"
   473 000005EB 0400000000000000        	dq 4
   474 000005F3 63616472                	db 0x63, 0x61, 0x64, 0x72
   475                                  	; L_constants + 1527:
   476 000005F7 03                      	db T_string	; "cdar"
   477 000005F8 0400000000000000        	dq 4
   478 00000600 63646172                	db 0x63, 0x64, 0x61, 0x72
   479                                  	; L_constants + 1540:
   480 00000604 03                      	db T_string	; "cddr"
   481 00000605 0400000000000000        	dq 4
   482 0000060D 63646472                	db 0x63, 0x64, 0x64, 0x72
   483                                  	; L_constants + 1553:
   484 00000611 03                      	db T_string	; "caaar"
   485 00000612 0500000000000000        	dq 5
   486 0000061A 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   487                                  	; L_constants + 1567:
   488 0000061F 03                      	db T_string	; "caadr"
   489 00000620 0500000000000000        	dq 5
   490 00000628 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   491                                  	; L_constants + 1581:
   492 0000062D 03                      	db T_string	; "cadar"
   493 0000062E 0500000000000000        	dq 5
   494 00000636 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   495                                  	; L_constants + 1595:
   496 0000063B 03                      	db T_string	; "caddr"
   497 0000063C 0500000000000000        	dq 5
   498 00000644 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   499                                  	; L_constants + 1609:
   500 00000649 03                      	db T_string	; "cdaar"
   501 0000064A 0500000000000000        	dq 5
   502 00000652 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   503                                  	; L_constants + 1623:
   504 00000657 03                      	db T_string	; "cdadr"
   505 00000658 0500000000000000        	dq 5
   506 00000660 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   507                                  	; L_constants + 1637:
   508 00000665 03                      	db T_string	; "cddar"
   509 00000666 0500000000000000        	dq 5
   510 0000066E 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   511                                  	; L_constants + 1651:
   512 00000673 03                      	db T_string	; "cdddr"
   513 00000674 0500000000000000        	dq 5
   514 0000067C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   515                                  	; L_constants + 1665:
   516 00000681 03                      	db T_string	; "caaaar"
   517 00000682 0600000000000000        	dq 6
   518 0000068A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   519                                  	; L_constants + 1680:
   520 00000690 03                      	db T_string	; "caaadr"
   521 00000691 0600000000000000        	dq 6
   522 00000699 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   523                                  	; L_constants + 1695:
   524 0000069F 03                      	db T_string	; "caadar"
   525 000006A0 0600000000000000        	dq 6
   526 000006A8 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   527                                  	; L_constants + 1710:
   528 000006AE 03                      	db T_string	; "caaddr"
   529 000006AF 0600000000000000        	dq 6
   530 000006B7 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   531                                  	; L_constants + 1725:
   532 000006BD 03                      	db T_string	; "cadaar"
   533 000006BE 0600000000000000        	dq 6
   534 000006C6 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   535                                  	; L_constants + 1740:
   536 000006CC 03                      	db T_string	; "cadadr"
   537 000006CD 0600000000000000        	dq 6
   538 000006D5 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   539                                  	; L_constants + 1755:
   540 000006DB 03                      	db T_string	; "caddar"
   541 000006DC 0600000000000000        	dq 6
   542 000006E4 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   543                                  	; L_constants + 1770:
   544 000006EA 03                      	db T_string	; "cadddr"
   545 000006EB 0600000000000000        	dq 6
   546 000006F3 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   547                                  	; L_constants + 1785:
   548 000006F9 03                      	db T_string	; "cdaaar"
   549 000006FA 0600000000000000        	dq 6
   550 00000702 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   551                                  	; L_constants + 1800:
   552 00000708 03                      	db T_string	; "cdaadr"
   553 00000709 0600000000000000        	dq 6
   554 00000711 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   555                                  	; L_constants + 1815:
   556 00000717 03                      	db T_string	; "cdadar"
   557 00000718 0600000000000000        	dq 6
   558 00000720 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   559                                  	; L_constants + 1830:
   560 00000726 03                      	db T_string	; "cdaddr"
   561 00000727 0600000000000000        	dq 6
   562 0000072F 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   563                                  	; L_constants + 1845:
   564 00000735 03                      	db T_string	; "cddaar"
   565 00000736 0600000000000000        	dq 6
   566 0000073E 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   567                                  	; L_constants + 1860:
   568 00000744 03                      	db T_string	; "cddadr"
   569 00000745 0600000000000000        	dq 6
   570 0000074D 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   571                                  	; L_constants + 1875:
   572 00000753 03                      	db T_string	; "cdddar"
   573 00000754 0600000000000000        	dq 6
   574 0000075C 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   575                                  	; L_constants + 1890:
   576 00000762 03                      	db T_string	; "cddddr"
   577 00000763 0600000000000000        	dq 6
   578 0000076B 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   579                                  	; L_constants + 1905:
   580 00000771 03                      	db T_string	; "+"
   581 00000772 0100000000000000        	dq 1
   582 0000077A 2B                      	db 0x2B
   583                                  	; L_constants + 1915:
   584 0000077B 11                      	db T_integer	; 1
   585 0000077C 0100000000000000        	dq 1
   586                                  	; L_constants + 1924:
   587 00000784 11                      	db T_integer	; 2
   588 00000785 0200000000000000        	dq 2
   589                                  	; L_constants + 1933:
   590 0000078D 21                      	db T_pair	; (2)
   591 0000078E [8407000000000000]-     	dq L_constants + 1924, L_constants + 1
   591 00000796 [0100000000000000] 
   592                                  	; L_constants + 1950:
   593 0000079E 21                      	db T_pair	; (1 2)
   594 0000079F [7B07000000000000]-     	dq L_constants + 1915, L_constants + 1933
   594 000007A7 [8D07000000000000] 
   595                                  free_var_0:	; location of +
   596 000007AF [B707000000000000]      	dq .undefined_object
   597                                  .undefined_object:
   598 000007B7 05                      	db T_undefined
   599 000007B8 [7107000000000000]      	dq L_constants + 1905
   600                                  
   601                                  free_var_1:	; location of __bin-apply
   602 000007C0 [C807000000000000]      	dq .undefined_object
   603                                  .undefined_object:
   604 000007C8 05                      	db T_undefined
   605 000007C9 [0102000000000000]      	dq L_constants + 513
   606                                  
   607                                  free_var_2:	; location of caaaar
   608 000007D1 [D907000000000000]      	dq .undefined_object
   609                                  .undefined_object:
   610 000007D9 05                      	db T_undefined
   611 000007DA [8106000000000000]      	dq L_constants + 1665
   612                                  
   613                                  free_var_3:	; location of caaadr
   614 000007E2 [EA07000000000000]      	dq .undefined_object
   615                                  .undefined_object:
   616 000007EA 05                      	db T_undefined
   617 000007EB [9006000000000000]      	dq L_constants + 1680
   618                                  
   619                                  free_var_4:	; location of caaar
   620 000007F3 [FB07000000000000]      	dq .undefined_object
   621                                  .undefined_object:
   622 000007FB 05                      	db T_undefined
   623 000007FC [1106000000000000]      	dq L_constants + 1553
   624                                  
   625                                  free_var_5:	; location of caadar
   626 00000804 [0C08000000000000]      	dq .undefined_object
   627                                  .undefined_object:
   628 0000080C 05                      	db T_undefined
   629 0000080D [9F06000000000000]      	dq L_constants + 1695
   630                                  
   631                                  free_var_6:	; location of caaddr
   632 00000815 [1D08000000000000]      	dq .undefined_object
   633                                  .undefined_object:
   634 0000081D 05                      	db T_undefined
   635 0000081E [AE06000000000000]      	dq L_constants + 1710
   636                                  
   637                                  free_var_7:	; location of caadr
   638 00000826 [2E08000000000000]      	dq .undefined_object
   639                                  .undefined_object:
   640 0000082E 05                      	db T_undefined
   641 0000082F [1F06000000000000]      	dq L_constants + 1567
   642                                  
   643                                  free_var_8:	; location of caar
   644 00000837 [3F08000000000000]      	dq .undefined_object
   645                                  .undefined_object:
   646 0000083F 05                      	db T_undefined
   647 00000840 [DD05000000000000]      	dq L_constants + 1501
   648                                  
   649                                  free_var_9:	; location of cadaar
   650 00000848 [5008000000000000]      	dq .undefined_object
   651                                  .undefined_object:
   652 00000850 05                      	db T_undefined
   653 00000851 [BD06000000000000]      	dq L_constants + 1725
   654                                  
   655                                  free_var_10:	; location of cadadr
   656 00000859 [6108000000000000]      	dq .undefined_object
   657                                  .undefined_object:
   658 00000861 05                      	db T_undefined
   659 00000862 [CC06000000000000]      	dq L_constants + 1740
   660                                  
   661                                  free_var_11:	; location of cadar
   662 0000086A [7208000000000000]      	dq .undefined_object
   663                                  .undefined_object:
   664 00000872 05                      	db T_undefined
   665 00000873 [2D06000000000000]      	dq L_constants + 1581
   666                                  
   667                                  free_var_12:	; location of caddar
   668 0000087B [8308000000000000]      	dq .undefined_object
   669                                  .undefined_object:
   670 00000883 05                      	db T_undefined
   671 00000884 [DB06000000000000]      	dq L_constants + 1755
   672                                  
   673                                  free_var_13:	; location of cadddr
   674 0000088C [9408000000000000]      	dq .undefined_object
   675                                  .undefined_object:
   676 00000894 05                      	db T_undefined
   677 00000895 [EA06000000000000]      	dq L_constants + 1770
   678                                  
   679                                  free_var_14:	; location of caddr
   680 0000089D [A508000000000000]      	dq .undefined_object
   681                                  .undefined_object:
   682 000008A5 05                      	db T_undefined
   683 000008A6 [3B06000000000000]      	dq L_constants + 1595
   684                                  
   685                                  free_var_15:	; location of cadr
   686 000008AE [B608000000000000]      	dq .undefined_object
   687                                  .undefined_object:
   688 000008B6 05                      	db T_undefined
   689 000008B7 [EA05000000000000]      	dq L_constants + 1514
   690                                  
   691                                  free_var_16:	; location of car
   692 000008BF [C708000000000000]      	dq .undefined_object
   693                                  .undefined_object:
   694 000008C7 05                      	db T_undefined
   695 000008C8 [1501000000000000]      	dq L_constants + 277
   696                                  
   697                                  free_var_17:	; location of cdaaar
   698 000008D0 [D808000000000000]      	dq .undefined_object
   699                                  .undefined_object:
   700 000008D8 05                      	db T_undefined
   701 000008D9 [F906000000000000]      	dq L_constants + 1785
   702                                  
   703                                  free_var_18:	; location of cdaadr
   704 000008E1 [E908000000000000]      	dq .undefined_object
   705                                  .undefined_object:
   706 000008E9 05                      	db T_undefined
   707 000008EA [0807000000000000]      	dq L_constants + 1800
   708                                  
   709                                  free_var_19:	; location of cdaar
   710 000008F2 [FA08000000000000]      	dq .undefined_object
   711                                  .undefined_object:
   712 000008FA 05                      	db T_undefined
   713 000008FB [4906000000000000]      	dq L_constants + 1609
   714                                  
   715                                  free_var_20:	; location of cdadar
   716 00000903 [0B09000000000000]      	dq .undefined_object
   717                                  .undefined_object:
   718 0000090B 05                      	db T_undefined
   719 0000090C [1707000000000000]      	dq L_constants + 1815
   720                                  
   721                                  free_var_21:	; location of cdaddr
   722 00000914 [1C09000000000000]      	dq .undefined_object
   723                                  .undefined_object:
   724 0000091C 05                      	db T_undefined
   725 0000091D [2607000000000000]      	dq L_constants + 1830
   726                                  
   727                                  free_var_22:	; location of cdadr
   728 00000925 [2D09000000000000]      	dq .undefined_object
   729                                  .undefined_object:
   730 0000092D 05                      	db T_undefined
   731 0000092E [5706000000000000]      	dq L_constants + 1623
   732                                  
   733                                  free_var_23:	; location of cdar
   734 00000936 [3E09000000000000]      	dq .undefined_object
   735                                  .undefined_object:
   736 0000093E 05                      	db T_undefined
   737 0000093F [F705000000000000]      	dq L_constants + 1527
   738                                  
   739                                  free_var_24:	; location of cddaar
   740 00000947 [4F09000000000000]      	dq .undefined_object
   741                                  .undefined_object:
   742 0000094F 05                      	db T_undefined
   743 00000950 [3507000000000000]      	dq L_constants + 1845
   744                                  
   745                                  free_var_25:	; location of cddadr
   746 00000958 [6009000000000000]      	dq .undefined_object
   747                                  .undefined_object:
   748 00000960 05                      	db T_undefined
   749 00000961 [4407000000000000]      	dq L_constants + 1860
   750                                  
   751                                  free_var_26:	; location of cddar
   752 00000969 [7109000000000000]      	dq .undefined_object
   753                                  .undefined_object:
   754 00000971 05                      	db T_undefined
   755 00000972 [6506000000000000]      	dq L_constants + 1637
   756                                  
   757                                  free_var_27:	; location of cdddar
   758 0000097A [8209000000000000]      	dq .undefined_object
   759                                  .undefined_object:
   760 00000982 05                      	db T_undefined
   761 00000983 [5307000000000000]      	dq L_constants + 1875
   762                                  
   763                                  free_var_28:	; location of cddddr
   764 0000098B [9309000000000000]      	dq .undefined_object
   765                                  .undefined_object:
   766 00000993 05                      	db T_undefined
   767 00000994 [6207000000000000]      	dq L_constants + 1890
   768                                  
   769                                  free_var_29:	; location of cdddr
   770 0000099C [A409000000000000]      	dq .undefined_object
   771                                  .undefined_object:
   772 000009A4 05                      	db T_undefined
   773 000009A5 [7306000000000000]      	dq L_constants + 1651
   774                                  
   775                                  free_var_30:	; location of cddr
   776 000009AD [B509000000000000]      	dq .undefined_object
   777                                  .undefined_object:
   778 000009B5 05                      	db T_undefined
   779 000009B6 [0406000000000000]      	dq L_constants + 1540
   780                                  
   781                                  free_var_31:	; location of cdr
   782 000009BE [C609000000000000]      	dq .undefined_object
   783                                  .undefined_object:
   784 000009C6 05                      	db T_undefined
   785 000009C7 [2101000000000000]      	dq L_constants + 289
   786                                  
   787                                  
   788                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   789                                  global main
   790                                  section .text
   791                                  main:
   792 00000000 C8000000                        enter 0, 0
   793 00000004 6A00                            push 0
   794 00000006 6A00                            push 0
   795 00000008 68[0B1C0000]                    push Lend
   796 0000000D C8000000                        enter 0, 0
   797                                  	; building closure for car
   798 00000011 48BF-                   	mov rdi, free_var_16
   798 00000013 [BF08000000000000] 
   799 0000001B 48BE-                   	mov rsi, L_code_ptr_car
   799 0000001D [D62B000000000000] 
   800 00000025 E87C250000              	call bind_primitive
   801                                  
   802                                  	; building closure for cdr
   803 0000002A 48BF-                   	mov rdi, free_var_31
   803 0000002C [BE09000000000000] 
   804 00000034 48BE-                   	mov rsi, L_code_ptr_cdr
   804 00000036 [FA2B000000000000] 
   805 0000003E E863250000              	call bind_primitive
   806                                  
   807                                  	; building closure for __bin-apply
   808 00000043 48BF-                   	mov rdi, free_var_1
   808 00000045 [C007000000000000] 
   809 0000004D 48BE-                   	mov rsi, L_code_ptr_bin_apply
   809 0000004F [1627000000000000] 
   810 00000057 E84A250000              	call bind_primitive
   811                                  
   812 0000005C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   813 00000061 E8101D0000              	call malloc
   814 00000066 50                      	push rax
   815 00000067 BF00000000              	mov rdi, 8 * 0	; new rib
   816 0000006C E8051D0000              	call malloc
   817 00000071 50                      	push rax
   818 00000072 BF08000000              	mov rdi, 8 * 1	; extended env
   819 00000077 E8FA1C0000              	call malloc
   820 0000007C 488B7D10                	mov rdi, ENV
   821 00000080 BE00000000              	mov rsi, 0
   822 00000085 BA01000000              	mov rdx, 1
   823                                  .L_lambda_simple_env_loop_0024:	; ext_env[i + 1] <-- env[i]
   824 0000008A 4883FE00                	cmp rsi, 0
   825 0000008E 7410                    	je .L_lambda_simple_env_end_0024
   826 00000090 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   827 00000094 48890CD0                	mov qword [rax + 8 * rdx], rcx
   828 00000098 48FFC6                  	inc rsi
   829 0000009B 48FFC2                  	inc rdx
   830 0000009E EBEA                    	jmp .L_lambda_simple_env_loop_0024
   831                                  .L_lambda_simple_env_end_0024:
   832 000000A0 5B                      	pop rbx
   833 000000A1 BE00000000              	mov rsi, 0
   834                                  .L_lambda_simple_params_loop_0024:	; copy params
   835 000000A6 4883FE00                	cmp rsi, 0
   836 000000AA 740E                    	je .L_lambda_simple_params_end_0024
   837 000000AC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   838 000000B1 488914F3                	mov qword [rbx + 8 * rsi], rdx
   839 000000B5 48FFC6                  	inc rsi
   840 000000B8 EBEC                    	jmp .L_lambda_simple_params_loop_0024
   841                                  .L_lambda_simple_params_end_0024:
   842 000000BA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   843 000000BD 4889C3                  	mov rbx, rax
   844 000000C0 58                      	pop rax
   845 000000C1 C60004                  	mov byte [rax], T_closure
   846 000000C4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   847 000000C8 48C74009[D2000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0024
   848 000000D0 EB65                    	jmp .L_lambda_simple_end_0024
   849                                  .L_lambda_simple_code_0024:	; lambda-simple body
   850 000000D2 48837C241001            	cmp qword [rsp + 8 * 2], 1
   851 000000D8 740B                    	je .L_lambda_simple_arity_check_ok_0024
   852 000000DA FF742410                	push qword [rsp + 8 * 2]
   853 000000DE 6A01                    	push 1
   854 000000E0 E94A1C0000              	jmp L_error_incorrect_arity_simple
   855                                  .L_lambda_simple_arity_check_ok_0024:
   856 000000E5 C8000000                	enter 0, 0
   857                                  	; preparing a non-tail-call
   858                                  	; preparing a non-tail-call
   859 000000E9 488B4520                	mov rax, PARAM(0)	; param x
   860 000000ED 50                      	push rax
   861 000000EE 6A01                    	push 1	; arg count
   862 000000F0 488B0425[BF080000]      	mov rax, qword [free_var_16]	; free var car
   863 000000F8 803805                  	cmp byte [rax], T_undefined
   864 000000FB 0F84481B0000            	je L_error_fvar_undefined
   865 00000101 803804                  	cmp byte [rax], T_closure
   866 00000104 0F85C31B0000            	jne L_error_non_closure
   867 0000010A FF7001                  	push SOB_CLOSURE_ENV(rax)
   868 0000010D FF5009                  	call SOB_CLOSURE_CODE(rax)
   869 00000110 50                      	push rax
   870 00000111 6A01                    	push 1	; arg count
   871 00000113 488B0425[BF080000]      	mov rax, qword [free_var_16]	; free var car
   872 0000011B 803805                  	cmp byte [rax], T_undefined
   873 0000011E 0F84251B0000            	je L_error_fvar_undefined
   874 00000124 803804                  	cmp byte [rax], T_closure
   875 00000127 0F85A01B0000            	jne L_error_non_closure
   876 0000012D FF7001                  	push SOB_CLOSURE_ENV(rax)
   877 00000130 FF5009                  	call SOB_CLOSURE_CODE(rax)
   878 00000133 C9                      	leave
   879 00000134 C21800                  	ret AND_KILL_FRAME(1)
   880                                  .L_lambda_simple_end_0024:	; new closure is in rax
   881 00000137 48890425[37080000]      	mov qword [free_var_8], rax
   882 0000013F 48B8-                   	mov rax, sob_void
   882 00000141 [0000000000000000] 
   883                                  
   884 00000149 4889C7                  	mov rdi, rax
   885 0000014C E87A1E0000              	call print_sexpr_if_not_void
   886 00000151 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   887 00000156 E81B1C0000              	call malloc
   888 0000015B 50                      	push rax
   889 0000015C BF00000000              	mov rdi, 8 * 0	; new rib
   890 00000161 E8101C0000              	call malloc
   891 00000166 50                      	push rax
   892 00000167 BF08000000              	mov rdi, 8 * 1	; extended env
   893 0000016C E8051C0000              	call malloc
   894 00000171 488B7D10                	mov rdi, ENV
   895 00000175 BE00000000              	mov rsi, 0
   896 0000017A BA01000000              	mov rdx, 1
   897                                  .L_lambda_simple_env_loop_0025:	; ext_env[i + 1] <-- env[i]
   898 0000017F 4883FE00                	cmp rsi, 0
   899 00000183 7410                    	je .L_lambda_simple_env_end_0025
   900 00000185 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   901 00000189 48890CD0                	mov qword [rax + 8 * rdx], rcx
   902 0000018D 48FFC6                  	inc rsi
   903 00000190 48FFC2                  	inc rdx
   904 00000193 EBEA                    	jmp .L_lambda_simple_env_loop_0025
   905                                  .L_lambda_simple_env_end_0025:
   906 00000195 5B                      	pop rbx
   907 00000196 BE00000000              	mov rsi, 0
   908                                  .L_lambda_simple_params_loop_0025:	; copy params
   909 0000019B 4883FE00                	cmp rsi, 0
   910 0000019F 740E                    	je .L_lambda_simple_params_end_0025
   911 000001A1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   912 000001A6 488914F3                	mov qword [rbx + 8 * rsi], rdx
   913 000001AA 48FFC6                  	inc rsi
   914 000001AD EBEC                    	jmp .L_lambda_simple_params_loop_0025
   915                                  .L_lambda_simple_params_end_0025:
   916 000001AF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   917 000001B2 4889C3                  	mov rbx, rax
   918 000001B5 58                      	pop rax
   919 000001B6 C60004                  	mov byte [rax], T_closure
   920 000001B9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   921 000001BD 48C74009[C7010000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0025
   922 000001C5 EB65                    	jmp .L_lambda_simple_end_0025
   923                                  .L_lambda_simple_code_0025:	; lambda-simple body
   924 000001C7 48837C241001            	cmp qword [rsp + 8 * 2], 1
   925 000001CD 740B                    	je .L_lambda_simple_arity_check_ok_0025
   926 000001CF FF742410                	push qword [rsp + 8 * 2]
   927 000001D3 6A01                    	push 1
   928 000001D5 E9551B0000              	jmp L_error_incorrect_arity_simple
   929                                  .L_lambda_simple_arity_check_ok_0025:
   930 000001DA C8000000                	enter 0, 0
   931                                  	; preparing a non-tail-call
   932                                  	; preparing a non-tail-call
   933 000001DE 488B4520                	mov rax, PARAM(0)	; param x
   934 000001E2 50                      	push rax
   935 000001E3 6A01                    	push 1	; arg count
   936 000001E5 488B0425[BE090000]      	mov rax, qword [free_var_31]	; free var cdr
   937 000001ED 803805                  	cmp byte [rax], T_undefined
   938 000001F0 0F84531A0000            	je L_error_fvar_undefined
   939 000001F6 803804                  	cmp byte [rax], T_closure
   940 000001F9 0F85CE1A0000            	jne L_error_non_closure
   941 000001FF FF7001                  	push SOB_CLOSURE_ENV(rax)
   942 00000202 FF5009                  	call SOB_CLOSURE_CODE(rax)
   943 00000205 50                      	push rax
   944 00000206 6A01                    	push 1	; arg count
   945 00000208 488B0425[BF080000]      	mov rax, qword [free_var_16]	; free var car
   946 00000210 803805                  	cmp byte [rax], T_undefined
   947 00000213 0F84301A0000            	je L_error_fvar_undefined
   948 00000219 803804                  	cmp byte [rax], T_closure
   949 0000021C 0F85AB1A0000            	jne L_error_non_closure
   950 00000222 FF7001                  	push SOB_CLOSURE_ENV(rax)
   951 00000225 FF5009                  	call SOB_CLOSURE_CODE(rax)
   952 00000228 C9                      	leave
   953 00000229 C21800                  	ret AND_KILL_FRAME(1)
   954                                  .L_lambda_simple_end_0025:	; new closure is in rax
   955 0000022C 48890425[AE080000]      	mov qword [free_var_15], rax
   956 00000234 48B8-                   	mov rax, sob_void
   956 00000236 [0000000000000000] 
   957                                  
   958 0000023E 4889C7                  	mov rdi, rax
   959 00000241 E8851D0000              	call print_sexpr_if_not_void
   960 00000246 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   961 0000024B E8261B0000              	call malloc
   962 00000250 50                      	push rax
   963 00000251 BF00000000              	mov rdi, 8 * 0	; new rib
   964 00000256 E81B1B0000              	call malloc
   965 0000025B 50                      	push rax
   966 0000025C BF08000000              	mov rdi, 8 * 1	; extended env
   967 00000261 E8101B0000              	call malloc
   968 00000266 488B7D10                	mov rdi, ENV
   969 0000026A BE00000000              	mov rsi, 0
   970 0000026F BA01000000              	mov rdx, 1
   971                                  .L_lambda_simple_env_loop_0026:	; ext_env[i + 1] <-- env[i]
   972 00000274 4883FE00                	cmp rsi, 0
   973 00000278 7410                    	je .L_lambda_simple_env_end_0026
   974 0000027A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   975 0000027E 48890CD0                	mov qword [rax + 8 * rdx], rcx
   976 00000282 48FFC6                  	inc rsi
   977 00000285 48FFC2                  	inc rdx
   978 00000288 EBEA                    	jmp .L_lambda_simple_env_loop_0026
   979                                  .L_lambda_simple_env_end_0026:
   980 0000028A 5B                      	pop rbx
   981 0000028B BE00000000              	mov rsi, 0
   982                                  .L_lambda_simple_params_loop_0026:	; copy params
   983 00000290 4883FE00                	cmp rsi, 0
   984 00000294 740E                    	je .L_lambda_simple_params_end_0026
   985 00000296 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   986 0000029B 488914F3                	mov qword [rbx + 8 * rsi], rdx
   987 0000029F 48FFC6                  	inc rsi
   988 000002A2 EBEC                    	jmp .L_lambda_simple_params_loop_0026
   989                                  .L_lambda_simple_params_end_0026:
   990 000002A4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   991 000002A7 4889C3                  	mov rbx, rax
   992 000002AA 58                      	pop rax
   993 000002AB C60004                  	mov byte [rax], T_closure
   994 000002AE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   995 000002B2 48C74009[BC020000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0026
   996 000002BA EB65                    	jmp .L_lambda_simple_end_0026
   997                                  .L_lambda_simple_code_0026:	; lambda-simple body
   998 000002BC 48837C241001            	cmp qword [rsp + 8 * 2], 1
   999 000002C2 740B                    	je .L_lambda_simple_arity_check_ok_0026
  1000 000002C4 FF742410                	push qword [rsp + 8 * 2]
  1001 000002C8 6A01                    	push 1
  1002 000002CA E9601A0000              	jmp L_error_incorrect_arity_simple
  1003                                  .L_lambda_simple_arity_check_ok_0026:
  1004 000002CF C8000000                	enter 0, 0
  1005                                  	; preparing a non-tail-call
  1006                                  	; preparing a non-tail-call
  1007 000002D3 488B4520                	mov rax, PARAM(0)	; param x
  1008 000002D7 50                      	push rax
  1009 000002D8 6A01                    	push 1	; arg count
  1010 000002DA 488B0425[BF080000]      	mov rax, qword [free_var_16]	; free var car
  1011 000002E2 803805                  	cmp byte [rax], T_undefined
  1012 000002E5 0F845E190000            	je L_error_fvar_undefined
  1013 000002EB 803804                  	cmp byte [rax], T_closure
  1014 000002EE 0F85D9190000            	jne L_error_non_closure
  1015 000002F4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1016 000002F7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1017 000002FA 50                      	push rax
  1018 000002FB 6A01                    	push 1	; arg count
  1019 000002FD 488B0425[BE090000]      	mov rax, qword [free_var_31]	; free var cdr
  1020 00000305 803805                  	cmp byte [rax], T_undefined
  1021 00000308 0F843B190000            	je L_error_fvar_undefined
  1022 0000030E 803804                  	cmp byte [rax], T_closure
  1023 00000311 0F85B6190000            	jne L_error_non_closure
  1024 00000317 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1025 0000031A FF5009                  	call SOB_CLOSURE_CODE(rax)
  1026 0000031D C9                      	leave
  1027 0000031E C21800                  	ret AND_KILL_FRAME(1)
  1028                                  .L_lambda_simple_end_0026:	; new closure is in rax
  1029 00000321 48890425[36090000]      	mov qword [free_var_23], rax
  1030 00000329 48B8-                   	mov rax, sob_void
  1030 0000032B [0000000000000000] 
  1031                                  
  1032 00000333 4889C7                  	mov rdi, rax
  1033 00000336 E8901C0000              	call print_sexpr_if_not_void
  1034 0000033B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1035 00000340 E8311A0000              	call malloc
  1036 00000345 50                      	push rax
  1037 00000346 BF00000000              	mov rdi, 8 * 0	; new rib
  1038 0000034B E8261A0000              	call malloc
  1039 00000350 50                      	push rax
  1040 00000351 BF08000000              	mov rdi, 8 * 1	; extended env
  1041 00000356 E81B1A0000              	call malloc
  1042 0000035B 488B7D10                	mov rdi, ENV
  1043 0000035F BE00000000              	mov rsi, 0
  1044 00000364 BA01000000              	mov rdx, 1
  1045                                  .L_lambda_simple_env_loop_0027:	; ext_env[i + 1] <-- env[i]
  1046 00000369 4883FE00                	cmp rsi, 0
  1047 0000036D 7410                    	je .L_lambda_simple_env_end_0027
  1048 0000036F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1049 00000373 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1050 00000377 48FFC6                  	inc rsi
  1051 0000037A 48FFC2                  	inc rdx
  1052 0000037D EBEA                    	jmp .L_lambda_simple_env_loop_0027
  1053                                  .L_lambda_simple_env_end_0027:
  1054 0000037F 5B                      	pop rbx
  1055 00000380 BE00000000              	mov rsi, 0
  1056                                  .L_lambda_simple_params_loop_0027:	; copy params
  1057 00000385 4883FE00                	cmp rsi, 0
  1058 00000389 740E                    	je .L_lambda_simple_params_end_0027
  1059 0000038B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1060 00000390 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1061 00000394 48FFC6                  	inc rsi
  1062 00000397 EBEC                    	jmp .L_lambda_simple_params_loop_0027
  1063                                  .L_lambda_simple_params_end_0027:
  1064 00000399 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1065 0000039C 4889C3                  	mov rbx, rax
  1066 0000039F 58                      	pop rax
  1067 000003A0 C60004                  	mov byte [rax], T_closure
  1068 000003A3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1069 000003A7 48C74009[B1030000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0027
  1070 000003AF EB65                    	jmp .L_lambda_simple_end_0027
  1071                                  .L_lambda_simple_code_0027:	; lambda-simple body
  1072 000003B1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1073 000003B7 740B                    	je .L_lambda_simple_arity_check_ok_0027
  1074 000003B9 FF742410                	push qword [rsp + 8 * 2]
  1075 000003BD 6A01                    	push 1
  1076 000003BF E96B190000              	jmp L_error_incorrect_arity_simple
  1077                                  .L_lambda_simple_arity_check_ok_0027:
  1078 000003C4 C8000000                	enter 0, 0
  1079                                  	; preparing a non-tail-call
  1080                                  	; preparing a non-tail-call
  1081 000003C8 488B4520                	mov rax, PARAM(0)	; param x
  1082 000003CC 50                      	push rax
  1083 000003CD 6A01                    	push 1	; arg count
  1084 000003CF 488B0425[BE090000]      	mov rax, qword [free_var_31]	; free var cdr
  1085 000003D7 803805                  	cmp byte [rax], T_undefined
  1086 000003DA 0F8469180000            	je L_error_fvar_undefined
  1087 000003E0 803804                  	cmp byte [rax], T_closure
  1088 000003E3 0F85E4180000            	jne L_error_non_closure
  1089 000003E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1090 000003EC FF5009                  	call SOB_CLOSURE_CODE(rax)
  1091 000003EF 50                      	push rax
  1092 000003F0 6A01                    	push 1	; arg count
  1093 000003F2 488B0425[BE090000]      	mov rax, qword [free_var_31]	; free var cdr
  1094 000003FA 803805                  	cmp byte [rax], T_undefined
  1095 000003FD 0F8446180000            	je L_error_fvar_undefined
  1096 00000403 803804                  	cmp byte [rax], T_closure
  1097 00000406 0F85C1180000            	jne L_error_non_closure
  1098 0000040C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1099 0000040F FF5009                  	call SOB_CLOSURE_CODE(rax)
  1100 00000412 C9                      	leave
  1101 00000413 C21800                  	ret AND_KILL_FRAME(1)
  1102                                  .L_lambda_simple_end_0027:	; new closure is in rax
  1103 00000416 48890425[AD090000]      	mov qword [free_var_30], rax
  1104 0000041E 48B8-                   	mov rax, sob_void
  1104 00000420 [0000000000000000] 
  1105                                  
  1106 00000428 4889C7                  	mov rdi, rax
  1107 0000042B E89B1B0000              	call print_sexpr_if_not_void
  1108 00000430 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1109 00000435 E83C190000              	call malloc
  1110 0000043A 50                      	push rax
  1111 0000043B BF00000000              	mov rdi, 8 * 0	; new rib
  1112 00000440 E831190000              	call malloc
  1113 00000445 50                      	push rax
  1114 00000446 BF08000000              	mov rdi, 8 * 1	; extended env
  1115 0000044B E826190000              	call malloc
  1116 00000450 488B7D10                	mov rdi, ENV
  1117 00000454 BE00000000              	mov rsi, 0
  1118 00000459 BA01000000              	mov rdx, 1
  1119                                  .L_lambda_simple_env_loop_0028:	; ext_env[i + 1] <-- env[i]
  1120 0000045E 4883FE00                	cmp rsi, 0
  1121 00000462 7410                    	je .L_lambda_simple_env_end_0028
  1122 00000464 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1123 00000468 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1124 0000046C 48FFC6                  	inc rsi
  1125 0000046F 48FFC2                  	inc rdx
  1126 00000472 EBEA                    	jmp .L_lambda_simple_env_loop_0028
  1127                                  .L_lambda_simple_env_end_0028:
  1128 00000474 5B                      	pop rbx
  1129 00000475 BE00000000              	mov rsi, 0
  1130                                  .L_lambda_simple_params_loop_0028:	; copy params
  1131 0000047A 4883FE00                	cmp rsi, 0
  1132 0000047E 740E                    	je .L_lambda_simple_params_end_0028
  1133 00000480 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1134 00000485 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1135 00000489 48FFC6                  	inc rsi
  1136 0000048C EBEC                    	jmp .L_lambda_simple_params_loop_0028
  1137                                  .L_lambda_simple_params_end_0028:
  1138 0000048E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1139 00000491 4889C3                  	mov rbx, rax
  1140 00000494 58                      	pop rax
  1141 00000495 C60004                  	mov byte [rax], T_closure
  1142 00000498 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1143 0000049C 48C74009[A6040000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0028
  1144 000004A4 EB65                    	jmp .L_lambda_simple_end_0028
  1145                                  .L_lambda_simple_code_0028:	; lambda-simple body
  1146 000004A6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1147 000004AC 740B                    	je .L_lambda_simple_arity_check_ok_0028
  1148 000004AE FF742410                	push qword [rsp + 8 * 2]
  1149 000004B2 6A01                    	push 1
  1150 000004B4 E976180000              	jmp L_error_incorrect_arity_simple
  1151                                  .L_lambda_simple_arity_check_ok_0028:
  1152 000004B9 C8000000                	enter 0, 0
  1153                                  	; preparing a non-tail-call
  1154                                  	; preparing a non-tail-call
  1155 000004BD 488B4520                	mov rax, PARAM(0)	; param x
  1156 000004C1 50                      	push rax
  1157 000004C2 6A01                    	push 1	; arg count
  1158 000004C4 488B0425[37080000]      	mov rax, qword [free_var_8]	; free var caar
  1159 000004CC 803805                  	cmp byte [rax], T_undefined
  1160 000004CF 0F8474170000            	je L_error_fvar_undefined
  1161 000004D5 803804                  	cmp byte [rax], T_closure
  1162 000004D8 0F85EF170000            	jne L_error_non_closure
  1163 000004DE FF7001                  	push SOB_CLOSURE_ENV(rax)
  1164 000004E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1165 000004E4 50                      	push rax
  1166 000004E5 6A01                    	push 1	; arg count
  1167 000004E7 488B0425[BF080000]      	mov rax, qword [free_var_16]	; free var car
  1168 000004EF 803805                  	cmp byte [rax], T_undefined
  1169 000004F2 0F8451170000            	je L_error_fvar_undefined
  1170 000004F8 803804                  	cmp byte [rax], T_closure
  1171 000004FB 0F85CC170000            	jne L_error_non_closure
  1172 00000501 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1173 00000504 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1174 00000507 C9                      	leave
  1175 00000508 C21800                  	ret AND_KILL_FRAME(1)
  1176                                  .L_lambda_simple_end_0028:	; new closure is in rax
  1177 0000050B 48890425[F3070000]      	mov qword [free_var_4], rax
  1178 00000513 48B8-                   	mov rax, sob_void
  1178 00000515 [0000000000000000] 
  1179                                  
  1180 0000051D 4889C7                  	mov rdi, rax
  1181 00000520 E8A61A0000              	call print_sexpr_if_not_void
  1182 00000525 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1183 0000052A E847180000              	call malloc
  1184 0000052F 50                      	push rax
  1185 00000530 BF00000000              	mov rdi, 8 * 0	; new rib
  1186 00000535 E83C180000              	call malloc
  1187 0000053A 50                      	push rax
  1188 0000053B BF08000000              	mov rdi, 8 * 1	; extended env
  1189 00000540 E831180000              	call malloc
  1190 00000545 488B7D10                	mov rdi, ENV
  1191 00000549 BE00000000              	mov rsi, 0
  1192 0000054E BA01000000              	mov rdx, 1
  1193                                  .L_lambda_simple_env_loop_0029:	; ext_env[i + 1] <-- env[i]
  1194 00000553 4883FE00                	cmp rsi, 0
  1195 00000557 7410                    	je .L_lambda_simple_env_end_0029
  1196 00000559 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1197 0000055D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1198 00000561 48FFC6                  	inc rsi
  1199 00000564 48FFC2                  	inc rdx
  1200 00000567 EBEA                    	jmp .L_lambda_simple_env_loop_0029
  1201                                  .L_lambda_simple_env_end_0029:
  1202 00000569 5B                      	pop rbx
  1203 0000056A BE00000000              	mov rsi, 0
  1204                                  .L_lambda_simple_params_loop_0029:	; copy params
  1205 0000056F 4883FE00                	cmp rsi, 0
  1206 00000573 740E                    	je .L_lambda_simple_params_end_0029
  1207 00000575 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1208 0000057A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1209 0000057E 48FFC6                  	inc rsi
  1210 00000581 EBEC                    	jmp .L_lambda_simple_params_loop_0029
  1211                                  .L_lambda_simple_params_end_0029:
  1212 00000583 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1213 00000586 4889C3                  	mov rbx, rax
  1214 00000589 58                      	pop rax
  1215 0000058A C60004                  	mov byte [rax], T_closure
  1216 0000058D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1217 00000591 48C74009[9B050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0029
  1218 00000599 EB65                    	jmp .L_lambda_simple_end_0029
  1219                                  .L_lambda_simple_code_0029:	; lambda-simple body
  1220 0000059B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1221 000005A1 740B                    	je .L_lambda_simple_arity_check_ok_0029
  1222 000005A3 FF742410                	push qword [rsp + 8 * 2]
  1223 000005A7 6A01                    	push 1
  1224 000005A9 E981170000              	jmp L_error_incorrect_arity_simple
  1225                                  .L_lambda_simple_arity_check_ok_0029:
  1226 000005AE C8000000                	enter 0, 0
  1227                                  	; preparing a non-tail-call
  1228                                  	; preparing a non-tail-call
  1229 000005B2 488B4520                	mov rax, PARAM(0)	; param x
  1230 000005B6 50                      	push rax
  1231 000005B7 6A01                    	push 1	; arg count
  1232 000005B9 488B0425[AE080000]      	mov rax, qword [free_var_15]	; free var cadr
  1233 000005C1 803805                  	cmp byte [rax], T_undefined
  1234 000005C4 0F847F160000            	je L_error_fvar_undefined
  1235 000005CA 803804                  	cmp byte [rax], T_closure
  1236 000005CD 0F85FA160000            	jne L_error_non_closure
  1237 000005D3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1238 000005D6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1239 000005D9 50                      	push rax
  1240 000005DA 6A01                    	push 1	; arg count
  1241 000005DC 488B0425[BF080000]      	mov rax, qword [free_var_16]	; free var car
  1242 000005E4 803805                  	cmp byte [rax], T_undefined
  1243 000005E7 0F845C160000            	je L_error_fvar_undefined
  1244 000005ED 803804                  	cmp byte [rax], T_closure
  1245 000005F0 0F85D7160000            	jne L_error_non_closure
  1246 000005F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1247 000005F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1248 000005FC C9                      	leave
  1249 000005FD C21800                  	ret AND_KILL_FRAME(1)
  1250                                  .L_lambda_simple_end_0029:	; new closure is in rax
  1251 00000600 48890425[26080000]      	mov qword [free_var_7], rax
  1252 00000608 48B8-                   	mov rax, sob_void
  1252 0000060A [0000000000000000] 
  1253                                  
  1254 00000612 4889C7                  	mov rdi, rax
  1255 00000615 E8B1190000              	call print_sexpr_if_not_void
  1256 0000061A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1257 0000061F E852170000              	call malloc
  1258 00000624 50                      	push rax
  1259 00000625 BF00000000              	mov rdi, 8 * 0	; new rib
  1260 0000062A E847170000              	call malloc
  1261 0000062F 50                      	push rax
  1262 00000630 BF08000000              	mov rdi, 8 * 1	; extended env
  1263 00000635 E83C170000              	call malloc
  1264 0000063A 488B7D10                	mov rdi, ENV
  1265 0000063E BE00000000              	mov rsi, 0
  1266 00000643 BA01000000              	mov rdx, 1
  1267                                  .L_lambda_simple_env_loop_002a:	; ext_env[i + 1] <-- env[i]
  1268 00000648 4883FE00                	cmp rsi, 0
  1269 0000064C 7410                    	je .L_lambda_simple_env_end_002a
  1270 0000064E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1271 00000652 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1272 00000656 48FFC6                  	inc rsi
  1273 00000659 48FFC2                  	inc rdx
  1274 0000065C EBEA                    	jmp .L_lambda_simple_env_loop_002a
  1275                                  .L_lambda_simple_env_end_002a:
  1276 0000065E 5B                      	pop rbx
  1277 0000065F BE00000000              	mov rsi, 0
  1278                                  .L_lambda_simple_params_loop_002a:	; copy params
  1279 00000664 4883FE00                	cmp rsi, 0
  1280 00000668 740E                    	je .L_lambda_simple_params_end_002a
  1281 0000066A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1282 0000066F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1283 00000673 48FFC6                  	inc rsi
  1284 00000676 EBEC                    	jmp .L_lambda_simple_params_loop_002a
  1285                                  .L_lambda_simple_params_end_002a:
  1286 00000678 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1287 0000067B 4889C3                  	mov rbx, rax
  1288 0000067E 58                      	pop rax
  1289 0000067F C60004                  	mov byte [rax], T_closure
  1290 00000682 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1291 00000686 48C74009[90060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002a
  1292 0000068E EB65                    	jmp .L_lambda_simple_end_002a
  1293                                  .L_lambda_simple_code_002a:	; lambda-simple body
  1294 00000690 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1295 00000696 740B                    	je .L_lambda_simple_arity_check_ok_002a
  1296 00000698 FF742410                	push qword [rsp + 8 * 2]
  1297 0000069C 6A01                    	push 1
  1298 0000069E E98C160000              	jmp L_error_incorrect_arity_simple
  1299                                  .L_lambda_simple_arity_check_ok_002a:
  1300 000006A3 C8000000                	enter 0, 0
  1301                                  	; preparing a non-tail-call
  1302                                  	; preparing a non-tail-call
  1303 000006A7 488B4520                	mov rax, PARAM(0)	; param x
  1304 000006AB 50                      	push rax
  1305 000006AC 6A01                    	push 1	; arg count
  1306 000006AE 488B0425[36090000]      	mov rax, qword [free_var_23]	; free var cdar
  1307 000006B6 803805                  	cmp byte [rax], T_undefined
  1308 000006B9 0F848A150000            	je L_error_fvar_undefined
  1309 000006BF 803804                  	cmp byte [rax], T_closure
  1310 000006C2 0F8505160000            	jne L_error_non_closure
  1311 000006C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1312 000006CB FF5009                  	call SOB_CLOSURE_CODE(rax)
  1313 000006CE 50                      	push rax
  1314 000006CF 6A01                    	push 1	; arg count
  1315 000006D1 488B0425[BF080000]      	mov rax, qword [free_var_16]	; free var car
  1316 000006D9 803805                  	cmp byte [rax], T_undefined
  1317 000006DC 0F8467150000            	je L_error_fvar_undefined
  1318 000006E2 803804                  	cmp byte [rax], T_closure
  1319 000006E5 0F85E2150000            	jne L_error_non_closure
  1320 000006EB FF7001                  	push SOB_CLOSURE_ENV(rax)
  1321 000006EE FF5009                  	call SOB_CLOSURE_CODE(rax)
  1322 000006F1 C9                      	leave
  1323 000006F2 C21800                  	ret AND_KILL_FRAME(1)
  1324                                  .L_lambda_simple_end_002a:	; new closure is in rax
  1325 000006F5 48890425[6A080000]      	mov qword [free_var_11], rax
  1326 000006FD 48B8-                   	mov rax, sob_void
  1326 000006FF [0000000000000000] 
  1327                                  
  1328 00000707 4889C7                  	mov rdi, rax
  1329 0000070A E8BC180000              	call print_sexpr_if_not_void
  1330 0000070F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1331 00000714 E85D160000              	call malloc
  1332 00000719 50                      	push rax
  1333 0000071A BF00000000              	mov rdi, 8 * 0	; new rib
  1334 0000071F E852160000              	call malloc
  1335 00000724 50                      	push rax
  1336 00000725 BF08000000              	mov rdi, 8 * 1	; extended env
  1337 0000072A E847160000              	call malloc
  1338 0000072F 488B7D10                	mov rdi, ENV
  1339 00000733 BE00000000              	mov rsi, 0
  1340 00000738 BA01000000              	mov rdx, 1
  1341                                  .L_lambda_simple_env_loop_002b:	; ext_env[i + 1] <-- env[i]
  1342 0000073D 4883FE00                	cmp rsi, 0
  1343 00000741 7410                    	je .L_lambda_simple_env_end_002b
  1344 00000743 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1345 00000747 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1346 0000074B 48FFC6                  	inc rsi
  1347 0000074E 48FFC2                  	inc rdx
  1348 00000751 EBEA                    	jmp .L_lambda_simple_env_loop_002b
  1349                                  .L_lambda_simple_env_end_002b:
  1350 00000753 5B                      	pop rbx
  1351 00000754 BE00000000              	mov rsi, 0
  1352                                  .L_lambda_simple_params_loop_002b:	; copy params
  1353 00000759 4883FE00                	cmp rsi, 0
  1354 0000075D 740E                    	je .L_lambda_simple_params_end_002b
  1355 0000075F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1356 00000764 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1357 00000768 48FFC6                  	inc rsi
  1358 0000076B EBEC                    	jmp .L_lambda_simple_params_loop_002b
  1359                                  .L_lambda_simple_params_end_002b:
  1360 0000076D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1361 00000770 4889C3                  	mov rbx, rax
  1362 00000773 58                      	pop rax
  1363 00000774 C60004                  	mov byte [rax], T_closure
  1364 00000777 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1365 0000077B 48C74009[85070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002b
  1366 00000783 EB65                    	jmp .L_lambda_simple_end_002b
  1367                                  .L_lambda_simple_code_002b:	; lambda-simple body
  1368 00000785 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1369 0000078B 740B                    	je .L_lambda_simple_arity_check_ok_002b
  1370 0000078D FF742410                	push qword [rsp + 8 * 2]
  1371 00000791 6A01                    	push 1
  1372 00000793 E997150000              	jmp L_error_incorrect_arity_simple
  1373                                  .L_lambda_simple_arity_check_ok_002b:
  1374 00000798 C8000000                	enter 0, 0
  1375                                  	; preparing a non-tail-call
  1376                                  	; preparing a non-tail-call
  1377 0000079C 488B4520                	mov rax, PARAM(0)	; param x
  1378 000007A0 50                      	push rax
  1379 000007A1 6A01                    	push 1	; arg count
  1380 000007A3 488B0425[AD090000]      	mov rax, qword [free_var_30]	; free var cddr
  1381 000007AB 803805                  	cmp byte [rax], T_undefined
  1382 000007AE 0F8495140000            	je L_error_fvar_undefined
  1383 000007B4 803804                  	cmp byte [rax], T_closure
  1384 000007B7 0F8510150000            	jne L_error_non_closure
  1385 000007BD FF7001                  	push SOB_CLOSURE_ENV(rax)
  1386 000007C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1387 000007C3 50                      	push rax
  1388 000007C4 6A01                    	push 1	; arg count
  1389 000007C6 488B0425[BF080000]      	mov rax, qword [free_var_16]	; free var car
  1390 000007CE 803805                  	cmp byte [rax], T_undefined
  1391 000007D1 0F8472140000            	je L_error_fvar_undefined
  1392 000007D7 803804                  	cmp byte [rax], T_closure
  1393 000007DA 0F85ED140000            	jne L_error_non_closure
  1394 000007E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1395 000007E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1396 000007E6 C9                      	leave
  1397 000007E7 C21800                  	ret AND_KILL_FRAME(1)
  1398                                  .L_lambda_simple_end_002b:	; new closure is in rax
  1399 000007EA 48890425[9D080000]      	mov qword [free_var_14], rax
  1400 000007F2 48B8-                   	mov rax, sob_void
  1400 000007F4 [0000000000000000] 
  1401                                  
  1402 000007FC 4889C7                  	mov rdi, rax
  1403 000007FF E8C7170000              	call print_sexpr_if_not_void
  1404 00000804 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1405 00000809 E868150000              	call malloc
  1406 0000080E 50                      	push rax
  1407 0000080F BF00000000              	mov rdi, 8 * 0	; new rib
  1408 00000814 E85D150000              	call malloc
  1409 00000819 50                      	push rax
  1410 0000081A BF08000000              	mov rdi, 8 * 1	; extended env
  1411 0000081F E852150000              	call malloc
  1412 00000824 488B7D10                	mov rdi, ENV
  1413 00000828 BE00000000              	mov rsi, 0
  1414 0000082D BA01000000              	mov rdx, 1
  1415                                  .L_lambda_simple_env_loop_002c:	; ext_env[i + 1] <-- env[i]
  1416 00000832 4883FE00                	cmp rsi, 0
  1417 00000836 7410                    	je .L_lambda_simple_env_end_002c
  1418 00000838 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1419 0000083C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1420 00000840 48FFC6                  	inc rsi
  1421 00000843 48FFC2                  	inc rdx
  1422 00000846 EBEA                    	jmp .L_lambda_simple_env_loop_002c
  1423                                  .L_lambda_simple_env_end_002c:
  1424 00000848 5B                      	pop rbx
  1425 00000849 BE00000000              	mov rsi, 0
  1426                                  .L_lambda_simple_params_loop_002c:	; copy params
  1427 0000084E 4883FE00                	cmp rsi, 0
  1428 00000852 740E                    	je .L_lambda_simple_params_end_002c
  1429 00000854 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1430 00000859 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1431 0000085D 48FFC6                  	inc rsi
  1432 00000860 EBEC                    	jmp .L_lambda_simple_params_loop_002c
  1433                                  .L_lambda_simple_params_end_002c:
  1434 00000862 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1435 00000865 4889C3                  	mov rbx, rax
  1436 00000868 58                      	pop rax
  1437 00000869 C60004                  	mov byte [rax], T_closure
  1438 0000086C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1439 00000870 48C74009[7A080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002c
  1440 00000878 EB65                    	jmp .L_lambda_simple_end_002c
  1441                                  .L_lambda_simple_code_002c:	; lambda-simple body
  1442 0000087A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1443 00000880 740B                    	je .L_lambda_simple_arity_check_ok_002c
  1444 00000882 FF742410                	push qword [rsp + 8 * 2]
  1445 00000886 6A01                    	push 1
  1446 00000888 E9A2140000              	jmp L_error_incorrect_arity_simple
  1447                                  .L_lambda_simple_arity_check_ok_002c:
  1448 0000088D C8000000                	enter 0, 0
  1449                                  	; preparing a non-tail-call
  1450                                  	; preparing a non-tail-call
  1451 00000891 488B4520                	mov rax, PARAM(0)	; param x
  1452 00000895 50                      	push rax
  1453 00000896 6A01                    	push 1	; arg count
  1454 00000898 488B0425[37080000]      	mov rax, qword [free_var_8]	; free var caar
  1455 000008A0 803805                  	cmp byte [rax], T_undefined
  1456 000008A3 0F84A0130000            	je L_error_fvar_undefined
  1457 000008A9 803804                  	cmp byte [rax], T_closure
  1458 000008AC 0F851B140000            	jne L_error_non_closure
  1459 000008B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1460 000008B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1461 000008B8 50                      	push rax
  1462 000008B9 6A01                    	push 1	; arg count
  1463 000008BB 488B0425[BE090000]      	mov rax, qword [free_var_31]	; free var cdr
  1464 000008C3 803805                  	cmp byte [rax], T_undefined
  1465 000008C6 0F847D130000            	je L_error_fvar_undefined
  1466 000008CC 803804                  	cmp byte [rax], T_closure
  1467 000008CF 0F85F8130000            	jne L_error_non_closure
  1468 000008D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1469 000008D8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1470 000008DB C9                      	leave
  1471 000008DC C21800                  	ret AND_KILL_FRAME(1)
  1472                                  .L_lambda_simple_end_002c:	; new closure is in rax
  1473 000008DF 48890425[F2080000]      	mov qword [free_var_19], rax
  1474 000008E7 48B8-                   	mov rax, sob_void
  1474 000008E9 [0000000000000000] 
  1475                                  
  1476 000008F1 4889C7                  	mov rdi, rax
  1477 000008F4 E8D2160000              	call print_sexpr_if_not_void
  1478 000008F9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1479 000008FE E873140000              	call malloc
  1480 00000903 50                      	push rax
  1481 00000904 BF00000000              	mov rdi, 8 * 0	; new rib
  1482 00000909 E868140000              	call malloc
  1483 0000090E 50                      	push rax
  1484 0000090F BF08000000              	mov rdi, 8 * 1	; extended env
  1485 00000914 E85D140000              	call malloc
  1486 00000919 488B7D10                	mov rdi, ENV
  1487 0000091D BE00000000              	mov rsi, 0
  1488 00000922 BA01000000              	mov rdx, 1
  1489                                  .L_lambda_simple_env_loop_002d:	; ext_env[i + 1] <-- env[i]
  1490 00000927 4883FE00                	cmp rsi, 0
  1491 0000092B 7410                    	je .L_lambda_simple_env_end_002d
  1492 0000092D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1493 00000931 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1494 00000935 48FFC6                  	inc rsi
  1495 00000938 48FFC2                  	inc rdx
  1496 0000093B EBEA                    	jmp .L_lambda_simple_env_loop_002d
  1497                                  .L_lambda_simple_env_end_002d:
  1498 0000093D 5B                      	pop rbx
  1499 0000093E BE00000000              	mov rsi, 0
  1500                                  .L_lambda_simple_params_loop_002d:	; copy params
  1501 00000943 4883FE00                	cmp rsi, 0
  1502 00000947 740E                    	je .L_lambda_simple_params_end_002d
  1503 00000949 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1504 0000094E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1505 00000952 48FFC6                  	inc rsi
  1506 00000955 EBEC                    	jmp .L_lambda_simple_params_loop_002d
  1507                                  .L_lambda_simple_params_end_002d:
  1508 00000957 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1509 0000095A 4889C3                  	mov rbx, rax
  1510 0000095D 58                      	pop rax
  1511 0000095E C60004                  	mov byte [rax], T_closure
  1512 00000961 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1513 00000965 48C74009[6F090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002d
  1514 0000096D EB65                    	jmp .L_lambda_simple_end_002d
  1515                                  .L_lambda_simple_code_002d:	; lambda-simple body
  1516 0000096F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1517 00000975 740B                    	je .L_lambda_simple_arity_check_ok_002d
  1518 00000977 FF742410                	push qword [rsp + 8 * 2]
  1519 0000097B 6A01                    	push 1
  1520 0000097D E9AD130000              	jmp L_error_incorrect_arity_simple
  1521                                  .L_lambda_simple_arity_check_ok_002d:
  1522 00000982 C8000000                	enter 0, 0
  1523                                  	; preparing a non-tail-call
  1524                                  	; preparing a non-tail-call
  1525 00000986 488B4520                	mov rax, PARAM(0)	; param x
  1526 0000098A 50                      	push rax
  1527 0000098B 6A01                    	push 1	; arg count
  1528 0000098D 488B0425[AE080000]      	mov rax, qword [free_var_15]	; free var cadr
  1529 00000995 803805                  	cmp byte [rax], T_undefined
  1530 00000998 0F84AB120000            	je L_error_fvar_undefined
  1531 0000099E 803804                  	cmp byte [rax], T_closure
  1532 000009A1 0F8526130000            	jne L_error_non_closure
  1533 000009A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1534 000009AA FF5009                  	call SOB_CLOSURE_CODE(rax)
  1535 000009AD 50                      	push rax
  1536 000009AE 6A01                    	push 1	; arg count
  1537 000009B0 488B0425[BE090000]      	mov rax, qword [free_var_31]	; free var cdr
  1538 000009B8 803805                  	cmp byte [rax], T_undefined
  1539 000009BB 0F8488120000            	je L_error_fvar_undefined
  1540 000009C1 803804                  	cmp byte [rax], T_closure
  1541 000009C4 0F8503130000            	jne L_error_non_closure
  1542 000009CA FF7001                  	push SOB_CLOSURE_ENV(rax)
  1543 000009CD FF5009                  	call SOB_CLOSURE_CODE(rax)
  1544 000009D0 C9                      	leave
  1545 000009D1 C21800                  	ret AND_KILL_FRAME(1)
  1546                                  .L_lambda_simple_end_002d:	; new closure is in rax
  1547 000009D4 48890425[25090000]      	mov qword [free_var_22], rax
  1548 000009DC 48B8-                   	mov rax, sob_void
  1548 000009DE [0000000000000000] 
  1549                                  
  1550 000009E6 4889C7                  	mov rdi, rax
  1551 000009E9 E8DD150000              	call print_sexpr_if_not_void
  1552 000009EE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1553 000009F3 E87E130000              	call malloc
  1554 000009F8 50                      	push rax
  1555 000009F9 BF00000000              	mov rdi, 8 * 0	; new rib
  1556 000009FE E873130000              	call malloc
  1557 00000A03 50                      	push rax
  1558 00000A04 BF08000000              	mov rdi, 8 * 1	; extended env
  1559 00000A09 E868130000              	call malloc
  1560 00000A0E 488B7D10                	mov rdi, ENV
  1561 00000A12 BE00000000              	mov rsi, 0
  1562 00000A17 BA01000000              	mov rdx, 1
  1563                                  .L_lambda_simple_env_loop_002e:	; ext_env[i + 1] <-- env[i]
  1564 00000A1C 4883FE00                	cmp rsi, 0
  1565 00000A20 7410                    	je .L_lambda_simple_env_end_002e
  1566 00000A22 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1567 00000A26 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1568 00000A2A 48FFC6                  	inc rsi
  1569 00000A2D 48FFC2                  	inc rdx
  1570 00000A30 EBEA                    	jmp .L_lambda_simple_env_loop_002e
  1571                                  .L_lambda_simple_env_end_002e:
  1572 00000A32 5B                      	pop rbx
  1573 00000A33 BE00000000              	mov rsi, 0
  1574                                  .L_lambda_simple_params_loop_002e:	; copy params
  1575 00000A38 4883FE00                	cmp rsi, 0
  1576 00000A3C 740E                    	je .L_lambda_simple_params_end_002e
  1577 00000A3E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1578 00000A43 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1579 00000A47 48FFC6                  	inc rsi
  1580 00000A4A EBEC                    	jmp .L_lambda_simple_params_loop_002e
  1581                                  .L_lambda_simple_params_end_002e:
  1582 00000A4C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1583 00000A4F 4889C3                  	mov rbx, rax
  1584 00000A52 58                      	pop rax
  1585 00000A53 C60004                  	mov byte [rax], T_closure
  1586 00000A56 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1587 00000A5A 48C74009[640A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002e
  1588 00000A62 EB65                    	jmp .L_lambda_simple_end_002e
  1589                                  .L_lambda_simple_code_002e:	; lambda-simple body
  1590 00000A64 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1591 00000A6A 740B                    	je .L_lambda_simple_arity_check_ok_002e
  1592 00000A6C FF742410                	push qword [rsp + 8 * 2]
  1593 00000A70 6A01                    	push 1
  1594 00000A72 E9B8120000              	jmp L_error_incorrect_arity_simple
  1595                                  .L_lambda_simple_arity_check_ok_002e:
  1596 00000A77 C8000000                	enter 0, 0
  1597                                  	; preparing a non-tail-call
  1598                                  	; preparing a non-tail-call
  1599 00000A7B 488B4520                	mov rax, PARAM(0)	; param x
  1600 00000A7F 50                      	push rax
  1601 00000A80 6A01                    	push 1	; arg count
  1602 00000A82 488B0425[36090000]      	mov rax, qword [free_var_23]	; free var cdar
  1603 00000A8A 803805                  	cmp byte [rax], T_undefined
  1604 00000A8D 0F84B6110000            	je L_error_fvar_undefined
  1605 00000A93 803804                  	cmp byte [rax], T_closure
  1606 00000A96 0F8531120000            	jne L_error_non_closure
  1607 00000A9C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1608 00000A9F FF5009                  	call SOB_CLOSURE_CODE(rax)
  1609 00000AA2 50                      	push rax
  1610 00000AA3 6A01                    	push 1	; arg count
  1611 00000AA5 488B0425[BE090000]      	mov rax, qword [free_var_31]	; free var cdr
  1612 00000AAD 803805                  	cmp byte [rax], T_undefined
  1613 00000AB0 0F8493110000            	je L_error_fvar_undefined
  1614 00000AB6 803804                  	cmp byte [rax], T_closure
  1615 00000AB9 0F850E120000            	jne L_error_non_closure
  1616 00000ABF FF7001                  	push SOB_CLOSURE_ENV(rax)
  1617 00000AC2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1618 00000AC5 C9                      	leave
  1619 00000AC6 C21800                  	ret AND_KILL_FRAME(1)
  1620                                  .L_lambda_simple_end_002e:	; new closure is in rax
  1621 00000AC9 48890425[69090000]      	mov qword [free_var_26], rax
  1622 00000AD1 48B8-                   	mov rax, sob_void
  1622 00000AD3 [0000000000000000] 
  1623                                  
  1624 00000ADB 4889C7                  	mov rdi, rax
  1625 00000ADE E8E8140000              	call print_sexpr_if_not_void
  1626 00000AE3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1627 00000AE8 E889120000              	call malloc
  1628 00000AED 50                      	push rax
  1629 00000AEE BF00000000              	mov rdi, 8 * 0	; new rib
  1630 00000AF3 E87E120000              	call malloc
  1631 00000AF8 50                      	push rax
  1632 00000AF9 BF08000000              	mov rdi, 8 * 1	; extended env
  1633 00000AFE E873120000              	call malloc
  1634 00000B03 488B7D10                	mov rdi, ENV
  1635 00000B07 BE00000000              	mov rsi, 0
  1636 00000B0C BA01000000              	mov rdx, 1
  1637                                  .L_lambda_simple_env_loop_002f:	; ext_env[i + 1] <-- env[i]
  1638 00000B11 4883FE00                	cmp rsi, 0
  1639 00000B15 7410                    	je .L_lambda_simple_env_end_002f
  1640 00000B17 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1641 00000B1B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1642 00000B1F 48FFC6                  	inc rsi
  1643 00000B22 48FFC2                  	inc rdx
  1644 00000B25 EBEA                    	jmp .L_lambda_simple_env_loop_002f
  1645                                  .L_lambda_simple_env_end_002f:
  1646 00000B27 5B                      	pop rbx
  1647 00000B28 BE00000000              	mov rsi, 0
  1648                                  .L_lambda_simple_params_loop_002f:	; copy params
  1649 00000B2D 4883FE00                	cmp rsi, 0
  1650 00000B31 740E                    	je .L_lambda_simple_params_end_002f
  1651 00000B33 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1652 00000B38 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1653 00000B3C 48FFC6                  	inc rsi
  1654 00000B3F EBEC                    	jmp .L_lambda_simple_params_loop_002f
  1655                                  .L_lambda_simple_params_end_002f:
  1656 00000B41 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1657 00000B44 4889C3                  	mov rbx, rax
  1658 00000B47 58                      	pop rax
  1659 00000B48 C60004                  	mov byte [rax], T_closure
  1660 00000B4B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1661 00000B4F 48C74009[590B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002f
  1662 00000B57 EB65                    	jmp .L_lambda_simple_end_002f
  1663                                  .L_lambda_simple_code_002f:	; lambda-simple body
  1664 00000B59 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1665 00000B5F 740B                    	je .L_lambda_simple_arity_check_ok_002f
  1666 00000B61 FF742410                	push qword [rsp + 8 * 2]
  1667 00000B65 6A01                    	push 1
  1668 00000B67 E9C3110000              	jmp L_error_incorrect_arity_simple
  1669                                  .L_lambda_simple_arity_check_ok_002f:
  1670 00000B6C C8000000                	enter 0, 0
  1671                                  	; preparing a non-tail-call
  1672                                  	; preparing a non-tail-call
  1673 00000B70 488B4520                	mov rax, PARAM(0)	; param x
  1674 00000B74 50                      	push rax
  1675 00000B75 6A01                    	push 1	; arg count
  1676 00000B77 488B0425[AD090000]      	mov rax, qword [free_var_30]	; free var cddr
  1677 00000B7F 803805                  	cmp byte [rax], T_undefined
  1678 00000B82 0F84C1100000            	je L_error_fvar_undefined
  1679 00000B88 803804                  	cmp byte [rax], T_closure
  1680 00000B8B 0F853C110000            	jne L_error_non_closure
  1681 00000B91 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1682 00000B94 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1683 00000B97 50                      	push rax
  1684 00000B98 6A01                    	push 1	; arg count
  1685 00000B9A 488B0425[BE090000]      	mov rax, qword [free_var_31]	; free var cdr
  1686 00000BA2 803805                  	cmp byte [rax], T_undefined
  1687 00000BA5 0F849E100000            	je L_error_fvar_undefined
  1688 00000BAB 803804                  	cmp byte [rax], T_closure
  1689 00000BAE 0F8519110000            	jne L_error_non_closure
  1690 00000BB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1691 00000BB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1692 00000BBA C9                      	leave
  1693 00000BBB C21800                  	ret AND_KILL_FRAME(1)
  1694                                  .L_lambda_simple_end_002f:	; new closure is in rax
  1695 00000BBE 48890425[9C090000]      	mov qword [free_var_29], rax
  1696 00000BC6 48B8-                   	mov rax, sob_void
  1696 00000BC8 [0000000000000000] 
  1697                                  
  1698 00000BD0 4889C7                  	mov rdi, rax
  1699 00000BD3 E8F3130000              	call print_sexpr_if_not_void
  1700 00000BD8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1701 00000BDD E894110000              	call malloc
  1702 00000BE2 50                      	push rax
  1703 00000BE3 BF00000000              	mov rdi, 8 * 0	; new rib
  1704 00000BE8 E889110000              	call malloc
  1705 00000BED 50                      	push rax
  1706 00000BEE BF08000000              	mov rdi, 8 * 1	; extended env
  1707 00000BF3 E87E110000              	call malloc
  1708 00000BF8 488B7D10                	mov rdi, ENV
  1709 00000BFC BE00000000              	mov rsi, 0
  1710 00000C01 BA01000000              	mov rdx, 1
  1711                                  .L_lambda_simple_env_loop_0030:	; ext_env[i + 1] <-- env[i]
  1712 00000C06 4883FE00                	cmp rsi, 0
  1713 00000C0A 7410                    	je .L_lambda_simple_env_end_0030
  1714 00000C0C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1715 00000C10 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1716 00000C14 48FFC6                  	inc rsi
  1717 00000C17 48FFC2                  	inc rdx
  1718 00000C1A EBEA                    	jmp .L_lambda_simple_env_loop_0030
  1719                                  .L_lambda_simple_env_end_0030:
  1720 00000C1C 5B                      	pop rbx
  1721 00000C1D BE00000000              	mov rsi, 0
  1722                                  .L_lambda_simple_params_loop_0030:	; copy params
  1723 00000C22 4883FE00                	cmp rsi, 0
  1724 00000C26 740E                    	je .L_lambda_simple_params_end_0030
  1725 00000C28 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1726 00000C2D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1727 00000C31 48FFC6                  	inc rsi
  1728 00000C34 EBEC                    	jmp .L_lambda_simple_params_loop_0030
  1729                                  .L_lambda_simple_params_end_0030:
  1730 00000C36 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1731 00000C39 4889C3                  	mov rbx, rax
  1732 00000C3C 58                      	pop rax
  1733 00000C3D C60004                  	mov byte [rax], T_closure
  1734 00000C40 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1735 00000C44 48C74009[4E0C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0030
  1736 00000C4C EB65                    	jmp .L_lambda_simple_end_0030
  1737                                  .L_lambda_simple_code_0030:	; lambda-simple body
  1738 00000C4E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1739 00000C54 740B                    	je .L_lambda_simple_arity_check_ok_0030
  1740 00000C56 FF742410                	push qword [rsp + 8 * 2]
  1741 00000C5A 6A01                    	push 1
  1742 00000C5C E9CE100000              	jmp L_error_incorrect_arity_simple
  1743                                  .L_lambda_simple_arity_check_ok_0030:
  1744 00000C61 C8000000                	enter 0, 0
  1745                                  	; preparing a non-tail-call
  1746                                  	; preparing a non-tail-call
  1747 00000C65 488B4520                	mov rax, PARAM(0)	; param x
  1748 00000C69 50                      	push rax
  1749 00000C6A 6A01                    	push 1	; arg count
  1750 00000C6C 488B0425[37080000]      	mov rax, qword [free_var_8]	; free var caar
  1751 00000C74 803805                  	cmp byte [rax], T_undefined
  1752 00000C77 0F84CC0F0000            	je L_error_fvar_undefined
  1753 00000C7D 803804                  	cmp byte [rax], T_closure
  1754 00000C80 0F8547100000            	jne L_error_non_closure
  1755 00000C86 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1756 00000C89 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1757 00000C8C 50                      	push rax
  1758 00000C8D 6A01                    	push 1	; arg count
  1759 00000C8F 488B0425[37080000]      	mov rax, qword [free_var_8]	; free var caar
  1760 00000C97 803805                  	cmp byte [rax], T_undefined
  1761 00000C9A 0F84A90F0000            	je L_error_fvar_undefined
  1762 00000CA0 803804                  	cmp byte [rax], T_closure
  1763 00000CA3 0F8524100000            	jne L_error_non_closure
  1764 00000CA9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1765 00000CAC FF5009                  	call SOB_CLOSURE_CODE(rax)
  1766 00000CAF C9                      	leave
  1767 00000CB0 C21800                  	ret AND_KILL_FRAME(1)
  1768                                  .L_lambda_simple_end_0030:	; new closure is in rax
  1769 00000CB3 48890425[D1070000]      	mov qword [free_var_2], rax
  1770 00000CBB 48B8-                   	mov rax, sob_void
  1770 00000CBD [0000000000000000] 
  1771                                  
  1772 00000CC5 4889C7                  	mov rdi, rax
  1773 00000CC8 E8FE120000              	call print_sexpr_if_not_void
  1774 00000CCD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1775 00000CD2 E89F100000              	call malloc
  1776 00000CD7 50                      	push rax
  1777 00000CD8 BF00000000              	mov rdi, 8 * 0	; new rib
  1778 00000CDD E894100000              	call malloc
  1779 00000CE2 50                      	push rax
  1780 00000CE3 BF08000000              	mov rdi, 8 * 1	; extended env
  1781 00000CE8 E889100000              	call malloc
  1782 00000CED 488B7D10                	mov rdi, ENV
  1783 00000CF1 BE00000000              	mov rsi, 0
  1784 00000CF6 BA01000000              	mov rdx, 1
  1785                                  .L_lambda_simple_env_loop_0031:	; ext_env[i + 1] <-- env[i]
  1786 00000CFB 4883FE00                	cmp rsi, 0
  1787 00000CFF 7410                    	je .L_lambda_simple_env_end_0031
  1788 00000D01 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1789 00000D05 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1790 00000D09 48FFC6                  	inc rsi
  1791 00000D0C 48FFC2                  	inc rdx
  1792 00000D0F EBEA                    	jmp .L_lambda_simple_env_loop_0031
  1793                                  .L_lambda_simple_env_end_0031:
  1794 00000D11 5B                      	pop rbx
  1795 00000D12 BE00000000              	mov rsi, 0
  1796                                  .L_lambda_simple_params_loop_0031:	; copy params
  1797 00000D17 4883FE00                	cmp rsi, 0
  1798 00000D1B 740E                    	je .L_lambda_simple_params_end_0031
  1799 00000D1D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1800 00000D22 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1801 00000D26 48FFC6                  	inc rsi
  1802 00000D29 EBEC                    	jmp .L_lambda_simple_params_loop_0031
  1803                                  .L_lambda_simple_params_end_0031:
  1804 00000D2B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1805 00000D2E 4889C3                  	mov rbx, rax
  1806 00000D31 58                      	pop rax
  1807 00000D32 C60004                  	mov byte [rax], T_closure
  1808 00000D35 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1809 00000D39 48C74009[430D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0031
  1810 00000D41 EB65                    	jmp .L_lambda_simple_end_0031
  1811                                  .L_lambda_simple_code_0031:	; lambda-simple body
  1812 00000D43 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1813 00000D49 740B                    	je .L_lambda_simple_arity_check_ok_0031
  1814 00000D4B FF742410                	push qword [rsp + 8 * 2]
  1815 00000D4F 6A01                    	push 1
  1816 00000D51 E9D90F0000              	jmp L_error_incorrect_arity_simple
  1817                                  .L_lambda_simple_arity_check_ok_0031:
  1818 00000D56 C8000000                	enter 0, 0
  1819                                  	; preparing a non-tail-call
  1820                                  	; preparing a non-tail-call
  1821 00000D5A 488B4520                	mov rax, PARAM(0)	; param x
  1822 00000D5E 50                      	push rax
  1823 00000D5F 6A01                    	push 1	; arg count
  1824 00000D61 488B0425[AE080000]      	mov rax, qword [free_var_15]	; free var cadr
  1825 00000D69 803805                  	cmp byte [rax], T_undefined
  1826 00000D6C 0F84D70E0000            	je L_error_fvar_undefined
  1827 00000D72 803804                  	cmp byte [rax], T_closure
  1828 00000D75 0F85520F0000            	jne L_error_non_closure
  1829 00000D7B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1830 00000D7E FF5009                  	call SOB_CLOSURE_CODE(rax)
  1831 00000D81 50                      	push rax
  1832 00000D82 6A01                    	push 1	; arg count
  1833 00000D84 488B0425[37080000]      	mov rax, qword [free_var_8]	; free var caar
  1834 00000D8C 803805                  	cmp byte [rax], T_undefined
  1835 00000D8F 0F84B40E0000            	je L_error_fvar_undefined
  1836 00000D95 803804                  	cmp byte [rax], T_closure
  1837 00000D98 0F852F0F0000            	jne L_error_non_closure
  1838 00000D9E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1839 00000DA1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1840 00000DA4 C9                      	leave
  1841 00000DA5 C21800                  	ret AND_KILL_FRAME(1)
  1842                                  .L_lambda_simple_end_0031:	; new closure is in rax
  1843 00000DA8 48890425[E2070000]      	mov qword [free_var_3], rax
  1844 00000DB0 48B8-                   	mov rax, sob_void
  1844 00000DB2 [0000000000000000] 
  1845                                  
  1846 00000DBA 4889C7                  	mov rdi, rax
  1847 00000DBD E809120000              	call print_sexpr_if_not_void
  1848 00000DC2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1849 00000DC7 E8AA0F0000              	call malloc
  1850 00000DCC 50                      	push rax
  1851 00000DCD BF00000000              	mov rdi, 8 * 0	; new rib
  1852 00000DD2 E89F0F0000              	call malloc
  1853 00000DD7 50                      	push rax
  1854 00000DD8 BF08000000              	mov rdi, 8 * 1	; extended env
  1855 00000DDD E8940F0000              	call malloc
  1856 00000DE2 488B7D10                	mov rdi, ENV
  1857 00000DE6 BE00000000              	mov rsi, 0
  1858 00000DEB BA01000000              	mov rdx, 1
  1859                                  .L_lambda_simple_env_loop_0032:	; ext_env[i + 1] <-- env[i]
  1860 00000DF0 4883FE00                	cmp rsi, 0
  1861 00000DF4 7410                    	je .L_lambda_simple_env_end_0032
  1862 00000DF6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1863 00000DFA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1864 00000DFE 48FFC6                  	inc rsi
  1865 00000E01 48FFC2                  	inc rdx
  1866 00000E04 EBEA                    	jmp .L_lambda_simple_env_loop_0032
  1867                                  .L_lambda_simple_env_end_0032:
  1868 00000E06 5B                      	pop rbx
  1869 00000E07 BE00000000              	mov rsi, 0
  1870                                  .L_lambda_simple_params_loop_0032:	; copy params
  1871 00000E0C 4883FE00                	cmp rsi, 0
  1872 00000E10 740E                    	je .L_lambda_simple_params_end_0032
  1873 00000E12 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1874 00000E17 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1875 00000E1B 48FFC6                  	inc rsi
  1876 00000E1E EBEC                    	jmp .L_lambda_simple_params_loop_0032
  1877                                  .L_lambda_simple_params_end_0032:
  1878 00000E20 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1879 00000E23 4889C3                  	mov rbx, rax
  1880 00000E26 58                      	pop rax
  1881 00000E27 C60004                  	mov byte [rax], T_closure
  1882 00000E2A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1883 00000E2E 48C74009[380E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0032
  1884 00000E36 EB65                    	jmp .L_lambda_simple_end_0032
  1885                                  .L_lambda_simple_code_0032:	; lambda-simple body
  1886 00000E38 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1887 00000E3E 740B                    	je .L_lambda_simple_arity_check_ok_0032
  1888 00000E40 FF742410                	push qword [rsp + 8 * 2]
  1889 00000E44 6A01                    	push 1
  1890 00000E46 E9E40E0000              	jmp L_error_incorrect_arity_simple
  1891                                  .L_lambda_simple_arity_check_ok_0032:
  1892 00000E4B C8000000                	enter 0, 0
  1893                                  	; preparing a non-tail-call
  1894                                  	; preparing a non-tail-call
  1895 00000E4F 488B4520                	mov rax, PARAM(0)	; param x
  1896 00000E53 50                      	push rax
  1897 00000E54 6A01                    	push 1	; arg count
  1898 00000E56 488B0425[36090000]      	mov rax, qword [free_var_23]	; free var cdar
  1899 00000E5E 803805                  	cmp byte [rax], T_undefined
  1900 00000E61 0F84E20D0000            	je L_error_fvar_undefined
  1901 00000E67 803804                  	cmp byte [rax], T_closure
  1902 00000E6A 0F855D0E0000            	jne L_error_non_closure
  1903 00000E70 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1904 00000E73 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1905 00000E76 50                      	push rax
  1906 00000E77 6A01                    	push 1	; arg count
  1907 00000E79 488B0425[37080000]      	mov rax, qword [free_var_8]	; free var caar
  1908 00000E81 803805                  	cmp byte [rax], T_undefined
  1909 00000E84 0F84BF0D0000            	je L_error_fvar_undefined
  1910 00000E8A 803804                  	cmp byte [rax], T_closure
  1911 00000E8D 0F853A0E0000            	jne L_error_non_closure
  1912 00000E93 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1913 00000E96 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1914 00000E99 C9                      	leave
  1915 00000E9A C21800                  	ret AND_KILL_FRAME(1)
  1916                                  .L_lambda_simple_end_0032:	; new closure is in rax
  1917 00000E9D 48890425[04080000]      	mov qword [free_var_5], rax
  1918 00000EA5 48B8-                   	mov rax, sob_void
  1918 00000EA7 [0000000000000000] 
  1919                                  
  1920 00000EAF 4889C7                  	mov rdi, rax
  1921 00000EB2 E814110000              	call print_sexpr_if_not_void
  1922 00000EB7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1923 00000EBC E8B50E0000              	call malloc
  1924 00000EC1 50                      	push rax
  1925 00000EC2 BF00000000              	mov rdi, 8 * 0	; new rib
  1926 00000EC7 E8AA0E0000              	call malloc
  1927 00000ECC 50                      	push rax
  1928 00000ECD BF08000000              	mov rdi, 8 * 1	; extended env
  1929 00000ED2 E89F0E0000              	call malloc
  1930 00000ED7 488B7D10                	mov rdi, ENV
  1931 00000EDB BE00000000              	mov rsi, 0
  1932 00000EE0 BA01000000              	mov rdx, 1
  1933                                  .L_lambda_simple_env_loop_0033:	; ext_env[i + 1] <-- env[i]
  1934 00000EE5 4883FE00                	cmp rsi, 0
  1935 00000EE9 7410                    	je .L_lambda_simple_env_end_0033
  1936 00000EEB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1937 00000EEF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1938 00000EF3 48FFC6                  	inc rsi
  1939 00000EF6 48FFC2                  	inc rdx
  1940 00000EF9 EBEA                    	jmp .L_lambda_simple_env_loop_0033
  1941                                  .L_lambda_simple_env_end_0033:
  1942 00000EFB 5B                      	pop rbx
  1943 00000EFC BE00000000              	mov rsi, 0
  1944                                  .L_lambda_simple_params_loop_0033:	; copy params
  1945 00000F01 4883FE00                	cmp rsi, 0
  1946 00000F05 740E                    	je .L_lambda_simple_params_end_0033
  1947 00000F07 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1948 00000F0C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1949 00000F10 48FFC6                  	inc rsi
  1950 00000F13 EBEC                    	jmp .L_lambda_simple_params_loop_0033
  1951                                  .L_lambda_simple_params_end_0033:
  1952 00000F15 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1953 00000F18 4889C3                  	mov rbx, rax
  1954 00000F1B 58                      	pop rax
  1955 00000F1C C60004                  	mov byte [rax], T_closure
  1956 00000F1F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1957 00000F23 48C74009[2D0F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0033
  1958 00000F2B EB65                    	jmp .L_lambda_simple_end_0033
  1959                                  .L_lambda_simple_code_0033:	; lambda-simple body
  1960 00000F2D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1961 00000F33 740B                    	je .L_lambda_simple_arity_check_ok_0033
  1962 00000F35 FF742410                	push qword [rsp + 8 * 2]
  1963 00000F39 6A01                    	push 1
  1964 00000F3B E9EF0D0000              	jmp L_error_incorrect_arity_simple
  1965                                  .L_lambda_simple_arity_check_ok_0033:
  1966 00000F40 C8000000                	enter 0, 0
  1967                                  	; preparing a non-tail-call
  1968                                  	; preparing a non-tail-call
  1969 00000F44 488B4520                	mov rax, PARAM(0)	; param x
  1970 00000F48 50                      	push rax
  1971 00000F49 6A01                    	push 1	; arg count
  1972 00000F4B 488B0425[AD090000]      	mov rax, qword [free_var_30]	; free var cddr
  1973 00000F53 803805                  	cmp byte [rax], T_undefined
  1974 00000F56 0F84ED0C0000            	je L_error_fvar_undefined
  1975 00000F5C 803804                  	cmp byte [rax], T_closure
  1976 00000F5F 0F85680D0000            	jne L_error_non_closure
  1977 00000F65 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1978 00000F68 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1979 00000F6B 50                      	push rax
  1980 00000F6C 6A01                    	push 1	; arg count
  1981 00000F6E 488B0425[37080000]      	mov rax, qword [free_var_8]	; free var caar
  1982 00000F76 803805                  	cmp byte [rax], T_undefined
  1983 00000F79 0F84CA0C0000            	je L_error_fvar_undefined
  1984 00000F7F 803804                  	cmp byte [rax], T_closure
  1985 00000F82 0F85450D0000            	jne L_error_non_closure
  1986 00000F88 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1987 00000F8B FF5009                  	call SOB_CLOSURE_CODE(rax)
  1988 00000F8E C9                      	leave
  1989 00000F8F C21800                  	ret AND_KILL_FRAME(1)
  1990                                  .L_lambda_simple_end_0033:	; new closure is in rax
  1991 00000F92 48890425[15080000]      	mov qword [free_var_6], rax
  1992 00000F9A 48B8-                   	mov rax, sob_void
  1992 00000F9C [0000000000000000] 
  1993                                  
  1994 00000FA4 4889C7                  	mov rdi, rax
  1995 00000FA7 E81F100000              	call print_sexpr_if_not_void
  1996 00000FAC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1997 00000FB1 E8C00D0000              	call malloc
  1998 00000FB6 50                      	push rax
  1999 00000FB7 BF00000000              	mov rdi, 8 * 0	; new rib
  2000 00000FBC E8B50D0000              	call malloc
  2001 00000FC1 50                      	push rax
  2002 00000FC2 BF08000000              	mov rdi, 8 * 1	; extended env
  2003 00000FC7 E8AA0D0000              	call malloc
  2004 00000FCC 488B7D10                	mov rdi, ENV
  2005 00000FD0 BE00000000              	mov rsi, 0
  2006 00000FD5 BA01000000              	mov rdx, 1
  2007                                  .L_lambda_simple_env_loop_0034:	; ext_env[i + 1] <-- env[i]
  2008 00000FDA 4883FE00                	cmp rsi, 0
  2009 00000FDE 7410                    	je .L_lambda_simple_env_end_0034
  2010 00000FE0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2011 00000FE4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2012 00000FE8 48FFC6                  	inc rsi
  2013 00000FEB 48FFC2                  	inc rdx
  2014 00000FEE EBEA                    	jmp .L_lambda_simple_env_loop_0034
  2015                                  .L_lambda_simple_env_end_0034:
  2016 00000FF0 5B                      	pop rbx
  2017 00000FF1 BE00000000              	mov rsi, 0
  2018                                  .L_lambda_simple_params_loop_0034:	; copy params
  2019 00000FF6 4883FE00                	cmp rsi, 0
  2020 00000FFA 740E                    	je .L_lambda_simple_params_end_0034
  2021 00000FFC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2022 00001001 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2023 00001005 48FFC6                  	inc rsi
  2024 00001008 EBEC                    	jmp .L_lambda_simple_params_loop_0034
  2025                                  .L_lambda_simple_params_end_0034:
  2026 0000100A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2027 0000100D 4889C3                  	mov rbx, rax
  2028 00001010 58                      	pop rax
  2029 00001011 C60004                  	mov byte [rax], T_closure
  2030 00001014 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2031 00001018 48C74009[22100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0034
  2032 00001020 EB65                    	jmp .L_lambda_simple_end_0034
  2033                                  .L_lambda_simple_code_0034:	; lambda-simple body
  2034 00001022 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2035 00001028 740B                    	je .L_lambda_simple_arity_check_ok_0034
  2036 0000102A FF742410                	push qword [rsp + 8 * 2]
  2037 0000102E 6A01                    	push 1
  2038 00001030 E9FA0C0000              	jmp L_error_incorrect_arity_simple
  2039                                  .L_lambda_simple_arity_check_ok_0034:
  2040 00001035 C8000000                	enter 0, 0
  2041                                  	; preparing a non-tail-call
  2042                                  	; preparing a non-tail-call
  2043 00001039 488B4520                	mov rax, PARAM(0)	; param x
  2044 0000103D 50                      	push rax
  2045 0000103E 6A01                    	push 1	; arg count
  2046 00001040 488B0425[37080000]      	mov rax, qword [free_var_8]	; free var caar
  2047 00001048 803805                  	cmp byte [rax], T_undefined
  2048 0000104B 0F84F80B0000            	je L_error_fvar_undefined
  2049 00001051 803804                  	cmp byte [rax], T_closure
  2050 00001054 0F85730C0000            	jne L_error_non_closure
  2051 0000105A FF7001                  	push SOB_CLOSURE_ENV(rax)
  2052 0000105D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2053 00001060 50                      	push rax
  2054 00001061 6A01                    	push 1	; arg count
  2055 00001063 488B0425[AE080000]      	mov rax, qword [free_var_15]	; free var cadr
  2056 0000106B 803805                  	cmp byte [rax], T_undefined
  2057 0000106E 0F84D50B0000            	je L_error_fvar_undefined
  2058 00001074 803804                  	cmp byte [rax], T_closure
  2059 00001077 0F85500C0000            	jne L_error_non_closure
  2060 0000107D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2061 00001080 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2062 00001083 C9                      	leave
  2063 00001084 C21800                  	ret AND_KILL_FRAME(1)
  2064                                  .L_lambda_simple_end_0034:	; new closure is in rax
  2065 00001087 48890425[48080000]      	mov qword [free_var_9], rax
  2066 0000108F 48B8-                   	mov rax, sob_void
  2066 00001091 [0000000000000000] 
  2067                                  
  2068 00001099 4889C7                  	mov rdi, rax
  2069 0000109C E82A0F0000              	call print_sexpr_if_not_void
  2070 000010A1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2071 000010A6 E8CB0C0000              	call malloc
  2072 000010AB 50                      	push rax
  2073 000010AC BF00000000              	mov rdi, 8 * 0	; new rib
  2074 000010B1 E8C00C0000              	call malloc
  2075 000010B6 50                      	push rax
  2076 000010B7 BF08000000              	mov rdi, 8 * 1	; extended env
  2077 000010BC E8B50C0000              	call malloc
  2078 000010C1 488B7D10                	mov rdi, ENV
  2079 000010C5 BE00000000              	mov rsi, 0
  2080 000010CA BA01000000              	mov rdx, 1
  2081                                  .L_lambda_simple_env_loop_0035:	; ext_env[i + 1] <-- env[i]
  2082 000010CF 4883FE00                	cmp rsi, 0
  2083 000010D3 7410                    	je .L_lambda_simple_env_end_0035
  2084 000010D5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2085 000010D9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2086 000010DD 48FFC6                  	inc rsi
  2087 000010E0 48FFC2                  	inc rdx
  2088 000010E3 EBEA                    	jmp .L_lambda_simple_env_loop_0035
  2089                                  .L_lambda_simple_env_end_0035:
  2090 000010E5 5B                      	pop rbx
  2091 000010E6 BE00000000              	mov rsi, 0
  2092                                  .L_lambda_simple_params_loop_0035:	; copy params
  2093 000010EB 4883FE00                	cmp rsi, 0
  2094 000010EF 740E                    	je .L_lambda_simple_params_end_0035
  2095 000010F1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2096 000010F6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2097 000010FA 48FFC6                  	inc rsi
  2098 000010FD EBEC                    	jmp .L_lambda_simple_params_loop_0035
  2099                                  .L_lambda_simple_params_end_0035:
  2100 000010FF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2101 00001102 4889C3                  	mov rbx, rax
  2102 00001105 58                      	pop rax
  2103 00001106 C60004                  	mov byte [rax], T_closure
  2104 00001109 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2105 0000110D 48C74009[17110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0035
  2106 00001115 EB65                    	jmp .L_lambda_simple_end_0035
  2107                                  .L_lambda_simple_code_0035:	; lambda-simple body
  2108 00001117 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2109 0000111D 740B                    	je .L_lambda_simple_arity_check_ok_0035
  2110 0000111F FF742410                	push qword [rsp + 8 * 2]
  2111 00001123 6A01                    	push 1
  2112 00001125 E9050C0000              	jmp L_error_incorrect_arity_simple
  2113                                  .L_lambda_simple_arity_check_ok_0035:
  2114 0000112A C8000000                	enter 0, 0
  2115                                  	; preparing a non-tail-call
  2116                                  	; preparing a non-tail-call
  2117 0000112E 488B4520                	mov rax, PARAM(0)	; param x
  2118 00001132 50                      	push rax
  2119 00001133 6A01                    	push 1	; arg count
  2120 00001135 488B0425[AE080000]      	mov rax, qword [free_var_15]	; free var cadr
  2121 0000113D 803805                  	cmp byte [rax], T_undefined
  2122 00001140 0F84030B0000            	je L_error_fvar_undefined
  2123 00001146 803804                  	cmp byte [rax], T_closure
  2124 00001149 0F857E0B0000            	jne L_error_non_closure
  2125 0000114F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2126 00001152 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2127 00001155 50                      	push rax
  2128 00001156 6A01                    	push 1	; arg count
  2129 00001158 488B0425[AE080000]      	mov rax, qword [free_var_15]	; free var cadr
  2130 00001160 803805                  	cmp byte [rax], T_undefined
  2131 00001163 0F84E00A0000            	je L_error_fvar_undefined
  2132 00001169 803804                  	cmp byte [rax], T_closure
  2133 0000116C 0F855B0B0000            	jne L_error_non_closure
  2134 00001172 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2135 00001175 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2136 00001178 C9                      	leave
  2137 00001179 C21800                  	ret AND_KILL_FRAME(1)
  2138                                  .L_lambda_simple_end_0035:	; new closure is in rax
  2139 0000117C 48890425[59080000]      	mov qword [free_var_10], rax
  2140 00001184 48B8-                   	mov rax, sob_void
  2140 00001186 [0000000000000000] 
  2141                                  
  2142 0000118E 4889C7                  	mov rdi, rax
  2143 00001191 E8350E0000              	call print_sexpr_if_not_void
  2144 00001196 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2145 0000119B E8D60B0000              	call malloc
  2146 000011A0 50                      	push rax
  2147 000011A1 BF00000000              	mov rdi, 8 * 0	; new rib
  2148 000011A6 E8CB0B0000              	call malloc
  2149 000011AB 50                      	push rax
  2150 000011AC BF08000000              	mov rdi, 8 * 1	; extended env
  2151 000011B1 E8C00B0000              	call malloc
  2152 000011B6 488B7D10                	mov rdi, ENV
  2153 000011BA BE00000000              	mov rsi, 0
  2154 000011BF BA01000000              	mov rdx, 1
  2155                                  .L_lambda_simple_env_loop_0036:	; ext_env[i + 1] <-- env[i]
  2156 000011C4 4883FE00                	cmp rsi, 0
  2157 000011C8 7410                    	je .L_lambda_simple_env_end_0036
  2158 000011CA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2159 000011CE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2160 000011D2 48FFC6                  	inc rsi
  2161 000011D5 48FFC2                  	inc rdx
  2162 000011D8 EBEA                    	jmp .L_lambda_simple_env_loop_0036
  2163                                  .L_lambda_simple_env_end_0036:
  2164 000011DA 5B                      	pop rbx
  2165 000011DB BE00000000              	mov rsi, 0
  2166                                  .L_lambda_simple_params_loop_0036:	; copy params
  2167 000011E0 4883FE00                	cmp rsi, 0
  2168 000011E4 740E                    	je .L_lambda_simple_params_end_0036
  2169 000011E6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2170 000011EB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2171 000011EF 48FFC6                  	inc rsi
  2172 000011F2 EBEC                    	jmp .L_lambda_simple_params_loop_0036
  2173                                  .L_lambda_simple_params_end_0036:
  2174 000011F4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2175 000011F7 4889C3                  	mov rbx, rax
  2176 000011FA 58                      	pop rax
  2177 000011FB C60004                  	mov byte [rax], T_closure
  2178 000011FE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2179 00001202 48C74009[0C120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0036
  2180 0000120A EB65                    	jmp .L_lambda_simple_end_0036
  2181                                  .L_lambda_simple_code_0036:	; lambda-simple body
  2182 0000120C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2183 00001212 740B                    	je .L_lambda_simple_arity_check_ok_0036
  2184 00001214 FF742410                	push qword [rsp + 8 * 2]
  2185 00001218 6A01                    	push 1
  2186 0000121A E9100B0000              	jmp L_error_incorrect_arity_simple
  2187                                  .L_lambda_simple_arity_check_ok_0036:
  2188 0000121F C8000000                	enter 0, 0
  2189                                  	; preparing a non-tail-call
  2190                                  	; preparing a non-tail-call
  2191 00001223 488B4520                	mov rax, PARAM(0)	; param x
  2192 00001227 50                      	push rax
  2193 00001228 6A01                    	push 1	; arg count
  2194 0000122A 488B0425[36090000]      	mov rax, qword [free_var_23]	; free var cdar
  2195 00001232 803805                  	cmp byte [rax], T_undefined
  2196 00001235 0F840E0A0000            	je L_error_fvar_undefined
  2197 0000123B 803804                  	cmp byte [rax], T_closure
  2198 0000123E 0F85890A0000            	jne L_error_non_closure
  2199 00001244 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2200 00001247 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2201 0000124A 50                      	push rax
  2202 0000124B 6A01                    	push 1	; arg count
  2203 0000124D 488B0425[AE080000]      	mov rax, qword [free_var_15]	; free var cadr
  2204 00001255 803805                  	cmp byte [rax], T_undefined
  2205 00001258 0F84EB090000            	je L_error_fvar_undefined
  2206 0000125E 803804                  	cmp byte [rax], T_closure
  2207 00001261 0F85660A0000            	jne L_error_non_closure
  2208 00001267 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2209 0000126A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2210 0000126D C9                      	leave
  2211 0000126E C21800                  	ret AND_KILL_FRAME(1)
  2212                                  .L_lambda_simple_end_0036:	; new closure is in rax
  2213 00001271 48890425[7B080000]      	mov qword [free_var_12], rax
  2214 00001279 48B8-                   	mov rax, sob_void
  2214 0000127B [0000000000000000] 
  2215                                  
  2216 00001283 4889C7                  	mov rdi, rax
  2217 00001286 E8400D0000              	call print_sexpr_if_not_void
  2218 0000128B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2219 00001290 E8E10A0000              	call malloc
  2220 00001295 50                      	push rax
  2221 00001296 BF00000000              	mov rdi, 8 * 0	; new rib
  2222 0000129B E8D60A0000              	call malloc
  2223 000012A0 50                      	push rax
  2224 000012A1 BF08000000              	mov rdi, 8 * 1	; extended env
  2225 000012A6 E8CB0A0000              	call malloc
  2226 000012AB 488B7D10                	mov rdi, ENV
  2227 000012AF BE00000000              	mov rsi, 0
  2228 000012B4 BA01000000              	mov rdx, 1
  2229                                  .L_lambda_simple_env_loop_0037:	; ext_env[i + 1] <-- env[i]
  2230 000012B9 4883FE00                	cmp rsi, 0
  2231 000012BD 7410                    	je .L_lambda_simple_env_end_0037
  2232 000012BF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2233 000012C3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2234 000012C7 48FFC6                  	inc rsi
  2235 000012CA 48FFC2                  	inc rdx
  2236 000012CD EBEA                    	jmp .L_lambda_simple_env_loop_0037
  2237                                  .L_lambda_simple_env_end_0037:
  2238 000012CF 5B                      	pop rbx
  2239 000012D0 BE00000000              	mov rsi, 0
  2240                                  .L_lambda_simple_params_loop_0037:	; copy params
  2241 000012D5 4883FE00                	cmp rsi, 0
  2242 000012D9 740E                    	je .L_lambda_simple_params_end_0037
  2243 000012DB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2244 000012E0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2245 000012E4 48FFC6                  	inc rsi
  2246 000012E7 EBEC                    	jmp .L_lambda_simple_params_loop_0037
  2247                                  .L_lambda_simple_params_end_0037:
  2248 000012E9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2249 000012EC 4889C3                  	mov rbx, rax
  2250 000012EF 58                      	pop rax
  2251 000012F0 C60004                  	mov byte [rax], T_closure
  2252 000012F3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2253 000012F7 48C74009[01130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0037
  2254 000012FF EB65                    	jmp .L_lambda_simple_end_0037
  2255                                  .L_lambda_simple_code_0037:	; lambda-simple body
  2256 00001301 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2257 00001307 740B                    	je .L_lambda_simple_arity_check_ok_0037
  2258 00001309 FF742410                	push qword [rsp + 8 * 2]
  2259 0000130D 6A01                    	push 1
  2260 0000130F E91B0A0000              	jmp L_error_incorrect_arity_simple
  2261                                  .L_lambda_simple_arity_check_ok_0037:
  2262 00001314 C8000000                	enter 0, 0
  2263                                  	; preparing a non-tail-call
  2264                                  	; preparing a non-tail-call
  2265 00001318 488B4520                	mov rax, PARAM(0)	; param x
  2266 0000131C 50                      	push rax
  2267 0000131D 6A01                    	push 1	; arg count
  2268 0000131F 488B0425[AD090000]      	mov rax, qword [free_var_30]	; free var cddr
  2269 00001327 803805                  	cmp byte [rax], T_undefined
  2270 0000132A 0F8419090000            	je L_error_fvar_undefined
  2271 00001330 803804                  	cmp byte [rax], T_closure
  2272 00001333 0F8594090000            	jne L_error_non_closure
  2273 00001339 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2274 0000133C FF5009                  	call SOB_CLOSURE_CODE(rax)
  2275 0000133F 50                      	push rax
  2276 00001340 6A01                    	push 1	; arg count
  2277 00001342 488B0425[AE080000]      	mov rax, qword [free_var_15]	; free var cadr
  2278 0000134A 803805                  	cmp byte [rax], T_undefined
  2279 0000134D 0F84F6080000            	je L_error_fvar_undefined
  2280 00001353 803804                  	cmp byte [rax], T_closure
  2281 00001356 0F8571090000            	jne L_error_non_closure
  2282 0000135C FF7001                  	push SOB_CLOSURE_ENV(rax)
  2283 0000135F FF5009                  	call SOB_CLOSURE_CODE(rax)
  2284 00001362 C9                      	leave
  2285 00001363 C21800                  	ret AND_KILL_FRAME(1)
  2286                                  .L_lambda_simple_end_0037:	; new closure is in rax
  2287 00001366 48890425[8C080000]      	mov qword [free_var_13], rax
  2288 0000136E 48B8-                   	mov rax, sob_void
  2288 00001370 [0000000000000000] 
  2289                                  
  2290 00001378 4889C7                  	mov rdi, rax
  2291 0000137B E84B0C0000              	call print_sexpr_if_not_void
  2292 00001380 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2293 00001385 E8EC090000              	call malloc
  2294 0000138A 50                      	push rax
  2295 0000138B BF00000000              	mov rdi, 8 * 0	; new rib
  2296 00001390 E8E1090000              	call malloc
  2297 00001395 50                      	push rax
  2298 00001396 BF08000000              	mov rdi, 8 * 1	; extended env
  2299 0000139B E8D6090000              	call malloc
  2300 000013A0 488B7D10                	mov rdi, ENV
  2301 000013A4 BE00000000              	mov rsi, 0
  2302 000013A9 BA01000000              	mov rdx, 1
  2303                                  .L_lambda_simple_env_loop_0038:	; ext_env[i + 1] <-- env[i]
  2304 000013AE 4883FE00                	cmp rsi, 0
  2305 000013B2 7410                    	je .L_lambda_simple_env_end_0038
  2306 000013B4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2307 000013B8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2308 000013BC 48FFC6                  	inc rsi
  2309 000013BF 48FFC2                  	inc rdx
  2310 000013C2 EBEA                    	jmp .L_lambda_simple_env_loop_0038
  2311                                  .L_lambda_simple_env_end_0038:
  2312 000013C4 5B                      	pop rbx
  2313 000013C5 BE00000000              	mov rsi, 0
  2314                                  .L_lambda_simple_params_loop_0038:	; copy params
  2315 000013CA 4883FE00                	cmp rsi, 0
  2316 000013CE 740E                    	je .L_lambda_simple_params_end_0038
  2317 000013D0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2318 000013D5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2319 000013D9 48FFC6                  	inc rsi
  2320 000013DC EBEC                    	jmp .L_lambda_simple_params_loop_0038
  2321                                  .L_lambda_simple_params_end_0038:
  2322 000013DE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2323 000013E1 4889C3                  	mov rbx, rax
  2324 000013E4 58                      	pop rax
  2325 000013E5 C60004                  	mov byte [rax], T_closure
  2326 000013E8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2327 000013EC 48C74009[F6130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0038
  2328 000013F4 EB65                    	jmp .L_lambda_simple_end_0038
  2329                                  .L_lambda_simple_code_0038:	; lambda-simple body
  2330 000013F6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2331 000013FC 740B                    	je .L_lambda_simple_arity_check_ok_0038
  2332 000013FE FF742410                	push qword [rsp + 8 * 2]
  2333 00001402 6A01                    	push 1
  2334 00001404 E926090000              	jmp L_error_incorrect_arity_simple
  2335                                  .L_lambda_simple_arity_check_ok_0038:
  2336 00001409 C8000000                	enter 0, 0
  2337                                  	; preparing a non-tail-call
  2338                                  	; preparing a non-tail-call
  2339 0000140D 488B4520                	mov rax, PARAM(0)	; param x
  2340 00001411 50                      	push rax
  2341 00001412 6A01                    	push 1	; arg count
  2342 00001414 488B0425[37080000]      	mov rax, qword [free_var_8]	; free var caar
  2343 0000141C 803805                  	cmp byte [rax], T_undefined
  2344 0000141F 0F8424080000            	je L_error_fvar_undefined
  2345 00001425 803804                  	cmp byte [rax], T_closure
  2346 00001428 0F859F080000            	jne L_error_non_closure
  2347 0000142E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2348 00001431 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2349 00001434 50                      	push rax
  2350 00001435 6A01                    	push 1	; arg count
  2351 00001437 488B0425[36090000]      	mov rax, qword [free_var_23]	; free var cdar
  2352 0000143F 803805                  	cmp byte [rax], T_undefined
  2353 00001442 0F8401080000            	je L_error_fvar_undefined
  2354 00001448 803804                  	cmp byte [rax], T_closure
  2355 0000144B 0F857C080000            	jne L_error_non_closure
  2356 00001451 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2357 00001454 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2358 00001457 C9                      	leave
  2359 00001458 C21800                  	ret AND_KILL_FRAME(1)
  2360                                  .L_lambda_simple_end_0038:	; new closure is in rax
  2361 0000145B 48890425[D0080000]      	mov qword [free_var_17], rax
  2362 00001463 48B8-                   	mov rax, sob_void
  2362 00001465 [0000000000000000] 
  2363                                  
  2364 0000146D 4889C7                  	mov rdi, rax
  2365 00001470 E8560B0000              	call print_sexpr_if_not_void
  2366 00001475 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2367 0000147A E8F7080000              	call malloc
  2368 0000147F 50                      	push rax
  2369 00001480 BF00000000              	mov rdi, 8 * 0	; new rib
  2370 00001485 E8EC080000              	call malloc
  2371 0000148A 50                      	push rax
  2372 0000148B BF08000000              	mov rdi, 8 * 1	; extended env
  2373 00001490 E8E1080000              	call malloc
  2374 00001495 488B7D10                	mov rdi, ENV
  2375 00001499 BE00000000              	mov rsi, 0
  2376 0000149E BA01000000              	mov rdx, 1
  2377                                  .L_lambda_simple_env_loop_0039:	; ext_env[i + 1] <-- env[i]
  2378 000014A3 4883FE00                	cmp rsi, 0
  2379 000014A7 7410                    	je .L_lambda_simple_env_end_0039
  2380 000014A9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2381 000014AD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2382 000014B1 48FFC6                  	inc rsi
  2383 000014B4 48FFC2                  	inc rdx
  2384 000014B7 EBEA                    	jmp .L_lambda_simple_env_loop_0039
  2385                                  .L_lambda_simple_env_end_0039:
  2386 000014B9 5B                      	pop rbx
  2387 000014BA BE00000000              	mov rsi, 0
  2388                                  .L_lambda_simple_params_loop_0039:	; copy params
  2389 000014BF 4883FE00                	cmp rsi, 0
  2390 000014C3 740E                    	je .L_lambda_simple_params_end_0039
  2391 000014C5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2392 000014CA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2393 000014CE 48FFC6                  	inc rsi
  2394 000014D1 EBEC                    	jmp .L_lambda_simple_params_loop_0039
  2395                                  .L_lambda_simple_params_end_0039:
  2396 000014D3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2397 000014D6 4889C3                  	mov rbx, rax
  2398 000014D9 58                      	pop rax
  2399 000014DA C60004                  	mov byte [rax], T_closure
  2400 000014DD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2401 000014E1 48C74009[EB140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0039
  2402 000014E9 EB65                    	jmp .L_lambda_simple_end_0039
  2403                                  .L_lambda_simple_code_0039:	; lambda-simple body
  2404 000014EB 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2405 000014F1 740B                    	je .L_lambda_simple_arity_check_ok_0039
  2406 000014F3 FF742410                	push qword [rsp + 8 * 2]
  2407 000014F7 6A01                    	push 1
  2408 000014F9 E931080000              	jmp L_error_incorrect_arity_simple
  2409                                  .L_lambda_simple_arity_check_ok_0039:
  2410 000014FE C8000000                	enter 0, 0
  2411                                  	; preparing a non-tail-call
  2412                                  	; preparing a non-tail-call
  2413 00001502 488B4520                	mov rax, PARAM(0)	; param x
  2414 00001506 50                      	push rax
  2415 00001507 6A01                    	push 1	; arg count
  2416 00001509 488B0425[AE080000]      	mov rax, qword [free_var_15]	; free var cadr
  2417 00001511 803805                  	cmp byte [rax], T_undefined
  2418 00001514 0F842F070000            	je L_error_fvar_undefined
  2419 0000151A 803804                  	cmp byte [rax], T_closure
  2420 0000151D 0F85AA070000            	jne L_error_non_closure
  2421 00001523 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2422 00001526 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2423 00001529 50                      	push rax
  2424 0000152A 6A01                    	push 1	; arg count
  2425 0000152C 488B0425[36090000]      	mov rax, qword [free_var_23]	; free var cdar
  2426 00001534 803805                  	cmp byte [rax], T_undefined
  2427 00001537 0F840C070000            	je L_error_fvar_undefined
  2428 0000153D 803804                  	cmp byte [rax], T_closure
  2429 00001540 0F8587070000            	jne L_error_non_closure
  2430 00001546 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2431 00001549 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2432 0000154C C9                      	leave
  2433 0000154D C21800                  	ret AND_KILL_FRAME(1)
  2434                                  .L_lambda_simple_end_0039:	; new closure is in rax
  2435 00001550 48890425[E1080000]      	mov qword [free_var_18], rax
  2436 00001558 48B8-                   	mov rax, sob_void
  2436 0000155A [0000000000000000] 
  2437                                  
  2438 00001562 4889C7                  	mov rdi, rax
  2439 00001565 E8610A0000              	call print_sexpr_if_not_void
  2440 0000156A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2441 0000156F E802080000              	call malloc
  2442 00001574 50                      	push rax
  2443 00001575 BF00000000              	mov rdi, 8 * 0	; new rib
  2444 0000157A E8F7070000              	call malloc
  2445 0000157F 50                      	push rax
  2446 00001580 BF08000000              	mov rdi, 8 * 1	; extended env
  2447 00001585 E8EC070000              	call malloc
  2448 0000158A 488B7D10                	mov rdi, ENV
  2449 0000158E BE00000000              	mov rsi, 0
  2450 00001593 BA01000000              	mov rdx, 1
  2451                                  .L_lambda_simple_env_loop_003a:	; ext_env[i + 1] <-- env[i]
  2452 00001598 4883FE00                	cmp rsi, 0
  2453 0000159C 7410                    	je .L_lambda_simple_env_end_003a
  2454 0000159E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2455 000015A2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2456 000015A6 48FFC6                  	inc rsi
  2457 000015A9 48FFC2                  	inc rdx
  2458 000015AC EBEA                    	jmp .L_lambda_simple_env_loop_003a
  2459                                  .L_lambda_simple_env_end_003a:
  2460 000015AE 5B                      	pop rbx
  2461 000015AF BE00000000              	mov rsi, 0
  2462                                  .L_lambda_simple_params_loop_003a:	; copy params
  2463 000015B4 4883FE00                	cmp rsi, 0
  2464 000015B8 740E                    	je .L_lambda_simple_params_end_003a
  2465 000015BA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2466 000015BF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2467 000015C3 48FFC6                  	inc rsi
  2468 000015C6 EBEC                    	jmp .L_lambda_simple_params_loop_003a
  2469                                  .L_lambda_simple_params_end_003a:
  2470 000015C8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2471 000015CB 4889C3                  	mov rbx, rax
  2472 000015CE 58                      	pop rax
  2473 000015CF C60004                  	mov byte [rax], T_closure
  2474 000015D2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2475 000015D6 48C74009[E0150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003a
  2476 000015DE EB65                    	jmp .L_lambda_simple_end_003a
  2477                                  .L_lambda_simple_code_003a:	; lambda-simple body
  2478 000015E0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2479 000015E6 740B                    	je .L_lambda_simple_arity_check_ok_003a
  2480 000015E8 FF742410                	push qword [rsp + 8 * 2]
  2481 000015EC 6A01                    	push 1
  2482 000015EE E93C070000              	jmp L_error_incorrect_arity_simple
  2483                                  .L_lambda_simple_arity_check_ok_003a:
  2484 000015F3 C8000000                	enter 0, 0
  2485                                  	; preparing a non-tail-call
  2486                                  	; preparing a non-tail-call
  2487 000015F7 488B4520                	mov rax, PARAM(0)	; param x
  2488 000015FB 50                      	push rax
  2489 000015FC 6A01                    	push 1	; arg count
  2490 000015FE 488B0425[36090000]      	mov rax, qword [free_var_23]	; free var cdar
  2491 00001606 803805                  	cmp byte [rax], T_undefined
  2492 00001609 0F843A060000            	je L_error_fvar_undefined
  2493 0000160F 803804                  	cmp byte [rax], T_closure
  2494 00001612 0F85B5060000            	jne L_error_non_closure
  2495 00001618 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2496 0000161B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2497 0000161E 50                      	push rax
  2498 0000161F 6A01                    	push 1	; arg count
  2499 00001621 488B0425[36090000]      	mov rax, qword [free_var_23]	; free var cdar
  2500 00001629 803805                  	cmp byte [rax], T_undefined
  2501 0000162C 0F8417060000            	je L_error_fvar_undefined
  2502 00001632 803804                  	cmp byte [rax], T_closure
  2503 00001635 0F8592060000            	jne L_error_non_closure
  2504 0000163B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2505 0000163E FF5009                  	call SOB_CLOSURE_CODE(rax)
  2506 00001641 C9                      	leave
  2507 00001642 C21800                  	ret AND_KILL_FRAME(1)
  2508                                  .L_lambda_simple_end_003a:	; new closure is in rax
  2509 00001645 48890425[03090000]      	mov qword [free_var_20], rax
  2510 0000164D 48B8-                   	mov rax, sob_void
  2510 0000164F [0000000000000000] 
  2511                                  
  2512 00001657 4889C7                  	mov rdi, rax
  2513 0000165A E86C090000              	call print_sexpr_if_not_void
  2514 0000165F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2515 00001664 E80D070000              	call malloc
  2516 00001669 50                      	push rax
  2517 0000166A BF00000000              	mov rdi, 8 * 0	; new rib
  2518 0000166F E802070000              	call malloc
  2519 00001674 50                      	push rax
  2520 00001675 BF08000000              	mov rdi, 8 * 1	; extended env
  2521 0000167A E8F7060000              	call malloc
  2522 0000167F 488B7D10                	mov rdi, ENV
  2523 00001683 BE00000000              	mov rsi, 0
  2524 00001688 BA01000000              	mov rdx, 1
  2525                                  .L_lambda_simple_env_loop_003b:	; ext_env[i + 1] <-- env[i]
  2526 0000168D 4883FE00                	cmp rsi, 0
  2527 00001691 7410                    	je .L_lambda_simple_env_end_003b
  2528 00001693 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2529 00001697 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2530 0000169B 48FFC6                  	inc rsi
  2531 0000169E 48FFC2                  	inc rdx
  2532 000016A1 EBEA                    	jmp .L_lambda_simple_env_loop_003b
  2533                                  .L_lambda_simple_env_end_003b:
  2534 000016A3 5B                      	pop rbx
  2535 000016A4 BE00000000              	mov rsi, 0
  2536                                  .L_lambda_simple_params_loop_003b:	; copy params
  2537 000016A9 4883FE00                	cmp rsi, 0
  2538 000016AD 740E                    	je .L_lambda_simple_params_end_003b
  2539 000016AF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2540 000016B4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2541 000016B8 48FFC6                  	inc rsi
  2542 000016BB EBEC                    	jmp .L_lambda_simple_params_loop_003b
  2543                                  .L_lambda_simple_params_end_003b:
  2544 000016BD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2545 000016C0 4889C3                  	mov rbx, rax
  2546 000016C3 58                      	pop rax
  2547 000016C4 C60004                  	mov byte [rax], T_closure
  2548 000016C7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2549 000016CB 48C74009[D5160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003b
  2550 000016D3 EB65                    	jmp .L_lambda_simple_end_003b
  2551                                  .L_lambda_simple_code_003b:	; lambda-simple body
  2552 000016D5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2553 000016DB 740B                    	je .L_lambda_simple_arity_check_ok_003b
  2554 000016DD FF742410                	push qword [rsp + 8 * 2]
  2555 000016E1 6A01                    	push 1
  2556 000016E3 E947060000              	jmp L_error_incorrect_arity_simple
  2557                                  .L_lambda_simple_arity_check_ok_003b:
  2558 000016E8 C8000000                	enter 0, 0
  2559                                  	; preparing a non-tail-call
  2560                                  	; preparing a non-tail-call
  2561 000016EC 488B4520                	mov rax, PARAM(0)	; param x
  2562 000016F0 50                      	push rax
  2563 000016F1 6A01                    	push 1	; arg count
  2564 000016F3 488B0425[AD090000]      	mov rax, qword [free_var_30]	; free var cddr
  2565 000016FB 803805                  	cmp byte [rax], T_undefined
  2566 000016FE 0F8445050000            	je L_error_fvar_undefined
  2567 00001704 803804                  	cmp byte [rax], T_closure
  2568 00001707 0F85C0050000            	jne L_error_non_closure
  2569 0000170D FF7001                  	push SOB_CLOSURE_ENV(rax)
  2570 00001710 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2571 00001713 50                      	push rax
  2572 00001714 6A01                    	push 1	; arg count
  2573 00001716 488B0425[36090000]      	mov rax, qword [free_var_23]	; free var cdar
  2574 0000171E 803805                  	cmp byte [rax], T_undefined
  2575 00001721 0F8422050000            	je L_error_fvar_undefined
  2576 00001727 803804                  	cmp byte [rax], T_closure
  2577 0000172A 0F859D050000            	jne L_error_non_closure
  2578 00001730 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2579 00001733 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2580 00001736 C9                      	leave
  2581 00001737 C21800                  	ret AND_KILL_FRAME(1)
  2582                                  .L_lambda_simple_end_003b:	; new closure is in rax
  2583 0000173A 48890425[14090000]      	mov qword [free_var_21], rax
  2584 00001742 48B8-                   	mov rax, sob_void
  2584 00001744 [0000000000000000] 
  2585                                  
  2586 0000174C 4889C7                  	mov rdi, rax
  2587 0000174F E877080000              	call print_sexpr_if_not_void
  2588 00001754 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2589 00001759 E818060000              	call malloc
  2590 0000175E 50                      	push rax
  2591 0000175F BF00000000              	mov rdi, 8 * 0	; new rib
  2592 00001764 E80D060000              	call malloc
  2593 00001769 50                      	push rax
  2594 0000176A BF08000000              	mov rdi, 8 * 1	; extended env
  2595 0000176F E802060000              	call malloc
  2596 00001774 488B7D10                	mov rdi, ENV
  2597 00001778 BE00000000              	mov rsi, 0
  2598 0000177D BA01000000              	mov rdx, 1
  2599                                  .L_lambda_simple_env_loop_003c:	; ext_env[i + 1] <-- env[i]
  2600 00001782 4883FE00                	cmp rsi, 0
  2601 00001786 7410                    	je .L_lambda_simple_env_end_003c
  2602 00001788 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2603 0000178C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2604 00001790 48FFC6                  	inc rsi
  2605 00001793 48FFC2                  	inc rdx
  2606 00001796 EBEA                    	jmp .L_lambda_simple_env_loop_003c
  2607                                  .L_lambda_simple_env_end_003c:
  2608 00001798 5B                      	pop rbx
  2609 00001799 BE00000000              	mov rsi, 0
  2610                                  .L_lambda_simple_params_loop_003c:	; copy params
  2611 0000179E 4883FE00                	cmp rsi, 0
  2612 000017A2 740E                    	je .L_lambda_simple_params_end_003c
  2613 000017A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2614 000017A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2615 000017AD 48FFC6                  	inc rsi
  2616 000017B0 EBEC                    	jmp .L_lambda_simple_params_loop_003c
  2617                                  .L_lambda_simple_params_end_003c:
  2618 000017B2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2619 000017B5 4889C3                  	mov rbx, rax
  2620 000017B8 58                      	pop rax
  2621 000017B9 C60004                  	mov byte [rax], T_closure
  2622 000017BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2623 000017C0 48C74009[CA170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003c
  2624 000017C8 EB65                    	jmp .L_lambda_simple_end_003c
  2625                                  .L_lambda_simple_code_003c:	; lambda-simple body
  2626 000017CA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2627 000017D0 740B                    	je .L_lambda_simple_arity_check_ok_003c
  2628 000017D2 FF742410                	push qword [rsp + 8 * 2]
  2629 000017D6 6A01                    	push 1
  2630 000017D8 E952050000              	jmp L_error_incorrect_arity_simple
  2631                                  .L_lambda_simple_arity_check_ok_003c:
  2632 000017DD C8000000                	enter 0, 0
  2633                                  	; preparing a non-tail-call
  2634                                  	; preparing a non-tail-call
  2635 000017E1 488B4520                	mov rax, PARAM(0)	; param x
  2636 000017E5 50                      	push rax
  2637 000017E6 6A01                    	push 1	; arg count
  2638 000017E8 488B0425[37080000]      	mov rax, qword [free_var_8]	; free var caar
  2639 000017F0 803805                  	cmp byte [rax], T_undefined
  2640 000017F3 0F8450040000            	je L_error_fvar_undefined
  2641 000017F9 803804                  	cmp byte [rax], T_closure
  2642 000017FC 0F85CB040000            	jne L_error_non_closure
  2643 00001802 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2644 00001805 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2645 00001808 50                      	push rax
  2646 00001809 6A01                    	push 1	; arg count
  2647 0000180B 488B0425[AD090000]      	mov rax, qword [free_var_30]	; free var cddr
  2648 00001813 803805                  	cmp byte [rax], T_undefined
  2649 00001816 0F842D040000            	je L_error_fvar_undefined
  2650 0000181C 803804                  	cmp byte [rax], T_closure
  2651 0000181F 0F85A8040000            	jne L_error_non_closure
  2652 00001825 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2653 00001828 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2654 0000182B C9                      	leave
  2655 0000182C C21800                  	ret AND_KILL_FRAME(1)
  2656                                  .L_lambda_simple_end_003c:	; new closure is in rax
  2657 0000182F 48890425[47090000]      	mov qword [free_var_24], rax
  2658 00001837 48B8-                   	mov rax, sob_void
  2658 00001839 [0000000000000000] 
  2659                                  
  2660 00001841 4889C7                  	mov rdi, rax
  2661 00001844 E882070000              	call print_sexpr_if_not_void
  2662 00001849 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2663 0000184E E823050000              	call malloc
  2664 00001853 50                      	push rax
  2665 00001854 BF00000000              	mov rdi, 8 * 0	; new rib
  2666 00001859 E818050000              	call malloc
  2667 0000185E 50                      	push rax
  2668 0000185F BF08000000              	mov rdi, 8 * 1	; extended env
  2669 00001864 E80D050000              	call malloc
  2670 00001869 488B7D10                	mov rdi, ENV
  2671 0000186D BE00000000              	mov rsi, 0
  2672 00001872 BA01000000              	mov rdx, 1
  2673                                  .L_lambda_simple_env_loop_003d:	; ext_env[i + 1] <-- env[i]
  2674 00001877 4883FE00                	cmp rsi, 0
  2675 0000187B 7410                    	je .L_lambda_simple_env_end_003d
  2676 0000187D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2677 00001881 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2678 00001885 48FFC6                  	inc rsi
  2679 00001888 48FFC2                  	inc rdx
  2680 0000188B EBEA                    	jmp .L_lambda_simple_env_loop_003d
  2681                                  .L_lambda_simple_env_end_003d:
  2682 0000188D 5B                      	pop rbx
  2683 0000188E BE00000000              	mov rsi, 0
  2684                                  .L_lambda_simple_params_loop_003d:	; copy params
  2685 00001893 4883FE00                	cmp rsi, 0
  2686 00001897 740E                    	je .L_lambda_simple_params_end_003d
  2687 00001899 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2688 0000189E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2689 000018A2 48FFC6                  	inc rsi
  2690 000018A5 EBEC                    	jmp .L_lambda_simple_params_loop_003d
  2691                                  .L_lambda_simple_params_end_003d:
  2692 000018A7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2693 000018AA 4889C3                  	mov rbx, rax
  2694 000018AD 58                      	pop rax
  2695 000018AE C60004                  	mov byte [rax], T_closure
  2696 000018B1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2697 000018B5 48C74009[BF180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003d
  2698 000018BD EB65                    	jmp .L_lambda_simple_end_003d
  2699                                  .L_lambda_simple_code_003d:	; lambda-simple body
  2700 000018BF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2701 000018C5 740B                    	je .L_lambda_simple_arity_check_ok_003d
  2702 000018C7 FF742410                	push qword [rsp + 8 * 2]
  2703 000018CB 6A01                    	push 1
  2704 000018CD E95D040000              	jmp L_error_incorrect_arity_simple
  2705                                  .L_lambda_simple_arity_check_ok_003d:
  2706 000018D2 C8000000                	enter 0, 0
  2707                                  	; preparing a non-tail-call
  2708                                  	; preparing a non-tail-call
  2709 000018D6 488B4520                	mov rax, PARAM(0)	; param x
  2710 000018DA 50                      	push rax
  2711 000018DB 6A01                    	push 1	; arg count
  2712 000018DD 488B0425[AE080000]      	mov rax, qword [free_var_15]	; free var cadr
  2713 000018E5 803805                  	cmp byte [rax], T_undefined
  2714 000018E8 0F845B030000            	je L_error_fvar_undefined
  2715 000018EE 803804                  	cmp byte [rax], T_closure
  2716 000018F1 0F85D6030000            	jne L_error_non_closure
  2717 000018F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2718 000018FA FF5009                  	call SOB_CLOSURE_CODE(rax)
  2719 000018FD 50                      	push rax
  2720 000018FE 6A01                    	push 1	; arg count
  2721 00001900 488B0425[AD090000]      	mov rax, qword [free_var_30]	; free var cddr
  2722 00001908 803805                  	cmp byte [rax], T_undefined
  2723 0000190B 0F8438030000            	je L_error_fvar_undefined
  2724 00001911 803804                  	cmp byte [rax], T_closure
  2725 00001914 0F85B3030000            	jne L_error_non_closure
  2726 0000191A FF7001                  	push SOB_CLOSURE_ENV(rax)
  2727 0000191D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2728 00001920 C9                      	leave
  2729 00001921 C21800                  	ret AND_KILL_FRAME(1)
  2730                                  .L_lambda_simple_end_003d:	; new closure is in rax
  2731 00001924 48890425[58090000]      	mov qword [free_var_25], rax
  2732 0000192C 48B8-                   	mov rax, sob_void
  2732 0000192E [0000000000000000] 
  2733                                  
  2734 00001936 4889C7                  	mov rdi, rax
  2735 00001939 E88D060000              	call print_sexpr_if_not_void
  2736 0000193E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2737 00001943 E82E040000              	call malloc
  2738 00001948 50                      	push rax
  2739 00001949 BF00000000              	mov rdi, 8 * 0	; new rib
  2740 0000194E E823040000              	call malloc
  2741 00001953 50                      	push rax
  2742 00001954 BF08000000              	mov rdi, 8 * 1	; extended env
  2743 00001959 E818040000              	call malloc
  2744 0000195E 488B7D10                	mov rdi, ENV
  2745 00001962 BE00000000              	mov rsi, 0
  2746 00001967 BA01000000              	mov rdx, 1
  2747                                  .L_lambda_simple_env_loop_003e:	; ext_env[i + 1] <-- env[i]
  2748 0000196C 4883FE00                	cmp rsi, 0
  2749 00001970 7410                    	je .L_lambda_simple_env_end_003e
  2750 00001972 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2751 00001976 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2752 0000197A 48FFC6                  	inc rsi
  2753 0000197D 48FFC2                  	inc rdx
  2754 00001980 EBEA                    	jmp .L_lambda_simple_env_loop_003e
  2755                                  .L_lambda_simple_env_end_003e:
  2756 00001982 5B                      	pop rbx
  2757 00001983 BE00000000              	mov rsi, 0
  2758                                  .L_lambda_simple_params_loop_003e:	; copy params
  2759 00001988 4883FE00                	cmp rsi, 0
  2760 0000198C 740E                    	je .L_lambda_simple_params_end_003e
  2761 0000198E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2762 00001993 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2763 00001997 48FFC6                  	inc rsi
  2764 0000199A EBEC                    	jmp .L_lambda_simple_params_loop_003e
  2765                                  .L_lambda_simple_params_end_003e:
  2766 0000199C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2767 0000199F 4889C3                  	mov rbx, rax
  2768 000019A2 58                      	pop rax
  2769 000019A3 C60004                  	mov byte [rax], T_closure
  2770 000019A6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2771 000019AA 48C74009[B4190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003e
  2772 000019B2 EB65                    	jmp .L_lambda_simple_end_003e
  2773                                  .L_lambda_simple_code_003e:	; lambda-simple body
  2774 000019B4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2775 000019BA 740B                    	je .L_lambda_simple_arity_check_ok_003e
  2776 000019BC FF742410                	push qword [rsp + 8 * 2]
  2777 000019C0 6A01                    	push 1
  2778 000019C2 E968030000              	jmp L_error_incorrect_arity_simple
  2779                                  .L_lambda_simple_arity_check_ok_003e:
  2780 000019C7 C8000000                	enter 0, 0
  2781                                  	; preparing a non-tail-call
  2782                                  	; preparing a non-tail-call
  2783 000019CB 488B4520                	mov rax, PARAM(0)	; param x
  2784 000019CF 50                      	push rax
  2785 000019D0 6A01                    	push 1	; arg count
  2786 000019D2 488B0425[36090000]      	mov rax, qword [free_var_23]	; free var cdar
  2787 000019DA 803805                  	cmp byte [rax], T_undefined
  2788 000019DD 0F8466020000            	je L_error_fvar_undefined
  2789 000019E3 803804                  	cmp byte [rax], T_closure
  2790 000019E6 0F85E1020000            	jne L_error_non_closure
  2791 000019EC FF7001                  	push SOB_CLOSURE_ENV(rax)
  2792 000019EF FF5009                  	call SOB_CLOSURE_CODE(rax)
  2793 000019F2 50                      	push rax
  2794 000019F3 6A01                    	push 1	; arg count
  2795 000019F5 488B0425[AD090000]      	mov rax, qword [free_var_30]	; free var cddr
  2796 000019FD 803805                  	cmp byte [rax], T_undefined
  2797 00001A00 0F8443020000            	je L_error_fvar_undefined
  2798 00001A06 803804                  	cmp byte [rax], T_closure
  2799 00001A09 0F85BE020000            	jne L_error_non_closure
  2800 00001A0F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2801 00001A12 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2802 00001A15 C9                      	leave
  2803 00001A16 C21800                  	ret AND_KILL_FRAME(1)
  2804                                  .L_lambda_simple_end_003e:	; new closure is in rax
  2805 00001A19 48890425[7A090000]      	mov qword [free_var_27], rax
  2806 00001A21 48B8-                   	mov rax, sob_void
  2806 00001A23 [0000000000000000] 
  2807                                  
  2808 00001A2B 4889C7                  	mov rdi, rax
  2809 00001A2E E898050000              	call print_sexpr_if_not_void
  2810 00001A33 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2811 00001A38 E839030000              	call malloc
  2812 00001A3D 50                      	push rax
  2813 00001A3E BF00000000              	mov rdi, 8 * 0	; new rib
  2814 00001A43 E82E030000              	call malloc
  2815 00001A48 50                      	push rax
  2816 00001A49 BF08000000              	mov rdi, 8 * 1	; extended env
  2817 00001A4E E823030000              	call malloc
  2818 00001A53 488B7D10                	mov rdi, ENV
  2819 00001A57 BE00000000              	mov rsi, 0
  2820 00001A5C BA01000000              	mov rdx, 1
  2821                                  .L_lambda_simple_env_loop_003f:	; ext_env[i + 1] <-- env[i]
  2822 00001A61 4883FE00                	cmp rsi, 0
  2823 00001A65 7410                    	je .L_lambda_simple_env_end_003f
  2824 00001A67 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2825 00001A6B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2826 00001A6F 48FFC6                  	inc rsi
  2827 00001A72 48FFC2                  	inc rdx
  2828 00001A75 EBEA                    	jmp .L_lambda_simple_env_loop_003f
  2829                                  .L_lambda_simple_env_end_003f:
  2830 00001A77 5B                      	pop rbx
  2831 00001A78 BE00000000              	mov rsi, 0
  2832                                  .L_lambda_simple_params_loop_003f:	; copy params
  2833 00001A7D 4883FE00                	cmp rsi, 0
  2834 00001A81 740E                    	je .L_lambda_simple_params_end_003f
  2835 00001A83 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2836 00001A88 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2837 00001A8C 48FFC6                  	inc rsi
  2838 00001A8F EBEC                    	jmp .L_lambda_simple_params_loop_003f
  2839                                  .L_lambda_simple_params_end_003f:
  2840 00001A91 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2841 00001A94 4889C3                  	mov rbx, rax
  2842 00001A97 58                      	pop rax
  2843 00001A98 C60004                  	mov byte [rax], T_closure
  2844 00001A9B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2845 00001A9F 48C74009[A91A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003f
  2846 00001AA7 EB65                    	jmp .L_lambda_simple_end_003f
  2847                                  .L_lambda_simple_code_003f:	; lambda-simple body
  2848 00001AA9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2849 00001AAF 740B                    	je .L_lambda_simple_arity_check_ok_003f
  2850 00001AB1 FF742410                	push qword [rsp + 8 * 2]
  2851 00001AB5 6A01                    	push 1
  2852 00001AB7 E973020000              	jmp L_error_incorrect_arity_simple
  2853                                  .L_lambda_simple_arity_check_ok_003f:
  2854 00001ABC C8000000                	enter 0, 0
  2855                                  	; preparing a non-tail-call
  2856                                  	; preparing a non-tail-call
  2857 00001AC0 488B4520                	mov rax, PARAM(0)	; param x
  2858 00001AC4 50                      	push rax
  2859 00001AC5 6A01                    	push 1	; arg count
  2860 00001AC7 488B0425[AD090000]      	mov rax, qword [free_var_30]	; free var cddr
  2861 00001ACF 803805                  	cmp byte [rax], T_undefined
  2862 00001AD2 0F8471010000            	je L_error_fvar_undefined
  2863 00001AD8 803804                  	cmp byte [rax], T_closure
  2864 00001ADB 0F85EC010000            	jne L_error_non_closure
  2865 00001AE1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2866 00001AE4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2867 00001AE7 50                      	push rax
  2868 00001AE8 6A01                    	push 1	; arg count
  2869 00001AEA 488B0425[AD090000]      	mov rax, qword [free_var_30]	; free var cddr
  2870 00001AF2 803805                  	cmp byte [rax], T_undefined
  2871 00001AF5 0F844E010000            	je L_error_fvar_undefined
  2872 00001AFB 803804                  	cmp byte [rax], T_closure
  2873 00001AFE 0F85C9010000            	jne L_error_non_closure
  2874 00001B04 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2875 00001B07 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2876 00001B0A C9                      	leave
  2877 00001B0B C21800                  	ret AND_KILL_FRAME(1)
  2878                                  .L_lambda_simple_end_003f:	; new closure is in rax
  2879 00001B0E 48890425[8B090000]      	mov qword [free_var_28], rax
  2880 00001B16 48B8-                   	mov rax, sob_void
  2880 00001B18 [0000000000000000] 
  2881                                  
  2882 00001B20 4889C7                  	mov rdi, rax
  2883 00001B23 E8A3040000              	call print_sexpr_if_not_void
  2884                                  	; preparing a non-tail-call
  2885 00001B28 48B8-                   	mov rax, L_constants + 1950
  2885 00001B2A [9E07000000000000] 
  2886 00001B32 50                      	push rax
  2887 00001B33 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2888 00001B38 E839020000              	call malloc
  2889 00001B3D 50                      	push rax
  2890 00001B3E BF00000000              	mov rdi, 8 * 0	; new rib
  2891 00001B43 E82E020000              	call malloc
  2892 00001B48 50                      	push rax
  2893 00001B49 BF08000000              	mov rdi, 8 * 1	; extended env
  2894 00001B4E E823020000              	call malloc
  2895 00001B53 488B7D10                	mov rdi, ENV
  2896 00001B57 BE00000000              	mov rsi, 0
  2897 00001B5C BA01000000              	mov rdx, 1
  2898                                  .L_lambda_simple_env_loop_0040:	; ext_env[i + 1] <-- env[i]
  2899 00001B61 4883FE00                	cmp rsi, 0
  2900 00001B65 7410                    	je .L_lambda_simple_env_end_0040
  2901 00001B67 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2902 00001B6B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2903 00001B6F 48FFC6                  	inc rsi
  2904 00001B72 48FFC2                  	inc rdx
  2905 00001B75 EBEA                    	jmp .L_lambda_simple_env_loop_0040
  2906                                  .L_lambda_simple_env_end_0040:
  2907 00001B77 5B                      	pop rbx
  2908 00001B78 BE00000000              	mov rsi, 0
  2909                                  .L_lambda_simple_params_loop_0040:	; copy params
  2910 00001B7D 4883FE00                	cmp rsi, 0
  2911 00001B81 740E                    	je .L_lambda_simple_params_end_0040
  2912 00001B83 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2913 00001B88 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2914 00001B8C 48FFC6                  	inc rsi
  2915 00001B8F EBEC                    	jmp .L_lambda_simple_params_loop_0040
  2916                                  .L_lambda_simple_params_end_0040:
  2917 00001B91 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2918 00001B94 4889C3                  	mov rbx, rax
  2919 00001B97 58                      	pop rax
  2920 00001B98 C60004                  	mov byte [rax], T_closure
  2921 00001B9B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2922 00001B9F 48C74009[A91B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0040
  2923 00001BA7 EB43                    	jmp .L_lambda_simple_end_0040
  2924                                  .L_lambda_simple_code_0040:	; lambda-simple body
  2925 00001BA9 48837C241002            	cmp qword [rsp + 8 * 2], 2
  2926 00001BAF 740B                    	je .L_lambda_simple_arity_check_ok_0040
  2927 00001BB1 FF742410                	push qword [rsp + 8 * 2]
  2928 00001BB5 6A02                    	push 2
  2929 00001BB7 E973010000              	jmp L_error_incorrect_arity_simple
  2930                                  .L_lambda_simple_arity_check_ok_0040:
  2931 00001BBC C8000000                	enter 0, 0
  2932                                  	; preparing a non-tail-call
  2933 00001BC0 488B4528                	mov rax, PARAM(1)	; param y
  2934 00001BC4 50                      	push rax
  2935 00001BC5 488B4520                	mov rax, PARAM(0)	; param x
  2936 00001BC9 50                      	push rax
  2937 00001BCA 6A02                    	push 2	; arg count
  2938 00001BCC 488B0425[AF070000]      	mov rax, qword [free_var_0]	; free var +
  2939 00001BD4 803805                  	cmp byte [rax], T_undefined
  2940 00001BD7 7470                    	je L_error_fvar_undefined
  2941 00001BD9 803804                  	cmp byte [rax], T_closure
  2942 00001BDC 0F85EB000000            	jne L_error_non_closure
  2943 00001BE2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2944 00001BE5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2945 00001BE8 C9                      	leave
  2946 00001BE9 C22000                  	ret AND_KILL_FRAME(2)
  2947                                  .L_lambda_simple_end_0040:	; new closure is in rax
  2948 00001BEC 50                      	push rax
  2949 00001BED 6A02                    	push 2	; arg count
  2950 00001BEF 488B0425[C0070000]      	mov rax, qword [free_var_1]	; free var __bin-apply
  2951 00001BF7 803805                  	cmp byte [rax], T_undefined
  2952 00001BFA 744D                    	je L_error_fvar_undefined
  2953 00001BFC 803804                  	cmp byte [rax], T_closure
  2954 00001BFF 0F85C8000000            	jne L_error_non_closure
  2955 00001C05 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2956 00001C08 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2957                                  Lend:
  2958 00001C0B 4889C7                  	mov rdi, rax
  2959 00001C0E E8B8030000              	call print_sexpr_if_not_void
  2960                                  
  2961 00001C13 48BF-                           mov rdi, fmt_memory_usage
  2961 00001C15 [670A000000000000] 
  2962 00001C1D 488B3425[ED0A0000]              mov rsi, qword [top_of_memory]
  2963 00001C25 4881EE[00000000]                sub rsi, memory
  2964 00001C2C B800000000                      mov rax, 0
  2965                                          ENTER
    44 00001C31 C8000000            <1>  enter 0, 0
    45 00001C35 4883E4F0            <1>  and rsp, ~15
  2966 00001C39 E8(00000000)                    call printf
  2967                                          LEAVE
    49 00001C3E C9                  <1>  leave
  2968 00001C3F B800000000                      mov rax, 0
  2969 00001C44 E8(00000000)                    call exit
  2970                                  
  2971                                  L_error_fvar_undefined:
  2972 00001C49 50                              push rax
  2973 00001C4A 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
  2974 00001C52 48BE-                           mov rsi, fmt_undefined_free_var_1
  2974 00001C54 [CF09000000000000] 
  2975 00001C5C B800000000                      mov rax, 0
  2976                                          ENTER
    44 00001C61 C8000000            <1>  enter 0, 0
    45 00001C65 4883E4F0            <1>  and rsp, ~15
  2977 00001C69 E8(00000000)                    call fprintf
  2978                                          LEAVE
    49 00001C6E C9                  <1>  leave
  2979 00001C6F 58                              pop rax
  2980 00001C70 488B4001                        mov rax, qword [rax + 1] ; string
  2981 00001C74 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2982 00001C78 BE01000000                      mov rsi, 1               ; sizeof(char)
  2983 00001C7D 488B5001                        mov rdx, qword [rax + 1] ; string-length
  2984 00001C81 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
  2985 00001C89 B800000000                      mov rax, 0
  2986                                          ENTER
    44 00001C8E C8000000            <1>  enter 0, 0
    45 00001C92 4883E4F0            <1>  and rsp, ~15
  2987 00001C96 E8(00000000)                    call fwrite
  2988                                          LEAVE
    49 00001C9B C9                  <1>  leave
  2989 00001C9C 488B3C25[00000000]              mov rdi, [stderr]       ; destination
  2990 00001CA4 48BE-                           mov rsi, fmt_undefined_free_var_2
  2990 00001CA6 [E609000000000000] 
  2991 00001CAE B800000000                      mov rax, 0
  2992                                          ENTER
    44 00001CB3 C8000000            <1>  enter 0, 0
    45 00001CB7 4883E4F0            <1>  and rsp, ~15
  2993 00001CBB E8(00000000)                    call fprintf
  2994                                          LEAVE
    49 00001CC0 C9                  <1>  leave
  2995 00001CC1 48C7C0F6FFFFFF                  mov rax, -10
  2996 00001CC8 E8(00000000)                    call exit
  2997                                  
  2998                                  L_error_non_closure:
  2999 00001CCD 488B3C25[00000000]              mov rdi, qword [stderr]
  3000 00001CD5 48BE-                           mov rsi, fmt_non_closure
  3000 00001CD7 [9D0A000000000000] 
  3001 00001CDF B800000000                      mov rax, 0
  3002                                          ENTER
    44 00001CE4 C8000000            <1>  enter 0, 0
    45 00001CE8 4883E4F0            <1>  and rsp, ~15
  3003 00001CEC E8(00000000)                    call fprintf
  3004                                          LEAVE
    49 00001CF1 C9                  <1>  leave
  3005 00001CF2 48C7C0FEFFFFFF                  mov rax, -2
  3006 00001CF9 E8(00000000)                    call exit
  3007                                  
  3008                                  L_error_improper_list:
  3009 00001CFE 488B3C25[00000000]      	mov rdi, qword [stderr]
  3010 00001D06 48BE-                   	mov rsi, fmt_error_improper_list
  3010 00001D08 [C50A000000000000] 
  3011 00001D10 B800000000              	mov rax, 0
  3012                                          ENTER
    44 00001D15 C8000000            <1>  enter 0, 0
    45 00001D19 4883E4F0            <1>  and rsp, ~15
  3013 00001D1D E8(00000000)            	call fprintf
  3014                                          LEAVE
    49 00001D22 C9                  <1>  leave
  3015 00001D23 48C7C0F9FFFFFF          	mov rax, -7
  3016 00001D2A E8(00000000)            	call exit
  3017                                  
  3018                                  L_error_incorrect_arity_simple:
  3019 00001D2F 488B3C25[00000000]              mov rdi, qword [stderr]
  3020 00001D37 48BE-                           mov rsi, fmt_incorrect_arity_simple
  3020 00001D39 [080A000000000000] 
  3021 00001D41 EB12                            jmp L_error_incorrect_arity_common
  3022                                  L_error_incorrect_arity_opt:
  3023 00001D43 488B3C25[00000000]              mov rdi, qword [stderr]
  3024 00001D4B 48BE-                           mov rsi, fmt_incorrect_arity_opt
  3024 00001D4D [330A000000000000] 
  3025                                  L_error_incorrect_arity_common:
  3026 00001D55 5A                              pop rdx
  3027 00001D56 59                              pop rcx
  3028 00001D57 B800000000                      mov rax, 0
  3029                                          ENTER
    44 00001D5C C8000000            <1>  enter 0, 0
    45 00001D60 4883E4F0            <1>  and rsp, ~15
  3030 00001D64 E8(00000000)                    call fprintf
  3031                                          LEAVE
    49 00001D69 C9                  <1>  leave
  3032 00001D6A 48C7C0FAFFFFFF                  mov rax, -6
  3033 00001D71 E8(00000000)                    call exit
  3034                                  
  3035                                  section .data
  3036                                  fmt_undefined_free_var_1:
  3037 000009CF 212121205468652066-             db `!!! The free variable \0`
  3037 000009D8 726565207661726961-
  3037 000009E1 626C652000         
  3038                                  fmt_undefined_free_var_2:
  3039 000009E6 207761732075736564-             db ` was used before it was defined.\n\0`
  3039 000009EF 206265666F72652069-
  3039 000009F8 742077617320646566-
  3039 00000A01 696E65642E0A00     
  3040                                  fmt_incorrect_arity_simple:
  3041 00000A08 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  3041 00000A11 74656420256C642061-
  3041 00000A1A 7267756D656E74732C-
  3041 00000A23 206275742067697665-
  3041 00000A2C 6E20256C640A00     
  3042                                  fmt_incorrect_arity_opt:
  3043 00000A33 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  3043 00000A3C 746564206174206C65-
  3043 00000A45 61737420256C642061-
  3043 00000A4E 7267756D656E74732C-
  3043 00000A57 206275742067697665-
  3043 00000A60 6E20256C640A00     
  3044                                  fmt_memory_usage:
  3045 00000A67 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  3045 00000A70 20256C642062797465-
  3045 00000A79 73206F662064796E61-
  3045 00000A82 6D6963616C6C792D61-
  3045 00000A8B 6C6C6F636174656420-
  3045 00000A94 6D656D6F72790A0A00 
  3046                                  fmt_non_closure:
  3047 00000A9D 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  3047 00000AA6 7074696E6720746F20-
  3047 00000AAF 6170706C792061206E-
  3047 00000AB8 6F6E2D636C6F737572-
  3047 00000AC1 65210A00           
  3048                                  fmt_error_improper_list:
  3049 00000AC5 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  3049 00000ACE 7267756D656E742069-
  3049 00000AD7 73206E6F7420612070-
  3049 00000AE0 726F706572206C6973-
  3049 00000AE9 74210A00           
  3050                                  
  3051                                  section .bss
  3052                                  memory:
  3053 00000000 <res 40000000h>         	resb gbytes(1)
  3054                                  
  3055                                  section .data
  3056                                  top_of_memory:
  3057 00000AED [0000000000000000]              dq memory
  3058                                  
  3059                                  section .text
  3060                                  malloc:
  3061 00001D76 488B0425[ED0A0000]              mov rax, qword [top_of_memory]
  3062 00001D7E 48013C25[ED0A0000]              add qword [top_of_memory], rdi
  3063 00001D86 C3                              ret
  3064                                  
  3065                                  L_code_ptr_return:
  3066 00001D87 48837C241002            	cmp qword [rsp + 8*2], 2
  3067 00001D8D 0F85E51C0000            	jne L_error_arg_count_2
  3068 00001D93 488B4C2418              	mov rcx, qword [rsp + 8*3]
  3069                                  	assert_integer(rcx)
    53 00001D98 803911              <1>  cmp byte [%1], %2
    54 00001D9B 0F85761D0000        <1>  jne L_error_incorrect_type
  3070 00001DA1 488B4901                	mov rcx, qword [rcx + 1]
  3071 00001DA5 4883F900                	cmp rcx, 0
  3072 00001DA9 0F8CFD1B0000            	jl L_error_integer_range
  3073 00001DAF 488B442420              	mov rax, qword [rsp + 8*4]
  3074                                  .L0:
  3075 00001DB4 4883F900                        cmp rcx, 0
  3076 00001DB8 7409                            je .L1
  3077 00001DBA 488B6D00                	mov rbp, qword [rbp]
  3078 00001DBE 48FFC9                  	dec rcx
  3079 00001DC1 7FF1                    	jg .L0
  3080                                  .L1:
  3081 00001DC3 4889EC                  	mov rsp, rbp
  3082 00001DC6 5D                      	pop rbp
  3083 00001DC7 5B                              pop rbx
  3084 00001DC8 488B4C2408                      mov rcx, qword [rsp + 8*1]
  3085 00001DCD 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
  3086 00001DD2 FFE3                    	jmp rbx
  3087                                  
  3088                                  L_code_ptr_make_list:
  3089 00001DD4 C8000000                	enter 0, 0
  3090 00001DD8 48837D1801                      cmp COUNT, 1
  3091 00001DDD 740C                            je .L0
  3092 00001DDF 48837D1802                      cmp COUNT, 2
  3093 00001DE4 7411                            je .L1
  3094 00001DE6 E9C21C0000                      jmp L_error_arg_count_12
  3095                                  .L0:
  3096 00001DEB 49B9-                           mov r9, sob_void
  3096 00001DED [0000000000000000] 
  3097 00001DF5 EB04                            jmp .L2
  3098                                  .L1:
  3099 00001DF7 4C8B4D28                        mov r9, PARAM(1)
  3100                                  .L2:
  3101 00001DFB 488B4D20                        mov rcx, PARAM(0)
  3102                                          assert_integer(rcx)
    53 00001DFF 803911              <1>  cmp byte [%1], %2
    54 00001E02 0F850F1D0000        <1>  jne L_error_incorrect_type
  3103 00001E08 488B4901                        mov rcx, qword [rcx + 1]
  3104 00001E0C 4883F900                        cmp rcx, 0
  3105 00001E10 0F8CC71B0000                    jl L_error_arg_negative
  3106 00001E16 49B8-                           mov r8, sob_nil
  3106 00001E18 [0100000000000000] 
  3107                                  .L3:
  3108 00001E20 4883F900                        cmp rcx, 0
  3109 00001E24 7E1D                            jle .L4
  3110 00001E26 BF11000000                      mov rdi, 1 + 8 + 8
  3111 00001E2B E846FFFFFF                      call malloc
  3112 00001E30 C60021                          mov byte [rax], T_pair
  3113 00001E33 4C894801                        mov qword [rax + 1], r9
  3114 00001E37 4C894009                        mov qword [rax + 1 + 8], r8
  3115 00001E3B 4989C0                          mov r8, rax
  3116 00001E3E 48FFC9                          dec rcx
  3117 00001E41 EBDD                            jmp .L3
  3118                                  .L4:
  3119 00001E43 4C89C0                          mov rax, r8
  3120 00001E46 48837D1802                      cmp COUNT, 2
  3121 00001E4B 7404                            je .L5
  3122 00001E4D C9                              leave
  3123 00001E4E C21800                          ret AND_KILL_FRAME(1)
  3124                                  .L5:
  3125 00001E51 C9                      	leave
  3126 00001E52 C22000                  	ret AND_KILL_FRAME(2)
  3127                                  
  3128                                  L_code_ptr_is_primitive:
  3129 00001E55 C8000000                	enter 0, 0
  3130 00001E59 48837D1801              	cmp COUNT, 1
  3131 00001E5E 0F85DF1B0000            	jne L_error_arg_count_1
  3132 00001E64 488B4520                	mov rax, PARAM(0)
  3133                                  	assert_closure(rax)
    53 00001E68 803804              <1>  cmp byte [%1], %2
    54 00001E6B 0F85A61C0000        <1>  jne L_error_incorrect_type
  3134 00001E71 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
  3135 00001E76 750C                    	jne .L_false
  3136 00001E78 48B8-                   	mov rax, sob_boolean_true
  3136 00001E7A [0300000000000000] 
  3137 00001E82 EB0A                    	jmp .L_end
  3138                                  .L_false:
  3139 00001E84 48B8-                   	mov rax, sob_boolean_false
  3139 00001E86 [0200000000000000] 
  3140                                  .L_end:
  3141 00001E8E C9                      	leave
  3142 00001E8F C21800                  	ret AND_KILL_FRAME(1)
  3143                                  
  3144                                  L_code_ptr_length:
  3145 00001E92 C8000000                	enter 0, 0
  3146 00001E96 48837D1801              	cmp COUNT, 1
  3147 00001E9B 0F85A21B0000            	jne L_error_arg_count_1
  3148 00001EA1 488B5D20                	mov rbx, PARAM(0)
  3149 00001EA5 BF00000000              	mov rdi, 0
  3150                                  .L:
  3151 00001EAA 803B01                  	cmp byte [rbx], T_nil
  3152 00001EAD 7412                    	je .L_end
  3153                                  	assert_pair(rbx)
    53 00001EAF 803B21              <1>  cmp byte [%1], %2
    54 00001EB2 0F855F1C0000        <1>  jne L_error_incorrect_type
  3154 00001EB8 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
  3155 00001EBC 48FFC7                  	inc rdi
  3156 00001EBF EBE9                    	jmp .L
  3157                                  .L_end:
  3158 00001EC1 E8CC1A0000              	call make_integer
  3159 00001EC6 C9                      	leave
  3160 00001EC7 C21800                  	ret AND_KILL_FRAME(1)
  3161                                  
  3162                                  L_code_ptr_break:
  3163 00001ECA 48837C241000                    cmp qword [rsp + 8 * 2], 0
  3164 00001ED0 0F85381B0000                    jne L_error_arg_count_0
  3165 00001ED6 CC                              int3
  3166 00001ED7 48B8-                           mov rax, sob_void
  3166 00001ED9 [0000000000000000] 
  3167 00001EE1 C21000                          ret AND_KILL_FRAME(0)        
  3168                                  
  3169                                  L_code_ptr_frame:
  3170 00001EE4 C8000000                        enter 0, 0
  3171 00001EE8 48837D1800                      cmp COUNT, 0
  3172 00001EED 0F851B1B0000                    jne L_error_arg_count_0
  3173                                  
  3174 00001EF3 48BF-                           mov rdi, fmt_frame
  3174 00001EF5 [F50A000000000000] 
  3175 00001EFD 488B7500                        mov rsi, qword [rbp]    ; old rbp
  3176 00001F01 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
  3177 00001F05 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
  3178 00001F09 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
  3179 00001F0D 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
  3180 00001F11 6A00                            push 0
  3181 00001F13 4151                            push r9
  3182 00001F15 4150                            push r8                   ; we'll use it when printing the params
  3183 00001F17 B800000000                      mov rax, 0
  3184                                          
  3185                                          ENTER
    44 00001F1C C8000000            <1>  enter 0, 0
    45 00001F20 4883E4F0            <1>  and rsp, ~15
  3186 00001F24 E8(00000000)                    call printf
  3187                                          LEAVE
    49 00001F29 C9                  <1>  leave
  3188                                  
  3189                                  .L:
  3190 00001F2A 488B0C24                        mov rcx, qword [rsp]
  3191 00001F2E 4883F900                        cmp rcx, 0
  3192 00001F32 7467                            je .L_out
  3193 00001F34 48BF-                           mov rdi, fmt_frame_param_prefix
  3193 00001F36 [2E0B000000000000] 
  3194 00001F3E 488B742410                      mov rsi, qword [rsp + 8*2]
  3195 00001F43 B800000000                      mov rax, 0
  3196                                          
  3197                                          ENTER
    44 00001F48 C8000000            <1>  enter 0, 0
    45 00001F4C 4883E4F0            <1>  and rsp, ~15
  3198 00001F50 E8(00000000)                    call printf
  3199                                          LEAVE
    49 00001F55 C9                  <1>  leave
  3200                                  
  3201 00001F56 488B0C24                        mov rcx, qword [rsp]
  3202 00001F5A 48FFC9                          dec rcx
  3203 00001F5D 48890C24                        mov qword [rsp], rcx    ; dec arg count
  3204 00001F61 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
  3205 00001F66 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
  3206 00001F6B 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
  3207 00001F6F 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
  3208 00001F74 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
  3209 00001F77 E87B000000                      call print_sexpr
  3210 00001F7C 48BF-                           mov rdi, fmt_newline
  3210 00001F7E [5A0B000000000000] 
  3211 00001F86 B800000000                      mov rax, 0
  3212                                          ENTER
    44 00001F8B C8000000            <1>  enter 0, 0
    45 00001F8F 4883E4F0            <1>  and rsp, ~15
  3213 00001F93 E8(00000000)                    call printf
  3214                                          LEAVE
    49 00001F98 C9                  <1>  leave
  3215 00001F99 EB8F                            jmp .L
  3216                                  .L_out:
  3217 00001F9B 48BF-                           mov rdi, fmt_frame_continue
  3217 00001F9D [3F0B000000000000] 
  3218 00001FA5 B800000000                      mov rax, 0
  3219                                          ENTER
    44 00001FAA C8000000            <1>  enter 0, 0
    45 00001FAE 4883E4F0            <1>  and rsp, ~15
  3220 00001FB2 E8(00000000)                    call printf
  3221 00001FB7 E8(00000000)                    call getchar
  3222                                          LEAVE
    49 00001FBC C9                  <1>  leave
  3223                                          
  3224 00001FBD 48B8-                           mov rax, sob_void
  3224 00001FBF [0000000000000000] 
  3225 00001FC7 C9                              leave
  3226 00001FC8 C21000                          ret AND_KILL_FRAME(0)
  3227                                          
  3228                                  print_sexpr_if_not_void:
  3229 00001FCB 4881FF[00000000]        	cmp rdi, sob_void
  3230 00001FD2 7422                    	je .done
  3231 00001FD4 E81E000000              	call print_sexpr
  3232 00001FD9 48BF-                   	mov rdi, fmt_newline
  3232 00001FDB [5A0B000000000000] 
  3233 00001FE3 B800000000              	mov rax, 0
  3234                                  	ENTER
    44 00001FE8 C8000000            <1>  enter 0, 0
    45 00001FEC 4883E4F0            <1>  and rsp, ~15
  3235 00001FF0 E8(00000000)            	call printf
  3236                                  	LEAVE
    49 00001FF5 C9                  <1>  leave
  3237                                  .done:
  3238 00001FF6 C3                      	ret
  3239                                  
  3240                                  section .data
  3241                                  fmt_frame:
  3242 00000AF5 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
  3242 00000AFE 207265742061646472-
  3242 00000B07 203D2025703B206C65-
  3242 00000B10 7820656E76203D2025-
  3242 00000B19 703B20706172616D20-
  3242 00000B22 636F756E74203D2025-
  3242 00000B2B 640A00             
  3243                                  fmt_frame_param_prefix:
  3244 00000B2E 3D3D5B706172616D20-             db `==[param %d]==> \0`
  3244 00000B37 25645D3D3D3E2000   
  3245                                  fmt_frame_continue:
  3246 00000B3F 486974203C456E7465-             db `Hit <Enter> to continue...\0`
  3246 00000B48 723E20746F20636F6E-
  3246 00000B51 74696E75652E2E2E00 
  3247                                  fmt_newline:
  3248 00000B5A 0A00                    	db `\n\0`
  3249                                  fmt_void:
  3250 00000B5C 233C766F69643E00        	db `#<void>\0`
  3251                                  fmt_nil:
  3252 00000B64 282900                  	db `()\0`
  3253                                  fmt_boolean_false:
  3254 00000B67 236600                  	db `#f\0`
  3255                                  fmt_boolean_true:
  3256 00000B6A 237400                  	db `#t\0`
  3257                                  fmt_char_backslash:
  3258 00000B6D 235C5C00                	db `#\\\\\0`
  3259                                  fmt_char_dquote:
  3260 00000B71 235C2200                	db `#\\"\0`
  3261                                  fmt_char_simple:
  3262 00000B75 235C256300              	db `#\\%c\0`
  3263                                  fmt_char_null:
  3264 00000B7A 235C6E756C00            	db `#\\nul\0`
  3265                                  fmt_char_bell:
  3266 00000B80 235C62656C6C00          	db `#\\bell\0`
  3267                                  fmt_char_backspace:
  3268 00000B87 235C6261636B737061-     	db `#\\backspace\0`
  3268 00000B90 636500             
  3269                                  fmt_char_tab:
  3270 00000B93 235C74616200            	db `#\\tab\0`
  3271                                  fmt_char_newline:
  3272 00000B99 235C6E65776C696E65-     	db `#\\newline\0`
  3272 00000BA2 00                 
  3273                                  fmt_char_formfeed:
  3274 00000BA3 235C7061676500          	db `#\\page\0`
  3275                                  fmt_char_return:
  3276 00000BAA 235C72657475726E00      	db `#\\return\0`
  3277                                  fmt_char_escape:
  3278 00000BB3 235C65736300            	db `#\\esc\0`
  3279                                  fmt_char_space:
  3280 00000BB9 235C737061636500        	db `#\\space\0`
  3281                                  fmt_char_hex:
  3282 00000BC1 235C782530325800        	db `#\\x%02X\0`
  3283                                  fmt_gensym:
  3284 00000BC9 47256C6400                      db `G%ld\0`
  3285                                  fmt_closure:
  3286 00000BCE 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  3286 00000BD7 206174203078253038-
  3286 00000BE0 5820656E763D307825-
  3286 00000BE9 30385820636F64653D-
  3286 00000BF2 3078253038583E00   
  3287                                  fmt_lparen:
  3288 00000BFA 2800                    	db `(\0`
  3289                                  fmt_dotted_pair:
  3290 00000BFC 202E2000                	db ` . \0`
  3291                                  fmt_rparen:
  3292 00000C00 2900                    	db `)\0`
  3293                                  fmt_space:
  3294 00000C02 2000                    	db ` \0`
  3295                                  fmt_empty_vector:
  3296 00000C04 23282900                	db `#()\0`
  3297                                  fmt_vector:
  3298 00000C08 232800                  	db `#(\0`
  3299                                  fmt_real:
  3300 00000C0B 256600                  	db `%f\0`
  3301                                  fmt_fraction:
  3302 00000C0E 256C642F256C6400        	db `%ld/%ld\0`
  3303                                  fmt_zero:
  3304 00000C16 3000                    	db `0\0`
  3305                                  fmt_int:
  3306 00000C18 256C6400                	db `%ld\0`
  3307                                  fmt_unknown_scheme_object_error:
  3308 00000C1C 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
  3308 00000C25 6F723A20556E6B6E6F-
  3308 00000C2E 776E20536368656D65-
  3308 00000C37 2D6F626A6563742028-
  3308 00000C40 525454492030782530-
  3308 00000C49 32582920           
  3309 00000C4D 617420616464726573-     	db `at address 0x%08X\n\n\0`
  3309 00000C56 73203078253038580A-
  3309 00000C5F 0A00               
  3310                                  fmt_dquote:
  3311 00000C61 2200                    	db `\"\0`
  3312                                  fmt_string_char:
  3313 00000C63 256300                          db `%c\0`
  3314                                  fmt_string_char_7:
  3315 00000C66 5C6100                          db `\\a\0`
  3316                                  fmt_string_char_8:
  3317 00000C69 5C6200                          db `\\b\0`
  3318                                  fmt_string_char_9:
  3319 00000C6C 5C7400                          db `\\t\0`
  3320                                  fmt_string_char_10:
  3321 00000C6F 5C6E00                          db `\\n\0`
  3322                                  fmt_string_char_11:
  3323 00000C72 5C7600                          db `\\v\0`
  3324                                  fmt_string_char_12:
  3325 00000C75 5C6600                          db `\\f\0`
  3326                                  fmt_string_char_13:
  3327 00000C78 5C7200                          db `\\r\0`
  3328                                  fmt_string_char_34:
  3329 00000C7B 5C2200                          db `\\"\0`
  3330                                  fmt_string_char_92:
  3331 00000C7E 5C5C00                          db `\\\\\0`
  3332                                  fmt_string_char_hex:
  3333 00000C81 5C7825583B00                    db `\\x%X;\0`
  3334                                  
  3335                                  section .text
  3336                                  
  3337                                  print_sexpr:
  3338 00001FF7 C8000000                	enter 0, 0
  3339 00001FFB 8A07                    	mov al, byte [rdi]
  3340 00001FFD 3C00                    	cmp al, T_void
  3341 00001FFF 7465                    	je .Lvoid
  3342 00002001 3C01                    	cmp al, T_nil
  3343 00002003 7470                    	je .Lnil
  3344 00002005 3C09                    	cmp al, T_boolean_false
  3345 00002007 747B                    	je .Lboolean_false
  3346 00002009 3C0A                    	cmp al, T_boolean_true
  3347 0000200B 0F8482000000            	je .Lboolean_true
  3348 00002011 3C02                    	cmp al, T_char
  3349 00002013 0F8489000000            	je .Lchar
  3350 00002019 3C41                    	cmp al, T_interned_symbol
  3351 0000201B 0F84CB010000            	je .Linterned_symbol
  3352 00002021 3C42                            cmp al, T_uninterned_symbol
  3353 00002023 0F84EF010000                    je .Luninterned_symbol
  3354 00002029 3C21                    	cmp al, T_pair
  3355 0000202B 0F84FA010000            	je .Lpair
  3356 00002031 3C22                    	cmp al, T_vector
  3357 00002033 0F84C3020000            	je .Lvector
  3358 00002039 3C04                    	cmp al, T_closure
  3359 0000203B 0F8491010000            	je .Lclosure
  3360 00002041 3C13                    	cmp al, T_real
  3361 00002043 0F8454030000            	je .Lreal
  3362 00002049 3C12                    	cmp al, T_fraction
  3363 0000204B 0F847A030000            	je .Lfraction
  3364 00002051 3C11                    	cmp al, T_integer
  3365 00002053 0F84B3030000            	je .Linteger
  3366 00002059 3C03                    	cmp al, T_string
  3367 0000205B 0F84BE030000            	je .Lstring
  3368                                  
  3369 00002061 E9F6040000              	jmp .Lunknown_sexpr_type
  3370                                  
  3371                                  .Lvoid:
  3372 00002066 48BF-                   	mov rdi, fmt_void
  3372 00002068 [5C0B000000000000] 
  3373 00002070 E91A050000              	jmp .Lemit
  3374                                  
  3375                                  .Lnil:
  3376 00002075 48BF-                   	mov rdi, fmt_nil
  3376 00002077 [640B000000000000] 
  3377 0000207F E90B050000              	jmp .Lemit
  3378                                  
  3379                                  .Lboolean_false:
  3380 00002084 48BF-                   	mov rdi, fmt_boolean_false
  3380 00002086 [670B000000000000] 
  3381 0000208E E9FC040000              	jmp .Lemit
  3382                                  
  3383                                  .Lboolean_true:
  3384 00002093 48BF-                   	mov rdi, fmt_boolean_true
  3384 00002095 [6A0B000000000000] 
  3385 0000209D E9ED040000              	jmp .Lemit
  3386                                  
  3387                                  .Lchar:
  3388 000020A2 8A4701                  	mov al, byte [rdi + 1]
  3389 000020A5 3C20                    	cmp al, ' '
  3390 000020A7 7E28                    	jle .Lchar_whitespace
  3391 000020A9 3C5C                    	cmp al, 92 		; backslash
  3392 000020AB 0F847C000000            	je .Lchar_backslash
  3393 000020B1 3C22                    	cmp al, '"'
  3394 000020B3 0F8483000000            	je .Lchar_dquote
  3395 000020B9 4825FF000000            	and rax, 255
  3396 000020BF 48BF-                   	mov rdi, fmt_char_simple
  3396 000020C1 [750B000000000000] 
  3397 000020C9 4889C6                  	mov rsi, rax
  3398 000020CC E9BE040000              	jmp .Lemit
  3399                                  
  3400                                  .Lchar_whitespace:
  3401 000020D1 3C00                    	cmp al, 0
  3402 000020D3 7476                    	je .Lchar_null
  3403 000020D5 3C07                    	cmp al, 7
  3404 000020D7 0F847D000000            	je .Lchar_bell
  3405 000020DD 3C08                    	cmp al, 8
  3406 000020DF 0F8484000000            	je .Lchar_backspace
  3407 000020E5 3C09                    	cmp al, 9
  3408 000020E7 0F848B000000            	je .Lchar_tab
  3409 000020ED 3C0A                    	cmp al, 10
  3410 000020EF 0F8492000000            	je .Lchar_newline
  3411 000020F5 3C0C                    	cmp al, 12
  3412 000020F7 0F8499000000            	je .Lchar_formfeed
  3413 000020FD 3C0D                    	cmp al, 13
  3414 000020FF 0F84A0000000            	je .Lchar_return
  3415 00002105 3C1B                    	cmp al, 27
  3416 00002107 0F84A7000000            	je .Lchar_escape
  3417 0000210D 4825FF000000            	and rax, 255
  3418 00002113 3C20                    	cmp al, ' '
  3419 00002115 0F84A8000000            	je .Lchar_space
  3420 0000211B 48BF-                   	mov rdi, fmt_char_hex
  3420 0000211D [C10B000000000000] 
  3421 00002125 4889C6                  	mov rsi, rax
  3422 00002128 E962040000              	jmp .Lemit	
  3423                                  
  3424                                  .Lchar_backslash:
  3425 0000212D 48BF-                   	mov rdi, fmt_char_backslash
  3425 0000212F [6D0B000000000000] 
  3426 00002137 E953040000              	jmp .Lemit
  3427                                  
  3428                                  .Lchar_dquote:
  3429 0000213C 48BF-                   	mov rdi, fmt_char_dquote
  3429 0000213E [710B000000000000] 
  3430 00002146 E944040000              	jmp .Lemit
  3431                                  
  3432                                  .Lchar_null:
  3433 0000214B 48BF-                   	mov rdi, fmt_char_null
  3433 0000214D [7A0B000000000000] 
  3434 00002155 E935040000              	jmp .Lemit
  3435                                  
  3436                                  .Lchar_bell:
  3437 0000215A 48BF-                   	mov rdi, fmt_char_bell
  3437 0000215C [800B000000000000] 
  3438 00002164 E926040000              	jmp .Lemit
  3439                                  
  3440                                  .Lchar_backspace:
  3441 00002169 48BF-                   	mov rdi, fmt_char_backspace
  3441 0000216B [870B000000000000] 
  3442 00002173 E917040000              	jmp .Lemit
  3443                                  
  3444                                  .Lchar_tab:
  3445 00002178 48BF-                   	mov rdi, fmt_char_tab
  3445 0000217A [930B000000000000] 
  3446 00002182 E908040000              	jmp .Lemit
  3447                                  
  3448                                  .Lchar_newline:
  3449 00002187 48BF-                   	mov rdi, fmt_char_newline
  3449 00002189 [990B000000000000] 
  3450 00002191 E9F9030000              	jmp .Lemit
  3451                                  
  3452                                  .Lchar_formfeed:
  3453 00002196 48BF-                   	mov rdi, fmt_char_formfeed
  3453 00002198 [A30B000000000000] 
  3454 000021A0 E9EA030000              	jmp .Lemit
  3455                                  
  3456                                  .Lchar_return:
  3457 000021A5 48BF-                   	mov rdi, fmt_char_return
  3457 000021A7 [AA0B000000000000] 
  3458 000021AF E9DB030000              	jmp .Lemit
  3459                                  
  3460                                  .Lchar_escape:
  3461 000021B4 48BF-                   	mov rdi, fmt_char_escape
  3461 000021B6 [B30B000000000000] 
  3462 000021BE E9CC030000              	jmp .Lemit
  3463                                  
  3464                                  .Lchar_space:
  3465 000021C3 48BF-                   	mov rdi, fmt_char_space
  3465 000021C5 [B90B000000000000] 
  3466 000021CD E9BD030000              	jmp .Lemit
  3467                                  
  3468                                  .Lclosure:
  3469 000021D2 4889FE                  	mov rsi, qword rdi
  3470 000021D5 48BF-                   	mov rdi, fmt_closure
  3470 000021D7 [CE0B000000000000] 
  3471 000021DF 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  3472 000021E3 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  3473 000021E7 E9A3030000              	jmp .Lemit
  3474                                  
  3475                                  .Linterned_symbol:
  3476 000021EC 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  3477 000021F0 BE01000000              	mov rsi, 1		 ; size = 1 byte
  3478 000021F5 488B5701                	mov rdx, qword [rdi + 1] ; length
  3479 000021F9 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  3480 000021FD 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  3481                                  	ENTER
    44 00002205 C8000000            <1>  enter 0, 0
    45 00002209 4883E4F0            <1>  and rsp, ~15
  3482 0000220D E8(00000000)            	call fwrite
  3483                                  	LEAVE
    49 00002212 C9                  <1>  leave
  3484 00002213 E98C030000              	jmp .Lend
  3485                                  
  3486                                  .Luninterned_symbol:
  3487 00002218 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  3488 0000221C 48BF-                           mov rdi, fmt_gensym
  3488 0000221E [C90B000000000000] 
  3489 00002226 E964030000                      jmp .Lemit
  3490                                  	
  3491                                  .Lpair:
  3492 0000222B 57                      	push rdi
  3493 0000222C 48BF-                   	mov rdi, fmt_lparen
  3493 0000222E [FA0B000000000000] 
  3494 00002236 B800000000              	mov rax, 0
  3495                                          ENTER
    44 0000223B C8000000            <1>  enter 0, 0
    45 0000223F 4883E4F0            <1>  and rsp, ~15
  3496 00002243 E8(00000000)            	call printf
  3497                                          LEAVE
    49 00002248 C9                  <1>  leave
  3498 00002249 488B3C24                	mov rdi, qword [rsp] 	; pair
  3499 0000224D 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  3500 00002251 E8A1FDFFFF              	call print_sexpr
  3501 00002256 5F                      	pop rdi 		; pair
  3502 00002257 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  3503                                  .Lcdr:
  3504 0000225B 8A07                    	mov al, byte [rdi]
  3505 0000225D 3C01                    	cmp al, T_nil
  3506 0000225F 7447                    	je .Lcdr_nil
  3507 00002261 3C21                    	cmp al, T_pair
  3508 00002263 7462                    	je .Lcdr_pair
  3509 00002265 57                      	push rdi
  3510 00002266 48BF-                   	mov rdi, fmt_dotted_pair
  3510 00002268 [FC0B000000000000] 
  3511 00002270 B800000000              	mov rax, 0
  3512                                          ENTER
    44 00002275 C8000000            <1>  enter 0, 0
    45 00002279 4883E4F0            <1>  and rsp, ~15
  3513 0000227D E8(00000000)            	call printf
  3514                                          LEAVE
    49 00002282 C9                  <1>  leave
  3515 00002283 5F                      	pop rdi
  3516 00002284 E86EFDFFFF              	call print_sexpr
  3517 00002289 48BF-                   	mov rdi, fmt_rparen
  3517 0000228B [000C000000000000] 
  3518 00002293 B800000000              	mov rax, 0
  3519                                          ENTER
    44 00002298 C8000000            <1>  enter 0, 0
    45 0000229C 4883E4F0            <1>  and rsp, ~15
  3520 000022A0 E8(00000000)            	call printf
  3521                                          LEAVE
    49 000022A5 C9                  <1>  leave
  3522 000022A6 C9                      	leave
  3523 000022A7 C3                      	ret
  3524                                  
  3525                                  .Lcdr_nil:
  3526 000022A8 48BF-                   	mov rdi, fmt_rparen
  3526 000022AA [000C000000000000] 
  3527 000022B2 B800000000              	mov rax, 0
  3528                                          ENTER
    44 000022B7 C8000000            <1>  enter 0, 0
    45 000022BB 4883E4F0            <1>  and rsp, ~15
  3529 000022BF E8(00000000)            	call printf
  3530                                          LEAVE
    49 000022C4 C9                  <1>  leave
  3531 000022C5 C9                      	leave
  3532 000022C6 C3                      	ret
  3533                                  
  3534                                  .Lcdr_pair:
  3535 000022C7 57                      	push rdi
  3536 000022C8 48BF-                   	mov rdi, fmt_space
  3536 000022CA [020C000000000000] 
  3537 000022D2 B800000000              	mov rax, 0
  3538                                          ENTER
    44 000022D7 C8000000            <1>  enter 0, 0
    45 000022DB 4883E4F0            <1>  and rsp, ~15
  3539 000022DF E8(00000000)            	call printf
  3540                                          LEAVE
    49 000022E4 C9                  <1>  leave
  3541 000022E5 488B3C24                	mov rdi, qword [rsp]
  3542 000022E9 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  3543 000022ED E805FDFFFF              	call print_sexpr
  3544 000022F2 5F                      	pop rdi
  3545 000022F3 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  3546 000022F7 E95FFFFFFF              	jmp .Lcdr
  3547                                  
  3548                                  .Lvector:
  3549 000022FC 488B4701                	mov rax, qword [rdi + 1] ; length
  3550 00002300 4883F800                	cmp rax, 0
  3551 00002304 0F8484000000            	je .Lvector_empty
  3552 0000230A 57                      	push rdi
  3553 0000230B 48BF-                   	mov rdi, fmt_vector
  3553 0000230D [080C000000000000] 
  3554 00002315 B800000000              	mov rax, 0
  3555                                          ENTER
    44 0000231A C8000000            <1>  enter 0, 0
    45 0000231E 4883E4F0            <1>  and rsp, ~15
  3556 00002322 E8(00000000)            	call printf
  3557                                          LEAVE
    49 00002327 C9                  <1>  leave
  3558 00002328 488B3C24                	mov rdi, qword [rsp]
  3559 0000232C FF7701                  	push qword [rdi + 1]
  3560 0000232F 6A01                    	push 1
  3561 00002331 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  3562 00002335 E8BDFCFFFF              	call print_sexpr
  3563                                  .Lvector_loop:
  3564                                  	; [rsp] index
  3565                                  	; [rsp + 8*1] limit
  3566                                  	; [rsp + 8*2] vector
  3567 0000233A 488B0424                	mov rax, qword [rsp]
  3568 0000233E 483B442408              	cmp rax, qword [rsp + 8*1]
  3569 00002343 7436                    	je .Lvector_end
  3570 00002345 48BF-                   	mov rdi, fmt_space
  3570 00002347 [020C000000000000] 
  3571 0000234F B800000000              	mov rax, 0
  3572                                          ENTER
    44 00002354 C8000000            <1>  enter 0, 0
    45 00002358 4883E4F0            <1>  and rsp, ~15
  3573 0000235C E8(00000000)            	call printf
  3574                                          LEAVE
    49 00002361 C9                  <1>  leave
  3575 00002362 488B0424                	mov rax, qword [rsp]
  3576 00002366 488B5C2410              	mov rbx, qword [rsp + 8*2]
  3577 0000236B 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  3578 00002370 E882FCFFFF              	call print_sexpr
  3579 00002375 48FF0424                	inc qword [rsp]
  3580 00002379 EBBF                    	jmp .Lvector_loop
  3581                                  
  3582                                  .Lvector_end:
  3583 0000237B 4883C418                	add rsp, 8*3
  3584 0000237F 48BF-                   	mov rdi, fmt_rparen
  3584 00002381 [000C000000000000] 
  3585 00002389 E901020000              	jmp .Lemit	
  3586                                  
  3587                                  .Lvector_empty:
  3588 0000238E 48BF-                   	mov rdi, fmt_empty_vector
  3588 00002390 [040C000000000000] 
  3589 00002398 E9F2010000              	jmp .Lemit
  3590                                  
  3591                                  .Lreal:
  3592 0000239D FF7701                  	push qword [rdi + 1]
  3593 000023A0 F20F100424              	movsd xmm0, qword [rsp]
  3594 000023A5 4883C408                	add rsp, 8*1
  3595 000023A9 48BF-                   	mov rdi, fmt_real
  3595 000023AB [0B0C000000000000] 
  3596 000023B3 B801000000              	mov rax, 1
  3597                                  	ENTER
    44 000023B8 C8000000            <1>  enter 0, 0
    45 000023BC 4883E4F0            <1>  and rsp, ~15
  3598 000023C0 E8(00000000)            	call printf
  3599                                  	LEAVE
    49 000023C5 C9                  <1>  leave
  3600 000023C6 E9D9010000              	jmp .Lend
  3601                                  
  3602                                  .Lfraction:
  3603 000023CB 488B7701                	mov rsi, qword [rdi + 1]
  3604 000023CF 488B5709                	mov rdx, qword [rdi + 1 + 8]
  3605 000023D3 4883FE00                	cmp rsi, 0
  3606 000023D7 7415                    	je .Lrat_zero
  3607 000023D9 4883FA01                	cmp rdx, 1
  3608 000023DD 741E                    	je .Lrat_int
  3609 000023DF 48BF-                   	mov rdi, fmt_fraction
  3609 000023E1 [0E0C000000000000] 
  3610 000023E9 E9A1010000              	jmp .Lemit
  3611                                  
  3612                                  .Lrat_zero:
  3613 000023EE 48BF-                   	mov rdi, fmt_zero
  3613 000023F0 [160C000000000000] 
  3614 000023F8 E992010000              	jmp .Lemit
  3615                                  
  3616                                  .Lrat_int:
  3617 000023FD 48BF-                   	mov rdi, fmt_int
  3617 000023FF [180C000000000000] 
  3618 00002407 E983010000              	jmp .Lemit
  3619                                  
  3620                                  .Linteger:
  3621 0000240C 488B7701                	mov rsi, qword [rdi + 1]
  3622 00002410 48BF-                   	mov rdi, fmt_int
  3622 00002412 [180C000000000000] 
  3623 0000241A E970010000              	jmp .Lemit
  3624                                  
  3625                                  .Lstring:
  3626 0000241F 488D4709                	lea rax, [rdi + 1 + 8]
  3627 00002423 50                      	push rax
  3628 00002424 FF7701                  	push qword [rdi + 1]
  3629 00002427 48BF-                   	mov rdi, fmt_dquote
  3629 00002429 [610C000000000000] 
  3630 00002431 B800000000              	mov rax, 0
  3631                                  	ENTER
    44 00002436 C8000000            <1>  enter 0, 0
    45 0000243A 4883E4F0            <1>  and rsp, ~15
  3632 0000243E E8(00000000)            	call printf
  3633                                  	LEAVE
    49 00002443 C9                  <1>  leave
  3634                                  .Lstring_loop:
  3635                                  	; qword [rsp]: limit
  3636                                  	; qword [rsp + 8*1]: char *
  3637 00002444 48833C2400              	cmp qword [rsp], 0
  3638 00002449 0F84FD000000            	je .Lstring_end
  3639 0000244F 488B442408              	mov rax, qword [rsp + 8*1]
  3640 00002454 8A00                    	mov al, byte [rax]
  3641 00002456 4825FF000000            	and rax, 255
  3642 0000245C 3C07                    	cmp al, 7
  3643 0000245E 7468                            je .Lstring_char_7
  3644 00002460 3C08                            cmp al, 8
  3645 00002462 7470                            je .Lstring_char_8
  3646 00002464 3C09                            cmp al, 9
  3647 00002466 7478                            je .Lstring_char_9
  3648 00002468 3C0A                            cmp al, 10
  3649 0000246A 0F847C000000                    je .Lstring_char_10
  3650 00002470 3C0B                            cmp al, 11
  3651 00002472 0F8480000000                    je .Lstring_char_11
  3652 00002478 3C0C                            cmp al, 12
  3653 0000247A 0F8484000000                    je .Lstring_char_12
  3654 00002480 3C0D                            cmp al, 13
  3655 00002482 0F8488000000                    je .Lstring_char_13
  3656 00002488 3C22                            cmp al, 34
  3657 0000248A 0F848C000000                    je .Lstring_char_34
  3658 00002490 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  3660 00002492 3C20                            cmp al, ' '
  3661 00002494 0F8CA0000000                    jl .Lstring_char_hex
  3662 0000249A 48BF-                           mov rdi, fmt_string_char
  3662 0000249C [630C000000000000] 
  3663 000024A4 4889C6                          mov rsi, rax
  3664                                  .Lstring_char_emit:
  3665 000024A7 B800000000                      mov rax, 0
  3666                                          ENTER
    44 000024AC C8000000            <1>  enter 0, 0
    45 000024B0 4883E4F0            <1>  and rsp, ~15
  3667 000024B4 E8(00000000)                    call printf
  3668                                          LEAVE
    49 000024B9 C9                  <1>  leave
  3669 000024BA 48FF0C24                        dec qword [rsp]
  3670 000024BE 48FF442408                      inc qword [rsp + 8*1]
  3671 000024C3 E97CFFFFFF                      jmp .Lstring_loop
  3672                                  
  3673                                  .Lstring_char_7:
  3674 000024C8 48BF-                           mov rdi, fmt_string_char_7
  3674 000024CA [660C000000000000] 
  3675 000024D2 EBD3                            jmp .Lstring_char_emit
  3676                                  
  3677                                  .Lstring_char_8:
  3678 000024D4 48BF-                           mov rdi, fmt_string_char_8
  3678 000024D6 [690C000000000000] 
  3679 000024DE EBC7                            jmp .Lstring_char_emit
  3680                                          
  3681                                  .Lstring_char_9:
  3682 000024E0 48BF-                           mov rdi, fmt_string_char_9
  3682 000024E2 [6C0C000000000000] 
  3683 000024EA EBBB                            jmp .Lstring_char_emit
  3684                                  
  3685                                  .Lstring_char_10:
  3686 000024EC 48BF-                           mov rdi, fmt_string_char_10
  3686 000024EE [6F0C000000000000] 
  3687 000024F6 EBAF                            jmp .Lstring_char_emit
  3688                                  
  3689                                  .Lstring_char_11:
  3690 000024F8 48BF-                           mov rdi, fmt_string_char_11
  3690 000024FA [720C000000000000] 
  3691 00002502 EBA3                            jmp .Lstring_char_emit
  3692                                  
  3693                                  .Lstring_char_12:
  3694 00002504 48BF-                           mov rdi, fmt_string_char_12
  3694 00002506 [750C000000000000] 
  3695 0000250E EB97                            jmp .Lstring_char_emit
  3696                                  
  3697                                  .Lstring_char_13:
  3698 00002510 48BF-                           mov rdi, fmt_string_char_13
  3698 00002512 [780C000000000000] 
  3699 0000251A EB8B                            jmp .Lstring_char_emit
  3700                                  
  3701                                  .Lstring_char_34:
  3702 0000251C 48BF-                           mov rdi, fmt_string_char_34
  3702 0000251E [7B0C000000000000] 
  3703 00002526 E97CFFFFFF                      jmp .Lstring_char_emit
  3704                                  
  3705                                  .Lstring_char_92:
  3706 0000252B 48BF-                           mov rdi, fmt_string_char_92
  3706 0000252D [7E0C000000000000] 
  3707 00002535 E96DFFFFFF                      jmp .Lstring_char_emit
  3708                                  
  3709                                  .Lstring_char_hex:
  3710 0000253A 48BF-                           mov rdi, fmt_string_char_hex
  3710 0000253C [810C000000000000] 
  3711 00002544 4889C6                          mov rsi, rax
  3712 00002547 E95BFFFFFF                      jmp .Lstring_char_emit        
  3713                                  
  3714                                  .Lstring_end:
  3715 0000254C 4883C410                	add rsp, 8 * 2
  3716 00002550 48BF-                   	mov rdi, fmt_dquote
  3716 00002552 [610C000000000000] 
  3717 0000255A EB33                    	jmp .Lemit
  3718                                  
  3719                                  .Lunknown_sexpr_type:
  3720 0000255C 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  3720 0000255E [1C0C000000000000] 
  3721 00002566 4825FF000000            	and rax, 255
  3722 0000256C 4889C2                  	mov rdx, rax
  3723 0000256F 4889F9                  	mov rcx, rdi
  3724 00002572 488B3C25[00000000]      	mov rdi, qword [stderr]
  3725 0000257A B800000000              	mov rax, 0
  3726                                          ENTER
    44 0000257F C8000000            <1>  enter 0, 0
    45 00002583 4883E4F0            <1>  and rsp, ~15
  3727 00002587 E8(00000000)            	call fprintf
  3728                                          LEAVE
    49 0000258C C9                  <1>  leave
  3729 0000258D C9                              leave
  3730 0000258E C3                              ret
  3731                                  
  3732                                  .Lemit:
  3733 0000258F B800000000              	mov rax, 0
  3734                                          ENTER
    44 00002594 C8000000            <1>  enter 0, 0
    45 00002598 4883E4F0            <1>  and rsp, ~15
  3735 0000259C E8(00000000)            	call printf
  3736                                          LEAVE
    49 000025A1 C9                  <1>  leave
  3737 000025A2 EB00                    	jmp .Lend
  3738                                  
  3739                                  .Lend:
  3740                                  	LEAVE
    49 000025A4 C9                  <1>  leave
  3741 000025A5 C3                      	ret
  3742                                  
  3743                                  ;;; rdi: address of free variable
  3744                                  ;;; rsi: address of code-pointer
  3745                                  bind_primitive:
  3746 000025A6 C8000000                        enter 0, 0
  3747 000025AA 57                              push rdi
  3748 000025AB BF11000000                      mov rdi, (1 + 8 + 8)
  3749 000025B0 E8C1F7FFFF                      call malloc
  3750 000025B5 5F                              pop rdi
  3751 000025B6 C60004                          mov byte [rax], T_closure
  3752 000025B9 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  3753 000025C1 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  3754 000025C5 488907                          mov qword [rdi], rax
  3755 000025C8 48B8-                           mov rax, sob_void
  3755 000025CA [0000000000000000] 
  3756 000025D2 C9                              leave
  3757 000025D3 C3                              ret
  3758                                  
  3759                                  L_code_ptr_ash:
  3760 000025D4 C8000000                        enter 0, 0
  3761 000025D8 48837D1802                      cmp COUNT, 2
  3762 000025DD 0F8595140000                    jne L_error_arg_count_2
  3763 000025E3 488B7D20                        mov rdi, PARAM(0)
  3764                                          assert_integer(rdi)
    53 000025E7 803F11              <1>  cmp byte [%1], %2
    54 000025EA 0F8527150000        <1>  jne L_error_incorrect_type
  3765 000025F0 488B4D28                        mov rcx, PARAM(1)
  3766                                          assert_integer(rcx)
    53 000025F4 803911              <1>  cmp byte [%1], %2
    54 000025F7 0F851A150000        <1>  jne L_error_incorrect_type
  3767 000025FD 488B7F01                        mov rdi, qword [rdi + 1]
  3768 00002601 488B4901                        mov rcx, qword [rcx + 1]
  3769 00002605 4883F900                        cmp rcx, 0
  3770 00002609 7C0F                            jl .L_negative
  3771                                  .L_loop_positive:
  3772 0000260B 4883F900                        cmp rcx, 0
  3773 0000260F 741B                            je .L_exit
  3774 00002611 48D3E7                          sal rdi, cl
  3775 00002614 48C1E908                        shr rcx, 8
  3776 00002618 EBF1                            jmp .L_loop_positive
  3777                                  .L_negative:
  3778 0000261A 48F7D9                          neg rcx
  3779                                  .L_loop_negative:
  3780 0000261D 4883F900                        cmp rcx, 0
  3781 00002621 7409                            je .L_exit
  3782 00002623 48D3FF                          sar rdi, cl
  3783 00002626 48C1E908                        shr rcx, 8
  3784 0000262A EBF1                            jmp .L_loop_negative
  3785                                  .L_exit:
  3786 0000262C E861130000                      call make_integer
  3787 00002631 C9                              leave
  3788 00002632 C22000                          ret AND_KILL_FRAME(2)
  3789                                  
  3790                                  L_code_ptr_logand:
  3791 00002635 C8000000                        enter 0, 0
  3792 00002639 48837D1802                      cmp COUNT, 2
  3793 0000263E 0F8534140000                    jne L_error_arg_count_2
  3794 00002644 4C8B4520                        mov r8, PARAM(0)
  3795                                          assert_integer(r8)
    53 00002648 41803811            <1>  cmp byte [%1], %2
    54 0000264C 0F85C5140000        <1>  jne L_error_incorrect_type
  3796 00002652 4C8B4D28                        mov r9, PARAM(1)
  3797                                          assert_integer(r9)
    53 00002656 41803911            <1>  cmp byte [%1], %2
    54 0000265A 0F85B7140000        <1>  jne L_error_incorrect_type
  3798 00002660 498B7801                        mov rdi, qword [r8 + 1]
  3799 00002664 49237901                        and rdi, qword [r9 + 1]
  3800 00002668 E825130000                      call make_integer
  3801 0000266D C9                              leave
  3802 0000266E C22000                          ret AND_KILL_FRAME(2)
  3803                                  
  3804                                  L_code_ptr_logor:
  3805 00002671 C8000000                        enter 0, 0
  3806 00002675 48837D1802                      cmp COUNT, 2
  3807 0000267A 0F85F8130000                    jne L_error_arg_count_2
  3808 00002680 4C8B4520                        mov r8, PARAM(0)
  3809                                          assert_integer(r8)
    53 00002684 41803811            <1>  cmp byte [%1], %2
    54 00002688 0F8589140000        <1>  jne L_error_incorrect_type
  3810 0000268E 4C8B4D28                        mov r9, PARAM(1)
  3811                                          assert_integer(r9)
    53 00002692 41803911            <1>  cmp byte [%1], %2
    54 00002696 0F857B140000        <1>  jne L_error_incorrect_type
  3812 0000269C 498B7801                        mov rdi, qword [r8 + 1]
  3813 000026A0 490B7901                        or rdi, qword [r9 + 1]
  3814 000026A4 E8E9120000                      call make_integer
  3815 000026A9 C9                              leave
  3816 000026AA C22000                          ret AND_KILL_FRAME(2)
  3817                                  
  3818                                  L_code_ptr_logxor:
  3819 000026AD C8000000                        enter 0, 0
  3820 000026B1 48837D1802                      cmp COUNT, 2
  3821 000026B6 0F85BC130000                    jne L_error_arg_count_2
  3822 000026BC 4C8B4520                        mov r8, PARAM(0)
  3823                                          assert_integer(r8)
    53 000026C0 41803811            <1>  cmp byte [%1], %2
    54 000026C4 0F854D140000        <1>  jne L_error_incorrect_type
  3824 000026CA 4C8B4D28                        mov r9, PARAM(1)
  3825                                          assert_integer(r9)
    53 000026CE 41803911            <1>  cmp byte [%1], %2
    54 000026D2 0F853F140000        <1>  jne L_error_incorrect_type
  3826 000026D8 498B7801                        mov rdi, qword [r8 + 1]
  3827 000026DC 49337901                        xor rdi, qword [r9 + 1]
  3828 000026E0 E8AD120000                      call make_integer
  3829                                          LEAVE
    49 000026E5 C9                  <1>  leave
  3830 000026E6 C22000                          ret AND_KILL_FRAME(2)
  3831                                  
  3832                                  L_code_ptr_lognot:
  3833 000026E9 C8000000                        enter 0, 0
  3834 000026ED 48837D1801                      cmp COUNT, 1
  3835 000026F2 0F854B130000                    jne L_error_arg_count_1
  3836 000026F8 4C8B4520                        mov r8, PARAM(0)
  3837                                          assert_integer(r8)
    53 000026FC 41803811            <1>  cmp byte [%1], %2
    54 00002700 0F8511140000        <1>  jne L_error_incorrect_type
  3838 00002706 498B7801                        mov rdi, qword [r8 + 1]
  3839 0000270A 48F7D7                          not rdi
  3840 0000270D E880120000                      call make_integer
  3841 00002712 C9                              leave
  3842 00002713 C21800                          ret AND_KILL_FRAME(1)
  3843                                  
  3844                                  L_code_ptr_bin_apply:
  3845 00002716 C8000000                        enter 0, 0
  3846 0000271A 48837D1802                      cmp COUNT, 2
  3847 0000271F 0F8553130000                    jne L_error_arg_count_2
  3848 00002725 488B4530                        mov rax, PARAM(2) ; list
  3849 00002729 BB00000000                      mov rbx,0 ;list length count
  3850                                  .L_length_loop: ;this loop is to iterate through the list and count it's  (stop when encountering nil)
  3851 0000272E 803801                          cmp byte [rax], T_nil ;TODO: check if correct
  3852 00002731 744E                            je .L_loop_exit
  3853 00002733 4883C301                        add rbx,1
  3854 00002737 EB21                            jmp .L_loop
  3855                                  .L_length_loop_exit: ;1381
  3856 00002739 488B4530                        mov rax, PARAM(2) ; list
  3857                                          ;rbx contains list's length
  3858 0000273D 488B4D28                        mov rcx, PARAM(1) ; PROC
  3859                                          assert_closure(rcx)
    53 00002741 803904              <1>  cmp byte [%1], %2
    54 00002744 0F85CD130000        <1>  jne L_error_incorrect_type
  3860 0000274A BA00000000                      mov rdx, 0 ;i in (int i =0;i<list.length;i++)
  3861 0000274F 4C8B4508                        mov r8, RET_ADDR
  3862 00002753 488B6D00                        mov rbp, OLD_RBP
  3863 00002757 4889EC                          mov rsp, rbp
  3864                                  .L_loop: ;loop to push list's to stack. not done with push because we need to invert it's order on stack.
  3865 0000275A 4839DA                          cmp rdx, rbx ; rdx=index, rbx=count
  3866 0000275D 7422                            je .L_loop_exit
  3867 0000275F 4989D9                          mov r9, rbx
  3868 00002762 4929D1                          sub r9, rdx
  3869 00002765 4983C101                        add r9, 1
  3870 00002769 4D6BC9F8                        imul r9, -8
  3871 0000276D 4901E9                          add r9, rbp
  3872                                          ;mov [rbp-8*(rbx - rdx + 1)], SOB_PAIR_CAR(rax)
  3873 00002770 488B7801                        mov rdi, SOB_PAIR_CAR(rax)
  3874 00002774 498939                          mov [r9], rdi
  3875                                          ;;above line should push parameters in backward order (for list (1 2 3) should push 1 2 3 to stack)
  3876 00002777 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  3877 0000277B 4883C201                        add rdx, 1
  3878 0000277F EBD9                            jmp .L_loop
  3879                                  .L_loop_exit:
  3880 00002781 4989D9                          mov r9, rbx
  3881 00002784 4983C101                        add r9,1
  3882 00002788 4D6BC9F8                        imul r9, -8
  3883 0000278C 4901E9                          add r9,rbp
  3884                                         ; mov rsp, rbp- 8 * (rbx + 1) ;fix stack pointer to include added parameters in loop.
  3885 0000278F 4C89CC                          mov rsp, r9
  3886 00002792 53                              push rbx
  3887 00002793 FF7101                          push SOB_CLOSURE_ENV(rcx)
  3888 00002796 4150                            push r8
  3889 00002798 FF6109                          jmp SOB_CLOSURE_CODE(rcx)
  3890                                  
  3891                                          
  3892                                  
  3893                                          
  3894                                  ;;; fill in for final project!
  3895                                  
  3896                                  L_code_ptr_is_null:
  3897 0000279B C8000000                        enter 0, 0
  3898 0000279F 48837D1801                      cmp COUNT, 1
  3899 000027A4 0F8599120000                    jne L_error_arg_count_1
  3900 000027AA 488B4520                        mov rax, PARAM(0)
  3901 000027AE 803801                          cmp byte [rax], T_nil
  3902 000027B1 750C                            jne .L_false
  3903 000027B3 48B8-                           mov rax, sob_boolean_true
  3903 000027B5 [0300000000000000] 
  3904 000027BD EB0A                            jmp .L_end
  3905                                  .L_false:
  3906 000027BF 48B8-                           mov rax, sob_boolean_false
  3906 000027C1 [0200000000000000] 
  3907                                  .L_end:
  3908 000027C9 C9                              leave
  3909 000027CA C21800                          ret AND_KILL_FRAME(1)
  3910                                  
  3911                                  L_code_ptr_is_pair:
  3912 000027CD C8000000                        enter 0, 0
  3913 000027D1 48837D1801                      cmp COUNT, 1
  3914 000027D6 0F8567120000                    jne L_error_arg_count_1
  3915 000027DC 488B4520                        mov rax, PARAM(0)
  3916 000027E0 803821                          cmp byte [rax], T_pair
  3917 000027E3 750C                            jne .L_false
  3918 000027E5 48B8-                           mov rax, sob_boolean_true
  3918 000027E7 [0300000000000000] 
  3919 000027EF EB0A                            jmp .L_end
  3920                                  .L_false:
  3921 000027F1 48B8-                           mov rax, sob_boolean_false
  3921 000027F3 [0200000000000000] 
  3922                                  .L_end:
  3923 000027FB C9                              leave
  3924 000027FC C21800                          ret AND_KILL_FRAME(1)
  3925                                          
  3926                                  L_code_ptr_is_void:
  3927 000027FF C8000000                        enter 0, 0
  3928 00002803 48837D1801                      cmp COUNT, 1
  3929 00002808 0F8535120000                    jne L_error_arg_count_1
  3930 0000280E 488B4520                        mov rax, PARAM(0)
  3931 00002812 803800                          cmp byte [rax], T_void
  3932 00002815 750C                            jne .L_false
  3933 00002817 48B8-                           mov rax, sob_boolean_true
  3933 00002819 [0300000000000000] 
  3934 00002821 EB0A                            jmp .L_end
  3935                                  .L_false:
  3936 00002823 48B8-                           mov rax, sob_boolean_false
  3936 00002825 [0200000000000000] 
  3937                                  .L_end:
  3938 0000282D C9                              leave
  3939 0000282E C21800                          ret AND_KILL_FRAME(1)
  3940                                  
  3941                                  L_code_ptr_is_char:
  3942 00002831 C8000000                        enter 0, 0
  3943 00002835 48837D1801                      cmp COUNT, 1
  3944 0000283A 0F8503120000                    jne L_error_arg_count_1
  3945 00002840 488B4520                        mov rax, PARAM(0)
  3946 00002844 803802                          cmp byte [rax], T_char
  3947 00002847 750C                            jne .L_false
  3948 00002849 48B8-                           mov rax, sob_boolean_true
  3948 0000284B [0300000000000000] 
  3949 00002853 EB0A                            jmp .L_end
  3950                                  .L_false:
  3951 00002855 48B8-                           mov rax, sob_boolean_false
  3951 00002857 [0200000000000000] 
  3952                                  .L_end:
  3953 0000285F C9                              leave
  3954 00002860 C21800                          ret AND_KILL_FRAME(1)
  3955                                  
  3956                                  L_code_ptr_is_string:
  3957 00002863 C8000000                        enter 0, 0
  3958 00002867 48837D1801                      cmp COUNT, 1
  3959 0000286C 0F85D1110000                    jne L_error_arg_count_1
  3960 00002872 488B4520                        mov rax, PARAM(0)
  3961 00002876 803803                          cmp byte [rax], T_string
  3962 00002879 750C                            jne .L_false
  3963 0000287B 48B8-                           mov rax, sob_boolean_true
  3963 0000287D [0300000000000000] 
  3964 00002885 EB0A                            jmp .L_end
  3965                                  .L_false:
  3966 00002887 48B8-                           mov rax, sob_boolean_false
  3966 00002889 [0200000000000000] 
  3967                                  .L_end:
  3968 00002891 C9                              leave
  3969 00002892 C21800                          ret AND_KILL_FRAME(1)
  3970                                  
  3971                                  L_code_ptr_is_symbol:
  3972 00002895 C8000000                        enter 0, 0
  3973 00002899 48837D1801                      cmp COUNT, 1
  3974 0000289E 0F859F110000                    jne L_error_arg_count_1
  3975 000028A4 4C8B4520                        mov r8, PARAM(0)
  3976 000028A8 41802040                        and byte [r8], T_symbol
  3977 000028AC 740C                            jz .L_false
  3978 000028AE 48B8-                           mov rax, sob_boolean_true
  3978 000028B0 [0300000000000000] 
  3979 000028B8 EB0A                            jmp .L_exit
  3980                                  .L_false:
  3981 000028BA 48B8-                           mov rax, sob_boolean_false
  3981 000028BC [0200000000000000] 
  3982                                  .L_exit:
  3983 000028C4 C9                              leave
  3984 000028C5 C21800                          ret AND_KILL_FRAME(1)
  3985                                  
  3986                                  L_code_ptr_is_uninterned_symbol:
  3987 000028C8 C8000000                        enter 0, 0
  3988 000028CC 48837D1801                      cmp COUNT, 1
  3989 000028D1 0F856C110000                    jne L_error_arg_count_1
  3990 000028D7 4C8B4520                        mov r8, PARAM(0)
  3991 000028DB 41803842                        cmp byte [r8], T_uninterned_symbol
  3992 000028DF 750C                            jne .L_false
  3993 000028E1 48B8-                           mov rax, sob_boolean_true
  3993 000028E3 [0300000000000000] 
  3994 000028EB EB0A                            jmp .L_exit
  3995                                  .L_false:
  3996 000028ED 48B8-                           mov rax, sob_boolean_false
  3996 000028EF [0200000000000000] 
  3997                                  .L_exit:
  3998 000028F7 C9                              leave
  3999 000028F8 C21800                          ret AND_KILL_FRAME(1)
  4000                                  
  4001                                  L_code_ptr_is_interned_symbol:
  4002 000028FB C8000000                        enter 0, 0
  4003 000028FF 48837D1801                      cmp COUNT, 1
  4004 00002904 0F8539110000                    jne L_error_arg_count_1
  4005 0000290A 488B4520                        mov rax, PARAM(0)
  4006 0000290E 803841                          cmp byte [rax], T_interned_symbol
  4007 00002911 750C                            jne .L_false
  4008 00002913 48B8-                           mov rax, sob_boolean_true
  4008 00002915 [0300000000000000] 
  4009 0000291D EB0A                            jmp .L_end
  4010                                  .L_false:
  4011 0000291F 48B8-                           mov rax, sob_boolean_false
  4011 00002921 [0200000000000000] 
  4012                                  .L_end:
  4013 00002929 C9                              leave
  4014 0000292A C21800                          ret AND_KILL_FRAME(1)
  4015                                  
  4016                                  L_code_ptr_gensym:
  4017 0000292D C8000000                        enter 0, 0
  4018 00002931 48837D1800                      cmp COUNT, 0
  4019 00002936 0F85D2100000                    jne L_error_arg_count_0
  4020 0000293C 48FF0425[870C0000]              inc qword [gensym_count]
  4021 00002944 BF09000000                      mov rdi, (1 + 8)
  4022 00002949 E828F4FFFF                      call malloc
  4023 0000294E C60042                          mov byte [rax], T_uninterned_symbol
  4024 00002951 488B0C25[870C0000]              mov rcx, qword [gensym_count]
  4025 00002959 48894801                        mov qword [rax + 1], rcx
  4026 0000295D C9                              leave
  4027 0000295E C21000                          ret AND_KILL_FRAME(0)
  4028                                  
  4029                                  L_code_ptr_is_vector:
  4030 00002961 C8000000                        enter 0, 0
  4031 00002965 48837D1801                      cmp COUNT, 1
  4032 0000296A 0F85D3100000                    jne L_error_arg_count_1
  4033 00002970 488B4520                        mov rax, PARAM(0)
  4034 00002974 803822                          cmp byte [rax], T_vector
  4035 00002977 750C                            jne .L_false
  4036 00002979 48B8-                           mov rax, sob_boolean_true
  4036 0000297B [0300000000000000] 
  4037 00002983 EB0A                            jmp .L_end
  4038                                  .L_false:
  4039 00002985 48B8-                           mov rax, sob_boolean_false
  4039 00002987 [0200000000000000] 
  4040                                  .L_end:
  4041 0000298F C9                              leave
  4042 00002990 C21800                          ret AND_KILL_FRAME(1)
  4043                                  
  4044                                  L_code_ptr_is_closure:
  4045 00002993 C8000000                        enter 0, 0
  4046 00002997 48837D1801                      cmp COUNT, 1
  4047 0000299C 0F85A1100000                    jne L_error_arg_count_1
  4048 000029A2 488B4520                        mov rax, PARAM(0)
  4049 000029A6 803804                          cmp byte [rax], T_closure
  4050 000029A9 750C                            jne .L_false
  4051 000029AB 48B8-                           mov rax, sob_boolean_true
  4051 000029AD [0300000000000000] 
  4052 000029B5 EB0A                            jmp .L_end
  4053                                  .L_false:
  4054 000029B7 48B8-                           mov rax, sob_boolean_false
  4054 000029B9 [0200000000000000] 
  4055                                  .L_end:
  4056 000029C1 C9                              leave
  4057 000029C2 C21800                          ret AND_KILL_FRAME(1)
  4058                                  
  4059                                  L_code_ptr_is_real:
  4060 000029C5 C8000000                        enter 0, 0
  4061 000029C9 48837D1801                      cmp COUNT, 1
  4062 000029CE 0F856F100000                    jne L_error_arg_count_1
  4063 000029D4 488B4520                        mov rax, PARAM(0)
  4064 000029D8 803813                          cmp byte [rax], T_real
  4065 000029DB 750C                            jne .L_false
  4066 000029DD 48B8-                           mov rax, sob_boolean_true
  4066 000029DF [0300000000000000] 
  4067 000029E7 EB0A                            jmp .L_end
  4068                                  .L_false:
  4069 000029E9 48B8-                           mov rax, sob_boolean_false
  4069 000029EB [0200000000000000] 
  4070                                  .L_end:
  4071 000029F3 C9                              leave
  4072 000029F4 C21800                          ret AND_KILL_FRAME(1)
  4073                                  
  4074                                  L_code_ptr_is_fraction:
  4075 000029F7 C8000000                        enter 0, 0
  4076 000029FB 48837D1801                      cmp COUNT, 1
  4077 00002A00 0F853D100000                    jne L_error_arg_count_1
  4078 00002A06 488B4520                        mov rax, PARAM(0)
  4079 00002A0A 803812                          cmp byte [rax], T_fraction
  4080 00002A0D 750C                            jne .L_false
  4081 00002A0F 48B8-                           mov rax, sob_boolean_true
  4081 00002A11 [0300000000000000] 
  4082 00002A19 EB0A                            jmp .L_end
  4083                                  .L_false:
  4084 00002A1B 48B8-                           mov rax, sob_boolean_false
  4084 00002A1D [0200000000000000] 
  4085                                  .L_end:
  4086 00002A25 C9                              leave
  4087 00002A26 C21800                          ret AND_KILL_FRAME(1)
  4088                                  
  4089                                  L_code_ptr_is_boolean:
  4090 00002A29 C8000000                        enter 0, 0
  4091 00002A2D 48837D1801                      cmp COUNT, 1
  4092 00002A32 0F850B100000                    jne L_error_arg_count_1
  4093 00002A38 488B4520                        mov rax, PARAM(0)
  4094 00002A3C 8A18                            mov bl, byte [rax]
  4095 00002A3E 80E308                          and bl, T_boolean
  4096 00002A41 740C                            je .L_false
  4097 00002A43 48B8-                           mov rax, sob_boolean_true
  4097 00002A45 [0300000000000000] 
  4098 00002A4D EB0A                            jmp .L_end
  4099                                  .L_false:
  4100 00002A4F 48B8-                           mov rax, sob_boolean_false
  4100 00002A51 [0200000000000000] 
  4101                                  .L_end:
  4102 00002A59 C9                              leave
  4103 00002A5A C21800                          ret AND_KILL_FRAME(1)
  4104                                          
  4105                                  L_code_ptr_is_boolean_false:
  4106 00002A5D C8000000                        enter 0, 0
  4107 00002A61 48837D1801                      cmp COUNT, 1
  4108 00002A66 0F85D70F0000                    jne L_error_arg_count_1
  4109 00002A6C 488B4520                        mov rax, PARAM(0)
  4110 00002A70 8A18                            mov bl, byte [rax]
  4111 00002A72 80FB09                          cmp bl, T_boolean_false
  4112 00002A75 750C                            jne .L_false
  4113 00002A77 48B8-                           mov rax, sob_boolean_true
  4113 00002A79 [0300000000000000] 
  4114 00002A81 EB0A                            jmp .L_end
  4115                                  .L_false:
  4116 00002A83 48B8-                           mov rax, sob_boolean_false
  4116 00002A85 [0200000000000000] 
  4117                                  .L_end:
  4118 00002A8D C9                              leave
  4119 00002A8E C21800                          ret AND_KILL_FRAME(1)
  4120                                  
  4121                                  L_code_ptr_is_boolean_true:
  4122 00002A91 C8000000                        enter 0, 0
  4123 00002A95 48837D1801                      cmp COUNT, 1
  4124 00002A9A 0F85A30F0000                    jne L_error_arg_count_1
  4125 00002AA0 488B4520                        mov rax, PARAM(0)
  4126 00002AA4 8A18                            mov bl, byte [rax]
  4127 00002AA6 80FB0A                          cmp bl, T_boolean_true
  4128 00002AA9 750C                            jne .L_false
  4129 00002AAB 48B8-                           mov rax, sob_boolean_true
  4129 00002AAD [0300000000000000] 
  4130 00002AB5 EB0A                            jmp .L_end
  4131                                  .L_false:
  4132 00002AB7 48B8-                           mov rax, sob_boolean_false
  4132 00002AB9 [0200000000000000] 
  4133                                  .L_end:
  4134 00002AC1 C9                              leave
  4135 00002AC2 C21800                          ret AND_KILL_FRAME(1)
  4136                                  
  4137                                  L_code_ptr_is_number:
  4138 00002AC5 C8000000                        enter 0, 0
  4139 00002AC9 48837D1801                      cmp COUNT, 1
  4140 00002ACE 0F856F0F0000                    jne L_error_arg_count_1
  4141 00002AD4 488B4520                        mov rax, PARAM(0)
  4142 00002AD8 8A18                            mov bl, byte [rax]
  4143 00002ADA 80E310                          and bl, T_number
  4144 00002ADD 740C                            jz .L_false
  4145 00002ADF 48B8-                           mov rax, sob_boolean_true
  4145 00002AE1 [0300000000000000] 
  4146 00002AE9 EB0A                            jmp .L_end
  4147                                  .L_false:
  4148 00002AEB 48B8-                           mov rax, sob_boolean_false
  4148 00002AED [0200000000000000] 
  4149                                  .L_end:
  4150 00002AF5 C9                              leave
  4151 00002AF6 C21800                          ret AND_KILL_FRAME(1)
  4152                                          
  4153                                  L_code_ptr_is_collection:
  4154 00002AF9 C8000000                        enter 0, 0
  4155 00002AFD 48837D1801                      cmp COUNT, 1
  4156 00002B02 0F853B0F0000                    jne L_error_arg_count_1
  4157 00002B08 488B4520                        mov rax, PARAM(0)
  4158 00002B0C 8A18                            mov bl, byte [rax]
  4159 00002B0E 80E320                          and bl, T_collection
  4160 00002B11 740C                            je .L_false
  4161 00002B13 48B8-                           mov rax, sob_boolean_true
  4161 00002B15 [0300000000000000] 
  4162 00002B1D EB0A                            jmp .L_end
  4163                                  .L_false:
  4164 00002B1F 48B8-                           mov rax, sob_boolean_false
  4164 00002B21 [0200000000000000] 
  4165                                  .L_end:
  4166 00002B29 C9                              leave
  4167 00002B2A C21800                          ret AND_KILL_FRAME(1)
  4168                                  
  4169                                  L_code_ptr_cons:
  4170 00002B2D C8000000                        enter 0, 0
  4171 00002B31 48837D1802                      cmp COUNT, 2
  4172 00002B36 0F853C0F0000                    jne L_error_arg_count_2
  4173 00002B3C BF11000000                      mov rdi, (1 + 8 + 8)
  4174 00002B41 E830F2FFFF                      call malloc
  4175 00002B46 C60021                          mov byte [rax], T_pair
  4176 00002B49 488B5D20                        mov rbx, PARAM(0)
  4177 00002B4D 48895801                        mov SOB_PAIR_CAR(rax), rbx
  4178 00002B51 488B5D28                        mov rbx, PARAM(1)
  4179 00002B55 48895809                        mov SOB_PAIR_CDR(rax), rbx
  4180 00002B59 C9                              leave
  4181 00002B5A C22000                          ret AND_KILL_FRAME(2)
  4182                                  
  4183                                  L_code_ptr_display_sexpr:
  4184 00002B5D C8000000                        enter 0, 0
  4185 00002B61 48837D1801                      cmp COUNT, 1
  4186 00002B66 0F85D70E0000                    jne L_error_arg_count_1
  4187 00002B6C 488B7D20                        mov rdi, PARAM(0)
  4188 00002B70 E882F4FFFF                      call print_sexpr
  4189 00002B75 48B8-                           mov rax, sob_void
  4189 00002B77 [0000000000000000] 
  4190 00002B7F C9                              leave
  4191 00002B80 C21800                          ret AND_KILL_FRAME(1)
  4192                                  
  4193                                  L_code_ptr_write_char:
  4194 00002B83 C8000000                        enter 0, 0
  4195 00002B87 48837D1801                      cmp COUNT, 1
  4196 00002B8C 0F85B10E0000                    jne L_error_arg_count_1
  4197 00002B92 488B4520                        mov rax, PARAM(0)
  4198                                          assert_char(rax)
    53 00002B96 803802              <1>  cmp byte [%1], %2
    54 00002B99 0F85780F0000        <1>  jne L_error_incorrect_type
  4199 00002B9F 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  4200 00002BA2 4825FF000000                    and rax, 255
  4201 00002BA8 48BF-                           mov rdi, fmt_char
  4201 00002BAA [8F0C000000000000] 
  4202 00002BB2 4889C6                          mov rsi, rax
  4203 00002BB5 B800000000                      mov rax, 0
  4204                                          ENTER
    44 00002BBA C8000000            <1>  enter 0, 0
    45 00002BBE 4883E4F0            <1>  and rsp, ~15
  4205 00002BC2 E8(00000000)                    call printf
  4206                                          LEAVE
    49 00002BC7 C9                  <1>  leave
  4207 00002BC8 48B8-                           mov rax, sob_void
  4207 00002BCA [0000000000000000] 
  4208 00002BD2 C9                              leave
  4209 00002BD3 C21800                          ret AND_KILL_FRAME(1)
  4210                                  
  4211                                  L_code_ptr_car:
  4212 00002BD6 C8000000                        enter 0, 0
  4213 00002BDA 48837D1801                      cmp COUNT, 1
  4214 00002BDF 0F855E0E0000                    jne L_error_arg_count_1
  4215 00002BE5 488B4520                        mov rax, PARAM(0)
  4216                                          assert_pair(rax)
    53 00002BE9 803821              <1>  cmp byte [%1], %2
    54 00002BEC 0F85250F0000        <1>  jne L_error_incorrect_type
  4217 00002BF2 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  4218 00002BF6 C9                              leave
  4219 00002BF7 C21800                          ret AND_KILL_FRAME(1)
  4220                                          
  4221                                  L_code_ptr_cdr:
  4222 00002BFA C8000000                        enter 0, 0
  4223 00002BFE 48837D1801                      cmp COUNT, 1
  4224 00002C03 0F853A0E0000                    jne L_error_arg_count_1
  4225 00002C09 488B4520                        mov rax, PARAM(0)
  4226                                          assert_pair(rax)
    53 00002C0D 803821              <1>  cmp byte [%1], %2
    54 00002C10 0F85010F0000        <1>  jne L_error_incorrect_type
  4227 00002C16 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  4228 00002C1A C9                              leave
  4229 00002C1B C21800                          ret AND_KILL_FRAME(1)
  4230                                          
  4231                                  L_code_ptr_string_length:
  4232 00002C1E C8000000                        enter 0, 0
  4233 00002C22 48837D1801                      cmp COUNT, 1
  4234 00002C27 0F85160E0000                    jne L_error_arg_count_1
  4235 00002C2D 488B4520                        mov rax, PARAM(0)
  4236                                          assert_string(rax)
    53 00002C31 803803              <1>  cmp byte [%1], %2
    54 00002C34 0F85DD0E0000        <1>  jne L_error_incorrect_type
  4237 00002C3A 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  4238 00002C3E E84F0D0000                      call make_integer
  4239 00002C43 C9                              leave
  4240 00002C44 C21800                          ret AND_KILL_FRAME(1)
  4241                                  
  4242                                  L_code_ptr_vector_length:
  4243 00002C47 C8000000                        enter 0, 0
  4244 00002C4B 48837D1801                      cmp COUNT, 1
  4245 00002C50 0F85ED0D0000                    jne L_error_arg_count_1
  4246 00002C56 488B4520                        mov rax, PARAM(0)
  4247                                          assert_vector(rax)
    53 00002C5A 803822              <1>  cmp byte [%1], %2
    54 00002C5D 0F85B40E0000        <1>  jne L_error_incorrect_type
  4248 00002C63 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  4249 00002C67 E8260D0000                      call make_integer
  4250 00002C6C C9                              leave
  4251 00002C6D C21800                          ret AND_KILL_FRAME(1)
  4252                                  
  4253                                  L_code_ptr_real_to_integer:
  4254 00002C70 C8000000                        enter 0, 0
  4255 00002C74 48837D1801                      cmp COUNT, 1
  4256 00002C79 0F85C40D0000                    jne L_error_arg_count_1
  4257 00002C7F 488B5D20                        mov rbx, PARAM(0)
  4258                                          assert_real(rbx)
    53 00002C83 803B13              <1>  cmp byte [%1], %2
    54 00002C86 0F858B0E0000        <1>  jne L_error_incorrect_type
  4259 00002C8C F20F104301                      movsd xmm0, qword [rbx + 1]
  4260 00002C91 F2480F2CF8                      cvttsd2si rdi, xmm0
  4261 00002C96 E8F70C0000                      call make_integer
  4262 00002C9B C9                              leave
  4263 00002C9C C21800                          ret AND_KILL_FRAME(1)
  4264                                  
  4265                                  L_code_ptr_exit:
  4266 00002C9F C8000000                        enter 0, 0
  4267 00002CA3 48837D1800                      cmp COUNT, 0
  4268 00002CA8 0F85600D0000                    jne L_error_arg_count_0
  4269 00002CAE B800000000                      mov rax, 0
  4270 00002CB3 E8(00000000)                    call exit
  4271                                  
  4272                                  L_code_ptr_integer_to_real:
  4273 00002CB8 C8000000                        enter 0, 0
  4274 00002CBC 48837D1801                      cmp COUNT, 1
  4275 00002CC1 0F857C0D0000                    jne L_error_arg_count_1
  4276 00002CC7 488B4520                        mov rax, PARAM(0)
  4277                                          assert_integer(rax)
    53 00002CCB 803811              <1>  cmp byte [%1], %2
    54 00002CCE 0F85430E0000        <1>  jne L_error_incorrect_type
  4278 00002CD4 FF7001                          push qword [rax + 1]
  4279 00002CD7 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  4280 00002CDD E8980C0000                      call make_real
  4281 00002CE2 C9                              leave
  4282 00002CE3 C21800                          ret AND_KILL_FRAME(1)
  4283                                  
  4284                                  L_code_ptr_fraction_to_real:
  4285 00002CE6 C8000000                        enter 0, 0
  4286 00002CEA 48837D1801                      cmp COUNT, 1
  4287 00002CEF 0F854E0D0000                    jne L_error_arg_count_1
  4288 00002CF5 488B4520                        mov rax, PARAM(0)
  4289                                          assert_fraction(rax)
    53 00002CF9 803812              <1>  cmp byte [%1], %2
    54 00002CFC 0F85150E0000        <1>  jne L_error_incorrect_type
  4290 00002D02 FF7001                          push qword [rax + 1]
  4291 00002D05 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  4292 00002D0B FF7009                          push qword [rax + 1 + 8]
  4293 00002D0E F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  4294 00002D14 F20F5EC1                        divsd xmm0, xmm1
  4295 00002D18 E85D0C0000                      call make_real
  4296 00002D1D C9                              leave
  4297 00002D1E C21800                          ret AND_KILL_FRAME(1)
  4298                                  
  4299                                  L_code_ptr_char_to_integer:
  4300 00002D21 C8000000                        enter 0, 0
  4301 00002D25 48837D1801                      cmp COUNT, 1
  4302 00002D2A 0F85130D0000                    jne L_error_arg_count_1
  4303 00002D30 488B4520                        mov rax, PARAM(0)
  4304                                          assert_char(rax)
    53 00002D34 803802              <1>  cmp byte [%1], %2
    54 00002D37 0F85DA0D0000        <1>  jne L_error_incorrect_type
  4305 00002D3D 8A4001                          mov al, byte [rax + 1]
  4306 00002D40 4825FF000000                    and rax, 255
  4307 00002D46 4889C7                          mov rdi, rax
  4308 00002D49 E8440C0000                      call make_integer
  4309 00002D4E C9                              leave
  4310 00002D4F C21800                          ret AND_KILL_FRAME(1)
  4311                                  
  4312                                  L_code_ptr_integer_to_fraction:
  4313 00002D52 C8000000                        enter 0, 0
  4314 00002D56 48837D1801                      cmp COUNT, 1
  4315 00002D5B 0F85E20C0000                    jne L_error_arg_count_1
  4316 00002D61 4C8B4520                        mov r8, PARAM(0)
  4317                                          assert_integer(r8)
    53 00002D65 41803811            <1>  cmp byte [%1], %2
    54 00002D69 0F85A80D0000        <1>  jne L_error_incorrect_type
  4318 00002D6F BF11000000                      mov rdi, (1 + 8 + 8)
  4319 00002D74 E8FDEFFFFF                      call malloc
  4320 00002D79 498B5801                        mov rbx, qword [r8 + 1]
  4321 00002D7D C60012                          mov byte [rax], T_fraction
  4322 00002D80 48895801                        mov qword [rax + 1], rbx
  4323 00002D84 48C7400901000000                mov qword [rax + 1 + 8], 1
  4324 00002D8C C9                              leave
  4325 00002D8D C21800                          ret AND_KILL_FRAME(1)
  4326                                  
  4327                                  L_code_ptr_integer_to_char:
  4328 00002D90 C8000000                        enter 0, 0
  4329 00002D94 48837D1801                      cmp COUNT, 1
  4330 00002D99 0F85A40C0000                    jne L_error_arg_count_1
  4331 00002D9F 488B4520                        mov rax, PARAM(0)
  4332                                          assert_integer(rax)
    53 00002DA3 803811              <1>  cmp byte [%1], %2
    54 00002DA6 0F856B0D0000        <1>  jne L_error_incorrect_type
  4333 00002DAC 488B5801                        mov rbx, qword [rax + 1]
  4334 00002DB0 4883FB00                        cmp rbx, 0
  4335 00002DB4 0F8EF20B0000                    jle L_error_integer_range
  4336 00002DBA 4881FB00010000                  cmp rbx, 256
  4337 00002DC1 0F8DE50B0000                    jge L_error_integer_range
  4338 00002DC7 BF02000000                      mov rdi, (1 + 1)
  4339 00002DCC E8A5EFFFFF                      call malloc
  4340 00002DD1 C60002                          mov byte [rax], T_char
  4341 00002DD4 885801                          mov byte [rax + 1], bl
  4342 00002DD7 C9                              leave
  4343 00002DD8 C21800                          ret AND_KILL_FRAME(1)
  4344                                  
  4345                                  L_code_ptr_trng:
  4346 00002DDB C8000000                        enter 0, 0
  4347 00002DDF 48837D1800                      cmp COUNT, 0
  4348 00002DE4 0F85240C0000                    jne L_error_arg_count_0
  4349 00002DEA 480FC7F7                        rdrand rdi
  4350 00002DEE 48D1EF                          shr rdi, 1
  4351 00002DF1 E89C0B0000                      call make_integer
  4352 00002DF6 C9                              leave
  4353 00002DF7 C21000                          ret AND_KILL_FRAME(0)
  4354                                  
  4355                                  L_code_ptr_is_zero:
  4356 00002DFA C8000000                        enter 0, 0
  4357 00002DFE 48837D1801                      cmp COUNT, 1
  4358 00002E03 0F853A0C0000                    jne L_error_arg_count_1
  4359 00002E09 488B4520                        mov rax, PARAM(0)
  4360 00002E0D 803811                          cmp byte [rax], T_integer
  4361 00002E10 740F                            je .L_integer
  4362 00002E12 803812                          cmp byte [rax], T_fraction
  4363 00002E15 7413                            je .L_fraction
  4364 00002E17 803813                          cmp byte [rax], T_real
  4365 00002E1A 7417                            je .L_real
  4366 00002E1C E9F60C0000                      jmp L_error_incorrect_type
  4367                                  .L_integer:
  4368 00002E21 4883780100                      cmp qword [rax + 1], 0
  4369 00002E26 7429                            je .L_zero
  4370 00002E28 EB1B                            jmp .L_not_zero
  4371                                  .L_fraction:
  4372 00002E2A 4883780100                      cmp qword [rax + 1], 0
  4373 00002E2F 7420                            je .L_zero
  4374 00002E31 EB12                            jmp .L_not_zero
  4375                                  .L_real:
  4376 00002E33 660FEFC0                        pxor xmm0, xmm0
  4377 00002E37 FF7001                          push qword [rax + 1]
  4378 00002E3A F20F100C24                      movsd xmm1, qword [rsp]
  4379 00002E3F 660F2EC1                        ucomisd xmm0, xmm1
  4380 00002E43 740C                            je .L_zero
  4381                                  .L_not_zero:
  4382 00002E45 48B8-                           mov rax, sob_boolean_false
  4382 00002E47 [0200000000000000] 
  4383 00002E4F EB0A                            jmp .L_end
  4384                                  .L_zero:
  4385 00002E51 48B8-                           mov rax, sob_boolean_true
  4385 00002E53 [0300000000000000] 
  4386                                  .L_end:
  4387 00002E5B C9                              leave
  4388 00002E5C C21800                          ret AND_KILL_FRAME(1)
  4389                                  
  4390                                  L_code_ptr_is_integer:
  4391 00002E5F C8000000                        enter 0, 0
  4392 00002E63 48837D1801                      cmp COUNT, 1
  4393 00002E68 0F85D50B0000                    jne L_error_arg_count_1
  4394 00002E6E 488B4520                        mov rax, PARAM(0)
  4395 00002E72 803811                          cmp byte [rax], T_integer
  4396 00002E75 750C                            jne .L_false
  4397 00002E77 48B8-                           mov rax, sob_boolean_true
  4397 00002E79 [0300000000000000] 
  4398 00002E81 EB0A                            jmp .L_exit
  4399                                  .L_false:
  4400 00002E83 48B8-                           mov rax, sob_boolean_false
  4400 00002E85 [0200000000000000] 
  4401                                  .L_exit:
  4402 00002E8D C9                              leave
  4403 00002E8E C21800                          ret AND_KILL_FRAME(1)
  4404                                  
  4405                                  L_code_ptr_raw_bin_add_rr:
  4406 00002E91 C8000000                        enter 0, 0
  4407 00002E95 48837D1802                      cmp COUNT, 2
  4408 00002E9A 0F85D80B0000                    jne L_error_arg_count_2
  4409 00002EA0 488B5D20                        mov rbx, PARAM(0)
  4410                                          assert_real(rbx)
    53 00002EA4 803B13              <1>  cmp byte [%1], %2
    54 00002EA7 0F856A0C0000        <1>  jne L_error_incorrect_type
  4411 00002EAD 488B4D28                        mov rcx, PARAM(1)
  4412                                          assert_real(rcx)
    53 00002EB1 803913              <1>  cmp byte [%1], %2
    54 00002EB4 0F855D0C0000        <1>  jne L_error_incorrect_type
  4413 00002EBA F20F104301                      movsd xmm0, qword [rbx + 1]
  4414 00002EBF F20F104901                      movsd xmm1, qword [rcx + 1]
  4415 00002EC4 F20F58C1                        addsd xmm0, xmm1
  4416 00002EC8 E8AD0A0000                      call make_real
  4417 00002ECD C9                              leave
  4418 00002ECE C22000                          ret AND_KILL_FRAME(2)
  4419                                  
  4420                                  L_code_ptr_raw_bin_sub_rr:
  4421 00002ED1 C8000000                        enter 0, 0
  4422 00002ED5 48837D1802                      cmp COUNT, 2
  4423 00002EDA 0F85980B0000                    jne L_error_arg_count_2
  4424 00002EE0 488B5D20                        mov rbx, PARAM(0)
  4425                                          assert_real(rbx)
    53 00002EE4 803B13              <1>  cmp byte [%1], %2
    54 00002EE7 0F852A0C0000        <1>  jne L_error_incorrect_type
  4426 00002EED 488B4D28                        mov rcx, PARAM(1)
  4427                                          assert_real(rcx)
    53 00002EF1 803913              <1>  cmp byte [%1], %2
    54 00002EF4 0F851D0C0000        <1>  jne L_error_incorrect_type
  4428 00002EFA F20F104301                      movsd xmm0, qword [rbx + 1]
  4429 00002EFF F20F104901                      movsd xmm1, qword [rcx + 1]
  4430 00002F04 F20F5CC1                        subsd xmm0, xmm1
  4431 00002F08 E86D0A0000                      call make_real
  4432 00002F0D C9                              leave
  4433 00002F0E C22000                          ret AND_KILL_FRAME(2)
  4434                                  
  4435                                  L_code_ptr_raw_bin_mul_rr:
  4436 00002F11 C8000000                        enter 0, 0
  4437 00002F15 48837D1802                      cmp COUNT, 2
  4438 00002F1A 0F85580B0000                    jne L_error_arg_count_2
  4439 00002F20 488B5D20                        mov rbx, PARAM(0)
  4440                                          assert_real(rbx)
    53 00002F24 803B13              <1>  cmp byte [%1], %2
    54 00002F27 0F85EA0B0000        <1>  jne L_error_incorrect_type
  4441 00002F2D 488B4D28                        mov rcx, PARAM(1)
  4442                                          assert_real(rcx)
    53 00002F31 803913              <1>  cmp byte [%1], %2
    54 00002F34 0F85DD0B0000        <1>  jne L_error_incorrect_type
  4443 00002F3A F20F104301                      movsd xmm0, qword [rbx + 1]
  4444 00002F3F F20F104901                      movsd xmm1, qword [rcx + 1]
  4445 00002F44 F20F59C1                        mulsd xmm0, xmm1
  4446 00002F48 E82D0A0000                      call make_real
  4447 00002F4D C9                              leave
  4448 00002F4E C22000                          ret AND_KILL_FRAME(2)
  4449                                  
  4450                                  L_code_ptr_raw_bin_div_rr:
  4451 00002F51 C8000000                        enter 0, 0
  4452 00002F55 48837D1802                      cmp COUNT, 2
  4453 00002F5A 0F85180B0000                    jne L_error_arg_count_2
  4454 00002F60 488B5D20                        mov rbx, PARAM(0)
  4455                                          assert_real(rbx)
    53 00002F64 803B13              <1>  cmp byte [%1], %2
    54 00002F67 0F85AA0B0000        <1>  jne L_error_incorrect_type
  4456 00002F6D 488B4D28                        mov rcx, PARAM(1)
  4457                                          assert_real(rcx)
    53 00002F71 803913              <1>  cmp byte [%1], %2
    54 00002F74 0F859D0B0000        <1>  jne L_error_incorrect_type
  4458 00002F7A F20F104301                      movsd xmm0, qword [rbx + 1]
  4459 00002F7F F20F104901                      movsd xmm1, qword [rcx + 1]
  4460 00002F84 660FEFD2                        pxor xmm2, xmm2
  4461 00002F88 660F2ECA                        ucomisd xmm1, xmm2
  4462 00002F8C 0F84B60B0000                    je L_error_division_by_zero
  4463 00002F92 F20F5EC1                        divsd xmm0, xmm1
  4464 00002F96 E8DF090000                      call make_real
  4465 00002F9B C9                              leave
  4466 00002F9C C22000                          ret AND_KILL_FRAME(2)
  4467                                  
  4468                                  L_code_ptr_raw_bin_add_zz:
  4469 00002F9F C8000000                	enter 0, 0
  4470 00002FA3 48837D1802              	cmp COUNT, 2
  4471 00002FA8 0F85CA0A0000            	jne L_error_arg_count_2
  4472 00002FAE 4C8B4520                	mov r8, PARAM(0)
  4473                                  	assert_integer(r8)
    53 00002FB2 41803811            <1>  cmp byte [%1], %2
    54 00002FB6 0F855B0B0000        <1>  jne L_error_incorrect_type
  4474 00002FBC 4C8B4D28                	mov r9, PARAM(1)
  4475                                  	assert_integer(r9)
    53 00002FC0 41803911            <1>  cmp byte [%1], %2
    54 00002FC4 0F854D0B0000        <1>  jne L_error_incorrect_type
  4476 00002FCA 498B7801                	mov rdi, qword [r8 + 1]
  4477 00002FCE 49037901                	add rdi, qword [r9 + 1]
  4478 00002FD2 E8BB090000              	call make_integer
  4479 00002FD7 C9                      	leave
  4480 00002FD8 C22000                  	ret AND_KILL_FRAME(2)
  4481                                  
  4482                                  L_code_ptr_raw_bin_add_qq:
  4483 00002FDB C8000000                        enter 0, 0
  4484 00002FDF 48837D1802                      cmp COUNT, 2
  4485 00002FE4 0F858E0A0000                    jne L_error_arg_count_2
  4486 00002FEA 4C8B4520                        mov r8, PARAM(0)
  4487                                          assert_fraction(r8)
    53 00002FEE 41803812            <1>  cmp byte [%1], %2
    54 00002FF2 0F851F0B0000        <1>  jne L_error_incorrect_type
  4488 00002FF8 4C8B4D28                        mov r9, PARAM(1)
  4489                                          assert_fraction(r9)
    53 00002FFC 41803912            <1>  cmp byte [%1], %2
    54 00003000 0F85110B0000        <1>  jne L_error_incorrect_type
  4490 00003006 498B4001                        mov rax, qword [r8 + 1] ; num1
  4491 0000300A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  4492 0000300E 4899                            cqo
  4493 00003010 48F7EB                          imul rbx
  4494 00003013 4889C6                          mov rsi, rax
  4495 00003016 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4496 0000301A 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  4497 0000301E 4899                            cqo
  4498 00003020 48F7EB                          imul rbx
  4499 00003023 4801C6                          add rsi, rax
  4500 00003026 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4501 0000302A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  4502 0000302E 4899                            cqo
  4503 00003030 48F7EB                          imul rbx
  4504 00003033 4889C7                          mov rdi, rax
  4505 00003036 E8DE010000                      call normalize_fraction
  4506 0000303B C9                              leave
  4507 0000303C C22000                          ret AND_KILL_FRAME(2)
  4508                                  
  4509                                  L_code_ptr_raw_bin_sub_zz:
  4510 0000303F C8000000                	enter 0, 0
  4511 00003043 48837D1802              	cmp COUNT, 2
  4512 00003048 0F852A0A0000            	jne L_error_arg_count_2
  4513 0000304E 4C8B4520                	mov r8, PARAM(0)
  4514                                  	assert_integer(r8)
    53 00003052 41803811            <1>  cmp byte [%1], %2
    54 00003056 0F85BB0A0000        <1>  jne L_error_incorrect_type
  4515 0000305C 4C8B4D28                	mov r9, PARAM(1)
  4516                                  	assert_integer(r9)
    53 00003060 41803911            <1>  cmp byte [%1], %2
    54 00003064 0F85AD0A0000        <1>  jne L_error_incorrect_type
  4517 0000306A 498B7801                	mov rdi, qword [r8 + 1]
  4518 0000306E 492B7901                	sub rdi, qword [r9 + 1]
  4519 00003072 E81B090000              	call make_integer
  4520 00003077 C9                      	leave
  4521 00003078 C22000                  	ret AND_KILL_FRAME(2)
  4522                                  
  4523                                  L_code_ptr_raw_bin_sub_qq:
  4524 0000307B C8000000                        enter 0, 0
  4525 0000307F 48837D1802                      cmp COUNT, 2
  4526 00003084 0F85EE090000                    jne L_error_arg_count_2
  4527 0000308A 4C8B4520                        mov r8, PARAM(0)
  4528                                          assert_fraction(r8)
    53 0000308E 41803812            <1>  cmp byte [%1], %2
    54 00003092 0F857F0A0000        <1>  jne L_error_incorrect_type
  4529 00003098 4C8B4D28                        mov r9, PARAM(1)
  4530                                          assert_fraction(r9)
    53 0000309C 41803912            <1>  cmp byte [%1], %2
    54 000030A0 0F85710A0000        <1>  jne L_error_incorrect_type
  4531 000030A6 498B4001                        mov rax, qword [r8 + 1] ; num1
  4532 000030AA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  4533 000030AE 4899                            cqo
  4534 000030B0 48F7EB                          imul rbx
  4535 000030B3 4889C6                          mov rsi, rax
  4536 000030B6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4537 000030BA 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  4538 000030BE 4899                            cqo
  4539 000030C0 48F7EB                          imul rbx
  4540 000030C3 4829C6                          sub rsi, rax
  4541 000030C6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4542 000030CA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  4543 000030CE 4899                            cqo
  4544 000030D0 48F7EB                          imul rbx
  4545 000030D3 4889C7                          mov rdi, rax
  4546 000030D6 E83E010000                      call normalize_fraction
  4547 000030DB C9                              leave
  4548 000030DC C22000                          ret AND_KILL_FRAME(2)
  4549                                  
  4550                                  L_code_ptr_raw_bin_mul_zz:
  4551 000030DF C8000000                	enter 0, 0
  4552 000030E3 48837D1802              	cmp COUNT, 2
  4553 000030E8 0F858A090000            	jne L_error_arg_count_2
  4554 000030EE 4C8B4520                	mov r8, PARAM(0)
  4555                                  	assert_integer(r8)
    53 000030F2 41803811            <1>  cmp byte [%1], %2
    54 000030F6 0F851B0A0000        <1>  jne L_error_incorrect_type
  4556 000030FC 4C8B4D28                	mov r9, PARAM(1)
  4557                                  	assert_integer(r9)
    53 00003100 41803911            <1>  cmp byte [%1], %2
    54 00003104 0F850D0A0000        <1>  jne L_error_incorrect_type
  4558 0000310A 4899                    	cqo
  4559 0000310C 498B4001                	mov rax, qword [r8 + 1]
  4560 00003110 49F76101                	mul qword [r9 + 1]
  4561 00003114 4889C7                  	mov rdi, rax
  4562 00003117 E876080000              	call make_integer
  4563 0000311C C9                      	leave
  4564 0000311D C22000                  	ret AND_KILL_FRAME(2)
  4565                                  
  4566                                  L_code_ptr_raw_bin_mul_qq:
  4567 00003120 C8000000                        enter 0, 0
  4568 00003124 48837D1802                      cmp COUNT, 2
  4569 00003129 0F8549090000                    jne L_error_arg_count_2
  4570 0000312F 4C8B4520                        mov r8, PARAM(0)
  4571                                          assert_fraction(r8)
    53 00003133 41803812            <1>  cmp byte [%1], %2
    54 00003137 0F85DA090000        <1>  jne L_error_incorrect_type
  4572 0000313D 4C8B4D28                        mov r9, PARAM(1)
  4573                                          assert_fraction(r9)
    53 00003141 41803912            <1>  cmp byte [%1], %2
    54 00003145 0F85CC090000        <1>  jne L_error_incorrect_type
  4574 0000314B 498B4001                        mov rax, qword [r8 + 1] ; num1
  4575 0000314F 498B5901                        mov rbx, qword [r9 + 1] ; num2
  4576 00003153 4899                            cqo
  4577 00003155 48F7EB                          imul rbx
  4578 00003158 4889C6                          mov rsi, rax
  4579 0000315B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4580 0000315F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  4581 00003163 4899                            cqo
  4582 00003165 48F7EB                          imul rbx
  4583 00003168 4889C7                          mov rdi, rax
  4584 0000316B E8A9000000                      call normalize_fraction
  4585 00003170 C9                              leave
  4586 00003171 C22000                          ret AND_KILL_FRAME(2)
  4587                                          
  4588                                  L_code_ptr_raw_bin_div_zz:
  4589 00003174 C8000000                	enter 0, 0
  4590 00003178 48837D1802              	cmp COUNT, 2
  4591 0000317D 0F85F5080000            	jne L_error_arg_count_2
  4592 00003183 4C8B4520                	mov r8, PARAM(0)
  4593                                  	assert_integer(r8)
    53 00003187 41803811            <1>  cmp byte [%1], %2
    54 0000318B 0F8586090000        <1>  jne L_error_incorrect_type
  4594 00003191 4C8B4D28                	mov r9, PARAM(1)
  4595                                  	assert_integer(r9)
    53 00003195 41803911            <1>  cmp byte [%1], %2
    54 00003199 0F8578090000        <1>  jne L_error_incorrect_type
  4596 0000319F 498B7901                	mov rdi, qword [r9 + 1]
  4597 000031A3 4883FF00                	cmp rdi, 0
  4598 000031A7 0F849B090000            	je L_error_division_by_zero
  4599 000031AD 498B7001                	mov rsi, qword [r8 + 1]
  4600 000031B1 E863000000              	call normalize_fraction
  4601 000031B6 C9                      	leave
  4602 000031B7 C22000                  	ret AND_KILL_FRAME(2)
  4603                                  
  4604                                  L_code_ptr_raw_bin_div_qq:
  4605 000031BA C8000000                        enter 0, 0
  4606 000031BE 48837D1802                      cmp COUNT, 2
  4607 000031C3 0F85AF080000                    jne L_error_arg_count_2
  4608 000031C9 4C8B4520                        mov r8, PARAM(0)
  4609                                          assert_fraction(r8)
    53 000031CD 41803812            <1>  cmp byte [%1], %2
    54 000031D1 0F8540090000        <1>  jne L_error_incorrect_type
  4610 000031D7 4C8B4D28                        mov r9, PARAM(1)
  4611                                          assert_fraction(r9)
    53 000031DB 41803912            <1>  cmp byte [%1], %2
    54 000031DF 0F8532090000        <1>  jne L_error_incorrect_type
  4612 000031E5 4983790100                      cmp qword [r9 + 1], 0
  4613 000031EA 0F8458090000                    je L_error_division_by_zero
  4614 000031F0 498B4001                        mov rax, qword [r8 + 1] ; num1
  4615 000031F4 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  4616 000031F8 4899                            cqo
  4617 000031FA 48F7EB                          imul rbx
  4618 000031FD 4889C6                          mov rsi, rax
  4619 00003200 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  4620 00003204 498B5901                        mov rbx, qword [r9 + 1] ; num2
  4621 00003208 4899                            cqo
  4622 0000320A 48F7EB                          imul rbx
  4623 0000320D 4889C7                          mov rdi, rax
  4624 00003210 E804000000                      call normalize_fraction
  4625 00003215 C9                              leave
  4626 00003216 C22000                          ret AND_KILL_FRAME(2)
  4627                                          
  4628                                  normalize_fraction:
  4629 00003219 56                              push rsi
  4630 0000321A 57                              push rdi
  4631 0000321B E859000000                      call gcd
  4632 00003220 4889C3                          mov rbx, rax
  4633 00003223 58                              pop rax
  4634 00003224 4899                            cqo
  4635 00003226 48F7FB                          idiv rbx
  4636 00003229 4989C0                          mov r8, rax
  4637 0000322C 58                              pop rax
  4638 0000322D 4899                            cqo
  4639 0000322F 48F7FB                          idiv rbx
  4640 00003232 4989C1                          mov r9, rax
  4641 00003235 4983F900                        cmp r9, 0
  4642 00003239 741C                            je .L_zero
  4643 0000323B 4983F801                        cmp r8, 1
  4644 0000323F 7421                            je .L_int
  4645 00003241 BF11000000                      mov rdi, (1 + 8 + 8)
  4646 00003246 E82BEBFFFF                      call malloc
  4647 0000324B C60012                          mov byte [rax], T_fraction
  4648 0000324E 4C894801                        mov qword [rax + 1], r9
  4649 00003252 4C894009                        mov qword [rax + 1 + 8], r8
  4650 00003256 C3                              ret
  4651                                  .L_zero:
  4652 00003257 BF00000000                      mov rdi, 0
  4653 0000325C E831070000                      call make_integer
  4654 00003261 C3                              ret
  4655                                  .L_int:
  4656 00003262 4C89CF                          mov rdi, r9
  4657 00003265 E828070000                      call make_integer
  4658 0000326A C3                              ret
  4659                                  
  4660                                  iabs:
  4661 0000326B 4889F8                          mov rax, rdi
  4662 0000326E 4883F800                        cmp rax, 0
  4663 00003272 7C01                            jl .Lneg
  4664 00003274 C3                              ret
  4665                                  .Lneg:
  4666 00003275 48F7D8                          neg rax
  4667 00003278 C3                              ret
  4668                                  
  4669                                  gcd:
  4670 00003279 E8EDFFFFFF                      call iabs
  4671 0000327E 4889C3                          mov rbx, rax
  4672 00003281 4889F7                          mov rdi, rsi
  4673 00003284 E8E2FFFFFF                      call iabs
  4674 00003289 4883F800                        cmp rax, 0
  4675 0000328D 7502                            jne .L0
  4676 0000328F 4893                            xchg rax, rbx
  4677                                  .L0:
  4678 00003291 4883FB00                        cmp rbx, 0
  4679 00003295 740C                            je .L1
  4680 00003297 4899                            cqo
  4681 00003299 48F7F3                          div rbx
  4682 0000329C 4889D0                          mov rax, rdx
  4683 0000329F 4893                            xchg rax, rbx
  4684 000032A1 EBEE                            jmp .L0
  4685                                  .L1:
  4686 000032A3 C3                              ret
  4687                                  
  4688                                  L_code_ptr_error:
  4689 000032A4 C8000000                        enter 0, 0
  4690 000032A8 48837D1802                      cmp COUNT, 2
  4691 000032AD 0F85C5070000                    jne L_error_arg_count_2
  4692 000032B3 488B7520                        mov rsi, PARAM(0)
  4693                                          assert_interned_symbol(rsi)
    53 000032B7 803E41              <1>  cmp byte [%1], %2
    54 000032BA 0F8557080000        <1>  jne L_error_incorrect_type
  4694 000032C0 488B7528                        mov rsi, PARAM(1)
  4695                                          assert_string(rsi)
    53 000032C4 803E03              <1>  cmp byte [%1], %2
    54 000032C7 0F854A080000        <1>  jne L_error_incorrect_type
  4696 000032CD 48BF-                           mov rdi, fmt_scheme_error_part_1
  4696 000032CF [ED0D000000000000] 
  4697 000032D7 B800000000                      mov rax, 0
  4698                                          ENTER
    44 000032DC C8000000            <1>  enter 0, 0
    45 000032E0 4883E4F0            <1>  and rsp, ~15
  4699 000032E4 E8(00000000)                    call printf
  4700                                          LEAVE
    49 000032E9 C9                  <1>  leave
  4701 000032EA 488B7D20                        mov rdi, PARAM(0)
  4702 000032EE E804EDFFFF                      call print_sexpr
  4703 000032F3 48BF-                           mov rdi, fmt_scheme_error_part_2
  4703 000032F5 [010E000000000000] 
  4704 000032FD B800000000                      mov rax, 0
  4705                                          ENTER
    44 00003302 C8000000            <1>  enter 0, 0
    45 00003306 4883E4F0            <1>  and rsp, ~15
  4706 0000330A E8(00000000)                    call printf
  4707                                          LEAVE
    49 0000330F C9                  <1>  leave
  4708 00003310 488B4528                        mov rax, PARAM(1)       ; sob_string
  4709 00003314 BE01000000                      mov rsi, 1              ; size = 1 byte
  4710 00003319 488B5001                        mov rdx, qword [rax + 1] ; length
  4711 0000331D 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  4712 00003321 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  4713                                  	ENTER
    44 00003329 C8000000            <1>  enter 0, 0
    45 0000332D 4883E4F0            <1>  and rsp, ~15
  4714 00003331 E8(00000000)                    call fwrite
  4715                                  	LEAVE
    49 00003336 C9                  <1>  leave
  4716 00003337 48BF-                           mov rdi, fmt_scheme_error_part_3
  4716 00003339 [430E000000000000] 
  4717 00003341 B800000000                      mov rax, 0
  4718                                          ENTER
    44 00003346 C8000000            <1>  enter 0, 0
    45 0000334A 4883E4F0            <1>  and rsp, ~15
  4719 0000334E E8(00000000)                    call printf
  4720                                          LEAVE
    49 00003353 C9                  <1>  leave
  4721 00003354 48C7C0F7FFFFFF                  mov rax, -9
  4722 0000335B E8(00000000)                    call exit
  4723                                  
  4724                                  L_code_ptr_raw_less_than_rr:
  4725 00003360 C8000000                        enter 0, 0
  4726 00003364 48837D1802                      cmp COUNT, 2
  4727 00003369 0F8509070000                    jne L_error_arg_count_2
  4728 0000336F 488B7520                        mov rsi, PARAM(0)
  4729                                          assert_real(rsi)
    53 00003373 803E13              <1>  cmp byte [%1], %2
    54 00003376 0F859B070000        <1>  jne L_error_incorrect_type
  4730 0000337C 488B7D28                        mov rdi, PARAM(1)
  4731                                          assert_real(rdi)
    53 00003380 803F13              <1>  cmp byte [%1], %2
    54 00003383 0F858E070000        <1>  jne L_error_incorrect_type
  4732 00003389 F20F104601                      movsd xmm0, qword [rsi + 1]
  4733 0000338E F20F104F01                      movsd xmm1, qword [rdi + 1]
  4734 00003393 660F2FC1                        comisd xmm0, xmm1
  4735 00003397 730C                            jae .L_false
  4736 00003399 48B8-                           mov rax, sob_boolean_true
  4736 0000339B [0300000000000000] 
  4737 000033A3 EB0A                            jmp .L_exit
  4738                                  .L_false:
  4739 000033A5 48B8-                           mov rax, sob_boolean_false
  4739 000033A7 [0200000000000000] 
  4740                                  .L_exit:
  4741 000033AF C9                              leave
  4742 000033B0 C22000                          ret AND_KILL_FRAME(2)
  4743                                          
  4744                                  L_code_ptr_raw_less_than_zz:
  4745 000033B3 C8000000                	enter 0, 0
  4746 000033B7 48837D1802              	cmp COUNT, 2
  4747 000033BC 0F85B6060000            	jne L_error_arg_count_2
  4748 000033C2 4C8B4520                	mov r8, PARAM(0)
  4749                                  	assert_integer(r8)
    53 000033C6 41803811            <1>  cmp byte [%1], %2
    54 000033CA 0F8547070000        <1>  jne L_error_incorrect_type
  4750 000033D0 4C8B4D28                	mov r9, PARAM(1)
  4751                                  	assert_integer(r9)
    53 000033D4 41803911            <1>  cmp byte [%1], %2
    54 000033D8 0F8539070000        <1>  jne L_error_incorrect_type
  4752 000033DE 498B7801                	mov rdi, qword [r8 + 1]
  4753 000033E2 493B7901                	cmp rdi, qword [r9 + 1]
  4754 000033E6 7D0C                    	jge .L_false
  4755 000033E8 48B8-                   	mov rax, sob_boolean_true
  4755 000033EA [0300000000000000] 
  4756 000033F2 EB0A                    	jmp .L_exit
  4757                                  .L_false:
  4758 000033F4 48B8-                   	mov rax, sob_boolean_false
  4758 000033F6 [0200000000000000] 
  4759                                  .L_exit:
  4760 000033FE C9                      	leave
  4761 000033FF C22000                  	ret AND_KILL_FRAME(2)
  4762                                  
  4763                                  L_code_ptr_raw_less_than_qq:
  4764 00003402 C8000000                        enter 0, 0
  4765 00003406 48837D1802                      cmp COUNT, 2
  4766 0000340B 0F8567060000                    jne L_error_arg_count_2
  4767 00003411 488B7520                        mov rsi, PARAM(0)
  4768                                          assert_fraction(rsi)
    53 00003415 803E12              <1>  cmp byte [%1], %2
    54 00003418 0F85F9060000        <1>  jne L_error_incorrect_type
  4769 0000341E 488B7D28                        mov rdi, PARAM(1)
  4770                                          assert_fraction(rdi)
    53 00003422 803F12              <1>  cmp byte [%1], %2
    54 00003425 0F85EC060000        <1>  jne L_error_incorrect_type
  4771 0000342B 488B4601                        mov rax, qword [rsi + 1] ; num1
  4772 0000342F 4899                            cqo
  4773 00003431 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  4774 00003435 4889C1                          mov rcx, rax
  4775 00003438 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  4776 0000343C 4899                            cqo
  4777 0000343E 48F76F01                        imul qword [rdi + 1]          ; num2
  4778 00003442 4829C1                          sub rcx, rax
  4779 00003445 7D0C                            jge .L_false
  4780 00003447 48B8-                           mov rax, sob_boolean_true
  4780 00003449 [0300000000000000] 
  4781 00003451 EB0A                            jmp .L_exit
  4782                                  .L_false:
  4783 00003453 48B8-                           mov rax, sob_boolean_false
  4783 00003455 [0200000000000000] 
  4784                                  .L_exit:
  4785 0000345D C9                              leave
  4786 0000345E C22000                          ret AND_KILL_FRAME(2)
  4787                                  
  4788                                  L_code_ptr_raw_equal_rr:
  4789 00003461 C8000000                        enter 0, 0
  4790 00003465 48837D1802                      cmp COUNT, 2
  4791 0000346A 0F8508060000                    jne L_error_arg_count_2
  4792 00003470 488B7520                        mov rsi, PARAM(0)
  4793                                          assert_real(rsi)
    53 00003474 803E13              <1>  cmp byte [%1], %2
    54 00003477 0F859A060000        <1>  jne L_error_incorrect_type
  4794 0000347D 488B7D28                        mov rdi, PARAM(1)
  4795                                          assert_real(rdi)
    53 00003481 803F13              <1>  cmp byte [%1], %2
    54 00003484 0F858D060000        <1>  jne L_error_incorrect_type
  4796 0000348A F20F104601                      movsd xmm0, qword [rsi + 1]
  4797 0000348F F20F104F01                      movsd xmm1, qword [rdi + 1]
  4798 00003494 660F2FC1                        comisd xmm0, xmm1
  4799 00003498 750C                            jne .L_false
  4800 0000349A 48B8-                           mov rax, sob_boolean_true
  4800 0000349C [0300000000000000] 
  4801 000034A4 EB0A                            jmp .L_exit
  4802                                  .L_false:
  4803 000034A6 48B8-                           mov rax, sob_boolean_false
  4803 000034A8 [0200000000000000] 
  4804                                  .L_exit:
  4805 000034B0 C9                              leave
  4806 000034B1 C22000                          ret AND_KILL_FRAME(2)
  4807                                          
  4808                                  L_code_ptr_raw_equal_zz:
  4809 000034B4 C8000000                	enter 0, 0
  4810 000034B8 48837D1802              	cmp COUNT, 2
  4811 000034BD 0F85B5050000            	jne L_error_arg_count_2
  4812 000034C3 4C8B4520                	mov r8, PARAM(0)
  4813                                  	assert_integer(r8)
    53 000034C7 41803811            <1>  cmp byte [%1], %2
    54 000034CB 0F8546060000        <1>  jne L_error_incorrect_type
  4814 000034D1 4C8B4D28                	mov r9, PARAM(1)
  4815                                  	assert_integer(r9)
    53 000034D5 41803911            <1>  cmp byte [%1], %2
    54 000034D9 0F8538060000        <1>  jne L_error_incorrect_type
  4816 000034DF 498B7801                	mov rdi, qword [r8 + 1]
  4817 000034E3 493B7901                	cmp rdi, qword [r9 + 1]
  4818 000034E7 750C                    	jne .L_false
  4819 000034E9 48B8-                   	mov rax, sob_boolean_true
  4819 000034EB [0300000000000000] 
  4820 000034F3 EB0A                    	jmp .L_exit
  4821                                  .L_false:
  4822 000034F5 48B8-                   	mov rax, sob_boolean_false
  4822 000034F7 [0200000000000000] 
  4823                                  .L_exit:
  4824 000034FF C9                      	leave
  4825 00003500 C22000                  	ret AND_KILL_FRAME(2)
  4826                                          
  4827                                  L_code_ptr_raw_equal_qq:
  4828 00003503 C8000000                        enter 0, 0
  4829 00003507 48837D1802                      cmp COUNT, 2
  4830 0000350C 0F8566050000                    jne L_error_arg_count_2
  4831 00003512 488B7520                        mov rsi, PARAM(0)
  4832                                          assert_fraction(rsi)
    53 00003516 803E12              <1>  cmp byte [%1], %2
    54 00003519 0F85F8050000        <1>  jne L_error_incorrect_type
  4833 0000351F 488B7D28                        mov rdi, PARAM(1)
  4834                                          assert_fraction(rdi)
    53 00003523 803F12              <1>  cmp byte [%1], %2
    54 00003526 0F85EB050000        <1>  jne L_error_incorrect_type
  4835 0000352C 488B4601                        mov rax, qword [rsi + 1] ; num1
  4836 00003530 4899                            cqo
  4837 00003532 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  4838 00003536 4889C1                          mov rcx, rax
  4839 00003539 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  4840 0000353D 4899                            cqo
  4841 0000353F 48F76F01                        imul qword [rdi + 1]          ; num2
  4842 00003543 4829C1                          sub rcx, rax
  4843 00003546 750C                            jne .L_false
  4844 00003548 48B8-                           mov rax, sob_boolean_true
  4844 0000354A [0300000000000000] 
  4845 00003552 EB0A                            jmp .L_exit
  4846                                  .L_false:
  4847 00003554 48B8-                           mov rax, sob_boolean_false
  4847 00003556 [0200000000000000] 
  4848                                  .L_exit:
  4849 0000355E C9                              leave
  4850 0000355F C22000                          ret AND_KILL_FRAME(2)
  4851                                  
  4852                                  L_code_ptr_quotient:
  4853 00003562 C8000000                        enter 0, 0
  4854 00003566 48837D1802                      cmp COUNT, 2
  4855 0000356B 0F8507050000                    jne L_error_arg_count_2
  4856 00003571 488B7520                        mov rsi, PARAM(0)
  4857                                          assert_integer(rsi)
    53 00003575 803E11              <1>  cmp byte [%1], %2
    54 00003578 0F8599050000        <1>  jne L_error_incorrect_type
  4858 0000357E 488B7D28                        mov rdi, PARAM(1)
  4859                                          assert_integer(rdi)
    53 00003582 803F11              <1>  cmp byte [%1], %2
    54 00003585 0F858C050000        <1>  jne L_error_incorrect_type
  4860 0000358B 488B4601                        mov rax, qword [rsi + 1]
  4861 0000358F 488B5F01                        mov rbx, qword [rdi + 1]
  4862 00003593 4883FB00                        cmp rbx, 0
  4863 00003597 0F84AB050000                    je L_error_division_by_zero
  4864 0000359D 4899                            cqo
  4865 0000359F 48F7FB                          idiv rbx
  4866 000035A2 4889C7                          mov rdi, rax
  4867 000035A5 E8E8030000                      call make_integer
  4868 000035AA C9                              leave
  4869 000035AB C22000                          ret AND_KILL_FRAME(2)
  4870                                          
  4871                                  L_code_ptr_remainder:
  4872 000035AE C8000000                        enter 0, 0
  4873 000035B2 48837D1802                      cmp COUNT, 2
  4874 000035B7 0F85BB040000                    jne L_error_arg_count_2
  4875 000035BD 488B7520                        mov rsi, PARAM(0)
  4876                                          assert_integer(rsi)
    53 000035C1 803E11              <1>  cmp byte [%1], %2
    54 000035C4 0F854D050000        <1>  jne L_error_incorrect_type
  4877 000035CA 488B7D28                        mov rdi, PARAM(1)
  4878                                          assert_integer(rdi)
    53 000035CE 803F11              <1>  cmp byte [%1], %2
    54 000035D1 0F8540050000        <1>  jne L_error_incorrect_type
  4879 000035D7 488B4601                        mov rax, qword [rsi + 1]
  4880 000035DB 488B5F01                        mov rbx, qword [rdi + 1]
  4881 000035DF 4883FB00                        cmp rbx, 0
  4882 000035E3 0F845F050000                    je L_error_division_by_zero
  4883 000035E9 4899                            cqo
  4884 000035EB 48F7FB                          idiv rbx
  4885 000035EE 4889D7                          mov rdi, rdx
  4886 000035F1 E89C030000                      call make_integer
  4887 000035F6 C9                              leave
  4888 000035F7 C22000                          ret AND_KILL_FRAME(2)
  4889                                  
  4890                                  L_code_ptr_set_car:
  4891 000035FA C8000000                        enter 0, 0
  4892 000035FE 48837D1802                      cmp COUNT, 2
  4893 00003603 0F856F040000                    jne L_error_arg_count_2
  4894 00003609 488B4520                        mov rax, PARAM(0)
  4895                                          assert_pair(rax)
    53 0000360D 803821              <1>  cmp byte [%1], %2
    54 00003610 0F8501050000        <1>  jne L_error_incorrect_type
  4896 00003616 488B5D28                        mov rbx, PARAM(1)
  4897 0000361A 48895801                        mov SOB_PAIR_CAR(rax), rbx
  4898 0000361E 48B8-                           mov rax, sob_void
  4898 00003620 [0000000000000000] 
  4899 00003628 C9                              leave
  4900 00003629 C22000                          ret AND_KILL_FRAME(2)
  4901                                  
  4902                                  L_code_ptr_set_cdr:
  4903 0000362C C8000000                        enter 0, 0
  4904 00003630 48837D1802                      cmp COUNT, 2
  4905 00003635 0F853D040000                    jne L_error_arg_count_2
  4906 0000363B 488B4520                        mov rax, PARAM(0)
  4907                                          assert_pair(rax)
    53 0000363F 803821              <1>  cmp byte [%1], %2
    54 00003642 0F85CF040000        <1>  jne L_error_incorrect_type
  4908 00003648 488B5D28                        mov rbx, PARAM(1)
  4909 0000364C 48895809                        mov SOB_PAIR_CDR(rax), rbx
  4910 00003650 48B8-                           mov rax, sob_void
  4910 00003652 [0000000000000000] 
  4911 0000365A C9                              leave
  4912 0000365B C22000                          ret AND_KILL_FRAME(2)
  4913                                  
  4914                                  L_code_ptr_string_ref:
  4915 0000365E C8000000                        enter 0, 0
  4916 00003662 48837D1802                      cmp COUNT, 2
  4917 00003667 0F850B040000                    jne L_error_arg_count_2
  4918 0000366D 488B7D20                        mov rdi, PARAM(0)
  4919                                          assert_string(rdi)
    53 00003671 803F03              <1>  cmp byte [%1], %2
    54 00003674 0F859D040000        <1>  jne L_error_incorrect_type
  4920 0000367A 488B7528                        mov rsi, PARAM(1)
  4921                                          assert_integer(rsi)
    53 0000367E 803E11              <1>  cmp byte [%1], %2
    54 00003681 0F8590040000        <1>  jne L_error_incorrect_type
  4922 00003687 488B5701                        mov rdx, qword [rdi + 1]
  4923 0000368B 488B4E01                        mov rcx, qword [rsi + 1]
  4924 0000368F 4839D1                          cmp rcx, rdx
  4925 00003692 0F8D14030000                    jge L_error_integer_range
  4926 00003698 4883F900                        cmp rcx, 0
  4927 0000369C 0F8C0A030000                    jl L_error_integer_range
  4928 000036A2 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  4929 000036A6 BF02000000                      mov rdi, 2
  4930 000036AB E8C6E6FFFF                      call malloc
  4931 000036B0 C60002                          mov byte [rax], T_char
  4932 000036B3 885801                          mov byte [rax + 1], bl
  4933 000036B6 C9                              leave
  4934 000036B7 C22000                          ret AND_KILL_FRAME(2)
  4935                                  
  4936                                  L_code_ptr_vector_ref:
  4937 000036BA C8000000                        enter 0, 0
  4938 000036BE 48837D1802                      cmp COUNT, 2
  4939 000036C3 0F85AF030000                    jne L_error_arg_count_2
  4940 000036C9 488B7D20                        mov rdi, PARAM(0)
  4941                                          assert_vector(rdi)
    53 000036CD 803F22              <1>  cmp byte [%1], %2
    54 000036D0 0F8541040000        <1>  jne L_error_incorrect_type
  4942 000036D6 488B7528                        mov rsi, PARAM(1)
  4943                                          assert_integer(rsi)
    53 000036DA 803E11              <1>  cmp byte [%1], %2
    54 000036DD 0F8534040000        <1>  jne L_error_incorrect_type
  4944 000036E3 488B5701                        mov rdx, qword [rdi + 1]
  4945 000036E7 488B4E01                        mov rcx, qword [rsi + 1]
  4946 000036EB 4839D1                          cmp rcx, rdx
  4947 000036EE 0F8DB8020000                    jge L_error_integer_range
  4948 000036F4 4883F900                        cmp rcx, 0
  4949 000036F8 0F8CAE020000                    jl L_error_integer_range
  4950 000036FE 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  4951 00003703 C9                              leave
  4952 00003704 C22000                          ret AND_KILL_FRAME(2)
  4953                                  
  4954                                  L_code_ptr_vector_set:
  4955 00003707 C8000000                        enter 0, 0
  4956 0000370B 48837D1803                      cmp COUNT, 3
  4957 00003710 0F85CC030000                    jne L_error_arg_count_3
  4958 00003716 488B7D20                        mov rdi, PARAM(0)
  4959                                          assert_vector(rdi)
    53 0000371A 803F22              <1>  cmp byte [%1], %2
    54 0000371D 0F85F4030000        <1>  jne L_error_incorrect_type
  4960 00003723 488B7528                        mov rsi, PARAM(1)
  4961                                          assert_integer(rsi)
    53 00003727 803E11              <1>  cmp byte [%1], %2
    54 0000372A 0F85E7030000        <1>  jne L_error_incorrect_type
  4962 00003730 488B5701                        mov rdx, qword [rdi + 1]
  4963 00003734 488B4E01                        mov rcx, qword [rsi + 1]
  4964 00003738 4839D1                          cmp rcx, rdx
  4965 0000373B 0F8D6B020000                    jge L_error_integer_range
  4966 00003741 4883F900                        cmp rcx, 0
  4967 00003745 0F8C61020000                    jl L_error_integer_range
  4968 0000374B 488B4530                        mov rax, PARAM(2)
  4969 0000374F 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  4970 00003754 48B8-                           mov rax, sob_void
  4970 00003756 [0000000000000000] 
  4971 0000375E C9                              leave
  4972 0000375F C22800                          ret AND_KILL_FRAME(3)
  4973                                  
  4974                                  L_code_ptr_string_set:
  4975 00003762 C8000000                        enter 0, 0
  4976 00003766 48837D1803                      cmp COUNT, 3
  4977 0000376B 0F8571030000                    jne L_error_arg_count_3
  4978 00003771 488B7D20                        mov rdi, PARAM(0)
  4979                                          assert_string(rdi)
    53 00003775 803F03              <1>  cmp byte [%1], %2
    54 00003778 0F8599030000        <1>  jne L_error_incorrect_type
  4980 0000377E 488B7528                        mov rsi, PARAM(1)
  4981                                          assert_integer(rsi)
    53 00003782 803E11              <1>  cmp byte [%1], %2
    54 00003785 0F858C030000        <1>  jne L_error_incorrect_type
  4982 0000378B 488B5701                        mov rdx, qword [rdi + 1]
  4983 0000378F 488B4E01                        mov rcx, qword [rsi + 1]
  4984 00003793 4839D1                          cmp rcx, rdx
  4985 00003796 0F8D10020000                    jge L_error_integer_range
  4986 0000379C 4883F900                        cmp rcx, 0
  4987 000037A0 0F8C06020000                    jl L_error_integer_range
  4988 000037A6 488B4530                        mov rax, PARAM(2)
  4989                                          assert_char(rax)
    53 000037AA 803802              <1>  cmp byte [%1], %2
    54 000037AD 0F8564030000        <1>  jne L_error_incorrect_type
  4990 000037B3 8A4001                          mov al, byte [rax + 1]
  4991 000037B6 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  4992 000037BA 48B8-                           mov rax, sob_void
  4992 000037BC [0000000000000000] 
  4993 000037C4 C9                              leave
  4994 000037C5 C22800                          ret AND_KILL_FRAME(3)
  4995                                  
  4996                                  L_code_ptr_make_vector:
  4997 000037C8 C8000000                        enter 0, 0
  4998 000037CC 48837D1802                      cmp COUNT, 2
  4999 000037D1 0F85A1020000                    jne L_error_arg_count_2
  5000 000037D7 488B4D20                        mov rcx, PARAM(0)
  5001                                          assert_integer(rcx)
    53 000037DB 803911              <1>  cmp byte [%1], %2
    54 000037DE 0F8533030000        <1>  jne L_error_incorrect_type
  5002 000037E4 488B4901                        mov rcx, qword [rcx + 1]
  5003 000037E8 4883F900                        cmp rcx, 0
  5004 000037EC 0F8CBA010000                    jl L_error_integer_range
  5005 000037F2 488B5528                        mov rdx, PARAM(1)
  5006 000037F6 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  5007 000037FE E873E5FFFF                      call malloc
  5008 00003803 C60022                          mov byte [rax], T_vector
  5009 00003806 48894801                        mov qword [rax + 1], rcx
  5010 0000380A 41B800000000                    mov r8, 0
  5011                                  .L0:
  5012 00003810 4939C8                          cmp r8, rcx
  5013 00003813 740A                            je .L1
  5014 00003815 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  5015 0000381A 49FFC0                          inc r8
  5016 0000381D EBF1                            jmp .L0
  5017                                  .L1:
  5018 0000381F C9                              leave
  5019 00003820 C22000                          ret AND_KILL_FRAME(2)
  5020                                          
  5021                                  L_code_ptr_make_string:
  5022 00003823 C8000000                        enter 0, 0
  5023 00003827 48837D1802                      cmp COUNT, 2
  5024 0000382C 0F8546020000                    jne L_error_arg_count_2
  5025 00003832 488B4D20                        mov rcx, PARAM(0)
  5026                                          assert_integer(rcx)
    53 00003836 803911              <1>  cmp byte [%1], %2
    54 00003839 0F85D8020000        <1>  jne L_error_incorrect_type
  5027 0000383F 488B4901                        mov rcx, qword [rcx + 1]
  5028 00003843 4883F900                        cmp rcx, 0
  5029 00003847 0F8C5F010000                    jl L_error_integer_range
  5030 0000384D 488B5528                        mov rdx, PARAM(1)
  5031                                          assert_char(rdx)
    53 00003851 803A02              <1>  cmp byte [%1], %2
    54 00003854 0F85BD020000        <1>  jne L_error_incorrect_type
  5032 0000385A 8A5201                          mov dl, byte [rdx + 1]
  5033 0000385D 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  5034 00003861 E810E5FFFF                      call malloc
  5035 00003866 C60003                          mov byte [rax], T_string
  5036 00003869 48894801                        mov qword [rax + 1], rcx
  5037 0000386D 41B800000000                    mov r8, 0
  5038                                  .L0:
  5039 00003873 4939C8                          cmp r8, rcx
  5040 00003876 740A                            je .L1
  5041 00003878 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  5042 0000387D 49FFC0                          inc r8
  5043 00003880 EBF1                            jmp .L0
  5044                                  .L1:
  5045 00003882 C9                              leave
  5046 00003883 C22000                          ret AND_KILL_FRAME(2)
  5047                                  
  5048                                  L_code_ptr_numerator:
  5049 00003886 C8000000                        enter 0, 0
  5050 0000388A 48837D1801                      cmp COUNT, 1
  5051 0000388F 0F85AE010000                    jne L_error_arg_count_1
  5052 00003895 488B4520                        mov rax, PARAM(0)
  5053                                          assert_fraction(rax)
    53 00003899 803812              <1>  cmp byte [%1], %2
    54 0000389C 0F8575020000        <1>  jne L_error_incorrect_type
  5054 000038A2 488B7801                        mov rdi, qword [rax + 1]
  5055 000038A6 E8E7000000                      call make_integer
  5056 000038AB C9                              leave
  5057 000038AC C21800                          ret AND_KILL_FRAME(1)
  5058                                          
  5059                                  L_code_ptr_denominator:
  5060 000038AF C8000000                        enter 0, 0
  5061 000038B3 48837D1801                      cmp COUNT, 1
  5062 000038B8 0F8585010000                    jne L_error_arg_count_1
  5063 000038BE 488B4520                        mov rax, PARAM(0)
  5064                                          assert_fraction(rax)
    53 000038C2 803812              <1>  cmp byte [%1], %2
    54 000038C5 0F854C020000        <1>  jne L_error_incorrect_type
  5065 000038CB 488B7809                        mov rdi, qword [rax + 1 + 8]
  5066 000038CF E8BE000000                      call make_integer
  5067 000038D4 C9                              leave
  5068 000038D5 C21800                          ret AND_KILL_FRAME(1)
  5069                                  
  5070                                  L_code_ptr_is_eq:
  5071 000038D8 C8000000                	enter 0, 0
  5072 000038DC 48837D1802              	cmp COUNT, 2
  5073 000038E1 0F8591010000            	jne L_error_arg_count_2
  5074 000038E7 488B7D20                	mov rdi, PARAM(0)
  5075 000038EB 488B7528                	mov rsi, PARAM(1)
  5076 000038EF 4839F7                  	cmp rdi, rsi
  5077 000038F2 746C                    	je .L_eq_true
  5078 000038F4 8A17                    	mov dl, byte [rdi]
  5079 000038F6 3A16                    	cmp dl, byte [rsi]
  5080 000038F8 7572                    	jne .L_eq_false
  5081 000038FA 80FA02                  	cmp dl, T_char
  5082 000038FD 7459                    	je .L_char
  5083 000038FF 80FA41                  	cmp dl, T_interned_symbol
  5084 00003902 7440                    	je .L_interned_symbol
  5085 00003904 80FA42                          cmp dl, T_uninterned_symbol
  5086 00003907 7443                            je .L_uninterned_symbol
  5087 00003909 80FA13                  	cmp dl, T_real
  5088 0000390C 742E                    	je .L_real
  5089 0000390E 80FA12                  	cmp dl, T_fraction
  5090 00003911 7413                    	je .L_fraction
  5091 00003913 80FA11                          cmp dl, T_integer
  5092 00003916 7402                            je .L_integer
  5093 00003918 EB52                    	jmp .L_eq_false
  5094                                  .L_integer:
  5095 0000391A 488B4601                        mov rax, qword [rsi + 1]
  5096 0000391E 483B4701                        cmp rax, qword [rdi + 1]
  5097 00003922 7548                            jne .L_eq_false
  5098 00003924 EB3A                            jmp .L_eq_true
  5099                                  .L_fraction:
  5100 00003926 488B4601                	mov rax, qword [rsi + 1]
  5101 0000392A 483B4701                	cmp rax, qword [rdi + 1]
  5102 0000392E 753C                    	jne .L_eq_false
  5103 00003930 488B4609                	mov rax, qword [rsi + 1 + 8]
  5104 00003934 483B4709                	cmp rax, qword [rdi + 1 + 8]
  5105 00003938 7532                    	jne .L_eq_false
  5106 0000393A EB24                    	jmp .L_eq_true
  5107                                  .L_real:
  5108 0000393C 488B4601                	mov rax, qword [rsi + 1]
  5109 00003940 483B4701                	cmp rax, qword [rdi + 1]
  5110                                  .L_interned_symbol:
  5111                                  	; never reached, because interned_symbols are static!
  5112                                  	; but I'm keeping it in case, I'll ever change
  5113                                  	; the implementation
  5114 00003944 488B4601                	mov rax, qword [rsi + 1]
  5115 00003948 483B4701                	cmp rax, qword [rdi + 1]
  5116                                  .L_uninterned_symbol:
  5117 0000394C 4C8B4701                        mov r8, qword [rdi + 1]
  5118 00003950 4C3B4601                        cmp r8, qword [rsi + 1]
  5119 00003954 7516                            jne .L_eq_false
  5120 00003956 EB08                            jmp .L_eq_true
  5121                                  .L_char:
  5122 00003958 8A5E01                  	mov bl, byte [rsi + 1]
  5123 0000395B 3A5F01                  	cmp bl, byte [rdi + 1]
  5124 0000395E 750C                    	jne .L_eq_false
  5125                                  .L_eq_true:
  5126 00003960 48B8-                   	mov rax, sob_boolean_true
  5126 00003962 [0300000000000000] 
  5127 0000396A EB0A                    	jmp .L_eq_exit
  5128                                  .L_eq_false:
  5129 0000396C 48B8-                   	mov rax, sob_boolean_false
  5129 0000396E [0200000000000000] 
  5130                                  .L_eq_exit:
  5131 00003976 C9                      	leave
  5132 00003977 C22000                  	ret AND_KILL_FRAME(2)
  5133                                  
  5134                                  make_real:
  5135 0000397A C8000000                        enter 0, 0
  5136 0000397E BF09000000                      mov rdi, (1 + 8)
  5137 00003983 E8EEE3FFFF                      call malloc
  5138 00003988 C60013                          mov byte [rax], T_real
  5139 0000398B F20F114001                      movsd qword [rax + 1], xmm0
  5140 00003990 C9                              leave 
  5141 00003991 C3                              ret
  5142                                          
  5143                                  make_integer:
  5144 00003992 C8000000                        enter 0, 0
  5145 00003996 4889FE                          mov rsi, rdi
  5146 00003999 BF09000000                      mov rdi, (1 + 8)
  5147 0000399E E8D3E3FFFF                      call malloc
  5148 000039A3 C60011                          mov byte [rax], T_integer
  5149 000039A6 48897001                        mov qword [rax + 1], rsi
  5150 000039AA C9                              leave
  5151 000039AB C3                              ret
  5152                                          
  5153                                  L_error_integer_range:
  5154 000039AC 488B3C25[00000000]              mov rdi, qword [stderr]
  5155 000039B4 48BE-                           mov rsi, fmt_integer_range
  5155 000039B6 [BA0D000000000000] 
  5156 000039BE B800000000                      mov rax, 0
  5157                                          ENTER
    44 000039C3 C8000000            <1>  enter 0, 0
    45 000039C7 4883E4F0            <1>  and rsp, ~15
  5158 000039CB E8(00000000)                    call fprintf
  5159                                          LEAVE
    49 000039D0 C9                  <1>  leave
  5160 000039D1 48C7C0FBFFFFFF                  mov rax, -5
  5161 000039D8 E8(00000000)                    call exit
  5162                                  
  5163                                  L_error_arg_negative:
  5164 000039DD 488B3C25[00000000]              mov rdi, qword [stderr]
  5165 000039E5 48BE-                           mov rsi, fmt_arg_negative
  5165 000039E7 [920C000000000000] 
  5166 000039EF B800000000                      mov rax, 0
  5167                                          ENTER
    44 000039F4 C8000000            <1>  enter 0, 0
    45 000039F8 4883E4F0            <1>  and rsp, ~15
  5168 000039FC E8(00000000)                    call fprintf
  5169                                          LEAVE
    49 00003A01 C9                  <1>  leave
  5170 00003A02 48C7C0FDFFFFFF                  mov rax, -3
  5171 00003A09 E8(00000000)                    call exit
  5172                                  
  5173                                  L_error_arg_count_0:
  5174 00003A0E 488B3C25[00000000]              mov rdi, qword [stderr]
  5175 00003A16 48BE-                           mov rsi, fmt_arg_count_0
  5175 00003A18 [B80C000000000000] 
  5176 00003A20 488B5518                        mov rdx, COUNT
  5177 00003A24 B800000000                      mov rax, 0
  5178                                          ENTER
    44 00003A29 C8000000            <1>  enter 0, 0
    45 00003A2D 4883E4F0            <1>  and rsp, ~15
  5179 00003A31 E8(00000000)                    call fprintf
  5180                                          LEAVE
    49 00003A36 C9                  <1>  leave
  5181 00003A37 48C7C0FDFFFFFF                  mov rax, -3
  5182 00003A3E E8(00000000)                    call exit
  5183                                  
  5184                                  L_error_arg_count_1:
  5185 00003A43 488B3C25[00000000]              mov rdi, qword [stderr]
  5186 00003A4B 48BE-                           mov rsi, fmt_arg_count_1
  5186 00003A4D [E00C000000000000] 
  5187 00003A55 488B5518                        mov rdx, COUNT
  5188 00003A59 B800000000                      mov rax, 0
  5189                                          ENTER
    44 00003A5E C8000000            <1>  enter 0, 0
    45 00003A62 4883E4F0            <1>  and rsp, ~15
  5190 00003A66 E8(00000000)                    call fprintf
  5191                                          LEAVE
    49 00003A6B C9                  <1>  leave
  5192 00003A6C 48C7C0FDFFFFFF                  mov rax, -3
  5193 00003A73 E8(00000000)                    call exit
  5194                                  
  5195                                  L_error_arg_count_2:
  5196 00003A78 488B3C25[00000000]              mov rdi, qword [stderr]
  5197 00003A80 48BE-                           mov rsi, fmt_arg_count_2
  5197 00003A82 [460D000000000000] 
  5198 00003A8A 488B5518                        mov rdx, COUNT
  5199 00003A8E B800000000                      mov rax, 0
  5200                                          ENTER
    44 00003A93 C8000000            <1>  enter 0, 0
    45 00003A97 4883E4F0            <1>  and rsp, ~15
  5201 00003A9B E8(00000000)                    call fprintf
  5202                                          LEAVE
    49 00003AA0 C9                  <1>  leave
  5203 00003AA1 48C7C0FDFFFFFF                  mov rax, -3
  5204 00003AA8 E8(00000000)                    call exit
  5205                                  
  5206                                  L_error_arg_count_12:
  5207 00003AAD 488B3C25[00000000]              mov rdi, qword [stderr]
  5208 00003AB5 48BE-                           mov rsi, fmt_arg_count_12
  5208 00003AB7 [060D000000000000] 
  5209 00003ABF 488B5518                        mov rdx, COUNT
  5210 00003AC3 B800000000                      mov rax, 0
  5211                                          ENTER
    44 00003AC8 C8000000            <1>  enter 0, 0
    45 00003ACC 4883E4F0            <1>  and rsp, ~15
  5212 00003AD0 E8(00000000)                    call fprintf
  5213                                          LEAVE
    49 00003AD5 C9                  <1>  leave
  5214 00003AD6 48C7C0FDFFFFFF                  mov rax, -3
  5215 00003ADD E8(00000000)                    call exit
  5216                                  
  5217                                  L_error_arg_count_3:
  5218 00003AE2 488B3C25[00000000]              mov rdi, qword [stderr]
  5219 00003AEA 48BE-                           mov rsi, fmt_arg_count_3
  5219 00003AEC [6D0D000000000000] 
  5220 00003AF4 488B5518                        mov rdx, COUNT
  5221 00003AF8 B800000000                      mov rax, 0
  5222                                          ENTER
    44 00003AFD C8000000            <1>  enter 0, 0
    45 00003B01 4883E4F0            <1>  and rsp, ~15
  5223 00003B05 E8(00000000)                    call fprintf
  5224                                          LEAVE
    49 00003B0A C9                  <1>  leave
  5225 00003B0B 48C7C0FDFFFFFF                  mov rax, -3
  5226 00003B12 E8(00000000)                    call exit
  5227                                          
  5228                                  L_error_incorrect_type:
  5229 00003B17 488B3C25[00000000]              mov rdi, qword [stderr]
  5230 00003B1F 48BE-                           mov rsi, fmt_type
  5230 00003B21 [960D000000000000] 
  5231 00003B29 B800000000                      mov rax, 0
  5232                                          ENTER
    44 00003B2E C8000000            <1>  enter 0, 0
    45 00003B32 4883E4F0            <1>  and rsp, ~15
  5233 00003B36 E8(00000000)                    call fprintf
  5234                                          LEAVE
    49 00003B3B C9                  <1>  leave
  5235 00003B3C 48C7C0FCFFFFFF                  mov rax, -4
  5236 00003B43 E8(00000000)                    call exit
  5237                                  
  5238                                  L_error_division_by_zero:
  5239 00003B48 488B3C25[00000000]              mov rdi, qword [stderr]
  5240 00003B50 48BE-                           mov rsi, fmt_division_by_zero
  5240 00003B52 [D70D000000000000] 
  5241 00003B5A B800000000                      mov rax, 0
  5242                                          ENTER
    44 00003B5F C8000000            <1>  enter 0, 0
    45 00003B63 4883E4F0            <1>  and rsp, ~15
  5243 00003B67 E8(00000000)                    call fprintf
  5244                                          LEAVE
    49 00003B6C C9                  <1>  leave
  5245 00003B6D 48C7C0F8FFFFFF                  mov rax, -8
  5246 00003B74 E8(00000000)                    call exit
  5247                                  
  5248                                  section .data
  5249                                  gensym_count:
  5250 00000C87 0000000000000000                dq 0
  5251                                  fmt_char:
  5252 00000C8F 256300                          db `%c\0`
  5253                                  fmt_arg_negative:
  5254 00000C92 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  5254 00000C9B 7267756D656E742063-
  5254 00000CA4 616E6E6F7420626520-
  5254 00000CAD 6E656761746976652E-
  5254 00000CB6 0A00               
  5255                                  fmt_arg_count_0:
  5256 00000CB8 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  5256 00000CC1 74696E67207A65726F-
  5256 00000CCA 20617267756D656E74-
  5256 00000CD3 732E20466F756E6420-
  5256 00000CDC 25640A00           
  5257                                  fmt_arg_count_1:
  5258 00000CE0 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  5258 00000CE9 74696E67206F6E6520-
  5258 00000CF2 617267756D656E742E-
  5258 00000CFB 20466F756E64202564-
  5258 00000D04 0A00               
  5259                                  fmt_arg_count_12:
  5260 00000D06 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  5260 00000D0F 74696E67206F6E6520-
  5260 00000D18 726571756972656420-
  5260 00000D21 616E64206F6E65206F-
  5260 00000D2A 7074696F6E616C2061-
  5260 00000D33 7267756D656E742E20-
  5260 00000D3C 466F756E642025640A-
  5260 00000D45 00                 
  5261                                  fmt_arg_count_2:
  5262 00000D46 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  5262 00000D4F 74696E672074776F20-
  5262 00000D58 617267756D656E7473-
  5262 00000D61 2E20466F756E642025-
  5262 00000D6A 640A00             
  5263                                  fmt_arg_count_3:
  5264 00000D6D 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  5264 00000D76 74696E672074687265-
  5264 00000D7F 6520617267756D656E-
  5264 00000D88 74732E20466F756E64-
  5264 00000D91 2025640A00         
  5265                                  fmt_type:
  5266 00000D96 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  5266 00000D9F 696F6E207061737365-
  5266 00000DA8 6420696E636F727265-
  5266 00000DB1 637420747970650A00 
  5267                                  fmt_integer_range:
  5268 00000DBA 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  5268 00000DC3 7265637420696E7465-
  5268 00000DCC 6765722072616E6765-
  5268 00000DD5 0A00               
  5269                                  fmt_division_by_zero:
  5270 00000DD7 212121204469766973-             db `!!! Division by zero\n\0`
  5270 00000DE0 696F6E206279207A65-
  5270 00000DE9 726F0A00           
  5271                                  fmt_scheme_error_part_1:
  5272 00000DED 0A2121212054686520-             db `\n!!! The procedure \0`
  5272 00000DF6 70726F636564757265-
  5272 00000DFF 2000               
  5273                                  fmt_scheme_error_part_2:
  5274 00000E01 2061736B656420746F-             db ` asked to terminate the program\n`
  5274 00000E0A 207465726D696E6174-
  5274 00000E13 65207468652070726F-
  5274 00000E1C 6772616D0A         
  5275 00000E21 202020207769746820-             db `    with the following message:\n\n\0`
  5275 00000E2A 74686520666F6C6C6F-
  5275 00000E33 77696E67206D657373-
  5275 00000E3C 6167653A0A0A00     
  5276                                  fmt_scheme_error_part_3:
  5277 00000E43 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  5277 00000E4C 210A0A00           
